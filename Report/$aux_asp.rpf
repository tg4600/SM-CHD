{Compared 20140122 /DKTBG}
{******************************************************************************
*
* Module Name   : $AUX_ASP
*
* Purpose       : Template created using $AUXSETUP.
*                 Authorise Sample
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}

SET NOTPROTECTED
JOIN LIBRARY $AUX_LIB
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $LIB_SAMP_VALIDATE

JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_DATABASE

SET NAME "DISPLAY/"
ENABLE WINDOWS

CONSTANT DISPLAY_RESULTS_MENUNUMBER = 249

Array prompt_text
Array table_names
Array change_stat ARRAY_SIZE (3) = " "

Array display_details ARRAY_SIZE ( 0 , 6 )
Array prompt_details ARRAY_SIZE ( 0 , 6 )


{***********************************************************************}
{                   USER INPUT BEGINS HERE                              }
{***********************************************************************}

{SECTION A - SCREEN SETUP}
{specify the header text for the command window}
{ie header_txt =  "Change Sample Status"}

    header_txt = GET_USER_MESSAGE("AUX_ASP_HEADER_TXT" ,1)

{specify footer text for the command window }

    footer_txt = GET_USER_MESSAGE("AUX_ASP_FOOTER_TXT" ,1)

{specify the text string to be displayed upon        }
{successful completion of the command                }
{ie success_txt = "Sample Status Changed"            }

  success_txt  = GET_USER_MESSAGE("AUX_ASP_SUCCESS_TXT" ,1)

{specify the text string to be displayed upon        }
{abortion from the command                           }
{ie abort_txt =   "Change Sample Status Aborted"     }

  abort_txt    = GET_USER_MESSAGE("AUX_ASP_ABORT_TXT" ,1)

{specify the sample statuses allowable within the    }
{browse list for this command if sample identity     }
{is prompted for.                                    }

  samp_stat_allowed  = "C"
  job_stat_allowed   = "AVCX"
  test_stat_allowed        =  ""



{SECTION B - INITIAL PROMPTS }


{Specify the tables that the initial prompts browse  }
{upon .                                              }

   table_names [ 1 ]    = "SAMPLE"


{  table_names [ 2 ]    = "TEST"}


{Specify the initial prompt fields and the associated}
{prompt text strings                                 }

  prompt_text [ 1 ]    = GET_USER_MESSAGE("AUX_ASP_PROMPT_TXT" ,1)

 {prompt_text [ 2 ]    = "Enter Test Name"}


{SECTION C - DISPLAY INFORMATION}

{The user may require a header for the display area }
{Any descriptive text may be used here              }

    mess_area_one = ""


{Specify the fields which require displaying with the}
{appropriate descriptive text string                 }

{Display fields from prompt_table[1] : }

  display_details [ 1, MESSAGE_POSITION    ]   = GET_USER_MESSAGE("AUX_ASP_DISPLAY_1" ,1)
  display_details [ 1, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 1, TABLE_NAME_POSITION ]   = "SAMPLE"
  display_details [ 1, FIELD_NAME_POSITION ]   = "ID_TEXT"

  display_details [ 2, MESSAGE_POSITION    ]   = GET_USER_MESSAGE("AUX_ASP_DISPLAY_2" ,1)
  display_details [ 2, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 2, TABLE_NAME_POSITION ]   = "SAMPLE"
  display_details [ 2, FIELD_NAME_POSITION ]   = "STATUS"

{Display fields from prompt_table[2] : }

 {display_details [ 1, MESSAGE_POSITION    ]   = ""
  display_details [ 1, TYPE_POSITION       ]   = ""
  display_details [ 1, TABLE_NAME_POSITION ]   = ""
  display_details [ 1, FIELD_NAME_POSITION ]   = ""

  display_details [ 2, MESSAGE_POSITION    ]   = ""
  display_details [ 2, TYPE_POSITION       ]   = ""
  display_details [ 2, TABLE_NAME_POSITION ]   = ""
  display_details [ 2, FIELD_NAME_POSITION ]   = ""

  display_details [ 3, MESSAGE_POSITION    ]   = ""
  display_details [ 3, TYPE_POSITION       ]   = ""
  display_details [ 3, TABLE_NAME_POSITION ]   = ""
  display_details [ 3, FIELD_NAME_POSITION ]   = ""}


  {SECTION D - FIELD ASSIGNMENT                }

{  This section is divided into three areas; }
{                                            }
{         (1) Interactive Update             }
{         (2) Non-interactive Update         }
{         (3) Status Change Update           }

{----------------------------------------------------}
{  1.   I N T E R A C T I V E   U P D A T E          }
{----------------------------------------------------}

{Specify the fields which require Updating and also  }
{require a user input.Define the text string         }
{associated with the input along with the browse type}


  {Update fields associated with prompt_table[1]}
  {Interactive_browse may be filled with either }
  {the browse table_name.field or a number to   }
  {define the size of the prompted field ie "10"}
  {or if no browse required " ".                }

{The user may require a header for the prompt area. }
{ Any descriptive text may be used here.            }

  mess_area_two = ""

{**MS1342 HBe 1-10-2001

  prompt_details [ 1 , MESSAGE_POSITION    ]  = GET_USER_MESSAGE (
                                                    "AUX_ASP_DISPLAY_3", 1 )
  prompt_details [ 1 , TYPE_POSITION       ]  = "FORMAT"
  prompt_details [ 1 , TABLE_NAME_POSITION ]  = "SAMPLE"
  prompt_details [ 1 , FIELD_NAME_POSITION ]  = "AUTHORISATION_NOTES"
}

  prompt_details [ 1 , MESSAGE_POSITION    ]  = "MPS status"
  prompt_details [ 1 , TYPE_POSITION       ]  = "FORMAT"
  prompt_details [ 1 , TABLE_NAME_POSITION ]  = "SAMPLE"
  prompt_details [ 1 , FIELD_NAME_POSITION ]  = "MPS_STATUS"

{**ME1342}

{-----------------------------------------------------}
{   2.   S T A T U S    C H A N G E   U P D A T E     }
{-----------------------------------------------------}


{  Non interactive update of the status field        }
{  is defined within the array change_stat[n]        }
{  where n = the array element that defines the      }
{  table associated with the status in the array     }
{  prompt_table[n].                                  }
{  To update sample.status to "V" the user would     }
{  define change_stat[1] = "V" where prompt_table[1] }
{   = "SAMPLE"                                       }
{  If the status change should be back to the old    }
{  status change_stat[n] = "OLD_STATUS".             }

   change_stat[1] = "A"


{*************************************************}
{             END  OF  USER  INPUT                }
{*************************************************}

aux_generator (  header_txt ,
         footer_txt ,
             mess_area_one ,
         mess_area_two  ,
                 samp_stat_allowed ,
                 job_stat_allowed ,
                 test_stat_allowed ,
         prompt_text       ,
         table_names       ,
                 change_stat                  ,
                 global ( "current_library" ) ,
             Success_txt ,
         Abort_txt   ,
         TRUE      ,
         display_details ,
         prompt_details  ,
         "Read Transaction"  ,
         "Write Transaction" )


{*************************************************}
{             ID Mandatory Array                  }
{*************************************************}

ROUTINE prompt_mandatory_array ( VALUE prompt_num )

    ARRAY mand_array

    array_select_add ( mand_array          ,
                       ARRAY_SELECT_EQ     ,
                       "INSPECTION_HEADER" ,
                       " "                 )

    RETURN ( mand_array )

ENDROUTINE

{*************************************************}
{             Action Routine                      }
{*************************************************}

ROUTINE action ( VALUE first_id, VALUE second_id )

    SET GLOBAL "SAMPAUTHNOTE" TO ( SELECT sample . authorisation_notes )

{**AS1601 HBe 3-1-2005}

   date_first_auth = select sample.date_first_authorised

   IF ((date_first_auth = EMPTY) OR (BLANK(date_first_auth))) THEN
      new_auth_date = NOW
      ASSIGN sample.date_first_authorised = new_auth_date
   ELSE
      FLASH_MESSAGE("Date first authorised maintained at ":STRIP(date_first_auth), TRUE)
   ENDIF

{**AE1601}

    RETURN ( TRUE )

ENDROUTINE {action}

{*************************************************}
{            Select Routine                       }
{*************************************************}

ROUTINE select_key_text

    { Return the text for the select button }

    return ( GET_USER_MESSAGE ( "AUX_ASP_RESULTS", 1 ))

ENDROUTINE

ROUTINE select_key  ( VALUE line     , display_id      ,
              VALUE first_id , VALUE second_id )


set format "999"

MENUPROC DISPLAY_RESULTS_MENUNUMBER USING first_id , "$EXIT"

ENDROUTINE

{*************************************************}
{            Validation Routine                   }
{*************************************************}

ROUTINE validation ( display_id )

RETURN ( TRUE )

ENDROUTINE

{**************************************************************************}
{ Explorer Aux Report Field Action Routine -                               }
{**************************************************************************}

ROUTINE aux_asp_explorer_user_action ( self , data )

    DECLARE sample_id

    sample_id = SELECT sample . id_numeric IN OBJECT data

    lib_samp_validate_process_parent ( sample_id )

    RETURN ( TRUE )

ENDROUTINE

{**************************************************************************}
{**************************************************************************}
{**************************************************************************}
