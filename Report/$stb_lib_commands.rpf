{******************************************************************************}
{  Description      : The global routines to define the header toolbox         }
{                     functionality in Stability                               }
{                                                                              }
{******************************************************************************}

SET COMPILE_OPTION DECLARE
SET NAME "DEFER/"

ENABLE WINDOWS

JOIN LIBRARY $PROMPT_TOOLBAR

{******************************************************************************}

ROUTINE stb_matrix_action_add_toolbuttons_dimensioning ( self, toolbar )

{
* Add toolbutton items that allow the matrix's dimensions to be modified
*
* Parameters : self, Stb Matrix Form object
*
*******************************************************************************}

	DECLARE toolbutton

	toolbar . add_separator( )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_NEW_LAYER_FACTOR_BEFORE"
	toolbutton . set_action( self, "OPTION_NEW_LAYER_FACTOR_BEFORE" )
	toolbutton . set_icon  ( "INT_ITEM_FRONT" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_INSERT_LAYER_BEFORE", 1 )

	toolbar . add_item ( toolbutton )

 	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
 	toolbutton . identity = "OPTION_NEW_LAYER_FACTOR_OPTIONS"
 	toolbutton . set_action( self, "OPTION_NEW_LAYER_FACTOR_OPTIONS" )
 	toolbutton . set_icon  ( "INT_DROP_DOWN" )
 	toolbutton . tooltip = "Insert Layer-factor"
 	toolbutton . width   = 2
 
 	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_NEW_TIME_FACTOR_BEFORE"
	toolbutton . set_action( self, "OPTION_NEW_TIME_FACTOR_BEFORE" )
	toolbutton . set_icon  ( "INT_TIME_PM" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_INSERT_TIME_BEFORE", 1 )

	toolbar . add_item ( toolbutton )

 	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
 	toolbutton . identity = "OPTION_NEW_TIME_FACTOR_OPTIONS"
 	toolbutton . set_action( self, "OPTION_NEW_TIME_FACTOR_OPTIONS" )
 	toolbutton . set_icon  ( "INT_DROP_DOWN" )
 	toolbutton . tooltip = "Insert Time-factor"
 	toolbutton . width   = 2
 
 	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_NEW_C_FACTOR_BEFORE"
	toolbutton . set_action( self, "OPTION_NEW_C_FACTOR_BEFORE" )
	toolbutton . set_icon  ( "INT_TEMP_RIGHT" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_INSERT_C_BEFORE", 1 )

	toolbar . add_item ( toolbutton )

 	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
 	toolbutton . identity = "OPTION_NEW_C_FACTOR_OPTIONS"
 	toolbutton . set_action( self, "OPTION_NEW_C_FACTOR_OPTIONS" )
 	toolbutton . set_icon  ( "INT_DROP_DOWN" )
 	toolbutton . tooltip = "Insert C-factor"
 	toolbutton . width   = 2
 
 	toolbar . add_item ( toolbutton )

	toolbar . add_separator( )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_REMOVE_LAYER_FACTOR"
	toolbutton . set_action( self, "OPTION_REMOVE_LAYER_FACTOR" )
	toolbutton . set_icon  ( "INT_ITEM_DOWN" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_REMOVE_LAYER", 1 )

	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_REMOVE_TIME_FACTOR"
	toolbutton . set_action( self, "OPTION_REMOVE_TIME_FACTOR" )
	toolbutton . set_icon  ( "INT_TIME_DOWN" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_REMOVE_TIME", 1 )

	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_REMOVE_C_FACTOR"
	toolbutton . set_action( self, "OPTION_REMOVE_C_FACTOR" )
	toolbutton . set_icon  ( "INT_TEMP_DOWN" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_REMOVE_C", 1 )

	toolbar . add_item ( toolbutton )

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_add_toolbuttons_presentation ( self, toolbar )

{
* Adds toolbutton items that allow changes to the matrix's display
*
* Parameters : self, Stb Matrix Form object
*
*******************************************************************************}

	DECLARE toolbutton

	toolbar . add_separator( )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_MODIFY_COLUMN_WIDTH"
	toolbutton . set_action( self, "OPTION_MODIFY_COLUMN_WIDTH" )
	toolbutton . set_icon  ( "INT_WIDTH" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_CHANGE_COL_WIDTH", 1 )

	toolbar . add_item ( toolbutton )
	
	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_MODIFY_CELL_SYNTAX"
	toolbutton . set_action( self, "OPTION_MODIFY_CELL_SYNTAX" )
	toolbutton . set_icon  ( "INT_PROPERTIES" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_CHANGE_CELL_SYN", 1 )

	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_UPDATE_GLOBAL_PULL"
	toolbutton . set_action( self, "OPTION_UPDATE_GLOBAL_PULL" )
	toolbutton . set_icon  ( "INT_SAMPLE_WORLD" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_CHANGE_GLBL_PULL", 1 )

	toolbar . add_item ( toolbutton )


ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_add_toolbuttons_manipulation ( self, toolbar )

{
* Adds toolbutton items that allow views of the matrix's data
*
* Parameters : self, Stb Matrix Form object
*
*******************************************************************************}
	
	DECLARE toolbutton

	toolbar . add_separator( )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_TIMEZERO_PROPERTIES"
	toolbutton . set_action( self, "OPTION_TIMEZERO_PROPERTIES" )
	toolbutton . set_icon  ( "INT_TIME_NOON" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_TIMEZERO", 1 )

	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_BASETIME_PROPERTIES"
	toolbutton . set_action( self, "OPTION_BASETIME_PROPERTIES" )
	toolbutton . set_icon  ( "INT_TIME_FRONT" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_BASETIME", 1 )

	toolbar . add_item ( toolbutton )
	
	toolbar . add_separator( )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_PROPAGATE_CURRENT"
	toolbutton . set_action( self, "OPTION_PROPAGATE_CURRENT" )
	toolbutton . set_icon  ( "INT_ARROW_ALL" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_PROPOGATE", 1 )

	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_INSERT_PULL"
	toolbutton . set_action( self, "OPTION_INSERT_PULL" )
	toolbutton . set_icon  ( "INT_SAMPLE_CREATE" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_INSERT_PULL", 1 )

	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_DELETE_PULL"
	toolbutton . set_action( self, "OPTION_DELETE_PULL" )
	toolbutton . set_icon  ( "INT_SAMPLE_CANCEL" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_REMOVE_PULL", 1 )

	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_COPY_CURRENT_CELL"
	toolbutton . set_action( self, "OPTION_COPY_CURRENT_CELL" )
	toolbutton . set_icon  ( "INT_COPY" )
	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_COPY_CURRENT_CELL", 1 )

	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_TOGGLE_CELL_ACTIVATION"
	toolbutton . set_action( self, "OPTION_TOGGLE_CELL_ACTIVATION" )
	toolbutton . set_icon  ( "INT_TOGGLE" )
	toolbutton . tooltip = "Activate/Inactivate Cell"

	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_TOGGLE_CONDITION_ACTIVATION"
	toolbutton . set_action( self, "OPTION_TOGGLE_CONDITION_ACTIVATION" )
	toolbutton . set_icon  ( "INT_TOGGLE_TEMP" )
	toolbutton . tooltip = "Activate/Inactivate Condition"

	toolbar . add_item ( toolbutton )

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_add_toolbuttons_sample_tools ( self, toolbar )

{
* Adds toolbutton items that relate to the modification of matrix's samples
*
* Parameters : self, Stb Matrix Form object
*
*******************************************************************************}

	DECLARE toolbutton

	toolbar . add_separator( )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_SAMPLE_AUTHORISE"
	toolbutton . set_action( self, "OPTION_SAMPLE_AUTHORISE" )
	toolbutton . set_icon  ( "INT_SAMPLE_A" )
	toolbutton . tooltip = GET_USER_MESSAGE( "AUX_ASP_HEADER_TXT", 1 )

	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_SAMPLE_CANCEL"
	toolbutton . set_action( self, "OPTION_SAMPLE_CANCEL" )
	toolbutton . set_icon  ( "INT_SAMPLE_X" )
	toolbutton . tooltip = GET_USER_MESSAGE( "AUX_XSP_HEADER_TXT", 1 )

	toolbar . add_item ( toolbutton )
	
	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
	toolbutton . identity = "OPTION_SAMPLE_RECEIVE"
	toolbutton . set_action( self, "OPTION_SAMPLE_RECEIVE" )
	toolbutton . set_icon  ( "INT_SAMPLE_RECEIVE" )
	toolbutton . tooltip = GET_USER_MESSAGE( "AUX_RVP_HEADER_TXT", 1 )

	toolbar . add_item ( toolbutton )
 	
 	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
 	toolbutton . identity = "OPTION_SAMPLE_RESULT_ENTRY"
 	toolbutton . set_action( self, "OPTION_SAMPLE_RESULT_ENTRY" )
 	toolbutton . set_icon  ( "INT_RE_BY_SAMPLE" )
 	toolbutton . tooltip = GET_USER_MESSAGE( "RESULT_ENTRY_LIST_SAMPLE", 1 )
 
 	toolbar . add_item ( toolbutton )
  
 	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
 	toolbutton . identity = "OPTION_SAMPLE_ASSIGN"
 	toolbutton . set_action( self, "OPTION_SAMPLE_ASSIGN" )
 	toolbutton . set_icon  ( "INT_SAMPLE_STATUS" )
 	toolbutton . tooltip = GET_USER_MESSAGE( "STB_SMP_PROC_ASSIGN_SAMPLE", 1 )
 
 	toolbar . add_item ( toolbutton )
 	
 	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
 	toolbutton . identity = "OPTION_SAMPLE_PROPERTIES"
 	toolbutton . set_action( self, "OPTION_SAMPLE_PROPERTIES" )
 	toolbutton . set_icon  ( "INT_SAMPLE_MODIFY" )
 	toolbutton . tooltip = GET_USER_MESSAGE( "TOOLBAR_EDIT_SAMP", 1 )
 
 	toolbar . add_item ( toolbutton )

 	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
 	toolbutton . identity = "OPTION_SAMPLE_LABEL"
 	toolbutton . set_action( self, "OPTION_SAMPLE_LABEL" )
 	toolbutton . set_icon  ( "INT_PRINTER" )
 	toolbutton . tooltip = "Print Label"
 
 	toolbar . add_item ( toolbutton )
 	
	toolbar . add_separator( )
 	
 	CREATE OBJECT TOOLBAR_BUTTON_CLASS, toolbutton
 	toolbutton . identity = "OPTION_GRAPH"
 	toolbutton . set_action( self, "OPTION_GRAPH" )
 	toolbutton . set_icon  ( "INT_BELOW_LIMIT" )
 	toolbutton . tooltip = "Graph"
 
 	toolbar . add_item ( toolbutton )
 		
 ENDROUTINE
 
{******************************************************************************}
 
ROUTINE stb_matrix_action_update_screen_state( self )
{
* Updates the enabled state of toolbar items
*
* Parameters : self, Stb Matrix Form object
*
*******************************************************************************}
 	
 	DECLARE toolbar
 	
 	toolbar = self . matrix_form . toolbar

	toolbar . set_item_state( "OPTION_BASETIME_PROPERTIES" , TRUE )
	toolbar . set_item_state( "OPTION_MODIFY_CELL_SYNTAX"  , TRUE )
	toolbar . set_item_state( "OPTION_MODIFY_COLUMN_WIDTH" , TRUE )
	toolbar . set_item_state( "OPTION_TIMEZERO_PROPERTIES" , TRUE )
	toolbar . set_item_state( "OPTION_UPDATE_GLOBAL_PULL"  , TRUE )

	toolbar . set_item_state( "OPTION_COPY_CURRENT_CELL"                ,
	                          self . can_copy_current_cell( )           )

	toolbar . set_item_state( "OPTION_DELETE_PULL"                      ,
	                          self . can_delete_pull( )                 )

	toolbar . set_item_state( "OPTION_GRAPH"                            ,
	                          self . can_graph( )                       )

	toolbar . set_item_state( "OPTION_INSERT_PULL"                      ,
	                          self . can_insert_pull( )                 )

	toolbar . set_item_state( "OPTION_NEW_C_FACTOR_BEFORE"              ,
	                          self . can_new_c_factor_before( )         )

	toolbar . set_item_state( "OPTION_NEW_C_FACTOR_OPTIONS"             ,
	                          self . can_new_c_factor_options( )        )

	toolbar . set_item_state( "OPTION_NEW_LAYER_FACTOR_BEFORE"          ,
	                          self . can_new_layer_factor_before( )     )

	toolbar . set_item_state( "OPTION_NEW_LAYER_FACTOR_OPTIONS"         ,
	                          self . can_new_layer_factor_options ( )   )

	toolbar . set_item_state( "OPTION_NEW_TIME_FACTOR_BEFORE"           ,
	                          self . can_new_time_factor_before( )      )

	toolbar . set_item_state( "OPTION_NEW_TIME_FACTOR_OPTIONS"          ,
	                          self . can_new_time_factor_options ( )    )

	toolbar . set_item_state( "OPTION_PROPAGATE_CURRENT"                ,
	                          self . can_propagate_current( )           )

	toolbar . set_item_state( "OPTION_REMOVE_C_FACTOR"                  ,
	                          self . can_remove_c_factor( )             )

	toolbar . set_item_state( "OPTION_REMOVE_LAYER_FACTOR"              ,
	                          self . can_remove_layer_factor( )         )

	toolbar . set_item_state( "OPTION_REMOVE_TIME_FACTOR"               ,
	                          self . can_remove_time_factor( )          )

	toolbar . set_item_state( "OPTION_SAMPLE_ASSIGN"                    ,
	                          self . can_sample_assign( )               )

	toolbar . set_item_state( "OPTION_SAMPLE_AUTHORISE"                 ,
	                          self . can_sample_authorise( )            )

	toolbar . set_item_state( "OPTION_SAMPLE_CANCEL"                    ,
	                          self . can_sample_cancel( )               )

	toolbar . set_item_state( "OPTION_SAMPLE_LABEL"                     ,
	                          self . can_sample_label( )                )

	toolbar . set_item_state( "OPTION_SAMPLE_PROPERTIES"                ,
	                          self . can_sample_properties( )           )

	toolbar . set_item_state( "OPTION_SAMPLE_ACTIONS"                   ,
	                          self . can_sample_actions( )              )

	toolbar . set_item_state( "OPTION_SAMPLE_RECEIVE"                   ,
	                          self . can_sample_receive( )              )

	toolbar . set_item_state( "OPTION_SAMPLE_RESULT_ENTRY"              ,
	                          self . can_sample_result_entry( )         )

	toolbar . set_item_state( "OPTION_TOGGLE_CELL_ACTIVATION"           ,
	                          self . can_toggle_cell_activation( )      )

	toolbar . set_item_state( "OPTION_TOGGLE_CONDITION_ACTIVATION"      ,
	                          self . can_toggle_condition_activation( ) )
	
ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_copy_current_cell( self )
{
*
* Returns True if the option copy_current_cell is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT self . is_display_only( ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_delete_pull( self )
{
*
* Returns True if the option delete_pull is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	DECLARE current_pull, valid

	valid = FALSE

	current_pull = self . get_current_pull( )

	IF current_pull <> EMPTY THEN
	
		valid = NOT ( self . is_display_only( )              ) AND
		            ( self . pull_is_pending( current_pull ) )
	
	ENDIF

	RETURN( valid )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_graph( self )
{
*
* Returns True if the option graph is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( self . is_study( ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_insert_pull( self )
{
*
* Returns True if the option insert_pull is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT ( self . is_display_only( )               ) AND
		        ( self . get_current_cell( ) <> EMPTY     )     )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_new_c_factor_after( self )
{
*
* Returns True if the option new_c_factor_after is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT ( self . is_display_only( )                ) AND
	            ( self . get_current_pull_grid( ) <> EMPTY )     )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_new_c_factor_before( self )
{
*
* Returns True if the option new_c_factor_before is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT ( self . is_display_only( )                ) AND
	            ( self . get_current_pull_grid( ) <> EMPTY )     )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_new_c_factor_options( self )
{
*
* Returns True if the option new_c_factor_options is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( self . can_new_c_factor_after ( ) OR
	        self . can_new_c_factor_before( )   )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_new_layer_factor_after( self )
{
*
* Returns True if the option new_layer_factor_after is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT self . is_display_only( ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_new_layer_factor_before( self )
{
*
* Returns True if the option new_layer_factor_before is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT self . is_display_only( ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_new_layer_factor_options( self )
{
*
* Returns True if the option new_layer_factor_options is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( self . can_new_layer_factor_after ( ) OR
	        self . can_new_layer_factor_before( )   )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_new_time_factor_after( self )
{
*
* Returns True if the option new_time_factor_after is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT ( self . is_display_only( )                ) AND
	            ( self . get_current_pull_grid( ) <> EMPTY )     )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_new_time_factor_before( self )
{
*
* Returns True if the option new_time_factor_before is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT ( self . is_display_only( )                ) AND
	            ( self . get_current_pull_grid( ) <> EMPTY )     )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_new_time_factor_options( self )
{
*
* Returns True if the option new_time_factor_options is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( self . can_new_time_factor_after ( ) OR
	        self . can_new_time_factor_before( )   )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_remove_c_factor( self )
{
*
* Returns True if the option remove_c_factor is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT ( self . is_display_only( )     ) AND
	            ( self . condition_count( ) > 1 ) AND
	            ( self . current_c <> EMPTY     )    )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_remove_layer_factor( self )
{
*
* Returns True if the option remove_layer_factor is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT ( self . is_display_only( ) ) AND
	            ( self . layer_count( ) > 1 )     )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_remove_time_factor( self )
{
*
* Returns True if the option remove_time_factor is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT ( self . is_display_only( )    ) AND
	            ( self . time_count( ) > 1     ) AND
	            ( self . current_time <> EMPTY )    )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_sample_assign( self )
{
*
* Returns True if the option sample_assign is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	DECLARE current_pull, valid

	valid = FALSE

	current_pull = self . get_current_pull( )

	IF current_pull <> EMPTY THEN
	
		valid = NOT ( self . is_display_only( )              ) AND
		            ( self . is_study( )                     ) AND
		            ( self . pull_is_pending( current_pull ) ) AND
		            ( self . current_cell_is_active( )       ) AND
		        NOT ( self . current_pull_has_sample( )      )
	
	ENDIF

	RETURN( valid )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_sample_authorise( self )
{
*
* Returns True if the option sample_authorise is valid.
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	DECLARE samp_obj, sample_status, valid

	valid = FALSE

	samp_obj = self . get_current_pull_sample( )

	IF samp_obj <> EMPTY THEN

		sample_status = SELECT sample . status IN OBJECT samp_obj

		valid =     ( sample_status = "C"       ) AND
		        NOT ( self . is_display_only( ) ) AND
		            ( self . is_study( )        )

	ENDIF


	RETURN( valid )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_sample_cancel( self )
{
*
* Returns True if the option sample_cancel is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	DECLARE samp_obj, sample_status, valid

	valid = FALSE

	samp_obj = self . get_current_pull_sample( )

	IF samp_obj <> EMPTY THEN

		sample_status = SELECT sample . status IN OBJECT samp_obj

		valid = ( sample_status = "U" ) OR
		        ( sample_status = "W" ) OR
		        ( sample_status = "H" ) OR
		        ( sample_status = "V" ) OR
		        ( sample_status = "C" )

		valid = valid AND NOT ( self . is_display_only( ) ) AND
		                      ( self . is_study( )        )

	ENDIF


	RETURN( valid )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_sample_label( self )
{
*
* Returns True if the option sample_label is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( self . is_study( )                AND
	        self . current_pull_has_sample( )   )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_sample_properties( self )
{
*
* Returns True if the option sample_properties is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( self . is_study( )                AND
	        self . current_pull_has_sample( )   )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_sample_actions( self )
{
*
* Returns True if the option can_sample_actions is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( self . is_study( )                AND
	        self . current_pull_has_sample( )    )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_sample_receive( self )
{
*
* Returns True if the option sample_receive is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	DECLARE samp_obj, sample_status, valid

	valid = FALSE

	samp_obj = self . get_current_pull_sample( )

	IF samp_obj <> EMPTY THEN

		sample_status = SELECT sample . status IN OBJECT samp_obj

		valid =      ( sample_status = "U"       ) AND
		         NOT ( self . is_display_only( ) ) AND
		             ( self . is_study( )        )
		
	ENDIF

	RETURN( valid )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_sample_result_entry( self )
{
*
* Returns True if the option sample_result_entry is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}
	
	DECLARE samp_obj, sample_status, valid

	valid = FALSE

	samp_obj = self . get_current_pull_sample( )

	IF samp_obj <> EMPTY THEN

		sample_status = SELECT sample . status IN OBJECT samp_obj

		valid = ( sample_status = "V" ) OR 
		        ( sample_status = "C" )

		valid = valid AND NOT ( self . is_display_only( ) ) AND
		                      ( self . is_study( )        )
		
	ENDIF

	RETURN( valid )
	        
ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_toggle_cell_activation( self )
{
*
* Returns True if the option toggle_cell_activation is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT ( self . is_display_only( )           ) AND
	            ( self . get_current_pull( ) <> EMPTY )    )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_can_toggle_condition_activation( self )
{
*
* Returns True if the option toggle_condition_activation is valid
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

	RETURN( NOT ( self . is_display_only( )           ) AND
	            ( self . get_current_pull( ) <> EMPTY )    )
	            
ENDROUTINE

