{==============================================================================}
{                                                                              }
{  TENSOR TECHNOLOGIES                                                         }
{                                                                              }
{  Filename         : $STB_LIB                                                 }
{  Version          : 1.0                                                      }
{  Document Ref.    :                                                          }
{  Author           : John o' Gorman                                           }
{  Date Created     : 20-5-97                                                  }
{  Responsible      : TTL                                                      }
{  Description      : General Routines for use in Stability                    }
{                                                                              }
{==============================================================================}

SET COMPILE_OPTION DECLARE

SET NAME "DEFER/"
ENABLE WINDOWS

JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_STRUCTURE
JOIN STANDARD_LIBRARY STD_UTILS

JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $STB_GLBL
JOIN LIBRARY $STB_LOGIN

{******************************************************************************}

GLOBAL

ROUTINE form_scr_pos ( VALUE form_size   ,
                       VALUE screen_size )

{
* Gets the start col or row for forms so they are centered on the screen
*
* Parameters : form_size   , the height or width of the form
*              screen_size , the height or width of the scr
*
*******************************************************************************}

    DECLARE return_value

    return_value = TRUNC ( ( screen_size - form_size ) / 2 )

    RETURN ( return_value )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE get_default_config_item ( VALUE config_id, VALUE config_item )
{
* the config id and field name is passed in. The value of the config is passed
* back out. ERROR is returned if no value present.
*
* Parameters : config_id   , identity of the config record
*              config_item , the config field to be read 
*
*******************************************************************************}

    DECLARE config_value

    config_value = SELECT pds_config . 'config_item'
                    WHERE identity = config_id

    IF config_value <> EMPTY THEN
        RETURN ( config_value )
    ELSE
        RETURN ( ERROR )
    ENDIF

ENDROUTINE

{*****************************************************************************}

GLOBAL

ROUTINE get_record_key0 ( stab_record )

{
* returns the key0 field of a record object
*
* Parameters : stab_record , record the index is required from
*
*******************************************************************************}

    RETURN ( GET_KEY0_STRING_OBJECT( stab_record . table, stab_record ) )

ENDROUTINE

{*****************************************************************************}

GLOBAL

ROUTINE get_cell_object (       matrix_object ,
                          VALUE layer_no      ,
                          VALUE time_no       ,
                          VALUE c_no          )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    DECLARE grid

    grid = matrix_object . get_pull_grid_by_position( layer_no )

    IF matrix_object . time_xaxis THEN
        RETURN ( grid . userinfo [ time_no, c_no ] )
    ELSE
        RETURN ( grid . userinfo [ c_no, time_no ] )
    ENDIF

ENDROUTINE

{*****************************************************************************}

GLOBAL

ROUTINE copy_non_key0_fields ( new_record, copy_record )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    DECLARE key0_array, copy_table, dest_table, copy_fields, count,
            key0_count, tmp_value, field_name

    ARRAY key0_array
    ARRAY copy_fields

    copy_table = copy_record . table
    dest_table = new_record . table

    GET_TABLE_DETAILS 'copy_table', "KEY0_FIELD", key0_array

    get_unordered_field_names ( copy_table, copy_fields )

                             { remove fields from copy array }

    count = 0
    WHILE ( count < size_of_array ( copy_fields ) ) DO
        count = count + 1
        key0_count = 0
        WHILE ( key0_count < size_of_array ( key0_array ) ) DO
            key0_count = key0_count + 1
            IF ( copy_fields [ count, 1 ] = key0_array [ key0_count ] ) THEN
                array_remove_slice ( copy_fields, 1, count )
            ENDIF
        ENDWHILE
    ENDWHILE

                             { copy fields that are left onto record }

    count = 0
    WHILE ( count < size_of_array ( copy_fields ) ) DO
        count = count + 1
        IF ( valid_field ( dest_table, copy_fields [ count, 1 ] ) ) THEN
            field_name = copy_fields [ count, 1 ]
            tmp_value = SELECT 'copy_table' . 'field_name' IN OBJECT copy_record
            ASSIGN 'dest_table' . 'field_name' IN OBJECT new_record = tmp_value
        ENDIF
    ENDWHILE

ENDROUTINE

{*****************************************************************************}

GLOBAL

ROUTINE empty_non_key0_fields ( pull_record )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    DECLARE key0_array, empty_fields, count, key0_count, field_name, tmp_value

    ARRAY key0_array
    ARRAY empty_fields

    GET_TABLE_DETAILS 'pull_record . table', "KEY0_FIELD", key0_array

    get_unordered_field_names ( pull_record . table, empty_fields )

                             { remove fields from copy array }

    count = 0
    WHILE ( count < size_of_array ( empty_fields ) ) DO
        count = count + 1
        key0_count = 0
        WHILE ( key0_count < size_of_array ( key0_array ) ) DO
            key0_count = key0_count + 1
            IF ( empty_fields [ count, 1 ] = key0_array [ key0_count ] ) THEN
                array_remove_slice ( empty_fields, 1, count )
            ENDIF
        ENDWHILE
    ENDWHILE

                             { copy fields that are left onto record }

    count = 0
    WHILE ( count < size_of_array ( empty_fields ) ) DO

        count = count + 1
        IF ( valid_field ( pull_record . table, empty_fields [ count, 1 ] ) ) THEN

            field_name = empty_fields [ count, 1 ]
            GET_FIELD_DETAILS 'pull_record . table' . 'field_name', "DEFAULT_VALUE", tmp_value
            ASSIGN 'pull_record . table' . 'field_name' IN OBJECT pull_record = tmp_value

        ENDIF

    ENDWHILE

ENDROUTINE

{*****************************************************************************}

GLOBAL

ROUTINE cell_has_available_sample ( matrix_object, cell_obj )
{
* checks if the pull status  with in a cell. If the status of any pull is V
* TRUE is returned. If all are p then FALSE is returned
*
* Parameters : matrix_object , matrix object
*              cell_obj      , the cell object with pull info
*
*******************************************************************************}

    DECLARE count, pull_record, any_available

    any_available = FALSE

    IF matrix_object . is_study( ) THEN
    
        count = 1

        WHILE ( count <= size_of_array ( cell_obj . pull_records ) ) AND NOT any_available DO

            pull_record = cell_obj . pull_records [ count ]

            IF NOT ( pull_record . deleted ) THEN

                IF NOT matrix_object . pull_is_pending( pull_record ) THEN

                    any_available = TRUE

                ENDIF

            ENDIF

            count = count + 1

        ENDWHILE
        
    ENDIF

    RETURN ( any_available )

ENDROUTINE

{*****************************************************************************}

GLOBAL

ROUTINE undel_size_db ( db_obj )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    DECLARE count, undel_count

    count = 0
    undel_count = 0

    WHILE ( count < db_obj . size () ) DO
    
        count = count + 1
        db_obj . set_by_number ( count )
        
        IF NOT ( db_obj . current . deleted ) THEN
            undel_count = undel_count + 1
        ENDIF
        
    ENDWHILE

    RETURN ( undel_count )

ENDROUTINE

{*****************************************************************************}

GLOBAL

ROUTINE get_correct_factor ( factor_db, VALUE current_pos )

{
* Returns the factor identity corresponding to the passed position. factor_db
* is an object db containing pds_axis_point records for a particular dimension
* The possible dimensions are layer, time or condition
*
******************************************************************************}

    DECLARE count, undel_count, id

    id = EMPTY

    undel_count = 0
    count = 0

    IF ( current_pos = 0 ) THEN { *** inventory mods *** }
        current_pos = 1
    ENDIF

    WHILE ( count < factor_db . size () ) AND ( id = EMPTY ) DO

        count = count + 1
        factor_db . set_by_index_number ( "AXIS_POS", count )

        IF NOT ( factor_db . current . deleted ) THEN
        
            undel_count = undel_count + 1
            
            IF ( undel_count = current_pos ) THEN
            
                id = SELECT pds_axis_point . axis_point_name
                         IN OBJECT factor_db . current
                         
            ENDIF
            
        ENDIF

    ENDWHILE

    RETURN( id )

ENDROUTINE

{*****************************************************************************}

GLOBAL

ROUTINE entire_factor_pending_samples ( matrix_object, VALUE factor_field, VALUE factor_id )
{
* Returns true if all pulls in the passed factor have a status of P 
*
* Parameters : 
*
*******************************************************************************}

    DECLARE count, all_pending, pull_db

    pull_db = matrix_object . pulls

    all_pending = TRUE

    IF matrix_object . is_study( ) THEN

        count = 1
        WHILE ( count <= pull_db . size ( ) ) AND ( all_pending ) DO

            pull_db . set_by_number ( count )

            IF ( SELECT pds_study_pull . 'factor_field' IN OBJECT pull_db . current = factor_id ) THEN
            
                IF NOT matrix_object . pull_is_pending( pull_db . current ) THEN
                    
                    all_pending = FALSE
                    
                ENDIF
            ENDIF

            count = count + 1

        ENDWHILE

    ENDIF

    RETURN ( all_pending )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE activate_many_pulls ( matrix_object, pull_rec , time_db)
{
* activates a pull, sets the login due date and created sample id
*
* Parameters : matrix_object , 
*              pull_rec      , pull to be activated
*              time_db       ,
*
*******************************************************************************}

    DECLARE pull_timefac, time_window_type, activation_date, equiv_in_days,
            time_window, start_date, login_due_date

    time_window_type = SELECT pds_study . log_type
    activation_date = DATE ( SELECT pds_study . start_date )

    pull_timefac = STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "TIME_FACTOR" ) )

                                       { get time factor details }

    time_db . set_by_index ( "KEY0", pull_timefac )

    IF ( pull_timefac <> "__TIMEZERO" ) THEN

        equiv_in_days = INTERVAL ( object_select_field ( time_db . current, "TIME_FACTOR", "DAY_EQUIV"   ) )
        time_window   = INTERVAL ( object_select_field ( time_db . current, "TIME_FACTOR", "TIME_WINDOW" ) )

        start_date = get_basetime ( pull_rec )

        IF time_window_type = "T" THEN

            IF IS_INTERVAL ( start_date ) THEN
                login_due_date = activation_date + INTERVAL ( start_date ) + equiv_in_days
            ELSEIF ( DATE ( start_date ) <> ERROR ) THEN
                login_due_date = DATE ( start_date ) + equiv_in_days
            ELSE
                login_due_date = activation_date + equiv_in_days
            ENDIF

        ELSEIF time_window_type = "E" THEN

            IF IS_INTERVAL ( start_date ) THEN
                login_due_date = activation_date + INTERVAL ( start_date ) + equiv_in_days + time_window
            ELSEIF ( DATE ( start_date ) <> ERROR ) THEN
                login_due_date = DATE ( start_date ) + equiv_in_days + time_window
            ELSE
                login_due_date = activation_date + equiv_in_days + time_window
            ENDIF

        ELSEIF time_window_type = "S" THEN

            IF IS_INTERVAL ( start_date ) THEN
                login_due_date = activation_date + INTERVAL ( start_date ) + equiv_in_days - time_window
            ELSEIF ( DATE ( start_date ) <> ERROR ) THEN
                login_due_date = DATE ( start_date ) + equiv_in_days - time_window
            ELSE
                login_due_date = activation_date + equiv_in_days - time_window
            ENDIF

        ENDIF

    ELSE

        login_due_date = activation_date

    ENDIF

                                           { assign due date to pull }

    object_assign_field ( pull_rec, "PDS_STUDY_PULL", "DUE_LOGIN_DATE", login_due_date )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE activate_pull ( pull_rec )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    DECLARE pull_timefac, time_db, time_window_type, activation_date, equiv_in_days,
            time_window, start_date, login_due_date, time_select

    ARRAY time_select

    array_select_add ( time_select, ARRAY_SELECT_NE, "IDENTITY", "" )
    object_create ( time_db, "STD_OBJECT_DATABASE" )
    time_db . initialise ( "TIME_FACTOR" )
    time_db . select_for_read ( time_select )

    time_window_type = SELECT pds_study . log_type
    activation_date = DATE ( SELECT pds_study . start_date )

    pull_timefac = STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "TIME_FACTOR" ) )

                                       { get time factor details }

    time_db . set_by_index ( "KEY0", pull_timefac )

    IF ( pull_timefac <> "__TIMEZERO" ) THEN

        equiv_in_days = INTERVAL ( object_select_field ( time_db . current, "TIME_FACTOR", "DAY_EQUIV"   ) )
        time_window   = INTERVAL ( object_select_field ( time_db . current, "TIME_FACTOR", "TIME_WINDOW" ) )

        start_date = get_basetime ( pull_rec )

        IF time_window_type = "T" THEN

            IF IS_INTERVAL ( start_date ) THEN
                login_due_date = activation_date + INTERVAL ( start_date ) + equiv_in_days
            ELSEIF ( DATE ( start_date ) <> ERROR ) THEN
                login_due_date = DATE ( start_date ) + equiv_in_days
            ELSE
                login_due_date = activation_date + equiv_in_days
            ENDIF

        ELSEIF time_window_type = "E" THEN

            IF IS_INTERVAL ( start_date ) THEN
                login_due_date = activation_date + INTERVAL ( start_date ) + equiv_in_days + time_window
            ELSEIF ( DATE ( start_date ) <> ERROR ) THEN
                login_due_date = DATE ( start_date ) + equiv_in_days + time_window
            ELSE
                login_due_date = activation_date + equiv_in_days + time_window
            ENDIF

        ELSEIF time_window_type = "S" THEN

            IF IS_INTERVAL ( start_date ) THEN
                login_due_date = activation_date + INTERVAL ( start_date ) + equiv_in_days - time_window
            ELSEIF ( DATE ( start_date ) <> ERROR ) THEN
                login_due_date = DATE ( start_date ) + equiv_in_days - time_window
            ELSE
                login_due_date = activation_date + equiv_in_days - time_window
            ENDIF

        ENDIF

    ELSE

        login_due_date = activation_date

    ENDIF

                                           { assign due date to pull }

    object_assign_field ( pull_rec, "PDS_STUDY_PULL", "DUE_LOGIN_DATE", login_due_date )

ENDROUTINE

{******************************************************************************}

ROUTINE get_basetime ( pull_rec )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    DECLARE start_date, matrix_object, key0_ndx

    CALL_ROUTINE "get_matrix_object" USING matrix_object IN LIBRARY "$STB_MATRIX"

    key0_ndx = matrix_object . matrix_type :
               matrix_object . header_id :
               matrix_object . header_ver :
               SELECT pds_study_pull . layer_factor IN OBJECT pull_rec :
               SELECT pds_study_pull . c_factor IN OBJECT pull_rec

    matrix_object . basetimes . basetime_db . set_by_index ( "KEY0", key0_ndx )

    IF matrix_object . basetimes . basetime_db . current = EMPTY THEN
        start_date = INTERVAL ( 0 )
    ELSE
        start_date = SELECT pds_basetime . start_date IN OBJECT matrix_object . basetimes . basetime_db . current
    ENDIF

    RETURN ( start_date )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE get_pull_syntax ( pull_record )
{
* gets the predicted syntax of a study pull the pull record will be selected
* so it can be used
*
* Parameters : pull_record , the pull record the syn is been created for
*
*******************************************************************************}

    DECLARE samp_temp_syn, samp_temp, pull_syn

    samp_temp = STRIP ( SELECT pds_study_pull . sample_template
                            IN OBJECT pull_record )

    IF ( samp_temp = EMPTY ) OR ( samp_temp = "" ) THEN

        samp_temp = STRIP ( SELECT pds_study . sample_template )

        IF ( samp_temp = EMPTY ) OR ( samp_temp = "" ) THEN

            samp_temp = DEFAULT_SAMP_TEMP

        ENDIF

    ENDIF

    samp_temp_syn = SELECT samp_tmpl_header . syntax_id
                        WHERE identity = samp_temp

    IF ( samp_temp_syn = EMPTY ) OR ( BLANK(samp_temp_syn) ) THEN
        samp_temp_syn = DEFAULT_SAMP_SYNTAX
    ENDIF

    pull_syn = GET SYNTAX ( samp_temp_syn )

    IF pull_syn = ERROR THEN
      pull_syn = GET SYNTAX ( DEFAULT_SAMP_SYNTAX )
    ENDIF

    IF pull_syn = ERROR THEN
      pull_syn = GET SYNTAX ( "DEFAULT" )
    ENDIF

    IF pull_syn = ERROR THEN
      pull_syn = "Error creating sample syntax"
    ENDIF

    RETURN ( pull_syn )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE delete_pull_from_timerqueue ( pull_rec )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    DECLARE tq_param

    tq_param = STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "PULL_NAME" ) ) : "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "HEADER" ) ) : "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "LAYER_FACTOR" ) ) : "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "C_FACTOR" ) ) : "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "TIME_FACTOR" ) ) : "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "PULL_NUM" ) ) : "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "SAMPLE_ID_TEXT" ) ): "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "PULL_AMOUNT" ) ) : ",":
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "PULL_UNIT" ) )

    stb_login_delete_event ( tq_param )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE add_pull_to_timerqueue ( pull_rec )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    DECLARE tq_param, tq_entry , due_date

    tq_param = object_select_field ( pull_rec, "PDS_STUDY_PULL", "PULL_NAME" ) : "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "HEADER" ) ) : "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "LAYER_FACTOR" ) ) : "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "C_FACTOR" ) ) : "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "TIME_FACTOR" ) ) : "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "PULL_NUM" ) ) : "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "sample_id_text" ) ): "," :
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "PULL_AMOUNT" ) ) : ",":
               STRIP ( object_select_field ( pull_rec, "PDS_STUDY_PULL", "PULL_UNIT" ) )

{jep - add due login date as routine parameter - not in parameter string }


    due_date = object_select_field ( pull_rec , "PDS_STUDY_PULL", "DUE_LOGIN_DATE" )

    IF (select pds_study_pull . c_factor in object pull_rec = "__TIMEZERO") Then
        due_date = NOW
    ENDIF

    tq_entry = stb_login_add_event ( tq_param , due_date )

    ASSIGN 'pull_rec . table' . wdt_entry_number IN OBJECT pull_rec = tq_entry

ENDROUTINE


