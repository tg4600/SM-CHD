{*******************************************************************************
*
* Module Name   : $MODWKSHT
*
* Purpose       : To enable users to modify analysis worksheets.
*
* Document Ref  : 
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    : No
*
********************************************************************************}

SET NAME "DEFER/"
SET NOTPROTECTED
SET CREATE FALSE
ENABLE WINDOWS

SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_CLIENT
JOIN STANDARD_LIBRARY STD_LOGIN
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_UTILS

JOIN LIBRARY $PROMPT_LIST
JOIN LIBRARY $TOOLBOX
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $LIB_STAN
JOIN LIBRARY $SAMP_JOB
JOIN LIBRARY $SAMP_USER

CONSTANT Main_Display_Column = 4
CONSTANT Main_Display_Row    = 3
CONSTANT NO_ICON             = 500
CONSTANT wks_directory       = "smp$worksheets:"
CONSTANT NOTHING	     = ""

CONSTANT LIST_WIDTH	     = 32

CONSTANT STANDARD_ICON    = 60
CONSTANT REMOVED_ICON     = 55
CONSTANT INSERT_ICON      = 54
CONSTANT UNASSIGNED_ICON  = 15
CONSTANT REMOVED_STD_ICON = 70

{CONSTANT ICON_WIDTH       = 16}

GLOBAL CONSTANT WORKSHEET_MODIFY_CLASS     = "WORKSHEET_MODIFY"
GLOBAL CONSTANT WORKSHEET_ITEM_CLASS       = "WORKSHEET_ITEM"
GLOBAL CONSTANT WORKSHEET_LIST_CLASS       = "WORKSHEET_LIST"
GLOBAL CONSTANT WORKSHEET_STANDARDS_CLASS  = "WORKSHEET_STANDARDS"

Main_routine()

EXIT

{******************************************************************************}

	GLOBAL

	ROUTINE define_worksheet_modify_class

{ 	Define the worksheet modify class
*
* 	Parameters   : N/a
* 	Return Value : N/a
*
*******************************************************************************}

	DEFINE CLASS WORKSHEET_MODIFY_CLASS

	INHERIT "STD_FORM"
	INITIALISATION

	PROPERTIES
		"list"               ,		{ List control for worksheet items   }
		"worksheet"          ,		{ Worksheet browse prompt            }
		"filename"           ,		{ SMW Worksheet filename             }
		"link_number"        ,		{ Worksheet browse prompt            }
		"available"          ,		{ List control for avalable tests    }
		"type"               ,		{ Worksheet type                     }
		"analysis"           ,		{ The analysis the worksheet is for  }
		"analysis_version"   ,		{ The version the worksheet is for   }
		"date"               ,		{ Date the worksheet was created     }
		"standard"           ,		{ Standard prompt object             }
		"standard_index"     ,		{ An index into the standards collection }
		"stds_collection"    ,		{ Standard Versions usage count tracker  }
		"version_array"      ,		{ Version browse prompt select array }
		"version"            ,		{ Version prompt object              }
		"usage"              , 		{ Usage count display box            }
	        "operator"           ,		{ The assigned operator at the time  }
	        "up_button"          ,		{ Button object to move an item up   }
	        "down_button"        ,		{ Button object to move an item down }
	        "add_one_button"     ,		{ Button to add one test             }
	        "add_all_button"     ,		{ Button to add all available tests  }
	        "remove_one_button"  ,		{ Button to remove one test          }
	        "remove_all_button"  ,		{ Button to remove all tests         }
	        "add_standard_button",		{ Button to add a defined standard   }
	        "save_button"        ,		{ Save the modified worksheet        }
	        "prompt_object_1"    ,		{ Object to display the type in      }
	        "prompt_object_2"    ,		{ Object to display the analysis in  }
	        "prompt_object_3"    ,		{ Object to display the date in      }
	        "cut_storage"        ,		{ Array to store cut items in        }
	        "initial_entries"    		{ Array to store initial tests       }

	ACTIONS
		"add_list"           ,		{ Initialise and add the list control}
		"add_available"      ,		{ Initialise the available list      }
		"add_buttons"        ,		{ Add the up,down,...,buttons        }
		"add_wks_details"    ,		{ Add a standard to the worksheet    }
		"copy_item"          ,		{ Add a standard to the worksheet    }
		"add_standards_prompts" ,	{ Add a standard to the worksheet    }
		"read_current"       ,		{ Read worksheet details from file   }
	        "retrieve_available" ,		{ Retrieve unassigned tests          }
		"display_current"    ,		{ Display currently assigned tests   }
		"display_available"  ,		{ Display currently unassigned tests }
		"display_headings"   ,		{ Display the type,analysis,date,op  }
		"show_details"       , 		{ Add the details of an item to list }
	        "set_button_states"  ,		{ Update the buttons states          }
	        "set_button_state"   ,		{ set the state of a button object   }
	        "remove_standard"    ,		{ Remove a standard from the list    }
	        "remove_routine"     ,		{ Make the tests available again     }
		"cut"                ,		{ Cut routine                        }
		"paste"              ,		{ Paste routine                      }
		"display_popup"      ,		{ Display popup for a right click    }
	        "save_worksheet"     ,		{ Save the changes to the worksheet  }
	        "change_worksheet"   ,		{ Modify the date and operator       }
	        "update_standards"   ,		{ Update the standards detail array  }
	        "use_standard"       ,		{ Set which standard to use          }
	        "can_add_standard"   ,		{ Is it okay to insert a standard?   }
	        "get_std_usage"      ,		{ Get the usage count for current std }
	        "update_all_tests"   ,		{ Update rows in the test table      }
	        "update_tests"   ,		{ Update rows in the test table      }
	        "login_std_sample"   ,		{  }
	        "has_changed"        ,		{ Has the worksheet been modified    }
		"construct_standard" ,		{ Construct the standard id          }
		"add_standard"       ,		{ Add a standard to the worksheet    }
		"add_anal_to_test_list" ,
		"update_state"

	END CLASS 


	DEFINE CLASS WORKSHEET_LIST_CLASS

	INHERIT "STD_PROMPT_LIST"

	PROPERTIES

		"Name"

	ACTIONS

		"get_item_reference"

	END CLASS

	initialise_worksheet_item_class ( )
	initialise_worksheet_standards_class ( )
	samp_job_initialise ( )

ENDROUTINE


{******************************************************************************}

	ROUTINE initialise_worksheet_standards_class

{ 	Define the worksheet standards class 
*
* 	Parameters   : N/a
* 	Return Value : N/a
*
*******************************************************************************}

	DEFINE CLASS WORKSHEET_STANDARDS_CLASS

	INHERIT
		"STD_COLLECTED"
    
	PROPERTIES
		"standard_version"   ,          { Standard Version concatecenated      }
		"standard"           ,          { Standard Identity                    }
		"version"            ,          { Standard Version                     }
		"usage_at_start"     ,          { The usage on startup                 }
		"usage_count"        ,          { The current usage count              }
		"maximum_usage"      ,          { Maximum allowed use of standard      }
		"syntax_id"          ,          { Standard syntax id                   }
		"samp_tmpl"          ,          { Sample Template defined for standard }
		"type"               ,
		"name"               ,
		"description"        ,
		"made_today"                    { The current usage count              }
	ACTIONS
		"increment" ,
		"decrement" ,
		"inc_usage"

	END CLASS       
ENDROUTINE


{******************************************************************************}

	ROUTINE initialise_worksheet_item_class

{ 	Define the worksheet item class 
*
* 	Parameters   : N/a
* 	Return Value : N/a
*
*******************************************************************************}

	DEFINE CLASS WORKSHEET_ITEM_CLASS

		INITIALISATION
	INHERIT
		"STD_COLLECTED"
    
	PROPERTIES
		"test"               ,          { The test number                     }
		"sample"             ,          { The numeric sample identity         } 
		"id_text"            ,          { The textual identity of the sample  }
		"status"             ,          { The sample status                   }
		"test_count"         ,          { The test count or standard usage count }
		"on_worksheet"       ,          { If it was on the original worksheet }
		"standard"           ,          { Standard Id if it is a standard     }
		"standard_version"              { Version Id if it is a standard      }
	ACTIONS
		"remove"             ,
		"assign"             ,
		"update_test"        ,
		"remove_standard"    ,
		"assign_standard"

	END CLASS       
ENDROUTINE


{******************************************************************************}

	ROUTINE worksheet_item_class_initialisation ( self )

{ 	Initialisation of a worksheet item 
*
* 	Parameters   : N/a
* 	Return Value : N/a
*
*******************************************************************************}

	self . test             = EMPTY
	self . sample           = EMPTY
	self . id_text          = EMPTY
	self . status           = EMPTY
	self . test_count       = EMPTY
	self . on_worksheet     = FALSE
	self . standard         = EMPTY
	self . standard_version = EMPTY

ENDROUTINE


{******************************************************************************}

ROUTINE main_routine

{ 	The main routine 
*
* 	Parameters   : N/a
* 	Return Value : N/a
*
*******************************************************************************}

	DECLARE worksheet_modifier

	set_up_std_prompt_list_class  ( )
	define_worksheet_modify_class ( )

	CREATE OBJECT WORKSHEET_MODIFY_CLASS , worksheet_modifier

	worksheet_modifier . start_prompt ()
	
	REPEAT
		worksheet_modifier . wait_prompt ()
	UNTIL worksheet_modifier . get_lastkey ( ) = "EXIT"

	worksheet_modifier . stop_prompt ()

 
ENDROUTINE { main }


{******************************************************************************}

ROUTINE worksheet_id_leave_prompt ( self )

{ 	This is the routine called after the user has browse on the worksheets
*	table  
*
* 	Parameters   : self - The worksheet modify object
* 	Return Value : True if the worksheet file was opened and contents read
*
*******************************************************************************}
	IF self . get_lastkey ( ) <> "EXIT" THEN

		self . parent_prompt . list . set_enabled ( TRUE )
		self . parent_prompt . list . repaste ( )
		self . parent_prompt . available . set_enabled ( TRUE )
		self . parent_prompt . available . repaste ( )

		IF self . parent_prompt . read_current ( self . value ) THEN

			self . parent_prompt . display_headings ( )
			self . parent_prompt . display_current ( )

		ENDIF

		IF self . parent_prompt . retrieve_available ( self . 
		                                               parent_prompt . 
		                                               analysis        ) THEN

			self . parent_prompt . display_available ( )

		ENDIF
	ENDIF

ENDROUTINE { worksheet_id_leave_prompt }


{******************************************************************************}

ROUTINE worksheet_modify_class_initialisation ( self )

{ 	Initialise the settings for the form display etc.
*
* 	Parameters   : self - The worksheet modify object
* 	Return Value : N/a
*
*******************************************************************************}

DECLARE select_array , prompt_obj

	self . cut_storage     = EMPTY
	self . standard_index  = 0

	ARRAY self . initial_entries ARRAYSIZE ( 0 )

	CREATE OBJECT "STD_COLLECTION" , self . stds_collection

	self . stds_collection . add_index ( "standard_version" )
	self . stds_collection . add_index ( "usage_count" )

	self . header = "Worksheet Modify"
	self . footer = "Press EXIT key to quit"
	self . height = 23
	self . width  = 94
	self . column = Main_Display_Column
	self . row    = Main_Display_Row
	self . button_style = FORM_BUTTON_NONE

        PROMPT OBJECT prompt_obj
		prompt_obj . column = Main_Display_Column
		prompt_obj . row    = 1
		prompt_obj . width  = 12
		prompt_obj . height = 1
		prompt_obj . value  = "Worksheet ID "
		prompt_obj . raised = TRUE

	self . add_display ( prompt_obj )

	{ Setup a select array for the browse routine }

	ARRAY select_array ARRAYSIZE ( 0 , 3 )
	ARRAY self . version_array ARRAYSIZE ( 0 , 3 )

	array_select_add ( select_array , 
	                   ARRAY_SELECT_EQ , 
	                   "worksheet_type" ,
	                   "TESTWKS" ) 

        PROMPT OBJECT self . worksheet
                BROWSE ON worksheet . identity 
                WITH ( mandatory_array = select_array ,
	               row             = 1 ,			
	               column          = Main_Display_Column + prompt_obj . width + 2,
	               leave_prompt_routine = "WORKSHEET_ID_LEAVE_PROMPT" )

	self . add_prompt ( self . worksheet )

	{***** Initialise the rest of the form *****}

	self . add_list ( )

	self . add_available ( )

	self . add_buttons ( )

	self . add_wks_details ( )

	self . add_standards_prompts ( )

ENDROUTINE { worksheet_modify_class_initialisation }


{******************************************************************************}

ROUTINE worksheet_modify_action_add_wks_details ( self )

{ 	Add the prompts to display the details retrieved from the worksheet file
*
* 	Parameters   : self - The worksheet modify object
* 	Return Value : N/a
*
*******************************************************************************}

	self . add_display ( PAD ( "Analysis", " " , 12 ) , self . width - LIST_WIDTH - 1, 1 , 
	                      PROMPT_RENDITION_RAISED + PROMPT_RENDITION_BOLD )

	self . add_display ( PAD ( "Date"    , " " , 12 ) , self . width - LIST_WIDTH - 1, 2 , 
	                      PROMPT_RENDITION_RAISED + PROMPT_RENDITION_BOLD )

	self . add_display ( PAD ( "Operator", " " , 12 ) , self . width - LIST_WIDTH - 1, 3 , 
	                      PROMPT_RENDITION_RAISED + PROMPT_RENDITION_BOLD )

	self . add_display ( PAD ( "Standard", " " , 12 ) , self . width - LIST_WIDTH - 1, self . height - 5 , 
	                      PROMPT_RENDITION_RAISED + PROMPT_RENDITION_BOLD )

	self . add_display ( PAD ( "Version", " " , 12 ) , self . width - LIST_WIDTH - 1, self . height - 4 , 
	                      PROMPT_RENDITION_RAISED + PROMPT_RENDITION_BOLD )

	self . add_display ( PAD ( "Usage", " " , 12 ) , self . width - LIST_WIDTH - 1, self . height - 3 , 
	                      PROMPT_RENDITION_RAISED + PROMPT_RENDITION_BOLD )

	PROMPT OBJECT self . prompt_object_1
		self . prompt_object_1 . display_only = TRUE
		self . prompt_object_1 . lowered      = TRUE
		self . prompt_object_1 . row          = 1
		self . prompt_object_1 . column       = Main_Display_Column + 70
		self . prompt_object_1 . height       = 1
		self . prompt_object_1 . width        = 15

	self . add_display ( self . prompt_object_1 )

	PROMPT OBJECT self . prompt_object_2
		self . prompt_object_2 . display_only = TRUE
		self . prompt_object_2 . lowered      = TRUE
		self . prompt_object_2 . row          = 2
		self . prompt_object_2 . column       = Main_Display_Column + 70
		self . prompt_object_2 . height       = 1
		self . prompt_object_2 . width        = 15

	self . add_display ( self . prompt_object_2 )

	PROMPT OBJECT self . prompt_object_3
		self . prompt_object_3 . display_only = TRUE
		self . prompt_object_3 . lowered      = TRUE
		self . prompt_object_3 . row          = 3
		self . prompt_object_3 . column       = Main_Display_Column + 70
		self . prompt_object_3 . height       = 1
		self . prompt_object_3 . width        = 15

	self . add_display ( self . prompt_object_3 )

ENDROUTINE { worksheet_modify_add_wks_details }


{******************************************************************************}

ROUTINE worksheet_modify_action_add_standards_prompts ( self )

{ 	Add the prompts to select the standards to add to the form
*
* 	Parameters   : self - The worksheet modify object
* 	Return Value : N/a
*
*******************************************************************************}

        PROMPT OBJECT self . standard
                BROWSE ON standard_versions . identity 
		WITH ( column               = Main_Display_Column + 70   ,
	               row                  = self . height - 5          ,
		       validation_routine   = "standard_validation"      )

	self . add_prompt ( self . standard )

        PROMPT OBJECT self . version
                BROWSE ON standard_versions . version 
                WITH ( mandatory_array = self . version_array ,
	               row             = self . height - 4 ,
	               column          = Main_Display_Column + 70,
	               leave_prompt_routine = "VERSION_ID_LEAVE_PROMPT" )

	self . add_prompt ( self . version )

	PROMPT OBJECT self . usage
		self . usage . display_only = TRUE
		self . usage . lowered      = TRUE
		self . usage . row          = self . height - 3
		self . usage . column       = Main_Display_Column + 70
		self . usage . height       = 1
		self . usage . width        = 10

	self . add_display ( self . usage )

ENDROUTINE { worksheet_modify_action_add_standards_prompts }


{******************************************************************************}

ROUTINE worksheet_modify_action_add_list ( self )

{ 	Add a list control to the main form
*
* 	Parameters   : self - The worksheet modify object
* 	Return Value : N/a
*
*******************************************************************************}

	CREATE OBJECT WORKSHEET_LIST_CLASS , self . list

	CREATE OBJECT "STD_COLLECTION" , self . list . user_info

	self . list . user_info . add_index ( "id_text" )

	self . list . name = "Assigned  "
	self . list . vgl_library = GLOBAL ( "CURRENT_LIBRARY" )
	self . list . full_screen = FALSE
	self . list . row    = 6
	self . list . column = Main_Display_Column
	self . list . width  = LIST_WIDTH
	self . list . height = self . height - 9
	self . list . selected_routine    = "worksheet_modifier_list_selected"
	self . list . right_mouse_routine = "worksheet_modifier_list_right_click"

	self . list . clear_columns ( )
	self . list . use_images = TRUE

	self . list . add_column ( "Sample Id" , 16 )
	self . list . add_column ( "Status"    , 4  )

	self . add_prompt ( self . list )

ENDROUTINE { worksheet_modify_action_add_list }


{******************************************************************************}

ROUTINE worksheet_modify_action_add_available ( self )

{ 	Add the available test list control to the main form
*
* 	Parameters   : self - The worksheet modify object
* 	Return Value : N/a
*
*******************************************************************************}

	CREATE OBJECT WORKSHEET_LIST_CLASS , self . available

	CREATE OBJECT "STD_COLLECTION" , self . available . user_info

	self . available . user_info . add_index ( "id_text" )

	self . available . name = "Unassigned"
	self . available . vgl_library = GLOBAL ( "CURRENT_LIBRARY" )
	self . available . full_screen = FALSE
	self . available . row    = self . list . row
	self . available . column = self . width - LIST_WIDTH - 2
	self . available . width  = LIST_WIDTH
	self . available . height = self . height - 13
	self . available . selected_routine    = "worksheet_modifier_list_selected"
	self . available . right_mouse_routine = "worksheet_modifier_list_right_click"

	self . available . clear_columns ( )
	self . available . use_images = TRUE

	self . available . add_column ( "Sample Id" , 16 )
	self . available . add_column ( "Status"    , 4  )

	self . add_prompt ( self . available )

ENDROUTINE { worksheet_modify_action_add_list }


{******************************************************************************}

ROUTINE worksheet_modify_action_add_buttons ( self )

{ 	Setup the buttons on the modify worksheet form
*
* 	Parameters   : Self - Worksheet class
* 	Return Value : N/a
*
*******************************************************************************}

DECLARE button_width , exit_button

	button_width = 10

	self . add_frame ( "Worksheet Details" ,
	                   Main_Display_Column - 2 , 
	                   1 ,
	                   3 ,
	                   self . width - 4 )

	self . add_frame ( "Options" ,
	                   self . list . width + Main_Display_Column + 5 , 
	                   self . list . row ,
	                   self . list . height + 1 ,
	                   Button_Width + 2 )

	self . add_frame ( "Assigned Samples"   ,
	                   self . list . column - 2, 
	                   self . list . row    ,
	                   self . list . height + 1,
	                   self . list . width + 4 )

	self . add_frame ( "Available Samples"   ,
	                   self . width - LIST_WIDTH - 4, 
	                   self . available . row    ,
	                   self . available . height + 1,
	                   self . available . width + 4 )

	self . add_frame ( ""   ,
	                   self . width - LIST_WIDTH - 4, 
	                   self . height - 5    ,
	                   3 ,
	                   36 )


        PROMPT OBJECT self . up_button CLASS "STD_PROMPT_BUTTON"

        self . up_button . column = self . list . width + Main_Display_Column + 6
	self . up_button . row    = self . list . row + 1
       	self . up_button . width  = button_width
	self . up_button . height = 1
	self . up_button . mouse_click_routine = "mouse_click_shift_up_routine"
	self . up_button . caption = "Up"
	self . up_button . enabled = FALSE

        self . add_prompt ( self . up_button ) 


        PROMPT OBJECT self . down_button CLASS "STD_PROMPT_BUTTON"

        self . down_button . row    = self . up_button . row + 1
	self . down_button . column = self . up_button . column
       	self . down_button . width  = button_width
	self . down_button . height	= 1
	self . down_button . mouse_click_routine = "mouse_click_shift_down_routine"
	self . down_button . caption = "Down"
	self . down_button . enabled = FALSE

        self . add_prompt ( self . down_button ) 


        PROMPT OBJECT self . add_one_button CLASS "STD_PROMPT_BUTTON"

        self . add_one_button . row    = self . down_button . row + 2
	self . add_one_button . column = self . down_button . column
       	self . add_one_button . width  = button_width
	self . add_one_button . height	= 1
	self . add_one_button . mouse_click_routine = "mouse_click_add_one_routine"
	self . add_one_button . caption = "< Add "
	self . add_one_button . enabled = FALSE

        self . add_prompt ( self . add_one_button ) 


        PROMPT OBJECT self . add_all_button CLASS "STD_PROMPT_BUTTON"

        self . add_all_button . row    = self . add_one_button . row + 1
	self . add_all_button . column = self . add_one_button . column
       	self . add_all_button . width  = button_width
	self . add_all_button . height	= 1
	self . add_all_button . mouse_click_routine = "mouse_click_add_all_routine"
	self . add_all_button . caption = "<< Add"
	self . add_all_button . enabled = FALSE

        self . add_prompt ( self . add_all_button ) 


        PROMPT OBJECT self . remove_one_button CLASS "STD_PROMPT_BUTTON"

        self . remove_one_button . row    = self . add_all_button . row + 2
	self . remove_one_button . column = self . add_all_button . column
       	self . remove_one_button . width  = button_width
	self . remove_one_button . height	= 1
	self . remove_one_button . mouse_click_routine = "mouse_click_remove_one_routine"
	self . remove_one_button . caption = "Remove >"
	self . remove_one_button . enabled = FALSE

        self . add_prompt ( self . remove_one_button ) 


        PROMPT OBJECT self . remove_all_button CLASS "STD_PROMPT_BUTTON"

        self . remove_all_button . row    = self . remove_one_button . row + 1
	self . remove_all_button . column = self . remove_one_button . column
       	self . remove_all_button . width  = button_width
	self . remove_all_button . height	= 1
	self . remove_all_button . mouse_click_routine = "mouse_click_remove_all_routine"
	self . remove_all_button . caption = "Remove >>"
	self . remove_all_button . enabled = FALSE

        self . add_prompt ( self . remove_all_button ) 


        PROMPT OBJECT self . add_standard_button CLASS "STD_PROMPT_BUTTON"

	self . add_standard_button . row    = self . remove_all_button . row + 2
        self . add_standard_button . column = self . remove_all_button . column
       	self . add_standard_button . width  = button_width
	self . add_standard_button . height = 1
	self . add_standard_button . mouse_click_routine = "mouse_click_standard_routine"
	self . add_standard_button . caption = "< Standard"
	self . add_standard_button . enabled = FALSE

        self . add_prompt ( self . add_standard_button ) 


        PROMPT OBJECT self . save_button CLASS "STD_PROMPT_BUTTON"

	self . save_button . row    = self . add_standard_button . row + 2
        self . save_button . column = self . add_standard_button . column
       	self . save_button . width  = button_width
	self . save_button . height = 1
	self . save_button . mouse_click_routine = "mouse_click_save_routine"
	self . save_button . caption = "Save"
	self . save_button . enabled = TRUE

        self . add_prompt ( self . save_button ) 


        PROMPT OBJECT exit_button CLASS "STD_PROMPT_BUTTON"

        exit_button . row    = self . save_button . row + 2
	exit_button . column = self . up_button . column
       	exit_button . width  = button_width
	exit_button . height = 1
	exit_button . caption = "Exit"
	exit_button . send_lastkey = "EXIT"
	
        self . add_prompt ( exit_button ) 


ENDROUTINE { worksheet_modify_action_add_buttons }


{******************************************************************************}

ROUTINE worksheet_modify_action_read_current ( self           ,
                                               VALUE filename )

{ 	Read all the details from the worksheet file and store them in the 
*	appropriate variables and arrays
*
* 	Parameters   : Self - Worksheet class
* 	Return Value : N/a
*
*******************************************************************************}

DECLARE result_item , success , test_count , wks_test_num , wks_file ,
	valid_test , valid_samp

	{ Initialise the storage variables }

	ARRAY self . initial_entries ARRAYSIZE ( 0 )

	self . list . remove_all_items ( )

	wks_file = wks_directory :
		   TOLOWER ( STRIP ( filename ) ) : ".wsa"

	self . filename = wks_file	{ record filename for later }

	test_count = 0

	FILE OPEN wks_file, success

	IF success = EMPTY THEN

		FILE READ wks_file , self . type     , success
		FILE READ wks_file , self . analysis , success
		FILE READ wks_file , self . date     , success
		FILE READ wks_file , self . operator , success

		IF success = EMPTY THEN

			REPEAT

			FILE READ wks_file, wks_test_num , success

			IF ( wks_test_num <> EMPTY ) AND
			   ( wks_test_num <> " " ) THEN

				valid_test = SELECT test.sample
				             WHERE test_number = wks_test_num

				IF ( valid_test <> EMPTY ) THEN

					self . analysis_version = SELECT test.analysis_version

					valid_samp = SELECT sample . id_numeric
					             WHERE id_numeric = valid_test

					IF ( valid_samp <> EMPTY ) THEN

						test_count = test_count + 1

						CREATE OBJECT WORKSHEET_ITEM_CLASS , result_item

						result_item . sample       = valid_samp
						result_item . test         = wks_test_num
						result_item . id_text      = SELECT sample.id_text
						result_item . status       = SELECT test.status
						result_item . test_count   = SELECT test.test_count
						result_item . on_worksheet = TRUE

						IF ( SELECT sample . standard ) THEN
							result_item . standard = SELECT sample.product
							result_item . standard_version = SELECT sample.product_version

							self . update_standards ( result_item . standard         ,
							                          result_item . standard_version )
						ENDIF

						self . initial_entries [ test_count ] = result_item . test
						self . list . user_info . add ( result_item )
						self . list . user_info . reindexall ( )

					ENDIF

				ENDIF

			ENDIF

			UNTIL ( success <> EMPTY )

			FILE CLOSE wks_file,success

        		IF ( success <> EMPTY ) THEN
				FLASH_MESSAGE ( "   File Close Error   " , TRUE )
			ENDIF

			RETURN ( TRUE )

		ELSE

		IF ( success <> EMPTY ) THEN
			FLASH_MESSAGE ( "   File Read Error   " , TRUE )
		ENDIF

		RETURN ( FALSE )

	ENDIF

	ELSE

		FLASH_MESSAGE ( "    File Open Error      " , TRUE )
           
		RETURN ( FALSE )

	ENDIF

ENDROUTINE { worksheet_modify_action_read_current }


{******************************************************************************}

ROUTINE worksheet_modify_action_retrieve_available ( self                ,
                                                     VALUE id_for_search )

{ 	Retrieve all unassigned tests for a particular analysis
*
* 	Parameters   : Self - the worksheet modify class
* 	Return Value : Boolean - True if there are available tests
*
*******************************************************************************}

DECLARE test_index , test_object , test_id

	test_id = SELECT samp_test_view . test_number
	           WHERE samp_test_view . analysis           = id_for_search
	             AND samp_test_view . test_status        = "V"
	             AND samp_test_view . worksheet          = 0
{	             AND samp_test_view . standard           = "F" }

	self . available . remove_all_items ( )

	test_index = 0

	WHILE ( test_id <> EMPTY ) DO

		CREATE OBJECT WORKSHEET_ITEM_CLASS , test_object

		test_object . test         = SELECT samp_test_view . test_number
		test_object . sample       = SELECT samp_test_view . id_numeric
		test_object . id_text      = SELECT samp_test_view . id_text
		test_object . status       = "V"  { We only select samples of this status }
		test_object . test_count   = SELECT samp_test_view . test_count
		test_object . on_worksheet = FALSE

		self . available . user_info . add ( test_object )

		test_index = test_index + 1

		NEXT samp_test_view
		test_id = SELECT samp_test_view . test_number

	ENDWHILE

	RETURN ( test_index <> 0 )

ENDROUTINE { worksheet_modify_action_retrieve_available }


{******************************************************************************}

ROUTINE worksheet_modify_action_display_current ( self )

{ 	Define the worksheet modify class
*
* 	Parameters   : N/a
* 	Return Value : N/a
*
*******************************************************************************}

DECLARE loop_index, loop_max

	loop_max   = self . list . user_info . size ( )
	loop_index = 1

	WHILE ( loop_index <= loop_max ) DO

		self . show_details ( self . list ,
		                      loop_index  ,
		                      EMPTY       )

		loop_index = loop_index + 1

	ENDWHILE

	self . set_button_state ( self . save_button , TRUE )

ENDROUTINE { worksheet_modify_action_display_current }



{******************************************************************************}

ROUTINE worksheet_modify_action_display_available ( self )

{ 	Define the worksheet modify class
*
* 	Parameters   : N/a
* 	Return Value : N/a
*
*******************************************************************************}

DECLARE loop_index, loop_max

	loop_max   = self . available . user_info . size ( )
	loop_index = 1

	WHILE ( loop_index <= loop_max ) DO

		self . show_details ( self . available ,
		                      loop_index       ,
		                      EMPTY            )

		loop_index = loop_index + 1

	ENDWHILE

ENDROUTINE { worksheet_modify_action_display_available }


{******************************************************************************}

	ROUTINE worksheet_modify_action_display_headings ( self )

{ Display the worksheet heading information
*
* Parameters   : Self - the worksheet modify class,
*
* Return Value : N/a
*
*******************************************************************************}

	self . prompt_object_1 . set_text ( self . analysis )
	self . prompt_object_2 . set_text ( self . date     )
	self . prompt_object_3 . set_text ( self . operator )

ENDROUTINE { worksheet_modify_action_display_headings }


{******************************************************************************}

	ROUTINE worksheet_modify_action_show_details (       self             ,
	                                                     the_list         ,
	                                               VALUE collection_index ,
	                                               VALUE image            )

{ Show the Details of the Worksheet Item.
*
* Parameters   : Self     - the worksheet_modify class,
*                the_list - The appropriate list control
*                collection_index - The index of the item in the object collection
* Return Value : N/a
*
*******************************************************************************}

DECLARE sample_id , the_icon , item

	item = the_list . user_info . get_by_number ( collection_index )

	sample_id = STRIP ( item . id_text )   { There is only one test for a standard }

	IF ( item . standard = EMPTY ) THEN

		sample_id = sample_id : " / " : STRIP ( item . test_count )

	ENDIF

	IF ( image <> EMPTY ) THEN

		the_icon = image

	ELSEIF ( item . on_worksheet            ) AND
	       ( item . standard <> EMPTY       ) AND
	       ( the_list . name = "Unassigned" ) THEN

		the_icon = REMOVED_STD_ICON

	ELSEIF ( item . on_worksheet            ) AND
	       ( item . standard <> EMPTY       ) AND
	       ( the_list . name = "Assigned  " ) THEN

		the_icon = STANDARD_ICON

	ELSEIF ( item . on_worksheet            ) AND
	       ( the_list . name = "Unassigned" ) THEN

		the_icon = REMOVED_ICON

	ELSEIF ( item . on_worksheet = FALSE    ) AND
	       ( the_list . name = "Unassigned" ) THEN

		the_icon = UNASSIGNED_ICON

	ELSEIF ( the_list . name = "Assigned  " ) THEN

		the_icon = INSERT_ICON
	ELSE
		the_icon = NO_ICON
	ENDIF

	the_list . insert_item ( sample_id , the_icon )
	the_list . set_item    ( 2 , item . status    )

ENDROUTINE { worksheet_modify_action_show_details }


{******************************************************************************}

	ROUTINE worksheet_modify_action_set_button_states ( self              , 
	                                                    the_list          ,
                                                            VALUE row_num     )
{ 	
*
* 	Parameters   : self
*	               row_num
*	               detail_size
*
* 	Return Value : N/a
*
*******************************************************************************}

	IF ( the_list . name = "Assigned  " ) THEN

		self . set_button_state ( self . add_one_button , FALSE )
		self . set_button_state ( self . add_all_button , FALSE )

		IF ( the_list . user_info . size ( ) = 1 ) THEN
			self . set_button_state ( self . up_button , FALSE )
			self . set_button_state ( self . down_button , FALSE )
			self . set_button_state ( self . remove_one_button , FALSE )
			self . set_button_state ( self . remove_all_button , FALSE )
		ELSEIF ( row_num + 1 = 1 ) THEN				{ FIRST ITEM }
			self . set_button_state ( self . up_button , FALSE )
			self . set_button_state ( self . down_button , TRUE )
			self . set_button_state ( self . remove_one_button , TRUE )
			self . set_button_state ( self . remove_all_button , TRUE )
		ELSEIF ( row_num + 1 = the_list . user_info . size ( ) ) THEN		{ LAST ITEM }
			self . set_button_state ( self . up_button , TRUE )
			self . set_button_state ( self . down_button , FALSE )
			self . set_button_state ( self . remove_one_button , TRUE )
			self . set_button_state ( self . remove_all_button , TRUE )
		ELSEIF ( row_num + 1 > the_list . user_info . size ( ) ) THEN		{ OFF LIST }
			self . set_button_state ( self . up_button , FALSE )
			self . set_button_state ( self . down_button , FALSE )
			self . set_button_state ( self . remove_one_button , FALSE )
			self . set_button_state ( self . remove_all_button , FALSE )
		ELSE							{ IN LIST }
			self . set_button_state ( self . up_button , TRUE )
			self . set_button_state ( self . down_button , TRUE )
			self . set_button_state ( self . remove_one_button , TRUE )
			self . set_button_state ( self . remove_all_button , TRUE )
		ENDIF

	ELSE

		self . set_button_state ( self . up_button , FALSE )
		self . set_button_state ( self . down_button , FALSE )
		self . set_button_state ( self . remove_one_button , FALSE )
		self . set_button_state ( self . remove_all_button , FALSE )

		IF ( the_list . user_info . size ( ) = 0 ) THEN
			self . set_button_state ( self . add_one_button , FALSE )
			self . set_button_state ( self . add_all_button , FALSE )
		ELSE
			self . set_button_state ( self . add_one_button , TRUE )
			self . set_button_state ( self . add_all_button , TRUE )
		ENDIF

	ENDIF

ENDROUTINE { worksheet_modify_astion_set_button_states }


{******************************************************************************}

	ROUTINE worksheet_modify_action_set_button_state ( self           ,
	                                                   the_button     ,
	                                                   VALUE state    )

{ Sets the state of the appropriate button
*
* Parameters   : Self - the worksheet modify class,
*                the_button - a particular button on the form
*                state - TRUE if enabled
* Return Value : N/a
*
*******************************************************************************}

	the_button . set_enabled ( state )
	the_button . repaste ( )


ENDROUTINE { worksheet_modify_action_set_button_state }


{******************************************************************************}

	ROUTINE worksheet_modify_action_copy_item (       self      ,
	                                                  from_list ,
	                                                  to_list   ,
	                                            VALUE row_index )

{ Display the worksheet heading information
*
* Parameters   : Self - the worksheet modify class,
*                array_index
* Return Value : N/a
*
*******************************************************************************}

DECLARE list_item, new_index, standard_ver, usage

	list_item = from_list . user_info . get_by_number ( row_index + 1 )

	from_list . user_info . remove_by_number ( row_index + 1 )
	from_list . remove_item ( row_index )

	IF  ( list_item . standard <> EMPTY ) AND
	NOT ( list_item . on_worksheet      ) THEN

		standard_ver = list_item . standard :
		               list_item . standard_version

		self . stds_collection . set_by_index ( "standard_version" ,
		                                         standard_ver      )

		usage = self . stds_collection . current . decrement ( )

		IF  ( self . standard . value = list_item . standard         ) 
		AND ( self . version  . value = list_item . standard_version ) THEN

			self . usage . set_text ( usage )
			self . usage . value    = usage

		ENDIF
	ELSE
		to_list   . user_info . add ( list_item )
		new_index = to_list . user_info . size ( )

		self . show_details ( to_list   ,
	        	              new_index ,
	                	      EMPTY     )

	ENDIF

	self . update_state ( from_list ,
	                      row_index )

ENDROUTINE { worksheet_modify_action_remove_item }


{******************************************************************************}

	ROUTINE worksheet_modify_action_cut (       self    ,
	                                            a_list  ,
	                                      VALUE row_num )

{ Display the worksheet heading information
*
* Parameters   : Self - the worksheet modify class,
*                array_index
* Return Value : N/a
*
*******************************************************************************}

DECLARE cut_item, row_index, cut_item_indexes, cut_array_index, temp

	ARRAY cut_item_indexes ARRAYSIZE ( 0 )
	cut_array_index = 1

	row_index = row_num

	CREATE OBJECT "STD_COLLECTION" , self . cut_storage

	self . cut_storage . add_index ( "id_text" )

	WHILE ( row_index <> EMPTY ) DO

		cut_item = a_list . user_info . get_by_number ( row_index + 1 )
		self . cut_storage . add ( cut_item )
		cut_item_indexes [ cut_array_index ] = row_index

		row_index = a_list . get_next_selected ( temp )
		cut_array_index = cut_array_index + 1

	ENDWHILE

	cut_array_index = cut_array_index - 1

	WHILE ( cut_array_index <> 0 ) DO

		a_list . remove_item ( cut_item_indexes [ cut_array_index ] )
		a_list . user_info . remove_by_number ( cut_item_indexes [ cut_array_index ] + 1 )
		cut_array_index = cut_array_index - 1

	ENDWHILE

ENDROUTINE { worksheet_modify_action_cut }


{******************************************************************************}

	ROUTINE worksheet_modify_action_paste (       self    ,
	                                              a_list  ,
	                                        VALUE row_num )

{ Display the worksheet heading information
*
* Parameters   : Self - the worksheet modify class,
*                array_index
* Return Value : N/a
*
*******************************************************************************}

DECLARE cut_index , loop_index , cut_item , items_in_storage , insert_point, item_total

	insert_point = row_num + 1
	item_total   = a_list . user_info . size ( )

	IF ( insert_point > item_total ) THEN
		insert_point = item_total
	ENDIF

	a_list . remove_all_items ( )	{ Rebuild the list from scratch }

	loop_index = 1

	WHILE ( loop_index < ( insert_point + 1 ) ) DO

		self . show_details ( a_list , loop_index , EMPTY )
		loop_index = loop_index + 1

	ENDWHILE

	a_list . current_item = loop_index
	items_in_storage = self . cut_storage . size ( )

	{ Here is where we insert the cut items }

	cut_index  = 1

	WHILE ( cut_index <= items_in_storage ) DO

		cut_item = self . cut_storage . get_by_number ( cut_index )
		a_list . user_info . insert ( cut_item , loop_index )
		self . show_details ( a_list , loop_index , EMPTY )

		a_list . set_item_state ( loop_index - 1     ,
	        	                       LIST_ITEM_SELECTED ,
		                               LIST_ITEM_SELECTED )

		loop_index = loop_index + 1
		cut_index  = cut_index + 1

	ENDWHILE

	{ There may well be some more of the original items to display }

	item_total   = a_list . user_info . size ( )

	WHILE ( loop_index <= item_total ) DO

		self . show_details ( a_list , loop_index , EMPTY )
		loop_index = loop_index + 1

	ENDWHILE

	self . cut_storage = EMPTY	{ reset the collection }

ENDROUTINE { worksheet_modify_action_paste }


ROUTINE worksheet_modify_action_display_popup (       self    ,
                                                      a_list  ,
                                                VALUE row_num )

{ Popup menu for list options
*
* 	Parameters   : Self - the list object object
* 	Return Value : N/a
*
*******************************************************************************}

	DECLARE menu , result
	ARRAY menu

	IF ( a_list . name = "Assigned  " ) THEN

		IF ( self . cut_storage = EMPTY ) THEN

			menu [ 1 ] = "  Cut     "
			menu [ 2 ] = "  Remove  "
			menu [ 3 ] = "  Cancel  "

		ELSE

			menu [ 1 ] = "  Paste   "
			menu [ 2 ] = "  Remove  "
			menu [ 3 ] = "  Cancel  "

		ENDIF

	ELSE
		IF ( self . cut_storage = EMPTY )

			menu [ 1 ] = "  Cut     "
			menu [ 2 ] = "  Insert  "
			menu [ 3 ] = "  Cancel  "

		ELSE

			menu [ 2 ] = "  Cancel  "

		ENDIF

	ENDIF


	result = client_do_popup_menu ( menu , 0 , 0 , 0 )

	IF ( result = "  Cut     " ) THEN

		self . cut ( a_list , row_num )

	ELSEIF ( result = "  Paste   " ) THEN

		self . paste ( a_list , row_num )

	ELSEIF ( result = "  Remove  " ) THEN

		mouse_click_remove_one_routine ( self . remove_one_button )

	ELSEIF ( result = "  Insert  " ) 

		mouse_click_add_one_routine ( self . add_one_button )

	ENDIF

ENDROUTINE { worksheet_modify_action_show_popup }


{******************************************************************************}

ROUTINE worksheet_modify_action_save_worksheet ( self )

{ Save the worksheet details
*
* Parameters   : Self - the worksheet modify class,
* Return Value : TRUE if saved OK
*
*******************************************************************************}

DECLARE success , wks_filename , wks_copy, saved

	self . link_number = SELECT worksheet . link_number
	                      WHERE identity = self . worksheet . value

	wks_copy = wks_directory : global ( "PROCESS_ID" ) : 
	           self . worksheet . value : ".bak"

	wks_filename = self . filename

	FILE COPY wks_filename , wks_copy , success

	IF ( success = EMPTY ) THEN

		FILE CREATE wks_filename , success

		IF ( success = empty ) THEN
		
			FILE WRITE wks_filename, "$ANALYSIS",success
			FILE WRITE wks_filename, self . analysis , success
			FILE WRITE wks_filename, LEFTSTRING(DATE(NOW),11) , success
			FILE WRITE wks_filename, self . operator , success

			self . change_worksheet ( )
			saved = self . update_tests ( )

			FILE CLOSE wks_filename , success

			IF ( success <> EMPTY ) OR NOT ( saved ) THEN

				FILE DELETE wks_filename , success
				FILE COPY wks_copy , wks_filename , success				

				RETURN ( False )
			ENDIF

			RETURN ( true )

		ELSE

			FLASH_MESSAGE ( "Worksheet file creation error " , TRUE )
			RETURN ( false )

		ENDIF
	ELSE

		FLASH_MESSAGE ( "Worksheet backup operation failed " , TRUE )
		RETURN ( false )

	ENDIF


ENDROUTINE  { worksheet_modify_action_save_worksheet }


{******************************************************************************}

	ROUTINE worksheet_modify_action_change_worksheet ( self )

{ Change the DATE generated and OPERATOR in the worksheet table
*
* Parameters   : Self - the worksheet modify class,
* Return Value : N/a
*
*******************************************************************************}

	DECLARE worksheet_rec, ret_val

	ret_val = FALSE

	worksheet_rec = SELECT worksheet . identity FOR UPDATE
	                 WHERE identity = self . worksheet . value

	IF  ( worksheet_rec <> EMPTY  )
	AND ( worksheet_rec <> LOCKED ) THEN

		ASSIGN worksheet . generator_operator = OPERATOR
		ASSIGN worksheet . date_generated     = NOW
		ASSIGN worksheet . status             = "V"
		ret_val = TRUE

	ENDIF

	RETURN ( ret_val )

ENDROUTINE  { worksheet_modify_action_change_worksheet }


{******************************************************************************}

	ROUTINE worksheet_modify_action_has_changed ( self )

{ Calculates whether the worksheet has changed 
*
* Parameters   : Self - the worksheet modify class,
* Return Value : TRUE if it has changed
*
*******************************************************************************}

	DECLARE changed, list

	changed = FALSE

	list = self . list . user_info 

	list . set_first ( )

	WHILE ( list . current_position <> 0               ) AND
	      ( list . current_position <= list . size ( ) ) DO

		IF ( self .
		     initial_entries [ list . current_position ] = EMPTY ) THEN
			changed = TRUE
		ELSEIF ( self . initial_entries [ list . current_position ] <>
			 list . current . test                                ) THEN
			changed = TRUE
		ENDIF

		list . set_next ( )

	ENDWHILE

	IF ( changed = FALSE ) AND
	   ( self . initial_entries [ list . size ( ) ] = EMPTY ) AND
	   ( list . current_position = 0                        ) THEN

		RETURN ( FALSE )
	ELSE
		RETURN ( TRUE )
	ENDIF

ENDROUTINE { worksheet_modify_action_has_changed }


{******************************************************************************}

	ROUTINE worksheet_modify_action_construct_standard ( self )

{ Construct the standard identity to go in the sample . id_text field 
*
* Parameters   : Self - the worksheet modify class,
* Return Value : An identity string
*
*******************************************************************************}

	DECLARE sample_id_string

	sample_id_string = "STD-" : STRIP ( self . stds_collection . current . standard    ) : 
	                   "_"    : STRIP ( self . stds_collection . current . version     ) 

	PAD ( sample_id_string , " " , 30 )

	RETURN ( sample_id_string )

ENDROUTINE { worksheet_modify_action_construct_standard }



{******************************* MOUSE CLICK ROUTINES ************************}

{******************************************************************************}

ROUTINE worksheet_modifier_list_selected ( self )

{ 	
*
* 	Parameters   : self
* 	Return Value : N/a
*
*******************************************************************************}

DECLARE row_num , list_total

	row_num = self . last_hit_row - 1

	IF ( row_num <> EMPTY ) THEN

		self . parent_prompt . set_button_states ( self    ,
		                                           row_num )

	ELSE
		list_total = self . user_info . size ( )

		IF ( list_total > 0 ) THEN

			self . set_item_state ( list_total - 1,
       				                LIST_ITEM_SELECTED  ,
               			    	        LIST_ITEM_SELECTED  )

			self . current_item = list_total - 1

		ENDIF

		self . parent_prompt . set_button_states ( self ,
		                                           row_num )

	ENDIF

ENDROUTINE


{******************************************************************************}

	ROUTINE worksheet_modifier_list_right_click ( self )

{ Right click routine for the list control
*
* 	Parameters   : Self - the list object object
* 	Return Value : N/a
*
*******************************************************************************}

	DECLARE temp , row_num

	row_num = self . get_first_selected ( temp )

	IF row_num <> EMPTY THEN

		self . parent_prompt . display_popup ( self , row_num )

	ENDIF

ENDROUTINE { worksheet_modifier_list_right_click }


{******************************************************************************}

	ROUTINE mouse_click_shift_up_routine ( self )

{ Change the ordering of the worksheet items. Will shift the selected item up
*
* 	Parameters   : Self - a button object
* 	Return Value : N/a
*
*******************************************************************************}

	DECLARE row_num , temp , wks

	wks = self . parent_prompt
	row_num = wks . list . get_first_selected ( temp )

	wks . cut ( wks . list , row_num )
	wks . paste ( wks . list , row_num - 2 )

ENDROUTINE { mouse_click_shift_up_routine }


{******************************************************************************}

	ROUTINE mouse_click_shift_down_routine ( self )

{ Change the ordering of the worksheet items. Will shift the selected item down
*
* 	Parameters   : Self - a button object
* 	Return Value : N/a
*
*******************************************************************************}

	DECLARE row_num , temp , wks

	wks = self . parent_prompt
	row_num = wks . list . get_first_selected ( temp )

	wks . cut ( wks . list , row_num )
	wks . paste ( wks . list , row_num )

ENDROUTINE { mouse_click_shift_down_routine }


{******************************************************************************}

	ROUTINE mouse_click_add_one_routine ( self )

{ Change the ordering of the worksheet items. Will shift the selected item up
*
* 	Parameters   : Self - a button object
* 	Return Value : N/a
*
*******************************************************************************}

	DECLARE row_num , temp , wks

	wks = self . parent_prompt

	row_num = wks . available . get_first_selected ( temp )

	IF ( row_num <> EMPTY ) THEN

		wks . cut   ( wks . available , row_num ) 
		wks . paste ( wks . list                            ,
		              wks . list . user_info . size ( ) - 1 ) 

		wks . set_button_states ( wks . available , row_num - 1 )

	ENDIF

ENDROUTINE { mouse_click_add_one_routine }


{******************************************************************************}

	ROUTINE mouse_click_add_all_routine ( self )

{ Change the ordering of the worksheet items. Will shift the selected item up
*
* 	Parameters   : Self - a button object
* 	Return Value : N/a
*
*******************************************************************************}

	DECLARE loop_counter , wks

	wks = self . parent_prompt

	loop_counter = wks . available . user_info . size ( ) - 1

	WHILE ( loop_counter > -1 ) DO 

		wks . copy_item ( wks . available , wks . list , loop_counter )
		loop_counter = loop_counter - 1

	ENDWHILE

	wks . set_button_states ( wks . available , 0 )

ENDROUTINE { mouse_click_add_all_routine }


{******************************************************************************}

	ROUTINE mouse_click_remove_one_routine ( self )

{ Change the ordering of the worksheet items. Will shift the selected item up
*
* 	Parameters   : Self - a button object
* 	Return Value : N/a
*
*******************************************************************************}

	DECLARE row_num , temp , wks

	wks = self . parent_prompt
	row_num = wks . list . get_first_selected ( temp )

	IF ( row_num <> EMPTY ) THEN

		wks . cut   ( wks . list , row_num ) 
		wks . paste ( wks . available                            ,
		              wks . available . user_info . size ( ) - 1 ) 

		wks . set_button_states ( wks . list , row_num - 1 )

	ENDIF

ENDROUTINE { mouse_click_remove_one_routine }


{******************************************************************************}

	ROUTINE mouse_click_remove_all_routine ( self )

{ Change the ordering of the worksheet items. Will shift the selected item up
*
* 	Parameters   : Self - a button object
* 	Return Value : N/a
*
*******************************************************************************}

	DECLARE wks , loop_counter

	wks = self . parent_prompt

	loop_counter = wks . list . user_info . size ( ) - 1

	WHILE ( loop_counter > 0 )

		wks . copy_item ( wks . list , wks . available , loop_counter )
		loop_counter = loop_counter - 1

	ENDWHILE

	wks . set_button_states ( wks . list , 0 )

ENDROUTINE { mouse_click_remove_all_routine }



{******************************************************************************}

	ROUTINE mouse_click_save_routine ( self )

{ Save worksheet changes
*
* 	Parameters   : Self - a button object
* 	Return Value : N/a
*
*******************************************************************************}

	DECLARE wks 

	wks = self . parent_prompt

	IF wks . has_changed ( ) THEN

		IF wks . save_worksheet ( ) THEN

			flash_message ( "Worksheet " : 
			                 STRIP ( wks . worksheet . value ) :
		        	        " saved OK " , TRUE )

			EXIT
		ELSE
			flash_message ( "Worksheet not saved" , TRUE )
		ENDIF
	ELSE
		FLASH_MESSAGE ( " Nothing to save , worksheet is unchanged " , TRUE )
	ENDIF

ENDROUTINE { mouse_click_save_routine }


{******************************************************************************}

	ROUTINE mouse_click_standard_routine ( self )

{ Adds a standard to the worksheet
*
* Parameters   : Self - the add_standard button
* Return Value : N/a
*
*******************************************************************************}

	DECLARE wks , sample_id_text, new_object, usage

	wks = self . parent_prompt

	IF ( wks . can_add_standard ( ) ) THEN

		sample_id_text = wks . construct_standard ( )

		CREATE OBJECT WORKSHEET_ITEM_CLASS , new_object

		new_object . id_text          = sample_id_text
		new_object . status           = "V"
		new_object . standard         = wks . stds_collection . current . standard
		new_object . standard_version = wks . stds_collection . current . version

		wks . list . user_info . add ( new_object )
		wks . list . user_info . reindexall ( )

		usage = wks . stds_collection . current . increment ( )
		wks . usage . set_text ( usage )

		wks . show_details ( wks . list                        ,
		                     wks . list . user_info . size ( ) ,
		                     STANDARD_ICON                     )

	ENDIF

ENDROUTINE


{******************************************************************************}

	ROUTINE standard_validation ( self )

{ Adds a standard to the worksheet
*
* Parameters   : Self - the standard browse prompt
* Return Value : True if vaild standard
*
*******************************************************************************}

	DECLARE return_status

	return_status = TRUE

	IF ( self . get_lastkey() <> "EXIT" ) THEN
		IF ( self . value = "" ) THEN
			return_status = FALSE
		ELSE
			array_select_add ( self . parent_prompt . version_array , 
	        	                   ARRAY_SELECT_EQ , 
			                   "IDENTITY" ,
			                   self . value )

			self . parent_prompt . version . value = ""
		ENDIF
	ENDIF

	RETURN ( return_status )	

ENDROUTINE


{******************************************************************************}

	ROUTINE version_id_leave_prompt ( self )

{ Update the usage count and make the standard button enabled if valid
*
* Parameters   : Self - the version browse prompt
* Return Value : N/a
*
*******************************************************************************}

	DECLARE wks

	wks = self . parent_prompt 

	IF ( self . get_lastkey () <> "EXIT" ) AND ( self . value <> "" ) THEN

		wks . update_standards ( wks . standard . value , self . value )
	
		IF ( wks . use_standard ( wks . standard . value , self . value ) ) THEN

			wks . usage . set_text ( wks . get_std_usage ( ) )
			wks . set_button_state ( wks . add_standard_button , TRUE )

		ELSE
			FLASH_MESSAGE ( "Error occured whilst locating standard details" , TRUE )
			wks . standard . set_text ( "" )
			wks . version  . set_text ( "" )
			wks . usage    . set_text ( "" )
			wks . set_button_state ( wks . add_standard_button , FALSE )
		ENDIF
			

	ENDIF

ENDROUTINE { version_id_leave_prompt }


{******************************************************************************}

	ROUTINE worksheet_list_action_get_item_reference ( self             ,
	                                                   VALUE list_index )

{
*
*
*******************************************************************************}

	IF ( self . name = "Assigned  " ) THEN

		RETURN ( self . parent_prompt . details [ list_index + 1 ] )

	ELSE

		RETURN ( self . parent_prompt . available_tests [ list_index + 1 ] )

	ENDIF

ENDROUTINE


{******************************************************************************}

	ROUTINE worksheet_modify_action_update_standards (       self     ,
	                                                   VALUE standard ,
	                                                   VALUE version  )

{
*
*
*******************************************************************************}

DECLARE standards_object, usage_count, template_id

	standards_object = self            .
	                   stds_collection .
	                   get_by_index    ( "standard_version" , standard : version )

	IF ( standards_object = EMPTY ) THEN

		START READ TRANSACTION "NEW_STANDARD"

		usage_count = SELECT standard_versions . usage_count
		               WHERE standard_versions . identity = standard
	        	         AND standard_versions . version  = version

		template_id = SELECT standard . template_id
		               WHERE identity = standard

		CREATE OBJECT WORKSHEET_STANDARDS_CLASS , standards_object

		standards_object . standard_version  = standard : version
		standards_object . standard          = standard
		standards_object . version           = version
		standards_object . usage_at_start    = usage_count
		standards_object . usage_count       = usage_count
		standards_object . maximum_usage     = SELECT standard_versions . maximum_usage
		standards_object . samp_tmpl         = template_id
		standards_object . made_today        = 0
		standards_object . type              = SELECT standard . standard_type
		standards_object . name              = SELECT standard . standard_name
		standards_object . description       = SELECT standard . description

		IF ( template_id <> EMPTY ) THEN

			standards_object . syntax_id = SELECT samp_tmpl_header . syntax_id
			                                WHERE identity = template_id

		ELSE
			standards_object . syntax_id = EMPTY
		ENDIF
		
		self . stds_collection . add ( standards_object )
		self . stds_collection . reindexall ( )

	ENDIF

ENDROUTINE


{******************************************************************************}

	ROUTINE worksheet_modify_action_can_add_standard ( self )

{
*
*
*******************************************************************************}

	IF ( self . standard . text <> "" ) AND
	   ( self . version  . text <> "" ) THEN	{ Ensure that a standard has been chosen }

		IF ( self . stds_collection . current . maximum_usage <> 0 ) AND
		   ( self . stds_collection . current . usage_count >= 
		     self . stds_collection . current . maximum_usage      ) THEN

			FLASH_MESSAGE ( "WKS_EXPIRE_STAN_MESS" , TRUE )

			self . set_button_state ( self . add_standard_button , FALSE )
			RETURN ( FALSE )
		ELSE
			RETURN ( TRUE )
		ENDIF
	ELSE

		FLASH_MESSAGE ( "A standard must be chosen" , TRUE )
		self . set_button_state ( self . add_standard_button , FALSE )

	ENDIF

ENDROUTINE { worksheet_modify_action_can_add_standard }


{******************************************************************************}

	ROUTINE worksheet_modify_action_use_standard (       self     ,
	                                               VALUE standard ,
	                                               VALUE version  )

{
*
*
*******************************************************************************}

	self . standard_index = self            .
	                        stds_collection .
	                        find_index      ( "standard_version" , standard : version )

	self . stds_collection . set_by_number ( self . standard_index )

	IF ( self . standard_index = EMPTY ) THEN

		RETURN ( FALSE )
	ELSE
		RETURN ( TRUE )
	ENDIF

ENDROUTINE


{******************************************************************************}

	ROUTINE worksheet_modify_action_get_std_usage ( self )

{
*
*
*******************************************************************************}

	RETURN ( self . stds_collection . current . usage_at_start +
	         self . stds_collection . current . made_today       )

ENDROUTINE


{******************************************************************************}

	ROUTINE worksheet_modify_action_extract_usage ( self                 ,
	                                                VALUE sample_id_text )

{
*
*
*******************************************************************************}

DECLARE full_stop_index, id_length, return_string

	id_length       = LENGTH ( sample_id_text )
	full_stop_index = INDEX ( sample_id_text , "." )

	return_string = RIGHTSTRING ( STRIP ( sample_id_text ) , id_length - full_stop_index )
	RETURN ( JUSTIFY ( PAD ( return_string , " " , 10 ) , "RIGHT" ) )

ENDROUTINE


{******************************************************************************}

	ROUTINE display_string ( VALUE a_string )

{
*
*
*******************************************************************************}

	IF ( a_string <> EMPTY ) THEN

		RETURN ( a_string )

	ELSE

		RETURN ( " " )

	ENDIF

ENDROUTINE


{******************************************************************************}

	ROUTINE worksheet_modify_action_update_state (       self      ,
	                                                     the_list  ,
	                                               VALUE row_index )

{
*
*******************************************************************************}

DECLARE selected_item, list_size

	selected_item = row_index
	list_size     = the_list . user_info . size ( )

	IF ( ( selected_item + 1 ) > list_size ) THEN

		selected_item = selected_item - 1

	ELSEIF ( list_size = 0 ) THEN

		selected_item = -1

	ENDIF

	IF ( selected_item <> -1 ) THEN

		the_list . set_item_state ( selected_item ,
		                            LIST_ITEM_SELECTED ,
		                            LIST_ITEM_SELECTED )

	ENDIF

	the_list . current_item = selected_item

ENDROUTINE


{******************************************************************************}

	ROUTINE worksheet_modify_action_update_tests ( self )

{
*
*******************************************************************************}

DECLARE saved , wks_collection , size_of_collection , create_ok ,
	error_occured , samp_rec, test_count, remove_collection, remove_ok,
	success

	error_occured = FALSE
	saved         = FALSE

	START WRITE TRANSACTION "Worksheet Save"

	wks_collection    = self . list . user_info
	remove_collection = self . available . user_info

	size_of_collection = wks_collection . size ()

	test_count  = 1

	{************************************}
	{ Create standard samples and	     }
	{ update the sample tests            }
	{************************************}

	WHILE ( test_count <= size_of_collection )
	AND   ( NOT error_occured		 ) DO

		samp_rec = wks_collection . get_by_number ( test_count )

		create_ok = samp_rec . assign ( self . link_number ,
			                        test_count         ,
		                                self               )

		IF NOT ( create_ok ) THEN
			error_occured = TRUE
		ELSE
			FILE WRITE self . filename, samp_rec . test, success
		ENDIF

		test_count = test_count + 1

	ENDWHILE

	IF error_occured THEN

		ROLLBACK

		saved = FALSE

	ELSE

		size_of_collection = remove_collection . size ()

		{ Remove any samples previously on the worksheet }

		test_count = 1

		WHILE ( test_count <= size_of_collection )
		AND   ( NOT error_occured		 ) DO

			samp_rec = remove_collection . get_by_number ( test_count )

			remove_ok = samp_rec . remove ( )

			IF NOT ( remove_ok ) THEN
				error_occured = TRUE
			ENDIF

			test_count = test_count + 1

		ENDWHILE

		saved = TRUE

{		self . update_standards ( ) }

		COMMIT

	ENDIF

	RETURN ( saved AND NOT error_occured )

ENDROUTINE


{******************************************************************************}

	ROUTINE create_sample_object ( stds_obj ,
				       samp_obj )

{
*
*******************************************************************************}

	IF stds_obj . samp_tmpl = " " THEN
		stds_obj . samp_tmpl = "NOINPUT"
	ENDIF

	CREATE OBJECT SAMP_JOB_SAMPLE_LOGIN_CLASS , samp_obj

	samp_obj . repeat_count            = 1
	samp_obj . template_id             = stds_obj . samp_tmpl
	samp_obj . job_name                = ""
	samp_obj . use_template_syntax     = TRUE
	samp_obj . user_add_tests	   = TRUE
	samp_obj . user_status		   = "V"
	samp_obj . use_current_transaction = TRUE
	samp_obj . syntax		   = stds_obj . syntax_id

ENDROUTINE { create_sample_object }


{******************************************************************************}

	ROUTINE worksheet_modify_action_add_anal_to_test_list (       self      ,
	                                                              test_list ,
	                                                        VALUE pos       )

{
*
*******************************************************************************}

DECLARE position , in_test_schedule , mode

	position = test_editor_get_size ( test_list ) + 1

	test_editor_pre_insert ( position  ,
				 test_list )

	ASSIGN test . test_schedule	 = ""
	ASSIGN test . analysis		 = self . analysis
	ASSIGN test . analysis_version   = self . analysis_version
	ASSIGN test . worksheet          = self . link_number
	ASSIGN test . worksheet_position = pos

	test_editor_set_repeat ( 1 , test_list )
	test_editor_set_assign ( TRUE , test_list )

	in_test_schedule = FALSE
	mode             = "ASSIGN_TEST"      { should use the global const }

	CALL_ROUTINE "test_add_analysis"
		USING test_list          ,
			in_test_schedule ,
			position         ,
			mode
		IN LIBRARY "$SAMP_USER"

ENDROUTINE   { worksheet_modify_action_add_anal_to_test_list }


{******************************************************************************}

	ROUTINE update_sample_fields ( stds_rec ,
				       samp_obj )

{
*	Populates the sample object with the field data for the current sample.
*
*******************************************************************************}

	lib_utils_set_field_value ( samp_obj . field_values     ,
				    "job_name"                  ,
				    stds_rec . standard_version )

	lib_utils_set_field_value ( samp_obj . field_values ,
				    "product_name"          ,
				    stds_rec . standard     )

	lib_utils_set_field_value ( samp_obj . field_values ,
				    "product_version"       ,
				    stds_rec . version      )

	lib_utils_set_field_value ( samp_obj . field_values ,
				    "on_wks"                ,
				    TRUE                    )

	lib_utils_set_field_value ( samp_obj . field_values ,
				    "standard"              ,
				    TRUE                    )

ENDROUTINE { update_sample_fields }


{******************************************************************************}

	ROUTINE update_sample_fields_post_login ( samp_rec ,
						  stds_rec ,
 						  samp_obj )

{
*	Populates the sample object with the field data for the current sample.
*
*******************************************************************************}

DECLARE id_text, samp_id

	samp_id = SELECT sample . id_numeric FOR UPDATE
	           WHERE id_numeric = samp_rec . sample

	IF ( samp_id <> EMPTY ) THEN

		IF BLANK ( SELECT sample . sample_type ) THEN

			ASSIGN sample . sample_type = stds_rec . type
		ENDIF

		IF BLANK ( SELECT sample . sample_name ) THEN

			ASSIGN sample . sample_name = stds_rec . name
		ENDIF

		IF BLANK ( SELECT sample . description ) THEN
	
			ASSIGN sample . description = stds_rec . description
		ENDIF

		IF    ( stds_rec . syntax_id = EMPTY ) OR
		BLANK ( stds_rec . syntax_id         ) THEN

			id_text = get_standard_syntax ( samp_rec . standard         ,
			                                samp_rec . standard_version ,
		        	                        stds_rec . inc_usage ( )    ,
		                	                stds_rec . type             )

			samp_rec . id_text = id_text

			ASSIGN sample . id_text = samp_rec . id_text

		ENDIF

		UPDATE sample
	ENDIF

ENDROUTINE     { update_sample_fields_post_login }



{****************************************************************************}

	ROUTINE worksheet_item_action_remove ( self )

{
*****************************************************************************}

	IF ( self . standard = EMPTY ) THEN

		RETURN ( self . update_test ( 0 , 0 ) )

	ELSE

		RETURN ( self . remove_standard ( )   )

	ENDIF

ENDROUTINE


{****************************************************************************}

	ROUTINE worksheet_item_action_assign (       self       ,
	                                       VALUE unique_no  ,
	                                       VALUE unique_pos ,
	                                             main       )
{
*****************************************************************************}

	IF ( self . standard = EMPTY ) OR ( self . on_worksheet ) THEN

		RETURN ( self . update_test ( unique_no , unique_pos     ) )

	ELSE

		RETURN ( self . assign_standard ( unique_no , unique_pos , main ) )

	ENDIF

ENDROUTINE

{****************************************************************************}

	ROUTINE worksheet_item_action_update_test (       self       ,
	                                            VALUE unique_no  ,
	                                            VALUE unique_pos )

{
*****************************************************************************}

DECLARE test_rec

	test_rec = SELECT test . test_number FOR UPDATE
			WHERE test_number = self . test

	IF test_rec <> EMPTY THEN

		ASSIGN test . worksheet          = PACKED_DECIMAL ( unique_no  )
		ASSIGN test . worksheet_position = PACKED_DECIMAL ( unique_pos )
		UPDATE test

	ENDIF


	RETURN ( test_rec <> EMPTY )

ENDROUTINE


{****************************************************************************}

	ROUTINE worksheet_item_action_remove_standard ( self )

{
*****************************************************************************}

DECLARE test_rec, samp_rec

	test_rec = SELECT test . test_number FOR UPDATE
			WHERE sample = self . sample

	WHILE ( test_rec <> EMPTY ) DO

		DELETE test
		NEXT test

		test_rec = SELECT test . test_number

	ENDWHILE

	samp_rec = SELECT sample . id_numeric FOR UPDATE
			WHERE id_numeric = self . sample

	IF ( samp_rec <> EMPTY ) THEN

		DELETE sample

	ENDIF

	RETURN ( samp_rec <> EMPTY )
	
ENDROUTINE
	
{****************************************************************************}

	ROUTINE worksheet_item_action_assign_standard (       self       ,
	                                                VALUE unique_no  ,
	                                                VALUE unique_pos ,
	                                                      main       )

{
*
*****************************************************************************}

DECLARE index_val , stds_rec , test_list, samp_login_obj, ret_val

	ret_val       = FALSE

	index_val = self . standard : self . standard_version
	stds_rec  = main . stds_collection . get_by_index ( "standard_version" ,
							    index_val          )

	create_sample_object ( stds_rec , samp_login_obj )

	test_editor_initialise ( ""                              ,
				 FALSE                           ,
				 TRUE                            ,
				 TRUE                            ,
				 GLOBAL ( "CURRENT_LIBRARY" )    ,
	                         samp_login_obj . user_test_list )

	test_list = samp_login_obj . user_test_list

	main . add_anal_to_test_list ( test_list , unique_pos )

	update_sample_fields ( stds_rec , samp_login_obj )

	self . sample = samp_login_obj . login_a_sample ( )
		
	IF ( self . sample <> ERROR ) THEN

		update_sample_fields_post_login ( self           ,
						  stds_rec       ,
						  samp_login_obj )

		self . test = SELECT test . test_number
		               WHERE sample = self . sample 

		ret_val = TRUE
	ENDIF

	RETURN ( ret_val )

ENDROUTINE


{******************************************************************************}

	ROUTINE worksheet_standards_action_increment ( self )

{
*
*
*******************************************************************************}

	self . made_today  = self . made_today  + 1

	RETURN ( self . usage_at_start + self . made_today )

ENDROUTINE


{******************************************************************************}

	ROUTINE worksheet_standards_action_decrement ( self )

{
*
*
*******************************************************************************}

	IF NOT ( self . made_today = 0 ) THEN

		self . made_today  = self . made_today  - 1

	ENDIF

	RETURN ( self . usage_at_start + self . made_today )

ENDROUTINE


{******************************************************************************}

	ROUTINE worksheet_standards_action_inc_usage ( self )

{
*
*
*******************************************************************************}

	self . usage_count = self . usage_count + 1

	RETURN ( self . usage_count )

ENDROUTINE
