{Compared 20140122 /DKTBG}
{******************************************************************************
*
* Module Name   : $CSM_CONF.RPF
*
* Purpose       : User-Definable constants for $CSMLP
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}

SET COMPILE_OPTION DECLARE

{ If the test is incomplete and this flag is set to FALSE then the comparison}
{ will fail and a message saying results were missing will be output         }

GLOBAL CONSTANT CSM_pass_incomp_test 	= TRUE

{ If there is a test in MLP which is not assigned to a sample and this flag is}
{ set to FALSE then the comparison will fail and a message will be output    }

GLOBAL CONSTANT CSM_pass_missing_test 	= TRUE

{ If set to true then : cancelled samples, cancelled and suspended tests, and }
{ rejected and cancelled results will be ignored when the sample/job is       }
{ compared with the MLP specification                                         }

{M1742 HBe 25-10-2006: changed CSM_ignore_cancelled from FALSE to TRUE        }
GLOBAL CONSTANT CSM_ignore_cancelled 	= TRUE

{ Only relevant if comparison done for all levels. If set to true then the    }
{ comparison must pass for all levels for the sample to pass. Otherwise the   }
{ sample will pass if at least one level passes                               }

GLOBAL CONSTANT CSM_all_levels_pass 	= TRUE

{ Optionally log comparison outcome "DISABLED" or empty dont log, "PASS" log  }
{ if comparison passes, "FAIL" if comparison fails or "ALWAYS" every time     }
{ a comparison is done                                                        }

GLOBAL CONSTANT CSM_log_outcome 	= "DISABLED"

{ Optionally log pre_authorisation check outcome "DISABLED" or empty dont log,}
{ "PASS" log if check passes, "FAIL" if check fails or "ALWAYS" every time a  }
{ a check is done                                                             }

GLOBAL CONSTANT CSM_log_pre_auth 	= "DISABLED"

GLOBAL CONSTANT CSM_log_file_name 	= "smp$userfiles:csmlp.log"

{ Report to be called when full or summary report requested                   }

GLOBAL CONSTANT CSM_rpt_lib_summary 	= "$LIB_CSMLP"
GLOBAL CONSTANT CSM_rpt_rtn_summary 	= "Summary_rep"
GLOBAL CONSTANT CSM_rpt_lib_full 	= "$LIB_CSMLP"
GLOBAL CONSTANT CSM_rpt_rtn_full 	= "Full_rep"

{ Optionally call a library routine "DISABLED" or empty never call routine    }
{ "PASS" call routine if comparison passes, "FAIL" if comparison fails        }
{ or "ALWAYS" every time a comparison is done                                 }

GLOBAL CONSTANT CSM_auto_routine_call 	= "DISABLED"
GLOBAL CONSTANT CSM_comparison_lib 	= "$CSM_USER"      { Library routine is in}
GLOBAL CONSTANT CSM_comparison_rtn	= "Post_comparison" { Routine to be called }

{ Before authorisation validation }

GLOBAL CONSTANT CSM_auth_check_lib 	= "$CSM_USER"
GLOBAL CONSTANT CSM_auth_check_rtn 	= "Pre_auth"

{ If running in background and the pre-authorisation validation routine is    }
{ passed then if this flag is set to true the sample will be auto. authorised }

GLOBAL CONSTANT CSM_bg_auth_samp 	= FALSE

{ instance_name should be set to the value of the config item INSTANCE. This  }
{ should be different for each SampleManager system running.                  }

CONSTANT instance_name = "VGSM"

{ If running in background a pipe is used. The name of this pipe is specified }
{ below. Constant CSM_pipe_name should be no more than 12 characters if       }
{ using remote pipes.                                                         }

GLOBAL CONSTANT CSM_pipe_name     	= instance_name : "CSMLP_pipe"

{ If the background report $CSMLP is running on a different node to the one   }
{ on which the comparisons are performed, the constant csm_pipe_type should   }
{ be set to REMOTE. Otherwise, this should be set to LOCAL                    }

GLOBAL CONSTANT CSM_pipe_type           = "LOCAL"
{GLOBAL CONSTANT CSM_pipe_type          = "REMOTE"}

{ The remote name of the pipe is used when CSM_pipe_type is set to REMOTE.    }
{ The first part of this should be the name of the node on which the          }
{ background is running followed by two colons.                               }

CONSTANT remote_node_name               = "OMEGA"

GLOBAL CONSTANT remote_CSM_pipe_name    = remote_node_name :
				          "::"             :
				          ASCII(34)        :
				          "TASK="          :
				          CSM_pipe_name    :
				          ASCII(34)

{ Execute CSMLP routines as if they were running in the background.
  This should only be set to true if $CSM is not used, and $BACK_CSMLP is
  run regularly on a terminal. }

GLOBAL CONSTANT DEBUG_AS_BACKGROUND  = FALSE
