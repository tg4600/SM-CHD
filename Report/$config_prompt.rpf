{******************************************************************************
*
* Module Name   : $CONFIG_PROMPT.RPF
*
* Purpose       : Special prompt type for configuration values. Allowed values
*                 depending on configuration data type.
*
* Document Ref. :
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    : Yes
*
*******************************************************************************}

SET NAME "DEFER/"

SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN STANDARD_LIBRARY STD_VGL
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_GENERAL
JOIN STANDARD_LIBRARY STD_CLIENT
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT 

JOIN LIBRARY $BROWSE
JOIN LIBRARY $LIB_BROWSER_MULTI
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $MRU_LIST_FIELD
JOIN LIBRARY $MRU_LIST_COMMAND
JOIN LIBRARY $PROMPT_IMPRINT

DECLARE data_type, library_to_call , routine_to_call
DECLARE editor_array, res_group_ent_array, res_group_disp_array
DECLARE res_disp_control_array , define_open_ended_array
DECLARE worksheet_sort_array , samp_browse_array
DECLARE table_count, table, child, parent, current_table_set
DECLARE table_sets, table_set_count , table_sets_loaded
DECLARE menu_names, menu_names_loaded, smw_menu_names, smw_menu_names_loaded
DECLARE explorer_menu_names, explorer_menu_names_loaded
DECLARE explorer_mytasks_names, explorer_mytasks_names_loaded
DECLARE res_tsr_test_order_array, res_twr_order_array
DECLARE unit_mode_array, access_log_mode_array
DECLARE web_menu_names, web_menu_names_loaded
DECLARE timezone_names_array

ROUTINE define_classes

        DEFINE CLASS "PROMPT_CLASS_TEXT_READ_ONLY"

                INHERIT

                        PROMPT_CLASS_TEXT

                PROPERTIES

                        "DISPLAY_TEXT"

                ACTIONS

                        "START_PROMPT"

        END CLASS

ENDROUTINE

ROUTINE prompt_class_text_read_only_action_start_prompt ( self )

        self . display_only = TRUE
        self . text         = self . display_text
        self . value        = self . display_text

        object_invoke_class ( self , PROMPT_CLASS_TEXT , "START_PROMPT" )

ENDROUTINE

ROUTINE config_prompt_initialise

        IF NOT ( GLOBAL ( "LIBRARY_INITIALISED" ) ) THEN

                define_classes ( )

                ARRAY editor_array
                editor_array [ 1 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_EDITOR_EDT" , 1 )
                editor_array [ 1 , 2 ] = "EDT"
                editor_array [ 2 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_EDITOR_TPU" , 1 )
                editor_array [ 2 , 2 ] = "TPU"

                ARRAY res_group_ent_array
                res_group_ent_array [ 1 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_GROUP_OWN" , 1 )
                res_group_ent_array [ 1 , 2 ] = "O"
                res_group_ent_array [ 2 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_GROUP_LIST" , 1 )
                res_group_ent_array [ 2 , 2 ] = "A"
                res_group_ent_array [ 3 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_GROUP_ANY" , 1 )
                res_group_ent_array [ 3 , 2 ] = "Z"

                ARRAY res_group_disp_array
                res_group_disp_array [ 1 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_GROUP_OWN" , 1 )
                res_group_disp_array [ 1 , 2 ] = "O"
                res_group_disp_array [ 2 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_GROUP_LIST" , 1 )
                res_group_disp_array [ 2 , 2 ] = "A"
                res_group_disp_array [ 3 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_GROUP_ANY" , 1 )
                res_group_disp_array [ 3 , 2 ] = "Z"

                ARRAY res_disp_control_array
                res_disp_control_array [ 1 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_STATUS_COMP_AUTH" , 1 )
                res_disp_control_array [ 1 , 2 ] = "C"
                res_disp_control_array [ 2 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_STATUS_ONLY_AUTH" , 1 )
                res_disp_control_array [ 2 , 2 ] = "A"
                res_disp_control_array [ 3 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_STATUS_ANY" , 1 )
                res_disp_control_array [ 3 , 2 ] = "Z"

                ARRAY define_open_ended_array
                define_open_ended_array [ 1 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_OPEN_IN_SPEC" , 1 )
                define_open_ended_array [ 1 , 2 ] = "IN_SPEC"
                define_open_ended_array [ 2 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_OPEN_OUT_SPEC" , 1 )
                define_open_ended_array [ 2 , 2 ] = "OUT_SPEC"

                ARRAY worksheet_sort_array
                worksheet_sort_array [ 1 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_JOB" , 1 )
                worksheet_sort_array [ 1 , 2 ] = "J"
                worksheet_sort_array [ 2 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_DATE" , 1 )
                worksheet_sort_array [ 2 , 2 ] = "D"
                worksheet_sort_array [ 3 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_TIME" , 1 )
                worksheet_sort_array [ 3 , 2 ] = "L"
                worksheet_sort_array [ 4 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_A_P_D" , 1 )
                worksheet_sort_array [ 4 , 2 ] = "S"
                worksheet_sort_array [ 5 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_D_P_D" , 1 )
                worksheet_sort_array [ 5 , 2 ] = "M"
                worksheet_sort_array [ 6 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_A_P_T" , 1 )
                worksheet_sort_array [ 6 , 2 ] = "Q"
                worksheet_sort_array [ 7 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_D_P_T" , 1 )
                worksheet_sort_array [ 7 , 2 ] = "E"
                worksheet_sort_array [ 8 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_A_PRI" , 1 )
                worksheet_sort_array [ 8 , 2 ] = "A"
                worksheet_sort_array [ 9 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_D_PRI" , 1 )
                worksheet_sort_array [ 9 , 2 ] = "B"
                worksheet_sort_array [ 10 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_A_P_TST" , 1 )
                worksheet_sort_array [ 10 , 2 ] = "C"
                worksheet_sort_array [ 11 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_D_P_TST" , 1 )
                worksheet_sort_array [ 11 , 2 ] = "F"
                worksheet_sort_array [ 12 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_A_TEST" , 1 )
                worksheet_sort_array [ 12 , 2 ] = "P"
                worksheet_sort_array [ 13 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_SORT_D_TEST" , 1 )
                worksheet_sort_array [ 13 , 2 ] = "D"

                ARRAY samp_browse_array
                samp_browse_array [ 1 , 1 ] =
                              GET_USER_MESSAGE ( "CONFIG_PROMPT_NUMERIC"  , 1 )
                samp_browse_array [ 1 , 2 ] = "N"
                samp_browse_array [ 2 , 1 ] =
                              GET_USER_MESSAGE ( "CONFIG_PROMPT_TEXTUAL" , 1 )
                samp_browse_array [ 2 , 2 ] = "T"

                ARRAY res_tsr_test_order_array
                res_tsr_test_order_array [ 1 , 1 ] =
                         GET_USER_MESSAGE ( "CONFIG_PROMPT_ANALYSIS_SORT" , 1 )
                res_tsr_test_order_array [ 1 , 2 ] = "ANALYSIS"
                res_tsr_test_order_array [ 2 , 1 ] =
                         GET_USER_MESSAGE ( "CONFIG_PROMPT_ORDER_NUM_SORT" , 1 )
                res_tsr_test_order_array [ 2 , 2 ] = "ORDER_NUM"


                ARRAY res_twr_order_array
                res_twr_order_array [ 1 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_ASC_SAMPLE_SORT" , 1 )
                res_twr_order_array [ 1 , 2 ] = "ASC_SAMPLE_NUMBER"
                res_twr_order_array [ 2 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_DES_SAMPLE_SORT" , 1 )
                res_twr_order_array [ 2 , 2 ] = "DES_SAMPLE_NUMBER"
                res_twr_order_array [ 3 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_ASC_TEST_SORT" , 1 )
                res_twr_order_array [ 3 , 2 ] = "ASC_TEST_NUMBER"
                res_twr_order_array [ 4 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_DES_TEST_SORT" , 1 )
                res_twr_order_array [ 4 , 2 ] = "DES_TEST_NUMBER"

                ARRAY unit_mode_array
                unit_mode_array [ 1 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_UNIT_MODE" , 1 )
                unit_mode_array [ 1 , 2 ] = "NONE"
                unit_mode_array [ 2 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_UNIT_MODE" , 2 )
                unit_mode_array [ 2 , 2 ] = "VALIDATE"
                unit_mode_array [ 3 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_UNIT_MODE" , 3 )
                unit_mode_array [ 3 , 2 ] = "CHECK"
                unit_mode_array [ 4 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_UNIT_MODE" , 4 )
                unit_mode_array [ 4 , 2 ] = "CONVERT"

                ARRAY access_log_mode_array
                access_log_mode_array [ 1 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_ACCESS_MODE" , 1 )
                access_log_mode_array [ 1 , 2 ] = "FULL"
                access_log_mode_array [ 2 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_ACCESS_MODE" , 2 )
                access_log_mode_array [ 2 , 2 ] = "FAIL"
                access_log_mode_array [ 3 , 1 ] =
                        GET_USER_MESSAGE ( "CONFIG_PROMPT_ACCESS_MODE" , 3 )
                access_log_mode_array [ 3 , 2 ] = "NONE"

                table_sets_loaded    = FALSE
                menu_names_loaded    = FALSE

                explorer_menu_names_loaded = FALSE
                explorer_mytasks_names_loaded = FALSE
                smw_menu_names_loaded = FALSE
                web_menu_names_loaded = FALSE

                SET GLOBAL "LIBRARY_INITIALISED" TO TRUE

        ENDIF

ENDROUTINE

ROUTINE load_table_sets

        IF NOT ( table_sets_loaded ) THEN

                ARRAY table_sets
                table_set_count = 0

                table_count = 1
                table = table_name ( table_count )
                WHILE table <> ERROR DO
                        GET_TABLE_DETAILS 'table',
                                          "PARENT",
                                           parent
                        IF blank ( parent ) THEN
                                GET_TABLE_DETAILS 'table',
                                                  "CHILD",
                                                  child
                                WHILE NOT blank(child) DO
                                        GET_TABLE_DETAILS 'child',
                                                          "TABLESET",
                                                          current_table_set
                                        IF NOT valid_table_set(current_table_set) THEN
                                                table_set_count = table_set_count + 1
                                                table_sets[table_set_count,1] =
                                                                current_table_set
                                                table_sets[table_set_count,2] =
                                                                current_table_set
                                        ENDIF
                                        GET_TABLE_DETAILS 'child',"CHILD",child
                                ENDWHILE
                        ENDIF
                        table_count = table_count + 1
                        table = table_name ( table_count )
                ENDWHILE

                table_sets_loaded = TRUE
        ENDIF

ENDROUTINE

ROUTINE valid_table_set ( table_set )

        DECLARE valid,check_count

        IF blank( table_set ) THEN
                valid = TRUE
        ELSE
                valid = FALSE
                check_count = 1
                WHILE (check_count <= table_set_count) AND NOT valid DO
                        valid = STRIP(table_set) =
                                STRIP(table_sets[check_count,1])
                        check_count = check_count + 1
                ENDWHILE
        ENDIF

        RETURN(valid)

ENDROUTINE

ROUTINE get_unique_values_array( VALUE table, VALUE field )

        DECLARE values_array, counter, id

        ARRAY values_array ARRAYSIZE ( 0 , 2 )
        
        counter = 1
        
        id = SELECT DISTINCT 'table' . 'field'
                WHERE 'field' <> ""

        WHILE id <> EMPTY DO
                values_array [ counter , 1 ] = id
                values_array [ counter , 2 ] = id

                NEXT 'table'
                id = SELECT 'table' . 'field'

                counter = counter + 1
        ENDWHILE

        RETURN( values_array )

ENDROUTINE

ROUTINE get_unique_values_array_where( VALUE table , VALUE field , VALUE whereField , VALUE isValue )

        DECLARE values_array, counter, id

        ARRAY values_array ARRAYSIZE ( 0 , 2 )
        
        counter = 1
        
        id = SELECT DISTINCT 'table' . 'field'
                WHERE 'field' <> "" AND 'whereField' = isValue

        WHILE id <> EMPTY DO
                values_array [ counter , 1 ] = id
                values_array [ counter , 2 ] = id

                NEXT 'table'
                id = SELECT 'table' . 'field'

                counter = counter + 1
        ENDWHILE

        RETURN( values_array )

ENDROUTINE


ROUTINE load_menu_names

        IF NOT ( menu_names_loaded ) THEN

                menu_names = get_unique_values_array( "menu", "owner_menu" )

                menu_names_loaded = TRUE
                
        ENDIF

ENDROUTINE

ROUTINE load_explorer_menu_names

        IF NOT ( explorer_menu_names_loaded ) THEN

                explorer_menu_names = get_unique_values_array ( "menu_toolbar", "toolbar_name" )

                explorer_menu_names_loaded = TRUE
                
        ENDIF

ENDROUTINE

ROUTINE load_explorer_mytasks_names

        IF NOT ( explorer_mytasks_names_loaded ) THEN

                explorer_mytasks_names = get_unique_values_array ( "menu_mytasks", "mytasks_name" )

                explorer_mytasks_names_loaded = TRUE
                
        ENDIF

ENDROUTINE

ROUTINE load_smw_menu_names

        IF NOT ( smw_menu_names_loaded ) THEN

                smw_menu_names = get_unique_values_array( "smw_menu", "menu_name" )

                smw_menu_names_loaded = TRUE
                
        ENDIF

ENDROUTINE

ROUTINE load_web_menu_names

        IF NOT ( web_menu_names_loaded ) THEN

                web_menu_names = get_unique_values_array( "web_menu_section", "identity" )

                web_menu_names_loaded = TRUE
                
        ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE prompt_config ( prompt_object )

{
* Routine called from the LTE screens whenever a prompt for a configuration
* value is required.
*
*******************************************************************************}

        config_prompt_initialise ( )

        data_type = SELECT config_header . data_type

        library_to_call = SELECT config_header . library

        routine_to_call = SELECT config_header . routine

        create_prompt ( prompt_object   ,
                         data_type       ,
                         library_to_call ,
                         routine_to_call )

ENDROUTINE

{*******************************************************************************
*
* Routine called from configuration spreadsheet editor.
*
*******************************************************************************}

GLOBAL ROUTINE prompt_config_editor (       prompt_object ,
                                      VALUE global_id     ,
                                            data_type     )

        config_prompt_initialise ( )

        library_to_call = SELECT config_header . library
                WHERE identity = global_id

        routine_to_call = SELECT config_header . routine

        create_prompt ( prompt_object   ,
                         data_type       ,
                         library_to_call ,
                         routine_to_call )

ENDROUTINE

{*******************************************************************************
*
* Creates the prompt object
*
*******************************************************************************}

ROUTINE create_prompt (        prompt_object   ,
                               data_type       ,
                         VALUE library_to_call ,
                         VALUE routine_to_call )

        data_type = TOUPPER ( STRIP ( data_type ) )

        IF data_type = "BOOLEAN" THEN
                PROMPT OBJECT prompt_object BROWSE ON BOOLEAN
        ELSEIF data_type = "INTEGER" THEN
                PROMPT OBJECT prompt_object BROWSE ON INTEGER
        ELSEIF data_type = "TEXT" THEN
                PROMPT OBJECT prompt_object FORMAT TEXT
        ELSEIF data_type = "DATE" THEN
                PROMPT OBJECT prompt_object BROWSE ON DATE
        ELSEIF data_type = "INTERVAL" THEN
                PROMPT OBJECT prompt_object BROWSE ON INTERVAL
        ELSEIF data_type = "REAL" THEN
                PROMPT OBJECT prompt_object BROWSE ON REAL
        ELSEIF data_type = "REPORT" THEN
                PROMPT OBJECT prompt_object BROWSE ON REPORT
        ELSEIF data_type = "ROUTINE" THEN
                IF BLANK ( library_to_call ) THEN
                        library_to_call = GLOBAL ( "CURRENT_LIBRARY" )
                ENDIF
                IF BLANK ( routine_to_call ) THEN
                        routine_to_call =
                                STRIP ( SELECT config_header . identity )
                ENDIF

                IF vgl_validate_routine ( library_to_call ,
                                          routine_to_call ) THEN

                        CALL_ROUTINE routine_to_call IN LIBRARY library_to_call
                                     USING prompt_object
                ELSE
                        { Default }
                        PROMPT OBJECT prompt_object FORMAT TEXT
                ENDIF
        ELSE
                { Default }
                PROMPT OBJECT prompt_object FORMAT TEXT
        ENDIF

        RETURN ( TRUE )

ENDROUTINE

{*******************************************************************************
*
* The following routines contain the prompts for global values, each routine
* name uses the global id.
*
*******************************************************************************}


ROUTINE allow_status_suppress ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ALLOW"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISALLOW" , 1 ) )

ENDROUTINE

ROUTINE key_timeout ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT INTEGER
               WITH ( minimum = 0 )

ENDROUTINE

ROUTINE char_set ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT INTEGER
               WITH ( minimum = 0 )

ENDROUTINE

ROUTINE read_time ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT INTERVAL

ENDROUTINE

ROUTINE label_id ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON printer

ENDROUTINE

ROUTINE labelform ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT text

ENDROUTINE

ROUTINE textform ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT text

ENDROUTINE

ROUTINE text_id ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON printer

ENDROUTINE

ROUTINE hide_deleted ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE prt_local ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE menu_library ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON report

ENDROUTINE

ROUTINE icon_prompt ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON icon

ENDROUTINE

ROUTINE menu_prompt ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT text40

ENDROUTINE

ROUTINE menu_routine ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT IDENTITY40

ENDROUTINE

ROUTINE editor ( prompt_object )

        IF ( GLOBAL ( "PLATFORM" ) = "VMS" ) THEN

                PROMPT OBJECT prompt_object
                        CHOOSE OUTOF editor_array
        ELSE
                PROMPT OBJECT prompt_object
                       FORMAT TEXT
        ENDIF

ENDROUTINE

ROUTINE barcode_name ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON report

ENDROUTINE

ROUTINE receipt_name ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON report

ENDROUTINE

ROUTINE worksheet_name ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON report

ENDROUTINE

ROUTINE edit_tests ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE default_status ( prompt_object )

        PROMPT OBJECT prompt_object
                CLASS "STD_PROMPT_TEXT_CHOOSE"
                WITH ( phrase = "SAMP_STAT" )

ENDROUTINE

ROUTINE res_suppress_echo ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE samp_browse ( prompt_object )

        PROMPT OBJECT prompt_object
               CHOOSE OUTOF samp_browse_array

ENDROUTINE

ROUTINE samp_syntax ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT text

ENDROUTINE

ROUTINE sampid_prefix ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT IDENTITY30

ENDROUTINE

ROUTINE job_prefix ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT IDENTITY20

ENDROUTINE

ROUTINE res_modify_result ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ALLOW"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISALLOW" , 1 ) )

ENDROUTINE

ROUTINE usrdefmenufilename ( prompt_object )

        load_menu_names ( )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF menu_names

ENDROUTINE

ROUTINE smw_menu ( prompt_object )

        load_smw_menu_names ( )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF smw_menu_names

ENDROUTINE

ROUTINE web_menu ( prompt_object )

        load_web_menu_names ( )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF web_menu_names

ENDROUTINE

ROUTINE language ( prompt_object )

        PROMPT OBJECT prompt_object
                CLASS "STD_PROMPT_TEXT_CHOOSE"
                WITH ( phrase = "LANGUAGE" )

ENDROUTINE

ROUTINE usrdefhotkey ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON report

ENDROUTINE

ROUTINE wshtstring ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT text

ENDROUTINE

ROUTINE wshtsort ( prompt_object )

        PROMPT OBJECT prompt_object
               CHOOSE OUTOF worksheet_sort_array

ENDROUTINE

ROUTINE wshtoper ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ASSIGN"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DONTASS" , 1 ) )

ENDROUTINE

ROUTINE wshtstan ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ALLOW"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISALLOW" , 1 ) )

ENDROUTINE

ROUTINE res_group_ent ( prompt_object )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF res_group_ent_array

ENDROUTINE

ROUTINE res_group_disp ( prompt_object )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF res_group_disp_array

ENDROUTINE

ROUTINE res_disp_control ( prompt_object )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF res_disp_control_array

ENDROUTINE

ROUTINE res_phrase_validate ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE res_calc_on_entry ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE res_adhoc ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE res_audit_box_on ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE res_audit_box_control ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE res_limits_box_on ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE res_incidents_on ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE res_limits_box_control ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE res_samp_id ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_NUMERIC" , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_TEXTUAL" , 1 ) )

ENDROUTINE

ROUTINE res_samp_width ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON integer
               WITH ( minimum = 0, maximum = 30 )

ENDROUTINE

ROUTINE smp_startup_report ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON report

ENDROUTINE

ROUTINE labtable_mode ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_NO_REPEAT" , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_REPEAT"    , 1 ) )

ENDROUTINE

ROUTINE job_syntax ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT text

ENDROUTINE

ROUTINE commit_view_mode ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ON"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_OFF" , 1 ) )

ENDROUTINE

ROUTINE pull_down_menu ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE res_calc_on_exit ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE res_info_box_on ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE res_info_box_control ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE usrcommenufilename ( prompt_object )

        load_menu_names ( )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF menu_names

ENDROUTINE

ROUTINE round_results ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE resamp_templ_id ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON samp_tmpl_header

ENDROUTINE

ROUTINE resamp_text_id ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT TEXT255

ENDROUTINE

ROUTINE test_completes_without_calc ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE sig_figs_enabled ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ON"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_OFF" , 1 ) )

ENDROUTINE

ROUTINE approval_check_enabled ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ON"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_OFF" , 1 ) )

ENDROUTINE

ROUTINE define_open_ended ( prompt_object )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF define_open_ended_array

ENDROUTINE

ROUTINE printer_codes ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ON"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_OFF" , 1 ) )

ENDROUTINE

ROUTINE status_suppress ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ON"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_OFF" , 1 ) )

ENDROUTINE

ROUTINE res_extended_blind_entry ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ALL_TYPES" , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_NUMERICS" , 1 ) )

ENDROUTINE

ROUTINE empty_samples_available ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_AVAIL"   , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_UNAVAIL" , 1 ) )

ENDROUTINE

ROUTINE empty_jobs_available ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_AVAIL"   , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_UNAVAIL" , 1 ) )

ENDROUTINE

ROUTINE result_trigger_enable ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE test_trigger_enable ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE sample_trigger_enable ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE job_trigger_enable ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE select_buffer_size ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON integer
               WITH ( minimum = 0 )

ENDROUTINE

ROUTINE update_buffer_size ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON integer
               WITH ( minimum = 0 )

ENDROUTINE

ROUTINE res_modify_new_result ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ALLOW"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISALLOW" , 1 ) )

ENDROUTINE

ROUTINE shutdown_enabled ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE audit_flags_enabled ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE disregard_silent_audits ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean

ENDROUTINE

ROUTINE committed_table_set ( prompt_object )

        load_table_sets ( )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF table_sets

ENDROUTINE

{ Version 3.0 configuration items }

ROUTINE validate_date_format ( prompt_object )

        return ( date_format_validate ( prompt_object . text ) )

ENDROUTINE

ROUTINE clock_format ( prompt_object )

        PROMPT OBJECT prompt_object
                FORMAT text
                WITH ( validation_routine = "validate_date_format" ,
                       vgl_library = GLOBAL ( "CURRENT_LIBRARY" )  )

ENDROUTINE

ROUTINE browse_sample_block_size ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT integer
               WITH ( minimum = 0 )

ENDROUTINE

ROUTINE criteria ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON criteria_header

ENDROUTINE

ROUTINE res_round_results ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON BOOLEAN

ENDROUTINE

ROUTINE default_date_format ( prompt_object )

        PROMPT OBJECT prompt_object
                FORMAT text
                WITH ( validation_routine = "validate_date_format" ,
                       vgl_library = GLOBAL ( "CURRENT_LIBRARY" )  )

ENDROUTINE

ROUTINE editor_read ( prompt_object )

        PROMPT OBJECT prompt_object
                FORMAT text

ENDROUTINE

ROUTINE increment_count ( prompt_object ) { UNIX specific }

        PROMPT OBJECT prompt_object
               FORMAT integer
               WITH ( minimum = 0 )

ENDROUTINE

ROUTINE increment_table_size ( prompt_object ) { UNIX specific }

        PROMPT OBJECT prompt_object
               FORMAT integer
               WITH ( minimum = 0 )

ENDROUTINE

ROUTINE instance ( prompt_object )

        PROMPT OBJECT prompt_object
                CLASS "PROMPT_CLASS_TEXT_READ_ONLY"
                WITH ( foreground_colour = PROMPT_COLOUR_RGB ( 128 , 0 , 0 ) ,
                       display_text      = GET_USER_MESSAGE
                                               ( "SMP_CONFIG_NOT_ITEM" , 1 ) )

ENDROUTINE

ROUTINE lock_header_count ( prompt_object ) { UNIX specific }

        PROMPT OBJECT prompt_object
               FORMAT integer
               WITH ( minimum = 0 )

ENDROUTINE

ROUTINE lock_lock_count ( prompt_object ) { UNIX specific }

        PROMPT OBJECT prompt_object
               FORMAT integer
               WITH ( minimum = 0 )

ENDROUTINE

ROUTINE lock_table_size ( prompt_object ) { UNIX specific }

        PROMPT OBJECT prompt_object
               FORMAT integer
               WITH ( minimum = 0 )

ENDROUTINE

ROUTINE lock_screen ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON BOOLEAN
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE prompt_zap_date ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ZAP"    , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_NO_ZAP" , 1 ) )

ENDROUTINE

ROUTINE prompt_zap_identity ( prompt_object )

        prompt_zap_date ( prompt_object )

ENDROUTINE

ROUTINE prompt_zap_integer ( prompt_object )

        prompt_zap_date ( prompt_object )

ENDROUTINE

ROUTINE prompt_zap_real ( prompt_object )

        prompt_zap_date ( prompt_object )

ENDROUTINE

ROUTINE prompt_zap_text ( prompt_object )

        prompt_zap_date ( prompt_object )

ENDROUTINE

ROUTINE browse_confirm_restart ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_PROMPT"    , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_NO_PROMPT" , 1 ) )

ENDROUTINE

ROUTINE compiler_default_exp_mess ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ON"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_OFF" , 1 ) )

ENDROUTINE

ROUTINE transaction_monitor ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ON"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_OFF" , 1 ) )

ENDROUTINE

ROUTINE res_tsr_test_order ( prompt_object )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF res_tsr_test_order_array

ENDROUTINE

ROUTINE res_twr_order ( prompt_object )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF res_twr_order_array

ENDROUTINE

ROUTINE initial_insert_mode ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH
                 ( true_word  = GET_USER_MESSAGE
                                  ( "CONFIG_PROMPT_KEYBOARD_INSERT"     , 1 ) ,
                   false_word = GET_USER_MESSAGE
                                  ( "CONFIG_PROMPT_KEYBOARD_OVERSTRIKE" , 1 ) )

ENDROUTINE

ROUTINE browse_default_rollback ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT INTEGER
               WITH ( minimum = 1 )

ENDROUTINE

ROUTINE page_length ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT INTEGER
               WITH ( minimum = 1 )

ENDROUTINE


ROUTINE job_suspend_enable ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE


ROUTINE res_toolbox ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word =
                         GET_USER_MESSAGE ( "CONFIG_PROMPT_RES_TOOLBOX" , 1 ) ,
                      false_word =
                         GET_USER_MESSAGE ( "CONFIG_PROMPT_RES_TOOLBOX" , 2 ) )

ENDROUTINE

ROUTINE unit_conversion ( prompt_object )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF unit_mode_array

ENDROUTINE

ROUTINE archive_table_set ( prompt_object )

        load_table_sets ( )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF table_sets

ENDROUTINE

ROUTINE thread_stacksize ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON integer
               WITH ( minimum = 0 )

ENDROUTINE

ROUTINE timezone ( prompt_object )

        PROMPT OBJECT prompt_object
               FORMAT integer
               WITH ( minimum = -1439 ,
                      maximum = +1439 )

ENDROUTINE

ROUTINE chromatography_software ( prompt_object )

        PROMPT OBJECT prompt_object
                CLASS "STD_PROMPT_TEXT_CHOOSE"
                WITH ( phrase = "CHROM_SOFT" )

ENDROUTINE

ROUTINE smw_editor ( prompt_object )

        PROMPT OBJECT prompt_object
                CLASS "STD_PROMPT_TEXT_CHOOSE"
                WITH ( phrase = "SMW_EDITOR" )

ENDROUTINE

ROUTINE postscript_paper_size ( prompt_object )

        PROMPT OBJECT prompt_object
                CLASS "STD_PROMPT_TEXT_CHOOSE"
                WITH ( phrase = "POST_PAGE" )

ENDROUTINE

ROUTINE smw_debug_file_transfer ( prompt_object )

        PROMPT OBJECT prompt_object
                CLASS "STD_PROMPT_TEXT_CHOOSE"
                WITH ( phrase = "DEBUG_FILE" )

ENDROUTINE

ROUTINE smw_heartbeat_timeout ( prompt_object )

        PROMPT OBJECT prompt_object
                FORMAT INTERVAL
                WITH ( validation_routine = "validate_heartbeat_interval" ,
                       vgl_library = GLOBAL ( "CURRENT_LIBRARY" )         )

ENDROUTINE

ROUTINE validate_heartbeat_interval ( prompt_object )

        DECLARE ok

        ok = ( prompt_object . value = INTERVAL ( "0000 00:00:00.00" ) )

        IF ( NOT ok )

                ok = prompt_object . value >= INTERVAL ( "0000 00:03:00.00" )

                IF ( ok )

                        ok = ( RIGHTSTRING
                                   ( prompt_object . value , 5 ) = "00.00" )

                ENDIF

        ENDIF

        return ( ok )

ENDROUTINE

ROUTINE sp_rules_mode ( prompt_object )

      PROMPT OBJECT prompt_object
             BROWSE ON boolean
             WITH ( true_word  = "Rule counting"              ,
                    false_word = "Analysis and rule counting" )

ENDROUTINE

ROUTINE approval_inspect_security ( prompt_object )

        PROMPT OBJECT prompt_object
                CLASS "STD_PROMPT_TEXT_CHOOSE"
                WITH ( phrase = "INSP_SECUR" )

ENDROUTINE

ROUTINE approval_submit_on_add ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_ENABLE"  , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_DISABLE" , 1 ) )

ENDROUTINE

ROUTINE access_log_mode ( prompt_object )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF access_log_mode_array

ENDROUTINE

ROUTINE startup_procedure ( prompt_object )

    CREATE OBJECT "STD_PROMPT_TEXT_IDENTITY", prompt_object
    prompt_object . always_validate = TRUE
    prompt_object . allowed_chars   = "1234567890,"
    prompt_object . browse_routine  = "startup_procedure_browse"

ENDROUTINE

ROUTINE valid_master_menu ( prompt_object )

        PROMPT OBJECT prompt_object
                BROWSE ON master_menu

ENDROUTINE

ROUTINE custom_text ( prompt_object )

        PROMPT OBJECT prompt_object
                FORMAT TEXT30
                WITH (  always_validate = TRUE , 
                    validation_routine = "custom_text_validate" ,
                        vgl_library = GLOBAL ( "CURRENT_LIBRARY" )         )
                

ENDROUTINE

ROUTINE custom_text_validate ( prompt_object )

    IF BLANK ( STRIP ( prompt_object . text ) ) THEN
    
        RETURN ( FALSE )
        
    ELSE
    
        RETURN ( TRUE )
    
    ENDIF

ENDROUTINE

ROUTINE explorer_menu ( prompt_object )

        load_explorer_menu_names ( )

        PROMPT OBJECT prompt_object
                CHOOSE OUTOF explorer_menu_names

ENDROUTINE

ROUTINE explorer_mytasks ( prompt_object )

        load_explorer_mytasks_names ( )

        PROMPT OBJECT prompt_object
        FORMAT menu_mytasks . mytasks_name
        WITH ( browse_routine     = "MYTASKS_MENU_BROWSE"       ,
               validation_routine = "MYTASKS_MENU_ALWAYS_VALID" ,
                   vgl_library        = GLOBAL ( "CURRENT_LIBRARY" ))

ENDROUTINE

{******************************************************************************}

ROUTINE startup_procedure_browse ( self )

{ 
* Performs a multiple select browse on the master menu table
*
*******************************************************************************}

    DECLARE viewer

    list_browser_multi_initialise ( )

    CREATE OBJECT LIST_BROWSER_MULTI_CLASS, viewer
    
    viewer . set_text( self . text )
    
    viewer . set_table ( "MASTER_MENU", "PROCEDURE_NUM" )

    viewer . go ( ) 
    
    IF viewer . value <> EMPTY THEN

        self . set_text ( viewer . text )

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE mru_command_list_max( prompt_object )
{
* 
*
*******************************************************************************}

    PROMPT OBJECT prompt_object
        FORMAT INTEGER
        WITH ( minimum = 0   ,
               maximum = 26  ,
               validation_routine = "mru_command_list_max_validation" )

ENDROUTINE

{******************************************************************************}

ROUTINE mru_command_list_max_validation( self )
{
* 
*
*******************************************************************************}

    DECLARE old_max, new_max, continue

    continue = TRUE

    old_max = NUMERIC( self . original_text )
    new_max = NUMERIC( self . value )

    IF new_max < old_max THEN
    
        IF confirm_with_text( GET_USER_MESSAGE( "MRU_LIST_WARN_CLEAR", 1 ) ) THEN

            mru_list_command_clear( )
            
        ELSE

            self . set_text( old_max )
            continue = FALSE
            
        ENDIF
        
    ENDIF

    RETURN( continue )
    
ENDROUTINE

{******************************************************************************}

ROUTINE mru_value_list_max( prompt_object )
{
* 
*
*******************************************************************************}

    PROMPT OBJECT prompt_object
        FORMAT INTEGER
        WITH ( minimum = 0   ,
               maximum = 26  ,
               validation_routine = "mru_value_list_max_validation" )

ENDROUTINE

{******************************************************************************}

ROUTINE mru_value_list_max_validation( self )
{
* 
*
*******************************************************************************}

    DECLARE old_max, new_max, continue

    continue = TRUE

    old_max = NUMERIC( self . original_text )
    new_max = NUMERIC( self . value )

    IF new_max < old_max THEN
    
        IF confirm_with_text( GET_USER_MESSAGE( "MRU_LIST_WARN_CLEAR", 1 ) ) THEN

            mru_list_field_clear( )
            
        ELSE

            self . set_text( old_max )
            continue = FALSE
            
        ENDIF
        
    ENDIF

    RETURN( continue )
    
ENDROUTINE

{******************************************************************************}

ROUTINE timezone_load_array

{ 
* Load the timezone names array
*
*******************************************************************************}

    DECLARE regkey       ,
            count        ,
            val

    ARRAY timezone_names_array ARRAY_SIZE ( 0, 2 )

    regkey = "SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones"
    count = 0

    REPEAT

        val = REGISTRY_ENUM_KEY ( HKEY_LOCAL_MACHINE, regkey, count )

        count = count + 1

        IF ( val <> EMPTY ) THEN

            timezone_names_array [ count, 1 ] =
                REGISTRY_GET_VALUE ( HKEY_LOCAL_MACHINE, regkey : "\" : val, "Display" )
            timezone_names_array [ count, 2 ] =
                val

        ENDIF

    UNTIL val = EMPTY

    array_sort ( timezone_names_array, ARRAY_SORT_ASCENDING )

ENDROUTINE

{******************************************************************************}

ROUTINE timezone_name_browse ( self )

{ 
* Performs a multiple select browse on the master menu table
*
*******************************************************************************}

    DECLARE header_array

    IF NOT variable_is_assigned ( timezone_names_array ) THEN
        timezone_load_array ( )
    ENDIF

    ARRAY header_array ARRAYSIZE ( 0 )

    header_array [ 1 ] = "Timezone"
    header_array [ 2 ] = "Timezone Name"

    browse_on_array_header ( 40, self . text, timezone_names_array, header_array )
    
    self . repaste ( )

ENDROUTINE

{******************************************************************************}

ROUTINE timezone_validate ( self )

{ 
* Validate the user entered timezone
*
*******************************************************************************}

    DECLARE found        ,
            count

    IF NOT BLANK ( self . text ) THEN

        IF NOT variable_is_assigned ( timezone_names_array ) THEN
            timezone_load_array ( )
        ENDIF

        found = FALSE
        count = 1

        WHILE ( count <= size_of_array ( timezone_names_array )) AND
              ( NOT found )                                      DO

            found = self . text = timezone_names_array [ count, 1 ]

            count = count + 1

        ENDWHILE

    ELSE

        found = TRUE

    ENDIF

    RETURN ( found )

ENDROUTINE

{******************************************************************************}

ROUTINE timezone_name ( prompt_object )

{
*
*
*******************************************************************************}

        PROMPT OBJECT prompt_object
               WITH ( browse_routine     = "timezone_name_browse" ,
                  validation_routine = "timezone_validate" )

ENDROUTINE

{******************************************************************************}

ROUTINE mytasks_menu_always_valid ( self )
    
{
*   Any value is allowed
*
*******************************************************************************}

    RETURN ( TRUE )

ENDROUTINE

{******************************************************************************}

ROUTINE mytasks_menu_browse ( prompt_object )

{
*
*
*******************************************************************************}

    browse_on_array ( 80, prompt_object . text, explorer_mytasks_names )
    prompt_object . repaste ( )

ENDROUTINE

{******************************************************************************}

ROUTINE auto_validate_status ( prompt_object )

{
*
*
*******************************************************************************}

        PROMPT OBJECT prompt_object
               BROWSE ON boolean
               WITH ( true_word  = GET_USER_MESSAGE ( "CONFIG_PROMPT_INCLUDE" , 1 ) ,
                      false_word = GET_USER_MESSAGE ( "CONFIG_PROMPT_IGNORE"  , 1 ) )

ENDROUTINE

{******************************************************************************}

ROUTINE criteria_user_prompt_forms ( prompt_object )

{
*
*
*******************************************************************************}

    DECLARE user_prompt_forms
        user_prompt_forms = get_unique_values_array_where ( "form", "name", "category", "USERPROMPT" )
         
        PROMPT OBJECT prompt_object
        CHOOSE OUTOF user_prompt_forms
               
ENDROUTINE

{******************************************************************************}

ROUTINE oleimprint_save_filetype ( prompt_object )

{
* Summary    : Browse for infomaker reports
*
* Parameters : prompt object
*
* Return     : None
*
*******************************************************************************}

    PROMPT OBJECT prompt_object

    FORMAT TEXT50
        WITH (  browse_routine = "oleimprint_save_filetype_list")

ENDROUTINE

{******************************************************************************}

ROUTINE oleimprint_save_filetype_list ( self )

{
* Summary    : Connects the user to infomaker and provides the list of valid
*              filetypes then sets the prompts text, with the selected type.
*
* Parameters : self - prompt
*
* Return     : None
*
*******************************************************************************}

    DECLARE type_list, type_array, type, imprint_path , imprint_obj, loop

    imprint_path = client_get_imprint_path ()

    IF imprint_path = EMPTY THEN

        flash_message ( GET_USER_MESSAGE ( "IMPRINT_CONNECT_UNSUCCESSFUL" , 1 ) , TRUE )

    ELSE

    IF GLOBAL ( "OLEIMPRINT_SERVER_SIDE" ) THEN

        imprint_path = lib_utils_logical_to_string ( "smp$imprint" )

    ENDIF

    define_imprint_class ()

    CREATE OBJECT IMPRINT , imprint_obj

    imprint_obj . create_ole_object ()

    imprint_obj . reset_ole_object ()

    imprint_obj . login ()

    type_list = imprint_obj . get_file_types ()

    ARRAY type_array

    loop = 0

    WHILE LENGTH ( STRIP ( type_list ) ) > 0 DO

        loop = loop + 1

        type_array [ loop ] = STRIP ( get_token ( type_list, ASCII(9) ) )

    ENDWHILE

    imprint_obj . ole_object = EMPTY

    BROWSE_ON_ARRAY ( 20 , type , type_array )

    self . set_text ( type )

    ENDIF

ENDROUTINE


{******************************************************************************}

ROUTINE incident_template ( prompt_object )

{
*
*
*******************************************************************************}

        PROMPT OBJECT prompt_object
               BROWSE ON incident_template

ENDROUTINE

{******************************************************************************}

ROUTINE workflow_lifecycle_job ( prompt_object )

{
*
*
*******************************************************************************}

        workflow_lifecycle_prompt( prompt_object, "JOB_HEADER" )

ENDROUTINE

{******************************************************************************}

ROUTINE workflow_lifecycle_sample ( prompt_object )

{
*
*
*******************************************************************************}

        workflow_lifecycle_prompt( prompt_object, "SAMPLE" )

ENDROUTINE

{******************************************************************************}

ROUTINE workflow_lifecycle_test ( prompt_object )

{
*
*
*******************************************************************************}

        workflow_lifecycle_prompt( prompt_object, "TEST" )

ENDROUTINE

{******************************************************************************}

ROUTINE workflow_lifecycle_prompt ( prompt_object, VALUE lifecycle_table )

{
*
*
*******************************************************************************}

    DECLARE workflow_array

    ARRAY workflow_array
              
               
    array_select_add ( workflow_array  ,
               ARRAY_SELECT_EQ ,
               "TABLE_NAME"    ,
               lifecycle_table )

    array_select_add ( workflow_array   ,
               ARRAY_SELECT_AND ,
               EMPTY            ,
               EMPTY            )

    array_select_add ( workflow_array    ,
               ARRAY_SELECT_PUSH ,
               EMPTY             ,
               EMPTY             )

    array_select_add ( workflow_array  ,
               ARRAY_SELECT_EQ ,
               "WORKFLOW_TYPE" ,
               "DEFAULT"       )

    array_select_add ( workflow_array  ,
               ARRAY_SELECT_OR ,
               EMPTY           ,
               EMPTY           )

    array_select_add ( workflow_array  ,
               ARRAY_SELECT_EQ ,
               "WORKFLOW_TYPE" ,
               "LIFECYCLE"     )                              


    array_select_add ( workflow_array   ,
               ARRAY_SELECT_POP ,
               EMPTY            ,
               EMPTY            )                         


    array_select ( "WORKFLOW"     ,
               TRUE           ,
               workflow_array )


    PROMPT OBJECT prompt_object
           BROWSE ON workflow
           WITH ( select_array = workflow_array )
               
ENDROUTINE

{******************************************************************************}

ROUTINE browse_type ( prompt_object )


{
*
*
*******************************************************************************}

        PROMPT OBJECT prompt_object
                CLASS "STD_PROMPT_TEXT_CHOOSE"
                WITH ( phrase = "BROWSETYPE" )

ENDROUTINE

{******************************************************************************}
ROUTINE smtp_password_prompt ( prompt_object )

{
*
*
*******************************************************************************}

        PROMPT OBJECT prompt_object
               FORMAT text
               WITH (silent_mode = TRUE)                

ENDROUTINE

{******************************************************************************}
ROUTINE label_template ( prompt_object )

        PROMPT OBJECT prompt_object
               BROWSE ON label_template

ENDROUTINE

{******************************************************************************}
