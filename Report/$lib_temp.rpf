{Compared 20140123 /DKTBG}
{******************************************************************************
*
* Module Name   : $LIB_TEMP.RPF
*
* Purpose       : Routines for templates
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification : 
*
* Portability   : Not Checked
*
* Re-entrant    : 
*
*******************************************************************************}

JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_LOGIN
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $SAMP_CONF

SET NOTPROTECTED

{ --------------------------------------------------------------------------- }

ROUTINE define_sample_constants

{ Note there is no need to call this routine - It just defines constants }

GLOBAL CONSTANT identity_position        = 1
GLOBAL CONSTANT login_screen_position    = 2
GLOBAL CONSTANT login_title_position     = 3
GLOBAL CONSTANT sample_status_position   = 4
GLOBAL CONSTANT syntax_id_position       = 5
GLOBAL CONSTANT edit_tests_position      = 6
GLOBAL CONSTANT test_assignment_position = 7
GLOBAL CONSTANT receipt_action_position  = 8
GLOBAL CONSTANT label_action_position    = 9
GLOBAL CONSTANT wsht_action_position     = 10
GLOBAL CONSTANT label_id_position        = 11
GLOBAL CONSTANT receipt_id_position      = 12
GLOBAL CONSTANT wsht_id_position         = 13
GLOBAL CONSTANT label_printer_position   = 14                                 
GLOBAL CONSTANT receipt_printer_position = 15
GLOBAL CONSTANT wsht_printer_position    = 16
GLOBAL CONSTANT auto_wks_position        = 17
GLOBAL CONSTANT action_type_position     = 18
GLOBAL CONSTANT security_source_position = 19
GLOBAL CONSTANT security_string_position = 20
GLOBAL CONSTANT security_flags_position  = 21
GLOBAL CONSTANT auto_job_position        = 22
GLOBAL CONSTANT job_template_position    = 23
GLOBAL CONSTANT supertemplate_position   = 24
GLOBAL CONSTANT user_info_position       = 25
GLOBAL CONSTANT control_object_position  = 26
GLOBAL CONSTANT label_template_position  = 27
GLOBAL CONSTANT workflow_position        = 28

GLOBAL CONSTANT sample_template_header_size     = 28


{ Constants for field controls arrays }

GLOBAL CONSTANT field_name_position   = 1  { Name of the field }
GLOBAL CONSTANT display_position      = 2  { Is it displayed }
GLOBAL CONSTANT copy_position         = 3  { Is it copied }
GLOBAL CONSTANT prompt_position       = 4  { Is it prompted for }
GLOBAL CONSTANT mandatory_position    = 5  { Is it mandatory }
GLOBAL CONSTANT default_type          = 6  { Has it a default }
GLOBAL CONSTANT default_value         = 7  { The default value }
GLOBAL CONSTANT prompt_text           = 8  { The Prompt text   }
GLOBAL CONSTANT library_details       = 9  { Library for prompt }
GLOBAL CONSTANT routine_details       = 10 { Library for prompt }
GLOBAL CONSTANT details_position      = 11 { Position in prompt details }

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE define_job_header_constants

{ Note there is no need to call this routine - It just defines constants }

GLOBAL CONSTANT job_identity_position         = 1
GLOBAL CONSTANT job_creation_title_position   = 2
GLOBAL CONSTANT job_prompt_for_name           = 3
GLOBAL CONSTANT job_syntax_id                 = 4
GLOBAL CONSTANT job_sample_template_id        = 5
GLOBAL CONSTANT job_sample_repeat_count       = 6
GLOBAL CONSTANT job_sample_syntax_id          = 7
GLOBAL CONSTANT job_control_object_position   = 8
GLOBAL CONSTANT job_workflow_position         = 9

GLOBAL CONSTANT job_template_header_size      = 9

ENDROUTINE

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE read_supertemplate_list ( VALUE supertemplate_id ,
                                               template_list )

DECLARE count , subtemplate

ARRAY  template_list

sub_template = select supertemplatelist . listid
               where supertemplate = supertemplate_id
               order on order_num       

WHILE sub_template <> EMPTY DO

        count = numeric ( select supertemplatelist . order_num )
        template_list [ count ] = sub_template

        NEXT supertemplatelist
        sub_template = select supertemplatelist . listid

ENDWHILE

ENDROUTINE      

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE read_in_sample_template_header ( VALUE template_id ,
                                                      template_details )

{ read in the header details for the sample template. Placing the information
  into the fixed array template_details. If the template does not exist or
  cannot be accessed then the routine returns FALSE otherwise it returns TRUE }

DECLARE required_template

{ The template may have been selected by the initial prompt }

IF SELECT samp_tmpl_header . identity <> template_id THEN

        
        required_template = SELECT samp_tmpl_header.identity
                            WHERE  identity = template_id

ELSE

        required_template = template_id

ENDIF

IF required_template = template_id THEN

        ARRAY template_details ARRAY_SIZE ( sample_template_header_size )

        template_details [ IDENTITY_POSITION ]     =
                                        SELECT samp_tmpl_header . identity
        template_details [ LOGIN_TITLE_POSITION ] =
                                        SELECT samp_tmpl_header . login_title
        template_details [ SAMPLE_STATUS_POSITION ] =
                                        SELECT samp_tmpl_header . sample_status
        template_details [ SYNTAX_ID_POSITION ] =
                                        SELECT samp_tmpl_header . syntax_id
        template_details [ EDIT_TESTS_POSITION ] =
                                        SELECT samp_tmpl_header . edit_tests
        template_details [ TEST_ASSIGNMENT_POSITION ] =
                                        SELECT samp_tmpl_header .test_assignment
        template_details [ RECEIPT_ACTION_POSITION ] =
                                        SELECT samp_tmpl_header .receipt_action
        template_details [ LABEL_ACTION_POSITION ] =
                                        SELECT samp_tmpl_header .label_action
        template_details [ WSHT_ACTION_POSITION ] =
                                        SELECT samp_tmpl_header .wsht_action
        template_details [ RECEIPT_ID_POSITION ] =
                                        SELECT samp_tmpl_header .receipt_id
        template_details [ LABEL_ID_POSITION ] =
                                        SELECT samp_tmpl_header .label_id
        template_details [ LABEL_TEMPLATE_POSITION ] =
                                        SELECT samp_tmpl_header .label_template
        template_details [ WSHT_ID_POSITION ] =
                                        SELECT samp_tmpl_header .wsht_id
        template_details [ RECEIPT_PRINTER_POSITION ] =
                                        SELECT samp_tmpl_header.receipt_printer
        template_details [ LABEL_PRINTER_POSITION ] =
                                        SELECT samp_tmpl_header.label_printer
        template_details [ WSHT_PRINTER_POSITION ] =
                                        SELECT samp_tmpl_header .wsht_printer
        template_details [ AUTO_WKS_POSITION ] =
                                        SELECT samp_tmpl_header .auto_wks
        template_details [ ACTION_TYPE_POSITION ] =
                                        SELECT samp_tmpl_header .action_type

        template_details [ SUPERTEMPLATE_POSITION ] =
                                        SELECT samp_tmpl_header . supertemplate

        template_details [ WORKFLOW_POSITION ] =
                                        SELECT samp_tmpl_header . workflow

        template_details [ USER_INFO_POSITION      ] = EMPTY
        template_details [ CONTROL_OBJECT_POSITION ] = EMPTY


        RETURN ( TRUE )

ELSE
        
        RETURN ( FALSE )

ENDIF

ENDROUTINE      

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE read_in_job_template_header ( VALUE template_id ,
                                                   template_details )

{ read in the header details for the job template. Placing the information
  into the fixed array template_details. If the template does not exist or
  cannot be accessed then the routine returns FALSE otherwise it returns TRUE }

DECLARE required_template

required_template = SELECT job_template.identity
                    WHERE  identity = template_id
                    ORDER ON identity


IF required_template = template_id THEN

        ARRAY template_details ARRAY_SIZE ( job_template_header_size )

        template_details [ JOB_IDENTITY_POSITION ]     =
                                        SELECT job_template . identity
        template_details [ JOB_CREATION_TITLE_POSITION ] =
                                        SELECT job_template . creation_title
        template_details [ JOB_PROMPT_FOR_NAME ] =
                                        SELECT job_template . prompt_for_name
        template_details [ JOB_SYNTAX_ID  ] =
                                        SELECT job_template . job_syntax_id
        template_details [ JOB_SAMPLE_TEMPLATE_ID ] =
                                        SELECT job_template . sample_template_id
        template_details [ JOB_SAMPLE_REPEAT_COUNT ] =
                                        SELECT job_template . sample_repeat_count
        template_details [ JOB_SAMPLE_SYNTAX_ID ] =
                                        SELECT job_template . sample_syntax_id
        template_details [ JOB_WORKFLOW_POSITION ] =
                                        SELECT job_template . workflow

        template_details [ JOB_CONTROL_OBJECT_POSITION ] = EMPTY

        RETURN ( TRUE )

ELSE
        
        RETURN ( FALSE )

ENDIF

ENDROUTINE      

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE read_in_template_fields ( VALUE template_id ,
                                         VALUE table_type ,
                                               field_controls ,
                                         VALUE modify_entry ,
                                         VALUE is_modify_template )

{ read in the template field details and initialise any special values for the
  sample record. }

DECLARE template_fields , count , the_default_value , array_positions

ARRAY field_controls ARRAY_SIZE ( 0 , 11 )

template_fields = SELECT template_fields . table_name
                  WHERE  ( table_name  = table_type  ) AND 
                         ( template_id = template_id ) 

IF template_fields = EMPTY THEN
        RETURN ( FALSE )
ENDIF

count = 1

WHILE template_fields <> EMPTY DO

        { Use the order field to obtain the correct position }

        count = numeric ( select template_fields . order_number )

        field_controls [ count , field_name_position ] =
                                       select template_fields . field_name

        field_controls [ count , display_position ] =
                                       select template_fields . display_flag
        field_controls [ count , prompt_position ] =
                                       select template_fields . prompt_flag
        field_controls [ count , mandatory_position ] =
                                       select template_fields . mandatory_flag
        field_controls [ count , copy_position ] =
                                       select template_fields . copy_flag

        field_controls [ count ,  prompt_text ] =
                                       select template_fields . text_prompt
        field_controls [ count ,  library_details ] =
                                       select template_fields . library_name
        field_controls [ count ,  routine_details ] =
                                       select template_fields . routine_name

        field_controls [ count , default_type ] =
                                       select template_fields . default_type
        field_controls [ count , default_value ] =
                                       select template_fields . default_value

        IF table_type = "JOB_HEADER" THEN
		field_controls [ count , copy_position ] = FALSE
        ENDIF

        get_field_details 'table_type' . 
                          'field_controls [ count , field_name_position ]' ,
                          "DATA_TYPE" , field_type      

        IF field_controls [ count , default_type ] = "A" THEN

                IF modify_entry THEN

                        field_controls [ count , display_position ] = TRUE

                ENDIF

        ELSE

                IF modify_entry THEN

                        field_controls [ count , display_position ] = TRUE

                ENDIF

        ENDIF                   

        IF NOT modify_entry AND
           field_controls [ count , mandatory_position ] THEN
           
		IF ( field_controls [ count , default_type  ] = "V" ) AND
		   ( field_controls [ count , default_value ] = " " ) THEN
			field_controls [ count, prompt_position ] = TRUE
		ENDIF
		
        ENDIF

        NEXT template_fields

        template_fields = SELECT template_fields . table_name

ENDWHILE

RETURN ( TRUE ) 

ENDROUTINE

{ --------------------------------------------------------------------------- }


{ --------------------------------------------------------------------------- }

ROUTINE assign_default_value ( VALUE the_table_name ,
                               VALUE the_field_name ,
                               VALUE default_field  ,
                               VALUE field_name     )


        DECLARE link_table, link_field, required_value
        DECLARE version_field
        DECLARE approval_field
        DECLARE select_array    ARRAY select_array  ARRAY_SIZE(0,3)

        GET_FIELD_DETAILS 'the_table_name' . 'default_field' 
                         , "LINK_TABLE" , link_table

        IF link_table = EMPTY THEN

                fatal_error (GET_USER_MESSAGE("LIB_TEMP_DISPLAY_1" ,1): default_field :
                             GET_USER_MESSAGE("LIB_TEMP_DISPLAY_2" ,1): the_table_name )

        ENDIF

        GET_FIELD_DETAILS 'the_table_name' . 'default_field' 
                         , "LINK_FIELD" , link_field

        array_select_add( select_array,
                          ARRAY_SELECT_EQ, 
                          link_field, 
                          SELECT 'the_table_name'.'default_field'
                          )
        
        GET_TABLE_DETAILS 'link_table', "VERSION_FIELD", version_field
        
        IF ( version_field <> EMPTY ) THEN
        
            array_select_add( select_array,
                              ARRAY_SELECT_ORDER, 
                              version_field,
                              ARRAY_SELECT_DESCENDING
                              )
                              
        ENDIF
        
        GET_TABLE_DETAILS 'link_table', "APPROVAL_STATUS", approval_field
        
        IF ( approval_field <> EMPTY ) THEN
        
            array_select_add( select_array,
                              ARRAY_SELECT_EQ,
                              approval_field,
                              "A"
                              )
                              
        ENDIF

        array_select( link_table, FALSE, select_array )
        required_value = SELECT 'link_table'.'field_name'


        IF ( required_value = ERROR ) OR ( required_value = EMPTY ) THEN

                GET_FIELD_DETAILS 'the_table_name' . 'the_field_name' 
                                 , "DEFAULT_VALUE" , required_value

        ENDIF

        ASSIGN 'the_table_name' . 'the_field_name' = required_value

ENDROUTINE

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE copy_default_values ( VALUE required_default_type ,
                                     VALUE the_table_name        ,
                                           field_controls        )

DECLARE count , default_field , field_name , temp ,
        the_default_value , field_number  , array_position ,
        field_type, requires_default_copy, the_field_name

IF ( required_default_type = "B" ) THEN

        requires_default_copy = FALSE
        count = 1

        WHILE field_controls [ count , FIELD_NAME_POSITION ] <> EMPTY DO

                get_field_details 'the_table_name' . 
                                  'field_controls [ count , field_name_position ]' ,
                                  "DATA_TYPE" , field_type

                IF ( field_type = "Date" ) THEN

                        IF select 'the_table_name' .
                                  'field_controls [ count ,
                                                    field_name_position ]' = 
                           date ( " " ) THEN
{**MS1733 HBe 10-10-06: Do not populate current date/time on JOB_HEADER.DATE_TO_START - for web login the required property on the templatelooses its significance}
                              IF NOT ((the_table_name = "JOB_HEADER") AND (field_controls [ count ,field_name_position ] = "DATE_TO_START")) THEN

                                 ASSIGN 'the_table_name' .
                                        'field_controls [ count , 
                                                         field_name_position ]'
                                         = now
                              ENDIF
{**ME1733}                              
                        ENDIF

                ENDIF

                IF ( field_controls [ count , DEFAULT_TYPE ] = "B" ) THEN

                        requires_default_copy = TRUE

                ELSEIF ( field_controls [ count , DEFAULT_TYPE ] = "V" ) AND
                       NOT ( blank ( field_controls [ count ,
                                                      DEFAULT_VALUE ] )) THEN

                        IF field_type = "Date" THEN
                        
                        	IF field_controls [ count, default_value ] = "NULL" THEN

	                                ASSIGN 'the_table_name' .
	                                       'field_controls [ count , 
	                                                         field_name_position ]'
	                                        = NULL

                ELSEIF NOT BLANK ( field_controls [ count, default_value ] ) THEN

	                                ASSIGN 'the_table_name' .
	                                       'field_controls [ count , 
	                                                         field_name_position ]'
	                                        = now +
	                                          interval ( field_controls [ count ,
	                                                           default_value ] )    

                                ELSEIF GLOBAL ( "SAMPLE_SET_BLANK_DATE" ) THEN

                                    ASSIGN 'the_table_name' .
                                           'field_controls [ count , 
                                                             field_name_position ]'
                                            = ""

   
				ENDIF

                        ELSEIF NOT ( blank ( field_controls [ count , DEFAULT_VALUE ] ) ) THEN

                                ASSIGN 'the_table_name' .
                                       'field_controls [ count , 
                                                         field_name_position ]'
                                        = field_controls [ count         , 
                                                           default_value ]

                        ENDIF
        
                ENDIF

                count = count + 1

        ENDWHILE

ELSE

        requires_default_copy = TRUE

ENDIF

IF requires_default_copy THEN

        count = 1

        the_field_name = field_controls [ count , FIELD_NAME_POSITION ]

        WHILE the_field_name <> EMPTY DO

                IF field_controls [ count , DEFAULT_TYPE ] =
                   required_default_type THEN

                        temp = field_controls [ count , DEFAULT_VALUE ]

                        default_field = get_token ( temp , "." )
                        field_name    = get_token ( temp , "." )

                        assign_default_value ( the_table_name ,
                                               the_field_name ,
                                               default_field  ,
                                               field_name     )

                ENDIF

                count = count + 1

                the_field_name = field_controls [ count , FIELD_NAME_POSITION ]

        ENDWHILE

ENDIF

ENDROUTINE

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE reset_copy_default_values ( field_controls  )

DECLARE count

count = 1

WHILE field_controls [ count , FIELD_NAME_POSITION ] <> EMPTY DO

        IF ( field_controls [ count , copy_position ] )       AND
           ( field_controls [ count , default_value ] = "V" ) THEN

                field_controls [ count , default_value ] = ""

        ENDIF

        count = count + 1

ENDWHILE

ENDROUTINE

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE create_blank_template ( field_controls )

ARRAY field_controls [ 100 , 8 ]

ENDROUTINE

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE set_to_display ( VALUE count ,
                                      field_controls )
        
field_controls [ count , prompt_position  ]   = FALSE
field_controls [ count , display_position ]   = TRUE
field_controls [ count , copy_position    ]   = FALSE
field_controls [ count , mandatory_position ] = FALSE

ENDROUTINE

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE set_to_prompt ( VALUE count ,
                                     field_controls )
        
field_controls [ count , prompt_position  ]   = TRUE
field_controls [ count , display_position ]   = FALSE
field_controls [ count , copy_position    ]   = FALSE
field_controls [ count , mandatory_position ] = FALSE

ENDROUTINE
{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE set_fields_to_prompt ( field_controls )

DECLARE count

count = 1

WHILE field_controls [ count , FIELD_NAME_POSITION ] <> EMPTY DO

        set_to_prompt ( count , field_controls )
        count = count + 1

ENDWHILE

ENDROUTINE


{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE set_fields_to_display ( field_controls )

DECLARE count

count = 1

WHILE field_controls [ count , FIELD_NAME_POSITION ] <> EMPTY DO

        set_to_display ( count , field_controls )

        count = count + 1

ENDWHILE

ENDROUTINE

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE remove_job_prompts ( field_controls )

DECLARE count

count = 1

WHILE field_controls [ count , FIELD_NAME_POSITION ] <> EMPTY DO

        IF field_controls [ count , field_name_position] = "JOB_NAME" THEN

                IF is_a_prompt ( field_controls , count ) THEN

                        set_to_display ( count , field_controls )

                ENDIF

        ENDIF

        count = count + 1

ENDWHILE

number_of_fields = count - 1

ENDROUTINE

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE analyse_field_information ( field_controls ,
                                           number_of_fields ,
                                           displays_information )

DECLARE count

displays_information = FALSE

count = 1

WHILE field_controls [ count , FIELD_NAME_POSITION ] <> EMPTY DO

        
        IF ( is_a_prompt ( field_controls , count )) OR
           ( field_controls [ count , DISPLAY_POSITION ] ) THEN

                displays_information = TRUE

        ENDIF

        count = count + 1

ENDWHILE

number_of_fields = count - 1

ENDROUTINE

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE is_a_prompt ( field_controls ,
                             position )
        
RETURN (( field_controls [ position, prompt_position ] ) OR
        ( field_controls [ position , copy_position   ] ))

ENDROUTINE

{******************************************************************************}

ROUTINE strip_the_colon ( string_to_strip )

{
*       Remove trailing colons and dots.
*
*******************************************************************************}

        DECLARE last_char

        string_to_strip = strip ( string_to_strip )

        last_char = substring ( string_to_strip, length ( string_to_strip ), 1 )

        WHILE ( last_char = ":" ) OR ( last_char = "." ) DO

                string_to_strip = strip ( substring ( string_to_strip,
                                                      1,
                                                      length ( string_to_strip )
                                                                       - 1 ))

                last_char = substring ( string_to_strip,
                                        length ( string_to_strip ), 1 )

        ENDWHILE

ENDROUTINE
{ --------------------------------------------------------------------------- }
                
ROUTINE copy_template_details ( template_details ,
                                the_table_name   ,
                                prompt_details   ,
                                count            ,
                                new_position     ,
                                include_copy     )

DECLARE title

IF template_details [ count , mandatory_position ] THEN

        IF global ( "TERMTYPE" ) = "GUI" THEN

                title = template_details [ count , prompt_text ]
                strip_the_colon ( title )
                prompt_details [ new_position , 1 ] = title : " " : ">" 
        
        ELSE

                prompt_details [ new_position , 1 ] = PAD 
                                ( template_details [ count , prompt_text ] , " " , 30 )
                                         : ">" 
        ENDIF

ELSE


        prompt_details [ new_position , 1 ] = PAD 
                        ( template_details [ count , prompt_text ] , " " , 30 )
                                 : ":" 
         
ENDIF

IF strip ( template_details [ count , library_details ] ) <> " " THEN

        prompt_details [ new_position , 2 ] = "ROUTINE"
        prompt_details [ new_position , 3 ] = "$SAMP_JOB"
        prompt_details [ new_position , 4 ] = "SPECIAL_PROMPT"

ELSE

        IF ( is_a_prompt ( template_details , count )) AND
           ( include_copy                            ) THEN

                prompt_details [ new_position , 2 ] = "FORMAT"

        ELSEIF ( template_details [ count , prompt_position ] ) THEN

                prompt_details [ new_position , 2 ] = "FORMAT"

        ELSE

                prompt_details [ new_position , 2 ] = "DISPLAY"

        ENDIF

        prompt_details [ new_position , 3 ] = the_table_name
        prompt_details [ new_position , 4 ] = 
                        template_details [ count , field_name_position ]

ENDIF

prompt_details   [ new_position , 7 ] = count { Link back to the template }
template_details [ count , details_position ] = new_position 

ENDROUTINE
{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE create_prompt_array ( template_field_controls ,
                                     the_table_name          ,  
                                     prompt_details          ,
                                     display_mode            ,
                                     number_of_fields        ,
                                     include_copy            )

DECLARE count , new_position

ARRAY prompt_details ARRAY_SIZE ( 0 , 7 )

count = 1       
new_position = 1

WHILE template_field_controls [ count , FIELD_NAME_POSITION ] <> EMPTY DO

        IF  ( template_field_controls [ count , prompt_position  ] )  OR
            ( template_field_controls [ count , display_position ] )  OR
           (( template_field_controls [ count , copy_position    ]    AND
              include_copy                                         )) THEN      

                
                copy_template_details ( template_field_controls ,
                                        the_table_name          ,
                                        prompt_details          ,
                                        count                   ,
                                        new_position            ,
                                        include_copy            )

                new_position = new_position + 1

        ENDIF

        count = count + 1

ENDWHILE

number_of_fields = new_position - 1

ENDROUTINE
                
{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE mandatory_fields_filled ( the_table_name    ,
                                         sample_info       ,
                                         fields_not_filled )

DECLARE count , fields_filled , new_pos

ARRAY fields_not_filled Array_size ( 0 )

count   = 1
new_pos = 1
fields_filled = TRUE

WHILE sample_info [ count , field_name_position ] <> EMPTY DO

        IF sample_info [ count , mandatory_position ] THEN

                IF MANDATORY_MEANS_NOT_BLANK THEN

                        IF strip ( select 'the_table_name' . 
                          'sample_info [ count , field_name_position ]' ) =
                             " " THEN

				IF sample_info [ count , details_position ] <> EMPTY THEN

					fields_not_filled [ new_pos ] = 
						sample_info [ count , details_position ]
					fields_filled = FALSE
					new_pos = new_pos + 1

				ENDIF           

                        ENDIF           

                ELSEIF select 'the_table_name' . 
                          'sample_info [ count , field_name_position ]' =
                   sample_info [ count , default_value ] THEN

			IF sample_info [ count , details_position ] <> EMPTY THEN

				fields_not_filled [ new_pos ] = 
					sample_info [ count , details_position ]
				fields_filled = FALSE
				new_pos = new_pos + 1

			ENDIF

                ENDIF

        ENDIF
                   
        count = count + 1

ENDWHILE

RETURN ( fields_filled )

ENDROUTINE

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE update_prompt_copy_display (       sample_info     ,
                                            VALUE first_time      ,
                                                  need_new_screen )

DECLARE count , array_position


count           = 1

WHILE sample_info [ count , field_name_position ] <> EMPTY DO

        IF sample_info [ count , copy_position ]  THEN

                sample_copy_field ( sample_info [ count , field_name_position])
                need_new_screen = COPY_FROM_FIRST               

        ENDIF

        count = count + 1

ENDWHILE

ENDROUTINE

{ --------------------------------------------------------------------------- }
        
