{Compared 20140123 /DKTBG}
{******************************************************************************
*
* Module Name   : $LTE_INCIDENT_TMP
*
* Purpose       : Template report for setting up a laboratory table editor
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}


{

  INTRODUCTION
  This report is the skeleton for creating table maintainance routines.
  It is intended to be used with the simpler laboratory tables and
  user defined tables. The data entry screen generated will not support
  list type entry screens such as the component editor.

  The following functions will be provided by this report:

      Add/Modify, Display, Print, List, Remove/Unremove

  Reports to support tables are generated by another setup report which
  will copy this report into a supplied name and then allow modification
  of the copy for the table required. Once modified the functions
  generated can be tested from the generic menu.

  The fields displayed on the data entry screen are defined by entering
  values into parameters in this report.

  Once a report has been created then it can be tested using the generic
  menu provided as part of the setup environment.

  ASSOCIATED FILES
        $LABSETUP.RPF  - Setup Report.
        $LABTABLIB.RPF - Library Report containing main routines.
        $LTE_TEM.RPF   - Skeleton Lab Table Report.(This file)


  SETUP DETAILS
  To customise this report for a table a number of variables and
  arrays must be setup in this report. To assist in this a copy
  of the messages file (MESSAGES.PRN) and the structure file (STRUCTURE.TXT)
  will be required.

  The areas of the report to be modified are indicated by comments and
  all occurrences of **** must be replaced with the required values. Note
  that some variables have been given default values which may also require
  changing.

}

{ --------------------------------------------------------------------------- }

{ --------------- Initialization Statements : DO NOT CHANGE ----------------- }

ENABLE WINDOWS
SET NAME "DISPLAY/"

JOIN LIBRARY $LABTABLIB
JOIN LIBRARY $incident_actions
JOIN LIBRARY $lib_utils

JOIN STANDARD_LIBRARY STD_STRUCTURE
JOIN STANDARD_LIBRARY STD_ARRAY

{ --------------------------------------------------------------------------- }


{ -------------------------- Table Setup Routine ---------------------------- }

ROUTINE table_setup

        ARRAY prompt_details    ARRAY_SIZE ( 0 , 6 )
        ARRAY fields_to_output  ARRAY_SIZE ( 0 )

{

        CHANGE : Specify the name of the table in <name_of_table>
                 eg   name_of_table = "HAZARD"

}

        name_of_table           =  "INCIDENT_TEMPLATE"

{

        CHANGE : MANDATORY : Specify the text to be displayed at the top
                 of the data entry screen in <header_mess>.
                 Note that the text may be specified literally
                 eg   header_mess = "Hazard Data Entry Screen"
                 or may be extracted from the message file
                 eg   header_mess = GET MESSAGE(xyz)

}

        header_mess = GET_USER_MESSAGE ( "INC_TEMPLATE_HDR_TXT" , 1 )

{

        CHANGE : MANDATORY : Specify the text to be displayed at the bottom
                 of the data entry screen in <footer_mess> for the options
                 add , copy , modify but not display.
                 Note that the text may be specified literally
                 eg   footer_mess = "Press DO to Save / EXIT to Quit"
                 or may be extracted from the message file
                 eg   footer_mess = GET MESSAGE(xyz)

}

        footer_mess = GET_USER_MESSAGE ( "STAND_EDIT_MESSAGE" , 1 )

{

        CHANGE : MANDATORY : Specify the text to be displayed at the bottom
                 of the data entry screen in <display_footer_mess> for the
                 display option.
                 Note that the text may be specified literally
                 eg   footer_mess = "Press EXIT to Quit"
                 or may be extracted from the message file
                 eg   footer_mess = GET MESSAGE(xyz)

}

        display_footer_mess = GET_USER_MESSAGE ( "STAND_DISPLAY_MESSAGE" , 1 )

{

        CHANGE : MANDATORY : Specify the names of the fields and the
                 text associated with each field to be displayed on the
                 screen.
                 For each field the field name is stored in an element
                 of array <prompt_details> with an index of FIELD_NAME_POSITION
                 and the message stored with an index of MESSAGE_POSITION.
                 This array will require expanding for the total number
                 of fields required on the screen.

                 e.g
                prompt_details [ 1 , MESSAGE_POSITION    ] = "Group Name"
                prompt_details [ 1 , FIELD_NAME_POSITION ] = "GROUP_ID"

                prompt_details [ 1 , MESSAGE_POSITION    ] = "Hazard Label Text"
                prompt_details [ 1 , FIELD_NAME_POSITION ] = "LABEL_TEXT"

                prompt_details [ 1 , MESSAGE_POSITION    ] = "Description"
                prompt_details [ 1 , FIELD_NAME_POSITION ] = "DESCRIPTION"

                prompt_details [ 1 , MESSAGE_POSITION    ] = "Modifiable Entry"
                prompt_details [ 1 , FIELD_NAME_POSITION ] = "MODIFIABLE"

                The text may be specified literally as shown above
                or extracted from the message file using GET MESSAGE

}

                prompt_details [ 1 , MESSAGE_POSITION    ] =
                        GET_USER_MESSAGE ( "INC_TEMPLATE_PROMPTS" , 1 )
                prompt_details [ 1 , FIELD_NAME_POSITION ] = "GROUP_ID"

                prompt_details [ 2 , MESSAGE_POSITION    ] =
                        GET_USER_MESSAGE ( "INC_TEMPLATE_PROMPTS" , 2 )
               prompt_details [ 2 , FIELD_NAME_POSITION ] = "DESCRIPTION"

                prompt_details [ 3 , MESSAGE_POSITION    ] =
                        GET_USER_MESSAGE ( "INC_TEMPLATE_PROMPTS" , 3 )
                prompt_details [ 3 , FIELD_NAME_POSITION ] = "INITIAL_STATUS"

                prompt_details [ 4 , MESSAGE_POSITION    ] =
                        GET_USER_MESSAGE ( "INC_TEMPLATE_PROMPTS" , 4 )
                prompt_details [ 4 , FIELD_NAME_POSITION ] = "SUBJECT_TABLE"
                prompt_details [ 4 , TYPE_POSITION       ] = "ROUTINE"
                prompt_details [ 4 , LIBRARY_POSITION    ] =
                                GLOBAL ( "CURRENT_LIBRARY" )
                prompt_details [ 4 , ROUTINE_POSITION    ] =
                                "BROWSE_USER_TABLES"

                prompt_details [ 5 , MESSAGE_POSITION    ] =
                        GET_USER_MESSAGE ( "INC_TEMPLATE_PROMPTS" , 5 )
                prompt_details [ 5 , FIELD_NAME_POSITION ] = "INCIDENT_SYNTAX"

                prompt_details [ 6 , MESSAGE_POSITION    ] =
                    GET_USER_MESSAGE ( "STAND_MODIFIABLE" , 1 )
                prompt_details [ 6 , FIELD_NAME_POSITION ] = "MODIFIABLE"

                prompt_details [ 7 , MESSAGE_POSITION    ] = "Days to complete incident"
                prompt_details [ 7 , FIELD_NAME_POSITION ] = "DURATION"

{

        CHANGE : Specify the name of the table to be displayed on the screen
                 in <displayed_name_of_table>. This is useful for foreign
                 language support.
                 eg   displayed_name_of_table = "Hazard"

}

        displayed_name_of_table    = GET_USER_MESSAGE (
                            "INC_TEMPLATE_DISP_TABLE" , 1 )

{

        CHANGE : Specify the name of the directory where text files are stored
                 which may contain descriptive information in <directory> and
                 the extension of the file in <extn>. If there is no associated
                 text file then these should be set to EMPTY.
                 For instance the hazard table.
                 eg   directory = "SMP$TEXTFILES"
                      extn = "HAZ"
                 or
                      directory = EMPTY
                      extn = EMPTY

}

        directory = EMPTY
        extn = EMPTY

{

        CHANGE : MANDATORY : Specify the text to be displayed when prompting
                 for an identifier.
                 Note that the text may be specified literally
                 eg   input_mess  = "Enter Hazard ID : "
                 or may be extracted from the message file
                 eg   input_mess = GET MESSAGE(xyz)

}

        input_mess = GET_USER_MESSAGE ( "INC_TEMPLATE_ID_PROMPT" , 1 )

{

        CHANGE : OPTIONAL : Specify default unique key value for new additions
                to the table - the default values for any new entry to the
                table will be copied from this entry in the database.
                Set <default_value> to be empty to ignore this feature.

                e.g
                  default_value = "DEFAULT"

}

        default_value = EMPTY

{

        CHANGE : MANDATORY : Specify the number of the fields to appear
                on the output generated by the list option.
                For each field to be output on the list an element of the array
                <fields_to_output> should contain a number corresponding to
                the position of that field in the array <prompt_details>.
                This array can be of any size from zero elements to the
                size of the arrays <prompt_details>.

                e.g
                  fields_to_output [ 1 ] = 1
                  fields_to_output [ 2 ] = 4
                  fields_to_output [ 3 ] = 3

}

        fields_to_output [ 1 ]  = 1
        fields_to_output [ 2 ]  = 2
        fields_to_output [ 3 ]  = 3
        fields_to_output [ 4 ]  = 4
        fields_to_output [ 5 ]  = 5
{

        CHANGE : OPTIONAL : Specify a special action to happen on pressing the
                             <select> key.

                CHARACTER_POSITION index contains a character for the menu item.
                TITLE_POSITION     index contains a title for the menu item.
                LIBRARY_POSITION   index contains the library to call.
                ROUTINE_POSITION   index contains a routine in the library.

        eg

        special_actions_report [ 1 , CHARACTER_POSITION ] = "*"
        special_actions_report [ 1 , TITLE_POSITION     ] = "Analysis Options"

        special_actions_report [ 2 , CHARACTER_POSITION ] = "1"
        special_actions_report [ 2 , TITLE_POSITION     ] = "1 Analysis Components"
        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$COMP_EDIT"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "LABTABLE_INPUT"

        special_actions_report [ 2 , CHARACTER_POSITION ] = "1"
        special_actions_report [ 2 , TITLE_POSITION     ] = "1 Analysis Description"
        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$LABTABLIB"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "TEXT_FILE"

}

        ARRAY   special_actions_report  ARRAY_SIZE ( 0 , 4 )

        special_actions_report [ 1 , CHARACTER_POSITION ] = "*"
        special_actions_report [ 1 , TITLE_POSITION     ] = GET MESSAGE ( 2312 , 1 )

        {special_actions_report [ 2 , CHARACTER_POSITION ] = "1"
        special_actions_report [ 2 , TITLE_POSITION     ] = GET MESSAGE ( 2313 , 1 )
        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$TMPLOGIN"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "LABTABLE_INPUT"}

        special_actions_report [ 2 , CHARACTER_POSITION ] = "2"
        special_actions_report [ 2 , TITLE_POSITION     ] = GET MESSAGE ( 2314 , 1 )
        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$TMPLFIELD"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "DO_INCIDENT_FIELDS"

        IF ( GLOBAL ( "TERMTYPE" ) = "GUI" ) THEN  { Abbrev. msgs for buttons }

                {special_actions_report [ 2 , TITLE_POSITION ] =
                               GET_USER_MESSAGE ( "LTE_TEMPL_BUTTON_CONT" , 1 )}
                special_actions_report [ 2 , TITLE_POSITION ] =
                               GET_USER_MESSAGE ( "LTE_TEMPL_BUTTON_FLDS" , 1 )

        ENDIF

{

        CHANGE : OPTIONAL : Specify five standard messages.

                IDENTITY1_MESSAGE contains title text for the identity field.
                MOD_ON_MESSAGE    contains title text for the Modified On field.
                MOD_BY_MESSAGE    contains title text for the Modified by field.
                READ_MESSAGE      contains identifier for the read transaction.
                WRITE_MESSAGE     contains identifier for the write transaction

                Note:
                Where a table contains more than one key0 field, then messages
                for the second (and third and fourth, if appropriate) key0
                fields should be set up in the IDENTITY2_MESSAGE,
                IDENTITY3_MESSAGE and IDENTITY3_MESSAGE elements.

}

        ARRAY   labtable_messages       ARRAY_SIZE ( 0 )

        labtable_messages [ IDENTITY1_MESSAGE ] = GET MESSAGE ( 2545 , 1 )
                                                { "Identity" }
        labtable_messages [ IDENTITY2_MESSAGE ] = GET MESSAGE ( 2884 , 1 )
                                                { "Identity 2" }
        labtable_messages [ IDENTITY3_MESSAGE ] = GET MESSAGE ( 2884 , 2 )
                                                { "Identity 3" }
        labtable_messages [ IDENTITY4_MESSAGE ] = GET MESSAGE ( 2884 , 3 )
                                                { "Identity 4" }
        labtable_messages [ MOD_ON_MESSAGE    ] = GET MESSAGE ( 2546 , 1 )
                                                { "Modified On" }
        labtable_messages [ MOD_BY_MESSAGE    ] = GET MESSAGE ( 2547 , 1 )
                                                { "Modified By" }
        labtable_messages [ READ_MESSAGE      ] = GET MESSAGE ( 2566 , 1 )
                                                { "Labtable Read Transaction" }
        labtable_messages [ WRITE_MESSAGE     ] = GET MESSAGE ( 2567 , 1 )
                                                { "Labtable Write Transaction" }

{

        CHANGE : MANDATORY : Specify the help context for the editor window.
                 The text should be specified literally and should start
                 with the name of the report, suffixed with "_EDIT",
                        i.e. "$LTE_XXX_EDIT"

}

        help_context = "$LTE_TEM_EDIT"


 {   ------     THERE ARE NO MORE FIELDS TO BE SETUP  --------    }

ENDROUTINE

{ --------------------------------------------------------------------------- }
{                                                                             }
{ The following routines are provided as call back points for LTE processing. }
{ User code may be added as appropriate.                                      }
{ --------------------------------------------------------------------------- }

ROUTINE validation_routine

        { Called on pressing the DO key to save LTE screen.               }
        { Called outside of the LTE write transaction.                    }
        {                                                                 }
        { Returns a boolean value to indicate whether to proceed with     }
        { the save process - if FALSE is returned the user is forced back }
        { into the editor                                                 }

DECLARE valid

    valid = FALSE

    IF BLANK ( SELECT incident_template . incident_syntax ) THEN
        flash_message ( "INC_TEMPLATE_NO_SYNTAX" , FALSE )
    ELSEIF BLANK ( SELECT incident_template . subject_table ) THEN
        flash_message ( "INC_TEMPLATE_NO_TABLE" , FALSE )
    ELSE
        valid = TRUE
    ENDIF

        RETURN ( valid )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE prompt_object_routine (       prompt_object ,
                                VALUE key0_count    ,
                                VALUE operation     )

        { Called during the creation of the identity prompts              }
        {                                                                 }
        { prompt_object is the prompt object fro the specified prompt     }
        { key0_count    is the current key0 segment number                }
        {               eg this would be 2 for the version_number         }
        {                  field of the versioned_analysis table          }
        { operation     the current LTE operation eg ADD, MODIFY, DISPLAY }
        {                                                                 }
        { No return value is required                                     }

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE create_id_routine

        { Called before starting the identity prompts of an LTE for the   }
        { ADD and COPY options.                                           }
        {                                                                 }
        { The return value is used as the identity of the new record      }
        { instead of starting the identity prompts.                       }
        { Returning EMPTY causes the identity prompt to be started.       }

        RETURN ( EMPTY )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE update_routine ( labtable )

        { Called on pressing the DO key to save LTE screen.               }
        { Called after the LTE write transaction has been started.        }
        {                                                                 }
        { labtable is the labtable object.                                }
        {                                                                 }
        { The return value is TRUE  if updates have been performed        }
        {                     FALSE if updates have NOT been performed    }
        {                     EMPTY - the systems checks for updates      }

        RETURN ( FALSE )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE read_data_routine (       labtable  ,
                            VALUE operation )

        { Called after the record has been selected / reserved but before }
        { the editor screen has been built.                               }
        {                                                                 }
        { labtable      the labtable object.                              }
        { operation     the current LTE operation eg ADD, MODIFY, DISPLAY }
        {                                                                 }
        { No return value is required                                     }

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE validate_new_id_routine ( VALUE new_id )

        { Called after each ID value has been entered.                    }
        {                                                                 }
        { new_id is the value entered at the prompt.                      }
        {                                                                 }
        { Returns a boolean value to indicate whether the value is valid. }

        RETURN ( TRUE )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE do_the_work  ( VALUE operation )

table_setup ()
smp_lte_perform_option  ( name_of_table              ,
                          displayed_name_of_table    ,
                          prompt_details             ,
                          labtable_messages          ,
                          default_value              ,
                          input_mess                 ,
                          header_mess                ,
                          footer_mess                ,
                          display_footer_mess        ,
                          directory                  ,
                          extn                       ,
                          help_context               ,
                          GLOBAL ("CURRENT_LIBRARY") ,
                          fields_to_output           ,
                          special_actions_report     ,
                          operation                  )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE add_option ( option )

do_the_work ( "add_ident" )

ENDROUTINE


{ --------------------------------------------------------------------------- }

ROUTINE copy_option ( option )

do_the_work ( "copy_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE modify_option ( option )

do_the_work ( "modify_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE display_option ( option )

do_the_work ( "display_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE remove_option ( option )

do_the_work ( "remove_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE restore_option ( option )

do_the_work ( "restore_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE list_option ( option )

do_the_work ( "list_idents" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE print_option ( option )

do_the_work ( "print_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE smp_lte_initialise

ENDROUTINE


{*****************************************************************************}

    ROUTINE browse_user_tables ( VALUE column     ,
                                 VALUE row        ,
                                 VALUE cell_width ,
                                       window     ,
                                 VALUE is_display )

{
*
******************************************************************************}

DECLARE subject_table, table_array , view_array , count

    inc_action_get_tables_and_views ( table_array , view_array  )

        subject_table = SELECT incident_template . subject_table

        IF is_display THEN

                DISPLAY subject_table
                        ON LINE   row
                        FROM      column
                        TO        column + cell_width - 1
                        IN WINDOW window
        ELSE

                PROMPT FOR subject_table
                       CLASS "STD_PROMPT_TEXT_CHOOSE"
                       WITH ( display_only = global ("DISPLAY_MODE" ) ,
                              column       = column                   ,
                              row          = row                      ,
                              window       = window                   ,
                              width        = cell_width               ,
                              choose_array = table_array              )

                ASSIGN incident_template . subject_table = subject_table

        ENDIF

ENDROUTINE
