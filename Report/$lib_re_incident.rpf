{******************************************************************************
*
* Module Name   : $LIB_RE_INCIDENT
*
* Purpose       : Displays the incidents defined for the currently select
*         sample test and result in the result entry screen.
*
* Portability   : Not Checked
*
* Re-entrant    : Yes
*
*********************************************************************************}
{--------------------------------------------------------------------------------}
{--------------------------------------------------------------------------------}
{  CHG          DATE    PGMR    DESCRIPTION                                      }
{--------------------------------------------------------------------------------}
{**MS1825   30-01-08 ATø    Changed the fields that are shown in result entry}
{                                                                                }
{--------------------------------------------------------------------------------}

SET COMPILE_OPTION DECLARE

SET NOTPROTECTED

JOIN STANDARD_LIBRARY std_class
JOIN STANDARD_LIBRARY std_utils
JOIN STANDARD_LIBRARY std_window

JOIN LIBRARY $lib_utils
JOIN LIBRARY $lib_re_globals
JOIN LIBRARY $prompt_list

{* Global Constants ***********************************************************}

{* Local Constants ************************************************************}

CONSTANT LIB_RE_INCIDENT_CLASS = "LIB_RE_INCIDENT_CLASS"
{
CONSTANT INC_ID_COL     = 1
**MS1825
CONSTANT INC_TABLE  = 2
CONSTANT INC_OP         = 3
CONSTANT INC_DATE       = 4
**MS1825}

CONSTANT INC_TEMPLATE   = 1
CONSTANT INC_DESC       = 2
CONSTANT INC_NC_STATUS  = 3
CONSTANT INC_NCID       = 4
CONSTANT INC_ID_COL     = 5
CONSTANT INC_SORT       = 6


{* Global Variables ***********************************************************}

{* Main Code ******************************************************************}


        EXIT

{* Start Of Routines **********************************************************}

{******************************************************************************}

    GLOBAL

    ROUTINE lib_re_incident_incident_initialise

{
*
*
*******************************************************************************}

    IF NOT GLOBAL ( "LIBRARY_INITIALISED" ) THEN

        DEFINE CLASS LIB_RE_INCIDENT_CLASS

            PROPERTIES

                "TABLE_NAME"          ,
                "NEED_REBUILD"        ,
                "INCIDENT_ARRAY"      ,
                "INCIDENT_COUNT"      ,
                "ALL_INCIDENT_ARRAY"

            ACTIONS

                "ADD_JOB_INCIDENTS"    ,
                "ADD_SAMPLE_INCIDENTS" ,
                "ADD_TEST_INCIDENTS"   ,
                "ADD_RESULT_INCIDENTS" ,
                "BUILD_INCIDENT_ARRAY" ,
                "ADD_NEW_INCIDENTS"    ,
                "REBUILD"

        END CLASS

        SET GLOBAL "LIBRARY_INITIALISED" TO TRUE

        set_up_std_prompt_list_class ()

    ENDIF

ENDROUTINE { lib_re_incident_incident_initialise }


{******************************************************************************}

    ROUTINE lib_re_incident_class_action_rebuild ( incident_context ,
                               result_object    ,
                               result_context   )

{
*   Rebuilds the incidents grid display array.
*
*******************************************************************************}

    result_object . incident_context . add_job_incidents ( result_object )
    result_object . incident_context . add_sample_incidents ( result_object )
    result_object . incident_context . add_test_incidents ( result_object )
    result_object . incident_context . add_result_incidents ( result_object )

    incident_context . build_incident_array ( result_object )

    result_object . incident_context . need_rebuild  = FALSE

ENDROUTINE    { lib_re_incident_class_action_rebuild }


{******************************************************************************}

    ROUTINE lib_re_incident_class_action_add_job_incidents (
                            incident_context ,
                            result_object    )

{
*   Removes job details from the display array if the job has changed and
*   adds the incidents for the new job.
*
*******************************************************************************}

DECLARE job_id , job_object

    job_object = result_object . test_object . sample_object . job_object

    IF job_object . read_incidents THEN

        job_id = SELECT sample . job_name IN OBJECT
                result_object . test_object . sample_object

        incident_context . table_name = "JOB_HEADER"

        incident_context . add_new_incidents (
                        job_id                      ,
                        job_object . incident_array )

        job_object . read_incidents = FALSE

    ENDIF

ENDROUTINE    { lib_re_incident_class_action_add_job_incidents }


{******************************************************************************}

    ROUTINE lib_re_incident_class_action_add_sample_incidents (
                            incident_context ,
                            result_object    )

{
*
*
*******************************************************************************}

DECLARE samp_id , sample_object

    sample_object = result_object . test_object . sample_object

    IF sample_object . read_incidents THEN
        IF GLOBAL ( "COMMIT_VIEW_MODE" ) THEN
            samp_id = SELECT sample . id_numeric IN OBJECT sample_object
            incident_context . table_name = "C_SAMPLE"
        ELSE
            samp_id = SELECT sample . id_numeric IN OBJECT sample_object
            incident_context . table_name = "SAMPLE"
        ENDIF

        incident_context . add_new_incidents (samp_id, sample_object . incident_array )

        sample_object . read_incidents = FALSE

    ENDIF

ENDROUTINE    { lib_re_incident_class_action_add_sample_incidents }


{******************************************************************************}

    ROUTINE lib_re_incident_class_action_add_test_incidents (
                            incident_context ,
                            result_object    )

{
*
*
*******************************************************************************}

DECLARE test_id , test_object

    test_object = result_object . test_object

    IF test_object . read_incidents THEN

        test_id = SELECT result . test_number IN OBJECT result_object

        incident_context . table_name = "TEST"

        incident_context . add_new_incidents (
                        test_id                      ,
                        test_object . incident_array )

        test_object . read_incidents = FALSE

    ENDIF

ENDROUTINE    { lib_re_incident_class_action_add_test_incidents }


{******************************************************************************}

    ROUTINE lib_re_incident_class_action_add_result_incidents (
                            incident_context ,
                            result_object    )

{
*
*
*******************************************************************************}

DECLARE res_id

    res_id = SELECT result . test_number IN OBJECT result_object
    res_id = res_id : SELECT result . name IN OBJECT result_object

    incident_context . table_name = "RESULT"

    incident_context . add_new_incidents (
                    res_id                            ,
                    incident_context . incident_array )

ENDROUTINE    { lib_re_incident_class_action_add_result_incidents }


{******************************************************************************}

    ROUTINE lib_re_incident_class_action_build_incident_array (
                            incident_context ,
                            result_object    )

{
*   Read through the incident arrays on the sample, test and result objects
*   and build up the incident array for display.
*
*******************************************************************************}

DECLARE inc_arrays , row , inc_count , count , incident_array , copy_array

    ARRAY inc_arrays ARRAYSIZE ( 4 )

    inc_arrays [ 1 ] = result_object . test_object . sample_object . job_object . incident_array
    inc_arrays [ 2 ] = result_object . test_object . sample_object . incident_array
    inc_arrays [ 3 ] = result_object . test_object . incident_array
    inc_arrays [ 4 ] = incident_context . incident_array

    count          = 1
    row            = 1

    ARRAY incident_context . all_incident_array

    incident_array = incident_context . all_incident_array

    WHILE count <= size_of_array ( inc_arrays ) DO

        inc_count  = 1
        copy_array = inc_arrays [ count ]

        WHILE inc_count <= size_of_array ( inc_arrays [ count ] ) DO

            incident_array [ row , INC_ID_COL ] = copy_array [ inc_count , INC_ID_COL ]

            incident_array [ row , INC_TEMPLATE ] = copy_array [ inc_count , INC_TEMPLATE ]
{**MS1825}
            incident_array [ row , INC_DESC   ] = copy_array [ inc_count , INC_DESC ]

            incident_array [ row , INC_NC_STATUS   ] = copy_array [ inc_count , INC_NC_STATUS ]

            {incident_array [ row , INC_STATUS   ] =  copy_array [ inc_count , INC_STATUS ]}

            {incident_array [ row , INC_TABLE  ] = copy_array [ inc_count , INC_TABLE ]}
{**MS1825}
            incident_array [ row , INC_NCID   ] = copy_array [ inc_count , INC_NCID ]

            row       = row + 1
            inc_count = inc_count + 1

        ENDWHILE

        count = count + 1

    ENDWHILE

    incident_context . incident_count = size_of_array ( inc_arrays [ 1 ] ) +
                                        size_of_array ( inc_arrays [ 2 ] ) +
                                        size_of_array ( inc_arrays [ 3 ] )

ENDROUTINE    { lib_re_incident_class_action_build_incident_array }


{******************************************************************************}

    ROUTINE lib_re_incident_class_action_add_new_incidents (
                              incident_context ,
                        VALUE subject_id       ,
                              incident_array   )

{
*   Reads the incident records for the given subject and adds them to the
*   grid display_array.
*
*******************************************************************************}

DECLARE inc_id , insert_pos, dynamic_sql, description, test_count, sample, analysis, inc_sent, nc_id, nc_status, nc, template_id
    ARRAY incident_array

{    inc_id = SELECT incidents . incident_id
            WHERE subject_table = incident_context . table_name
            AND   subject_field = subject_id
            ORDER ON test_number, incident_date
}
    insert_pos = size_of_array ( incident_array ) + 1



    CREATE OBJECT "STD_DYNAMIC_SQL" , dynamic_sql

    dynamic_sql . add_to_sql_statement ( "SELECT incident_id, description, test_count, sample, analysis, SENT, NC_IDENTITY, NC_STATUS, TEMPLATE_ID" )
    dynamic_sql . add_to_sql_statement ( " FROM incidents " )
    dynamic_sql . add_to_sql_statement ( " WHERE subject_table = '": incident_context . table_name : "'" )
    dynamic_sql . add_to_sql_statement ( " AND   subject_field = '" : subject_id : "'" )
    dynamic_sql . add_to_sql_statement ( " ORDER BY test_number, incident_date" )

    dynamic_sql . add_select_field  ( "incidents","incident_id"  )
    dynamic_sql . add_select_field  ( "incidents","description"  )
    dynamic_sql . add_select_field  ( "incidents","test_count"  )
    dynamic_sql . add_select_field  ( "incidents","sample"  )
    dynamic_sql . add_select_field  ( "incidents","analysis"  )
    dynamic_sql . add_select_field  ( "incidents","SENT"  )
    dynamic_sql . add_select_field  ( "incidents","NC_IDENTITY"  )
    dynamic_sql . add_select_field  ( "incidents","NC_STATUS"  )
    dynamic_sql . add_select_field  ( "incidents","TEMPLATE_ID" )

    dynamic_sql . execute ()

    inc_id = dynamic_sql . select ( 1 )

{fm("the_table:  '":incident_context . table_name:"'":ASCII(10):
   "subject_id: '":subject_id:"'":ASCII(10):
   "inc_id:     '":inc_id:"'")}

    WHILE inc_id <> EMPTY DO


{**MS1825}
{
        description = STRIP(SELECT incidents . description)
        test_count  = STRIP(SELECT incidents . test_count)
        sample      = STRIP(SELECT incidents . sample)
        analysis    = STRIP(SELECT incidents . analysis)
}
        description = STRIP(dynamic_sql . select ( 2 ))
        test_count  = STRIP(dynamic_sql . select ( 3 ))
        sample      = STRIP(dynamic_sql . select ( 4 ))
        analysis    = STRIP(dynamic_sql . select ( 5 ))
        IF test_count = 0 THEN
            IF (INDEX(description, sample) = 0) THEN
                description = STRIP(sample):": ":description
            ENDIF
        ELSE
            IF (INDEX(description, analysis) = 0) THEN
                description = analysis:"/":test_count:": ":description
            ENDIF
        ENDIF

        inc_sent    = STRIP(dynamic_sql . select ( 6 ))
        nc_id       = STRIP(dynamic_sql . select ( 7 ))
        nc_status   = STRIP(dynamic_sql . select ( 8 ))
	template_id = STRIP(dynamic_sql . select ( 9 ))
	
        IF inc_sent = "T" THEN
            nc = nc_id:": ":nc_status
        ELSE
            nc = " - "
        ENDIF

        incident_array [ insert_pos , INC_TEMPLATE ]    = template_id
        incident_array [ insert_pos , INC_DESC     ]    = description   
        incident_array [ insert_pos , INC_NC_STATUS]    = nc            
        incident_array [ insert_pos , INC_NCID     ]    = STRIP ( nc_id)
        incident_array [ insert_pos , INC_ID_COL   ]    = STRIP ( inc_id )
        {incident_array [ insert_pos , INC_STATUS   ]   = STRIP ( SELECT incidents . STATUS )}
{**MS1825}

        dynamic_sql . next ()
        inc_id = dynamic_sql . select ( 1 )
        {NEXT incidents

        inc_id     = SELECT incidents . incident_id}
        insert_pos = insert_pos + 1

    ENDWHILE

ENDROUTINE    { lib_re_incident_class_action_add_new_incidents }


{******************************************************************************}

    GLOBAL

    ROUTINE lib_re_incident_create_incidents_form ( result_context )

{
*   Routine to set up the incidents form for gui display
*
*******************************************************************************}

    DECLARE list

    { Create the form }

    CREATE OBJECT PROMPT_CLASS_FORM , result_context . incidents_form

    result_context . incidents_form . height = 5
    result_context . incidents_form . width  = 100

    result_context . incidents_form . row    = 24
    result_context . incidents_form . column = GLOBAL ( "GUI_WIDTH" ) -
                                 result_context . incidents_form . width - 2

    result_context . incidents_form . header = GET_USER_MESSAGE ( "LIB_RE_INCIDENT_FORM_HEADER", 1 )
    result_context . incidents_form . proportional = TRUE
    result_context . incidents_form . button_style = FORM_BUTTON_NONE

    { result_context . incidents_form . prompt_id = "$LIB_RE_INCIDENT_MAIN" }

    { Create the lst control }

    CREATE OBJECT PROMPT_LIST_CLASS, list

    list . row    = 1
    list . column = 1
    list . width  = result_context . incidents_form . width
    list . height = result_context . incidents_form . height
    list . full_screen = TRUE
    list . style       = list . style + LIST_STYLE_GRIDLINES

    result_context . incidents_form . add_prompt ( list )

    { Define the list control }


    list . add_column (GET_USER_MESSAGE ( "RESULT_ENTRY_INCIDENT_SCREEN_HEADER_N_GUI", 2 ),  8)
    list . add_column (GET_USER_MESSAGE ( "RESULT_ENTRY_INCIDENT_SCREEN_HEADER_N_GUI", 3 ), 35)
    list . add_column (GET_USER_MESSAGE ( "RESULT_ENTRY_INCIDENT_SCREEN_HEADER_N_GUI", 4 ), 13)
    list . add_column (GET_USER_MESSAGE ( "RESULT_ENTRY_INCIDENT_SCREEN_HEADER_N_GUI", 5 ),  0)
    list . add_column (GET_USER_MESSAGE ( "RESULT_ENTRY_INCIDENT_SCREEN_HEADER_N_GUI", 6 ),  0)
    {list . add_column ("Status",10)}

    ARRAY list . user_info

ENDROUTINE { lib_re_incident_create_incidents_form }


{******************************************************************************}

    ROUTINE lib_re_incident_display_incident ( inc_grid )

{
*   Displays the incident record.
*
*******************************************************************************}

DECLARE row , inc_id , old_mode

    row = inc_grid . current_row

    IF row <> 0 THEN

        inc_id   = inc_grid . user_info [ row , INC_ID_COL ]
        old_mode = GLOBAL ( "LABTABLE_MODE" )

        SET GLOBAL "LABTABLE_MODE" TO TRUE

        MENUPROC 10099 USING inc_id

        SET GLOBAL "LABTABLE_MODE" TO old_mode

    ENDIF

ENDROUTINE    { lib_re_incident_display_incident }


{******************************************************************************}

    GLOBAL ROUTINE lib_re_incident_rebuild_incidents ( result_object  ,
                            result_context )

{
*   Marks the incident form for rebuild.
*
*******************************************************************************}

    IF variable_is_assigned ( result_object . incident_context ) THEN

        result_object . incident_context . need_rebuild = TRUE

    ENDIF

ENDROUTINE    { lib_re_incident_rebuild_incidents }


{******************************************************************************}

    ROUTINE lib_re_incident_create_context ( result_object )

{
*   Creates the incidents context object on the result object.
*
*******************************************************************************}

    CREATE OBJECT LIB_RE_INCIDENT_CLASS , result_object . incident_context

    result_object . incident_context . need_rebuild   = TRUE
    result_object . incident_context . table_name     = ""

    ARRAY result_object . incident_context . incident_array
    ARRAY result_object . incident_context . all_incident_array

ENDROUTINE    { lib_re_incident_create_context }


{******************************************************************************}

    GLOBAL

    ROUTINE lib_re_incident_display_incidents ( result_object  ,
                            result_context )

{
*
*   Routine to display the audits
*
*******************************************************************************}

    DECLARE test_object ,
            sample_object ,
            job_object ,
            number_of_incidents

    IF result_context . incidents_on THEN

        IF NOT variable_is_assigned ( result_object .
                            incident_context ) THEN

            lib_re_incident_create_context ( result_object )

            result_object . incident_context . rebuild (
                                result_object  ,
                                result_context )

        ELSE

            test_object   = result_object . test_object
            sample_object = test_object . sample_object
            job_object    = sample_object . job_object

            IF NOT lock_validate_object ( "TEST" , test_object ) THEN

                test_object . read_incidents = TRUE
                test_object . reselect ( )

            ENDIF

            IF NOT lock_validate_object ( "SAMPLE" , sample_object ) THEN

                sample_object . read_incidents = TRUE
                sample_object . reselect ( )

            ENDIF

            IF SELECT job_header . job_name IN OBJECT job_object <> EMPTY THEN

                IF NOT lock_validate_object ( "JOB_HEADER" , job_object ) THEN

                    job_object . read_incidents = TRUE
                    job_object . reselect ( )

                ENDIF

            ENDIF

            number_of_incidents =
                        size_of_array ( job_object    . incident_array ) +
                        size_of_array ( sample_object . incident_array ) +
                        size_of_array ( test_object   . incident_array )

            IF ( result_object . incident_context . need_rebuild ) OR
               ( test_object   . read_incidents                  ) OR
               ( sample_object . read_incidents                  ) OR
               ( job_object    . read_incidents                  ) OR
               ( result_object . incident_context . incident_count <>
                                             number_of_incidents ) THEN

                result_object . incident_context . rebuild (
                                result_object  ,
                                result_context )

            ENDIF

        ENDIF

        result_context . incidents_form . prompt_objects [ 1 ] . user_info =
          result_object . incident_context . all_incident_array


        IF GLOBAL ( "TERMTYPE" ) = "GUI" THEN

            lib_re_incident_rebuild_grid ( result_context                   ,
                                           result_object . incident_context )

        ENDIF

    ENDIF

ENDROUTINE


{******************************************************************************}

    GLOBAL

    ROUTINE lib_re_incident_rebuild_grid ( result_context   ,
                                           incident_context )

{
*
*   Routine to resize the incidents grid.
*
*******************************************************************************}

    DECLARE list ,
            window_line

    list = result_context . incidents_form . prompt_objects [ 1 ]

    list . start_rebuild ( )

    list . remove_all_items ( )

    window_line = 1

    WHILE window_line <= size_of_array ( incident_context . all_incident_array ) DO

        list . insert_item (
                  incident_context . all_incident_array [ window_line, 1 ] ,
                  -1                                                       )
        list . set_item (
                  2                                                 ,
                  incident_context . all_incident_array [ window_line, 2 ])
        list . set_item (
                  3                                                 ,
                  incident_context . all_incident_array [ window_line, 3 ])
        list . set_item (
                  4                                                 ,
                  incident_context . all_incident_array [ window_line, 4 ])
        list . set_item (
                  5                                                 ,
                  incident_context . all_incident_array [ window_line, 5 ])


        window_line = window_line + 1

    ENDWHILE

    list . rebuild ( )

ENDROUTINE     { lib_re_incident_rebuild_grid }

{******************************************************************************}

    GLOBAL

    ROUTINE lib_re_incident_set_visible (       result_context ,
                                          VALUE is_visible     )

{*
*   Set the visibility property of the incident screen
*
*******************************************************************************}

    DECLARE was_visible

    was_visible = result_context . incidents_form . visible

        result_context . incidents_form .
            prompt_objects [ 1 ] . set_visible ( is_visible )
        result_context . incidents_form . set_visible ( is_visible )

        RETURN ( was_visible )

ENDROUTINE

{******************************************************************************}
{******************************************************************************}
{******************************************************************************}

