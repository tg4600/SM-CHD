{******************************************************************************
*
* Module Name   : $LOGIN_INTERFACE.RPF
*
* Description   : Provides front end screen for logging in samples and jobs
*
*******************************************************************************}

JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_CLIENT
JOIN STANDARD_LIBRARY STD_LOGIN
JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_WINDOW

JOIN LIBRARY $BROWSE_FIELD
JOIN LIBRARY $CRITERIA_CACHE
JOIN LIBRARY $CRITERIA_FIELD
JOIN LIBRARY $EXPLORER_RMB
JOIN LIBRARY $EXPLORER_LIB
JOIN LIBRARY $INSTALL_WINDOW
JOIN LIBRARY $LIB_LIST_VIEWER
JOIN LIBRARY $LIB_POPUP_MENU
JOIN LIBRARY $LIB_SAMP
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $ROLE_LIB
JOIN LIBRARY $SAMP_EGC
JOIN LIBRARY $SAMP_JOB
JOIN LIBRARY $SAMP_USER
JOIN LIBRARY $TOOLBOX

SET COMPILE_OPTION DECLARE

SET NOTPROTECTED
ENABLE WINDOWS
SET NAME "DISPLAY"

GLOBAL CONSTANT LOGIN_INTERFACE_SESSION_FORM = "SAMPLE_LOGIN_SESSION_FORM"


{******************************************************************************}

GLOBAL

ROUTINE login_interface_list_job_samples ( VALUE job_identity )

{
* Description : Displays the samples belonging to the passed job. A form is 
*               created with the job name and description and a list of its
*               samples. Standard right mouse options are available for the
*               samples and may be customised by an account with the correct
*               privelige (9013)
*
* Parameters  : job identity: the id of the job whose samples are to be shown
*
* Returns     : None
*
******************************************************************************}

    DECLARE  session_form

    login_interface_initialise ()

    CREATE OBJECT LOGIN_INTERFACE_SESSION_FORM , session_form

    session_form . header                 = GET_USER_MESSAGE ( "SAMP_JOB_CONST_1" ,1 )
    session_form . display_job_identity   = TRUE
    session_form . prompt_job_identity    = FALSE
    session_form . display_template       = FALSE
    session_form . display_repeat_count   = FALSE
    session_form . display_login_button   = FALSE
    session_form . display_options_button = FALSE
    session_form . sample_login           = FALSE
    
    session_form . job_identity           = job_identity
    
    session_form . prompt_id              = "$LOGIN_INTERFACE_JOB_SAMPLES"

    session_form . start_prompt()
    session_form . wait_prompt()
    session_form . end_prompt()

ENDROUTINE

{******************************************************************************}

ROUTINE sample_login_new_job ( VALUE option )

{
* Description : Menu Option.
*               Prompts for a job template then logs in a job for that template.
*               Samples can then be logged into the new job.
*
* Parameters  : option: the procedure number calling this option
*
* Returns     : None
*
******************************************************************************}

    DECLARE  session_form, login_details

    login_interface_initialise ()

    CREATE OBJECT SAMP_JOB_JOB_LOGIN_CLASS  , login_details
    login_details . job_identity              = " "
    login_details . job_template              = " "
    login_details . dont_confirm              = FALSE
    login_details . use_current_transaction   = FALSE
    login_details . do_defer_operations       = FALSE
    login_details . do_post_sample_operations = FALSE

    IF login_details . login_a_job() <> ERROR THEN

        CREATE OBJECT LOGIN_INTERFACE_SESSION_FORM , session_form

        session_form . header               = GET_USER_MESSAGE ( "SAMP_JOB_CONST_1" ,1 )
        session_form . display_job_identity = TRUE
        session_form . prompt_job_identity  = FALSE
        session_form . display_template     = TRUE
        session_form . prompt_template      = BLANK ( login_details . sample_template )
        session_form . prompt_repeat_count  = ( login_details . repeat_count = 0 )
        session_form . template             = login_details . sample_template
        session_form . repeat_count         = login_details . repeat_count
        session_form . job_identity         = login_details . job_identity
        session_form . sample_syntax        = login_details . sample_syntax
        session_form . prompt_id            = "$LOGIN_INTERFACE_NEW_JOB"
        
        session_form . go()

    ENDIF

ENDROUTINE

{*****************************************************************************}

ROUTINE sample_login_no_template ( VALUE option )

{
* Description : Menu Option.
*               Allows samples to be logged in using the BLANK sample template.
*
* Parameters  : option: the procedure number calling this option
*
* Returns     : None
*
******************************************************************************}

    DECLARE session_form

    login_interface_initialise ()

    CREATE OBJECT LOGIN_INTERFACE_SESSION_FORM , session_form

    session_form . header               = GET_USER_MESSAGE ( "SAMP_JOB_CONST_1" ,1 )
    session_form . display_job_identity = FALSE
    session_form . prompt_job_identity  = FALSE
    session_form . display_template     = TRUE
    session_form . prompt_template      = FALSE
    session_form . prompt_repeat_count  = TRUE
    session_form . template             = "BLANK"
    session_form . repeat_count         = 0
    session_form . job_identity         = ""
    session_form . sample_syntax        = ""
    session_form . prompt_id            = "$LOGIN_INTERFACE_NO_TEMPLATE"

    session_form . go()


ENDROUTINE

{*****************************************************************************}

ROUTINE sample_login_using_template ( VALUE option )

{
* Description : Menu Option.
*               Provides a screen that prompts for a sample template
*               Samples can then be logged in using the selected template. 
*
* Parameters  : option: the procedure number calling this option
*
* Returns     : None
*
******************************************************************************}

    DECLARE session_form

    login_interface_initialise ()

    CREATE OBJECT LOGIN_INTERFACE_SESSION_FORM , session_form

    session_form . header               = GET_USER_MESSAGE ( "SAMP_JOB_CONST_1" ,1 )
    session_form . display_job_identity = FALSE
    session_form . prompt_job_identity  = FALSE
    session_form . display_template     = TRUE
    session_form . prompt_template      = TRUE
    session_form . prompt_repeat_count  = TRUE
    session_form . template             = ""
    session_form . repeat_count         = 0
    session_form . job_identity         = ""
    session_form . sample_syntax        = ""
    session_form . prompt_id            = "$LOGIN_INTERFACE_TEMPLATE"

    session_form . go()

ENDROUTINE

{*****************************************************************************}

ROUTINE sample_login_existing_job ( VALUE option )

{
* Description : Menu Option.
*               Prompts for an existing job
*               Samples can then be logged in and added to this existing job. 
*
* Parameters  : option: the procedure number calling this option
*
* Returns     : None
*
******************************************************************************}

    DECLARE session_form

    login_interface_initialise ()

    CREATE OBJECT LOGIN_INTERFACE_SESSION_FORM , session_form

    session_form . header               = GET_USER_MESSAGE ( "SAMP_JOB_CONST_1" ,1)
    session_form . display_job_identity = TRUE
    session_form . prompt_job_identity  = TRUE
    session_form . display_template     = TRUE
    session_form . prompt_template      = TRUE
    session_form . prompt_repeat_count  = TRUE
    session_form . repeat_count         = 0
    session_form . template             = ""
    session_form . sample_syntax        = ""
    session_form . prompt_id            = "$LOGIN_INTERFACE_EXISTING_JOB"

    session_form . go()

ENDROUTINE

{*********************************************************************************}

GLOBAL

ROUTINE login_interface_initialise

{
* Description : Initialises all classes required to provide the sample login
*               front screen and login objects
*
* Parameters  :
*
* Returns     :
*
******************************************************************************}
    
    samp_job_initialise()
    set_up_popup_class()
    define_list_viewer_class()

    DEFINE CLASS "SAMPLE_LIST"
    
        INHERIT LIST_VIEWER_CLASS
    
        ACTIONS
            "start_prompt"

    END CLASS

    DEFINE CLASS "SAMPLE_LOGIN_SESSION_FORM"
    
        INHERIT PROMPT_CLASS_FORM
        
        INITIALISATION
        
        PROPERTIES
            "template"                , { sample template to use            }
            "repeat_count"            , { repeat count number               }
            "job_identity"            , { job to log sample into            }
            "sample_syntax"           , { sample syntax to use              }
            "prompt_template"         , { allow template modification?      }
            "prompt_repeat_count"     , { allow repeat count modification ? }
            "prompt_job_identity"     , { allow job id modification ?       }
            "display_template"        , { show template prompt ?            }
            "display_repeat_count"    , { show repeat count prompt ?        }
            "display_job_identity"    , { show job identity prompt ?        }
            "display_login_button"    , { show login button ?               }
            "display_options_button"  , { show options button ?             }
            "sample_session_array"    , { array of sample ids logged in     }
            "sample_login"            , { show Login.. rmb                  }
            "job_description_prompt"  , { internal }
            "sample_list"             , { internal }
            "login_button"              { internal }
        ACTIONS
            "start_prompt"            ,
            "end_prompt"              ,
            "login"                   , { invoke login                      }
            "go"

    END CLASS

ENDROUTINE

{*****************************************************************************}
{*** sample list class *******************************************************}
{*****************************************************************************}

{*****************************************************************************}

ROUTINE sample_list_action_start_prompt( self )

{
* Description : Overridden start prompt for list viewer. Sets non
*               user-changeable attributes
*
* Parameters  : self. Sample List object
*
* Returns     : None
*
******************************************************************************}

    self . set_image_resource ( ICONS_BUTTONS )
    self . use_images( EMPTY, 16 )
    
    self . table            = "SAMPLE"
    self . menu_columns     = role_lib_has_privilege ( ROLE_LIB_PRIV_EXP_COLUMNS )
    self . display_only     = FALSE
    self . auto_status_icon = TRUE

    self . rmb_callback       = STRIP ( GLOBAL ( "CURRENT_LIBRARY" ) ) :
                                "/sample_list_right_mouse" 
    self . data_callback      = STRIP ( GLOBAL ( "CURRENT_LIBRARY" ) ) :
                                "/sample_list_populate" 
    self . more_data_callback = STRIP ( GLOBAL ( "CURRENT_LIBRARY" ) ) :
                                "/sample_list_add_new" 
    
    self . menu_criteria      = FALSE
    self . menu_auto_criteria = FALSE

    self . display_limit = 0

    object_invoke_class ( self , LIST_VIEWER_CLASS , "START_PROMPT" )

    self . custom_cols ( EXPLORER_RMB_INTERNAL : "$" : OPERATOR, FOLDER_SAMPLE )
    self . get_labtable ( )
    self . create_list()
    
ENDROUTINE

{*****************************************************************************}

ROUTINE sample_list_custom_rmb_no_item( self, VALUE result )

{
* Description :
*
* Parameters  :
*
* Returns     :
*
******************************************************************************}

    DECLARE handled

    handled = FALSE

    IF result = GET_USER_MESSAGE ( "SAMP_JOB_BUTTON_INVOKE_LOGIN", 1 ) THEN
        self . prompt . parent_prompt . login( )
        handled = TRUE
    ENDIF

    RETURN( handled )

ENDROUTINE

{******************************************************************************}

ROUTINE sample_list_right_mouse ( self, table_obj )

{
* Description : RMB callback routine to build sample list's Right mouse menu
*
* Parameters  : self     : sample list object
*               table_obj: not used 
*
* Returns     : popup menu object
*
******************************************************************************}

    DECLARE popup, custom, selected_objects

    selected_objects = self . get_selected_objs( FALSE )

    popup = explorer_rmb_load ( EXPLORER_RMB_INTERNAL ,
                                "SAMPLE", 
                                FOLDER_SAMPLE         ,
                                selected_objects      )
    popup . load  ( )
    popup . build ( )
    popup . refresh_callback = STRIP ( GLOBAL ( "CURRENT_LIBRARY" ) ) :
                               "/sample_list_refresh_callback"
    popup . parent = self

    CREATE OBJECT POPUP_MENU_CLASS, custom
    custom . prompt = self  
    custom . process_routine = "sample_list_rmb_routine"
    custom . process_library = GLOBAL ( "CURRENT_LIBRARY" )

    custom . vgl_library = GLOBAL ( "CURRENT_LIBRARY" )
    custom . exceptions_routine = "sample_list_rmb_context"

    custom . add_item( GET_USER_MESSAGE ( "EXPLORER_CUSTOMISE", 1 ) )
    
    IF self . parent_prompt <> EMPTY THEN
        IF self . parent_prompt . sample_login THEN
            custom . add_divider()
            custom . add_item( 
                GET_USER_MESSAGE ( "SAMP_JOB_BUTTON_INVOKE_LOGIN", 1 ) )
        ENDIF
    ENDIF

    custom . add_menu ( popup )
    
    RETURN( custom )

ENDROUTINE { sample_list_right_mouse }

{*****************************************************************************}

ROUTINE sample_list_rmb_context( self, VALUE item )

{
* Description : Lib popup menu callback. Called to determine which items should
*               be addd to the context menu
*
* Parameters  : self : Popup menu object
*               item : the menu item being added
*
* Returns     : Boolean indicating if the menu item should be included
*
******************************************************************************}

    DECLARE include_item, form

    include_item = FALSE

    form = self . prompt . parent_prompt

    IF item = GET_USER_MESSAGE ( "EXPLORER_CUSTOMISE", 1 ) THEN

        include_item = role_lib_has_privilege ( ROLE_LIB_PRIV_LOT_RMB )

    ELSEIF item = GET_USER_MESSAGE ( "SAMP_JOB_BUTTON_INVOKE_LOGIN", 1 ) THEN

        IF NOT BLANK( form . template ) THEN
        
            IF BLANK ( form . job_identity ) THEN

                IF form . template = "BLANK" THEN

                    include_item = CAN_ACCESS_MENU( 167 ) { login sample no template }

                ELSE

                    include_item = CAN_ACCESS_MENU( 168 ) { login samples using template }

                ENDIF

            ELSE

                include_item = CAN_ACCESS_MENU( 114 ) { add samples to existing job }

            ENDIF

        ENDIF

    ENDIF

    RETURN( include_item )

ENDROUTINE

{*****************************************************************************}

ROUTINE sample_list_refresh_callback( self )

{
* Description : Called if a RMB option has the Refresh option selected 
*
* Parameters  : self: Sample List object
*
* Returns     : None
*
******************************************************************************}

    IF self . parent <> EMPTY THEN
        self . parent . load_data()
    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE sample_list_rmb_routine ( self, result )

{
* Description : Called when a RMB option has been selected to give us the
*               chance to handle it
*
* Parameters  : self  : sample list object
*               result: the RMB selected option's text
*
* Returns     : Boolean - did we handle this option?
*
******************************************************************************}

    DECLARE handled
    
    handled = TRUE

    IF result = GET_USER_MESSAGE ( "EXPLORER_CUSTOMISE", 1 ) THEN

        explorer_rmb_setup ( EXPLORER_RMB_INTERNAL  ,
                             FALSE                  , 
                             "SAMPLE"               ,
                             FOLDER_SAMPLE          )

    ELSEIF result = GET_USER_MESSAGE ( "SAMP_JOB_BUTTON_INVOKE_LOGIN", 1 ) THEN

        self . prompt . parent_prompt . login( )

    ELSE

        handled = FALSE

    ENDIF

    RETURN ( handled )

ENDROUTINE { sample_list_rmb_routine }

{*****************************************************************************}
{*** sample login session form class *****************************************}
{*****************************************************************************}

{*****************************************************************************}

ROUTINE sample_login_session_form_class_initialisation( self )

{
* Description : Sample login class initialisation
*
* Parameters  : self: sample login object
*
* Returns     : None
*
******************************************************************************}
    
    self . row                    = 5
    self . column                 = 5
    self . width                  = 75
    self . height                 = 18
    self . prompt_id              = "$LOGIN_INTERFACE_SESSION_LIST"
    self . header                 = ""
    
    self . template               = "BLANK"
    self . repeat_count           = 0
    self . job_identity           = ""
    self . sample_syntax          = "DEFAULT"
    self . prompt_template        = TRUE
    self . prompt_repeat_count    = TRUE
    self . prompt_job_identity    = TRUE
    
    self . display_template       = TRUE
    self . display_repeat_count   = TRUE
    self . display_job_identity   = TRUE
    
    self . display_login_button   = TRUE
    self . display_options_button = TRUE
    self . sample_login           = TRUE
    
    ARRAY self . sample_session_array ARRAYSIZE (0)
    
    self . sample_list            = EMPTY
    self . login_button           = EMPTY
    self . job_description_prompt = EMPTY
    
    self . help_context           = "$SAMP_JOB_MAIN_SCREEN"

ENDROUTINE

{*****************************************************************************}

ROUTINE sample_login_session_form_action_start_prompt( self )

{
* Description : Overridden start_prompt action for sample login session form.
*               sets up all non user-modifiable properties
*
* Parameters  : self: Sample Login Session Form object
*
* Returns     : None
*
******************************************************************************}

    DECLARE close_button, template_prompt, options_button, help_button
    DECLARE repeat_prompt, prompt_row, job_id_prompt, leave_a_gap
    DECLARE job_description, panel_style

    leave_a_gap = FALSE

    IF self . height < 8 THEN
        self . height = 8
    ENDIF

    IF self . width < 50 THEN
        self . height = 50
    ENDIF

    self . button_style     = FORM_BUTTON_NONE
    self . return_behaviour = FORM_RETURN_STAY
    self . select_routine   = "sample_login_session_form_select"
    
    prompt_row = 0.5
    
    IF self . display_job_identity THEN 

        self . add_display( GET_USER_MESSAGE ( "SAMP_JOB_CONST_16" , 1 ),
                            1                                           ,
                            prompt_row                                  ,
                            PROMPT_RENDITION_NORMAL                     )

        PROMPT OBJECT job_id_prompt
            BROWSE ON job_header . job_name

        job_id_prompt . row          = prompt_row
        job_id_prompt . column       = 18
        job_id_prompt . height       = 1
        job_id_prompt . width        = 15
        job_id_prompt . value        = self . job_identity
        job_id_prompt . enabled      = self . prompt_job_identity
        job_id_prompt . vgl_library  = GLOBAL( "CURRENT_LIBRARY" )
        job_id_prompt . leave_prompt_routine = "job_identity_prompt_leave"

        self . add_prompt( job_id_prompt )

        prompt_row = prompt_row + 1

        self . add_display( GET_USER_MESSAGE ( "SAMP_JOB_CONST_18" , 1 ),
                            1                                           ,
                            prompt_row                                  ,
                            PROMPT_RENDITION_NORMAL                     )

        job_description = SELECT job_header . browse_description
                            WHERE job_name = self . job_identity

        PROMPT OBJECT self . job_description_prompt
            FORMAT job_header . browse_description

        self . job_description_prompt . row          = prompt_row
        self . job_description_prompt . column       = 18
        self . job_description_prompt . height       = 1
        self . job_description_prompt . width        = self . width - 18
        self . job_description_prompt . value        = job_description
        self . job_description_prompt . enabled      = FALSE

        self . add_prompt( self . job_description_prompt )

        self . add_frame( "", 1, prompt_row + 1, 0, self . width )

        prompt_row = prompt_row + 1
        
        leave_a_gap = TRUE

    ENDIF
    
    IF self . display_template THEN
        
        IF leave_a_gap THEN
            prompt_row = prompt_row + 1
        ENDIF
        
        self . add_display( GET_USER_MESSAGE ( "SAMP_JOB_CONST_19" , 1 ),
                            1                                           ,
                            prompt_row                                  ,
                            PROMPT_RENDITION_NORMAL                     )

        PROMPT OBJECT template_prompt
            BROWSE ON samp_tmpl_header . identity

        template_prompt . row          = prompt_row
        template_prompt . column       = 18
        template_prompt . height       = 1
        template_prompt . width        = 15
        template_prompt . value        = self . template
        template_prompt . enabled      = self . prompt_template
        template_prompt . vgl_library  = GLOBAL( "CURRENT_LIBRARY" )
        template_prompt . leave_prompt_routine = "template_prompt_leave"

        self . add_prompt( template_prompt )

        prompt_row = prompt_row + 1

    ENDIF

    IF self . display_repeat_count THEN
    
        self . add_display( GET_USER_MESSAGE ( "SAMP_JOB_CONST_20" , 1 ),
                            1                                           ,
                            prompt_row                                  ,
                            PROMPT_RENDITION_NORMAL                     )

        CREATE OBJECT "STD_PROMPT_TEXT_INTEGER", repeat_prompt
        repeat_prompt . row     = prompt_row
        repeat_prompt . column  = 18
        repeat_prompt . width   = 10
        repeat_prompt . height  = 1
        repeat_prompt . minimum = 0
        repeat_prompt . enabled = self . prompt_repeat_count
        repeat_prompt . vgl_library = GLOBAL( "CURRENT_LIBRARY" )
        repeat_prompt . leave_prompt_routine = "repeat_prompt_leave"

        self . add_prompt( repeat_prompt )

        prompt_row = prompt_row + 1
        
    ENDIF
    

    IF self . display_login_button THEN
    
        CREATE OBJECT "STD_PROMPT_BUTTON", self . login_button
        self . login_button . row     = prompt_row - 1
        self . login_button . column  = self . width - 10 + 1
        self . login_button . width   = 10
        self . login_button . height  = 1
        self . login_button . caption = GET_USER_MESSAGE ( "SAMP_JOB_BUTTON_INVOKE_LOGIN", 1 )
        self . login_button . vgl_library = GLOBAL( "CURRENT_LIBRARY" )
        self . login_button . send_last_key = "DO"
        self . login_button . enabled = NOT BLANK( template_prompt . value )
        self . login_button . tooltip = GET_USER_MESSAGE ( "SAMP_JOB_TT_INVOKE_LOGIN", 1 )
        self . login_button . default = TRUE

        self . add_prompt( self . login_button )
        
        panel_style = PANEL_H_EXPAND_ON + PANEL_H_ALIGN_RIGHT

        self . add_panel( self . width - 12 + 1,
                          prompt_row - 1       ,
                          1                    ,
                          12                   ,
                          panel_style          )
    
    ENDIF

    CREATE OBJECT "SAMPLE_LIST", self . sample_list
    self . sample_list . row    = prompt_row + 0.5
    self . sample_list . column = 0.5
    self . sample_list . width  = self . width + 1
    self . sample_list . height = self . height - ( prompt_row + 1 ) - 1.5
        
    self . add_prompt( self . sample_list )

    IF self . display_options_button THEN

        CREATE OBJECT "STD_PROMPT_BUTTON", options_button
        options_button . row     = self . height - 0.5
        options_button . column  = 1
        options_button . width   = 10
        options_button . height  = 1
        options_button . caption = GET_USER_MESSAGE ( "SAMP_JOB_BUTTON_OPTIONS", 1 )
        options_button . tooltip = GET_USER_MESSAGE ( "SAMP_JOB_TT_OPTIONS", 1 )
        options_button . mouse_click_routine = "sample_login_session_form_select"

        self . add_prompt( options_button )

        panel_style = PANEL_H_EXPAND_ON + PANEL_H_ALIGN_LEFT
        
        self . add_panel( 1                 ,
                          self . height - 0.5 ,
                          1                 ,
                          self . width - 22 ,
                          panel_style       )
        
    ENDIF

    CREATE OBJECT "STD_PROMPT_BUTTON", help_button
    help_button . row     = self . height - 0.5
    help_button . column  = self . width - 20
    help_button . width   = 10
    help_button . height  = 1
    help_button . caption = GET_USER_MESSAGE( "SMP_PROMPT_BUTTON_HELP", 1 )

    help_button . send_last_key = "HELP"

    self . add_prompt( help_button )


    CREATE OBJECT "STD_PROMPT_BUTTON", close_button
    close_button . row     = self . height - 0.5
    close_button . column  = self . width - 10 + 1
    close_button . width   = 10
    close_button . height  = 1
    close_button . caption = GET_USER_MESSAGE ( "SMP_PROMPT_BUTTON_CLOSE", 1 )
    close_button . send_last_key = "EXIT"

    self . add_prompt( close_button )

    object_invoke_class ( self , PROMPT_CLASS_FORM , "START_PROMPT" )
    
    self . sample_list . load_data()

    
ENDROUTINE

{*****************************************************************************}

ROUTINE sample_login_session_form_action_end_prompt( self )

{
* Description : Overridden end_prompt action. Saves changes.
*
* Parameters  : self: Sample Login session Form object
*
* Returns     : None
*
******************************************************************************}
    
    DECLARE message
    
    message = GET_USER_MESSAGE ( "EXP_LIB_SAVEC", 1 ) 
    
    self . sample_list . column_save_to_db ( EXPLORER_RMB_INTERNAL : "$" : OPERATOR, FOLDER_SAMPLE ) 
    self . sample_list . save_changes ( message )
    
ENDROUTINE

{*****************************************************************************}

ROUTINE sample_login_session_form_action_go( self )

{
* Description : Starts the session form and performs login when DO is pressed.
*               continues until EXIT key is received
*
* Parameters  : self : the Sample Login Session Form object
*
* Returns     : None
*
******************************************************************************}
    
    DECLARE save_job_status, continue, first_time
    
    save_job_status = GLOBAL ("JOB_STATUS")
    SET JOB_STATUS "VC"
    
    self . start_prompt()
    
    continue = TRUE
    first_time = TRUE
    
    REPEAT
    
        IF ( GLOBAL ( "MODE" ) = "INTERACTIVE"                       ) AND
           ( ( size_of_array( self . sample_session_array ) > 0 ) OR
             ( size_of_array ( self . prompt_objects ) > 1 )         )  THEN

            IF NOT first_time THEN
                self . set_lastkey ( "CONTINUE" )
            ENDIF

            self . wait_prompt()
            continue = ( self . get_lastkey () = "DO" )

        ELSE

            continue = first_time

        ENDIF
            
        IF continue THEN

            self . login ()

        ENDIF
        
        first_time = FALSE
        
    UNTIL NOT continue
    
    self . end_prompt()
    
    SET JOB_STATUS save_job_status
    
    do_defer_operations ()
    
    IF NOT BLANK ( self . job_identity ) THEN
        job_login_post_sample ( self . job_identity , TRUE )
    ENDIF
    
ENDROUTINE

{*****************************************************************************}

ROUTINE template_prompt_leave( self )

{
* Description : Called for sample template prompt leave_prompt
*
* Parameters  : self: The template prompt object
*
* Returns     : None
*
******************************************************************************}

    self . parent_prompt . template = self . value
    self . parent_prompt . login_button . set_enabled( NOT BLANK( self . value ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE repeat_prompt_leave( self )

{
* Description : Called for repeat count prompt leave_prompt
*
* Parameters  : self: The repeat count prompt object
*
* Returns     : None
*
******************************************************************************}

    self . parent_prompt . repeat_count = self . value

    IF self . get_lastkey ( ) = "RETURN" THEN

        self . set_lastkey ( "DO" )

    ENDIF

ENDROUTINE

{*****************************************************************************}

ROUTINE job_identity_prompt_leave( self )

{
* Description : Called for job id prompt leave_prompt
*
* Parameters  : self: The job id prompt object
*
* Returns     : None
*
******************************************************************************}

    DECLARE job_description, session_form

    session_form = self . parent_prompt

    session_form . job_identity = self . value
    
    job_description = SELECT job_header . browse_description
                      WHERE job_name = self . value
                      
    self .  parent_prompt . job_description_prompt . set_text( job_description )
    
    session_form . sample_list . load_data ( )

ENDROUTINE

{*****************************************************************************}

ROUTINE sample_list_populate( list, odb )

{
* Description : List viewer callback to populate object database
*
* Parameters  : list: List viewer
*               odb   Object database
*
* Returns     : None
*
******************************************************************************}

    DECLARE count, total_samples, sample_id, criteria, session_form, obj

    session_form = list . parent_prompt

    IF NOT BLANK( session_form . job_identity ) THEN
    
        ARRAY criteria
    
        ARRAY_SELECT_ADD( criteria            ,
                          ARRAY_SELECT_EQ     ,
                          "JOB_NAME"          ,
                          session_form . job_identity )
                          
        ARRAY_SELECT_ADD( criteria               ,
                          ARRAY_SELECT_ORDER     ,
                          "ID_NUMERIC"           ,
                          ARRAY_SELECT_ASCENDING )
    
        odb . select( criteria )
    
    ELSE
    

        count = 1
        total_samples = size_of_array( session_form . sample_session_array )

        WHILE ( count <= total_samples ) DO

            sample_id = session_form . sample_session_array[count]

            sample_id = SELECT sample . id_numeric
                        WHERE id_numeric = sample_id
                        ORDER ON id_numeric ASCENDING

            IF sample_id <> EMPTY THEN

                CREATE OBJECT "STD_OBJECT_RECORD", obj
                OBJECT_ADD_TABLE( obj, "SAMPLE" )
                obj . table = "SAMPLE"

                odb . add ( obj )

            ENDIF

            count = count + 1

        ENDWHILE

    ENDIF
    
ENDROUTINE

{*****************************************************************************}

ROUTINE sample_list_add_new( list, odb )

{
* Description : List viewer callback to add extra rows
*
* Parameters  : list: List viewer
*               odb   Object database
*
* Returns     : None
*
******************************************************************************}

    DECLARE total_samples, sample_id, session_form, obj

    session_form = list . parent_prompt

    total_samples = size_of_array( session_form . sample_session_array )

    IF total_samples > 0 THEN

        sample_id = session_form . sample_session_array[total_samples]

        sample_id = SELECT sample . id_numeric
                    WHERE id_numeric = sample_id
                    ORDER ON id_numeric ASCENDING

        IF sample_id <> EMPTY THEN

            CREATE OBJECT "STD_OBJECT_RECORD", obj
            OBJECT_ADD_TABLE( obj, "SAMPLE" )
            obj . table = "SAMPLE"

            odb . add ( obj )

        ENDIF

    ENDIF
    
    list . some_left_to_load = FALSE

ENDROUTINE

{*****************************************************************************}

ROUTINE sample_login_session_form_action_login( self )

{
* Description : Calls up the login form for the selected sample template
*
* Parameters  : self: The sample login session form object
*
* Returns     : None
*
******************************************************************************}

    DECLARE login_details
    
    IF NOT BLANK( self . template) AND NOT GLOBAL ( "DISPLAY_MODE" ) THEN

        IF NOT BLANK ( self . job_identity ) THEN

            job_login_pre_sample ( self . job_identity            ,
                                   NOT self . prompt_job_identity )

        ENDIF

        CREATE OBJECT SAMP_JOB_SAMPLE_LOGIN_CLASS, login_details

        login_details . repeat_count        = self . repeat_count
        login_details . template_id         = self . template
        login_details . job_name            = self . job_identity
        login_details . syntax              = self . sample_syntax
        login_details . do_defer_operations = FALSE
        
        login_details . return_sample_library = GLOBAL ( "CURRENT_LIBRARY" )
        login_details . return_sample_routine = "sample_login_session_update_sample_list"
        OBJECT_ASSIGN_UNCOUNTED ( login_details . return_sample_param, self )

        login_details . login_a_sample ( )

    ENDIF

ENDROUTINE

{*****************************************************************************}

ROUTINE sample_login_session_update_sample_list ( self, VALUE sample_id )

{
* Description : Routine called after each sample is added
*
* Parameters  : self: The sample login session form object
*               sample_id: the new sample
*
* Returns     : None
*
******************************************************************************}

    self . sample_session_array
       [ size_of_array ( self . sample_session_array ) + 1 ] = sample_id
       
    self . sample_list . some_left_to_load = TRUE

    self . sample_list . display_data ( )

ENDROUTINE

{*****************************************************************************}

ROUTINE sample_login_session_form_select( self )

{
* Description : Called when the Options button is pressed or on the SELECT 
*               key
*
* Parameters  : self: The sample login session form object
*
* Returns     : None
*
******************************************************************************}

    samp_egc_edit()
    
ENDROUTINE

{*****************************************************************************}

ROUTINE array_append( array1, array2 )

{
* Description : Appends values from the single dim. array2 to the end of array1
*
* Parameters  : array1, array2: single dimension arrays
*
* Returns     : None
*
******************************************************************************}

    DECLARE array1size, array2size, array1pos, array2pos
    
    array1size = size_of_array( array1 )
    array2size = size_of_array( array2 )
    
    array1pos = array1size + 1
    array2pos = 1
    
    WHILE array2pos <= array2size DO
    
        array1[array1pos] = array2[array2pos]       
    
        array1pos = array1pos + 1
        array2pos = array2pos + 1
        
    ENDWHILE

ENDROUTINE
