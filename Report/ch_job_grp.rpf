{**1355 HBe 25-9-01: Modified regarding SET SECURITY}

SET NAME "DISPLAY/"

{SET COMPILE_OPTION DECLARE}

ENABLE WINDOWS

JOIN LIBRARY $LIB_UTILS
JOIN STANDARD_LIBRARY std_utils
JOIN LIBRARY TOOLBOX

DECLARE job_id, ok
ARRAY plant_select_arr
ARRAY empty_arr


group_checking = global ( "CHECK_GROUPS" )


SET SECURITY FALSE

job_id = EMPTY
ok = get_identity (job_id, "Select a job:","JOB Select", "JOB_HEADER","")

IF ok = FALSE THEN
   RETURN (EMPTY)
ENDIF

new_group = "GLOBAL"

ARRAY plant_select_arr
   plant_select_arr[1,1] =  ARRAY_SELECT_EQ
   plant_select_arr[1,2] =  "REMOVEFLAG"
   plant_select_arr[1,3] =  FALSE

IF prompt_user ( "group_header", "Plant code selection", "identity", TRUE,
                 "Enter new group id for job.",
                  plant_select_arr, new_group, l_k_c )
THEN
   IF ((new_group = EMPTY) or (BLANK(new_group)))  THEN
      FLASH_MESSAGE("No new code selected. Exiting.", TRUE)
      RETURN(EMPTY)
   ENDIF

   change_group (job_id, new_group )
ENDIF

SET SECURITY group_checking


{----------------------------------------------------------------------------------------------------------}

ROUTINE change_group ( job_id, new_group )


SET NOTPROTECTED

START READ TRANSACTION "mps_trans"
old_group = SELECT job_header.group_id FOR UPDATE
            WHERE  job_name = job_id

IF   old_group = LOCKED
THEN 
   FLASH_MESSAGE("Job Could not be updated - Record locked", TRUE)
   COMMIT
ELSEIF new_group = old_group 
THEN
   FLASH_MESSAGE("New and old group id's identical - No update made.", TRUE)
   COMMIT
ELSE

   ASSIGN job_header.group_id = new_group

   START WRITE TRANSACTION "update_job"

   UPDATE job_header

   COMMIT

   FLASH_MESSAGE("Group_id ":STRIP(new_group):" assigned to ":STRIP(job_id), TRUE)
ENDIF


ENDROUTINE

{----------------------------------------------------------------------------------------------------------}
