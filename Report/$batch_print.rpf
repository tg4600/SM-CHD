{******************************************************************************
*
* Module Name   : $BATCH_PRINT.RPF
*
* Purpose       : Print a batch
*
* Document Ref. : 
*
* Specification : SE/T/VGSM320-WORK-BATCH
*
* Portability   : Not Checked
*
* Re-entrant    : 
*
*******************************************************************************}

ENABLE WINDOWS
SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_CLIENT
JOIN STANDARD_LIBRARY STD_PROMPT

JOIN LIBRARY $PROMPT_IMPRINT
JOIN LIBRARY $LIB_TEMP
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $BATCH_UTILS
JOIN LIBRARY $BATCH_USER

{* CONSTANTS ******************************************************************}

GLOBAL CONSTANT STD_BATCH_PRINT =  "STD_BATCH_PRINT"

CONSTANT BATCH_PRINT_MODE_WORKSHEET            = "WORKSHEET"
CONSTANT BATCH_PRINT_MODE_REPORT               = "REPORT"
CONSTANT BATCH_PRINT_IMPRINT_WORKSHEET         = "r_batch_composite"
CONSTANT BATCH_PRINT_IMPRINT_REPORT            = "r_batch_report_composite"
CONSTANT BATCH_PRINT_IMPRINT_JOB_REPORT        = "r_batch_job_report"
CONSTANT BATCH_PRINT_IMPRINT_FAILURE_REPORT    = "r_batch_failures_composite"


{* VARIABLES ******************************************************************}

DECLARE header_type ,
	header_id   ,
	job_id

{******************************************************************************}

GLOBAL

ROUTINE batch_print_initialise

{
*	Initialise the batch print module.
*
*******************************************************************************}

	IF NOT global ( "LIBRARY_INITIALISED" ) THEN

		batch_print_define_class ()

		SET GLOBAL "LIBRARY_INITIALISED" TO TRUE

		SET PRINTERCODES TRUE
		
		SET WIDTH 132

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE batch_print_define_class

{
*	Define the class for batch printing
*
*******************************************************************************}

	DEFINE CLASS STD_BATCH_PRINT

		PROPERTIES "BATCH"               ,
			   "BATCH_NAME"          ,	
			   "MODE"                ,
			   "PRINT_SAMPLES"       ,
			   "ONLY_PRINT_FAILURES" ,	
			   "ONLY_PRINT_LIMITS"   ,		
			   "USER_INFO"           ,
			   "IMPRINT_PATH"	 ,
			   "REPORT_TO_CALL"	 
				

		ACTIONS    "COMPRESS"                ,
			   "PROMPT_FOR_BATCH"        ,
			   "SETUP"                   ,
			   "PRINT_HEADER"            ,
			   "PRINT_BRIEF_HEADER"      ,
			   "PRINT_WORKSHEET_RESULTS" ,	
			   "PRINT_REPORT_RESULTS"    ,	
			   "PRINT_ENTRIES"           ,
			   "PRINT_SAMPLE"	     ,
			
			   "FAILURE_REPORT"          ,
			   "WORKSHEET_REPORT"        ,
			   "BATCH_REPORT"            ,
			   "JOB_REPORT"       	     ,		
			   "IMPRINT_PRINT_REPORT"       			

	END CLASS

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_print_action_setup ( self )

{
*	
*
{******************************************************************************}

	DECLARE message

	header_type = ""
	header_id   = ""

	message = "      Batch " : strip ( SELECT batch_header . identity )
	message = message  : "     "
	message = message  : "Printed on " : substring (  now , 1 , 11 ) 
	message = message  : " by " : strip ( operator ) 
	message = message  : " Page ### "

	SET FOOTER message

ON NEW PAGE


	IF NOT BLANK ( header_type ) THEN
LITERAL
             
!B$header_type_____ $header_id____________________ (Continued)!B

$ENDLITERAL 	

	ENDIF	

ENDON

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_print_action_compress ( self )

{
*	
*
{******************************************************************************}

LITERAL
!N
$ENDLITERAL

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_print_action_print_header ( self )

{
*	Print the header details
*
{******************************************************************************}

	DECLARE field_controls ,
		text_line      ,
		count          ,
		table          ,
		template_id    ,
		temp           ,
		title

	text_line = get_user_message ( "BATCH_PRINT_MESS_1" , 1 )
	text_line = PAD ( text_line , " " , 15 ) : " : "
        text_line = text_line : SELECT batch_header . identity

LITERAL






$ENDLITERAL	

LITERAL
	           !LUL 44HO UR !L                                            
	           !L VE !L !B$text_line________________________________!B !L VE !L
	           !L VE !L                                            !L VE !L
                   !L VE !L                                            !L VE !L
$ENDLITERAL


	text_line = get_user_message ( "BATCH_PRINT_MESS_2" , 1 )
	text_line = PAD ( text_line , " " , 15 ) : " : "

        FORMAT temp FROM SELECT batch_header . status
                    USING       batch_header . status
        text_line = text_line : temp

	
LITERAL
	           !L VE !L !B$text_line________________________________!B !L VE !L
$ENDLITERAL

	text_line = get_user_message ( "BATCH_PRINT_MESS_4" , 1 )
	text_line = PAD ( text_line , " " , 15 ) : " : "
        text_line = text_line : substring ( now , 1 , 17 )
	
LITERAL
	           !L VE !L !B$text_line________________________________!B !L VE !L
$ENDLITERAL

	text_line = get_user_message ( "BATCH_PRINT_MESS_5" , 1 )
	text_line = PAD ( text_line , " " , 15 ) : " : "
        text_line = text_line : operator
	
LITERAL
	           !L VE !L !B$text_line________________________________!B !L VE !L
$ENDLITERAL


LITERAL
	           !L LL 44HO LR !L
$ENDLITERAL

LITERAL



$ENDLITERAL
	
        template_id = SELECT batch_header . template_id
	table       = "BATCH_HEADER"

	read_in_template_fields ( template_id    ,
				  table          ,
				  field_controls ,
		        	  FALSE          ,
	       		          FALSE          )

	IF size_of_array ( field_controls ) > 0 THEN


LITERAL
   !L UL 70HO UR !L
$ENDLITERAL

        	count = 1
	
		WHILE field_controls [ count , FIELD_NAME_POSITION ] <> EMPTY DO

        	        FORMAT text_line FROM SELECT batch_header .
                	                 'field_controls [ count , FIELD_NAME_POSITION ]'
                       	USING batch_header . 'field_controls [ count , FIELD_NAME_POSITION ]'
	
			text_line = strip ( text_line )

			temp      = splitwords ( text_line , 33 )
			text_line = text_line # temp

			title     = field_controls [ count , PROMPT_TEXT ] 

literal                                                                      
   !L VE !L !B $title_________________________ : $temp_____________________________!B!L VE !L
$endliteral

	                WHILE NOT blank ( text_line ) DO

				temp      = splitwords ( text_line , 33 )
				text_line = text_line # temp

literal                                                                      
   !L VE !L !B                                  $temp______________________________!B!L VE !L
$endliteral


   			ENDWHILE
		
        	        count = count + 1

	        ENDWHILE

LITERAL
   !L LL 70HO LR !L
$ENDLITERAL

	ENDIF

	NEW PAGE

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_print_action_print_brief_header ( self )

{
*	Print a brief version of the header details
*
{******************************************************************************}

	DECLARE text_line      ,
		temp           ,
		description


	text_line = get_user_message ( "BATCH_PRINT_MESS_1" , 1 )
	text_line = PAD ( text_line , " " , 17 )  
        text_line = text_line : SELECT batch_header . identity

        text_line = strip ( SELECT batch_header . identity )
        text_line = "!B!U " : text_line : " !B!U" 


LITERAL


		                                 $text_line___________________________________________

$ENDLITERAL


	text_line = "Qa Status"
	text_line = PAD ( text_line , " " , 15 ) : " : "
        FORMAT temp FROM   self . batch . get_review ()
                    USING       batch_header . review_status
        text_line = text_line : temp

LITERAL
!B$text_line__________________________________________!B
$ENDLITERAL


	text_line = get_user_message ( "BATCH_PRINT_MESS_2" , 1 )
	text_line = PAD ( text_line , " " , 15 ) : " : "

        FORMAT temp FROM SELECT batch_header . status
                    USING       batch_header . status
        text_line = text_line : temp

	
LITERAL
$text_line__________________________________________
$ENDLITERAL

	text_line   = get_user_message ( "BATCH_PRINT_MESS_3" , 1 )
	text_line   = PAD ( text_line , " " , 15 ) : " : "
        description = SELECT batch_header . description
	temp        = split_words ( description , 60 )	

	description = description # temp

LITERAL
$text_line_______ $temp________________________________________________________
$ENDLITERAL

	
	WHILE NOT blank ( description ) DO

		temp        = split_words ( description , 60 )	

		description = description # temp

		temp        = strip ( temp )


LITERAL
                  $temp________________________________________________________
$ENDLITERAL

	
	ENDWHILE

	text_line   = get_user_message ( "BATCH_PRINT_MESS_6" , 1 )
	text_line   = PAD ( text_line , " " , 15 ) : " : "
        description = SELECT batch_header . batch_comment
	temp        = split_words ( description , 60 )	

	description = description # temp

LITERAL
$text_line_______ $temp________________________________________________________
$ENDLITERAL

	
	WHILE NOT blank ( description ) DO

		temp        = split_words ( description , 60 )	

		description = description # temp

		temp        = strip ( temp )


LITERAL
                  $temp________________________________________________________
$ENDLITERAL

	
	ENDWHILE

LITERAL

$ENDLITERAL

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_print_action_print_worksheet_results ( self         ,	
					                 result_print )

{
*	Print the results 
*
{******************************************************************************}

	DECLARE count         ,
		result_object ,
		name          ,
		status        ,
		type          ,
		a             ,
		b             ,
		print_top     ,
		print_bottom  ,
		print_middle  

	count        = 1
	print_top    = TRUE
	print_bottom = FALSE
	print_middle = FALSE

	WHILE count <= result_print . size () DO

		
		result_object = result_print . get_by_number ( count )
		status = result_object . get_field ( "STATUS" )
		name   = result_object . get_field ( "NAME"   )
		type   = result_object . get_field ( "RESULT_TYPE"  ) 

		IF status <> "X" THEN

			IF type <> "K" THEN

				a      = result_object . get_field ( "TEXT"  )
        	
				b      = result_object . get_field (  "UNITS" )

				IF print_top THEN

LITERAL
!L UL 42HO TT 10HO TT 11HO TT 12HO UR !L
$ENDLITERAL                                                                                       

				ENDIF

				IF print_middle THEN

LITERAL
!L LT 42HO CC 10HO CC 11HO CC 12HO RT !L
$ENDLITERAL

				ENDIF

LITERAL
!L VE !L$name____________________________________ !L VE !L $a_______!L VE !L           !L VE !L $b_________!L VE !L
$ENDLITERAL

				print_top    = FALSE
				print_middle = TRUE

			ENDIF

		ENDIF

		count = count + 1

		IF ( lines_left < 3 ) THEN 

LITERAL
!L LL 42HO BT 10HO BT 11HO BT 12HO LR !L
$ENDLITERAL

			TEST PAGE 3

			print_bottom = FALSE
			print_top    = TRUE
			print_middle = FALSE

		ELSE

			print_bottom = TRUE

		ENDIF

	ENDWHILE

	IF print_bottom THEN

LITERAL
!L LL 42HO BT 10HO BT 11HO BT 12HO LR !L
$ENDLITERAL

	ENDIF

ENDROUTINE


{******************************************************************************}

ROUTINE std_batch_print_action_print_report_results ( self         ,	
					              result_print )

{
*	Print the results       
*
{******************************************************************************}
	
	DECLARE formatted   ,
		count       ,
		result      ,
		a           ,
		b           ,
                c           ,
                d           ,
                e           ,
                f           ,
                g           ,
                h           ,
		print_it    ,
		print_title

	print_title = TRUE

	result_print . do_compare           = TRUE
	result_print . convert_to_mlp_units = TRUE

	result_print . mlp_format ( EMPTY     ,
			            EMPTY     ,
			            EMPTY     ,
				    formatted )

	count = 1

	WHILE count <= size_of_array ( formatted ) DO

		result = formatted [ count ]

		IF result . status <> "X" THEN

			IF result . first_level THEN

				IF print_title THEN

					TEST PAGE result . level_count + 1 
	
				ELSE

					TEST PAGE result . level_count

				ENDIF

			ENDIF

			IF print_title THEN

				a = get_user_message ( "BATCH_PRINT_REPORT_RESULT" , 1)
				b = get_user_message ( "BATCH_PRINT_REPORT_RESULT" , 2)
				c = get_user_message ( "BATCH_PRINT_REPORT_RESULT" , 3)
   				d = get_user_message ( "BATCH_PRINT_REPORT_RESULT" , 4)
				e = get_user_message ( "BATCH_PRINT_REPORT_RESULT" , 5)     
				f = get_user_message ( "BATCH_PRINT_REPORT_RESULT" , 6)     
       				g = get_user_message ( "BATCH_PRINT_REPORT_RESULT" , 7)    
				h = get_user_message ( "BATCH_PRINT_REPORT_RESULT" , 8) 

LITERAL
$a___________________________________    $b $c__________ $d________ $e__ $f________ $g________ $h________ 
$ENDLITERAL


				print_title = FALSE

			ENDIF

			a = result . name
			b = result . status
			c = result . text
			d = result . result_units
			e = result . pass_fail 
			f = result . level     
			g = result . lower     
			h = result . upper     

			IF self . only_print_limits THEN

				print_it = NOT blank ( result . level )

			ELSE

				print_it = TRUE

			ENDIF

			IF print_it THEN

LITERAL
$a___________________________________    $b $c__________ $d________ $e__ $f________ $g________ $h________ 
$ENDLITERAL

			ENDIF

		ENDIF

		count = count + 1

	ENDWHILE

ENDROUTINE

{******************************************************************************}
                                
ROUTINE std_batch_print_action_print_sample ( self  ,     
                                              entry )

{
*	Print a sample          
*
{******************************************************************************}

	DECLARE id_text      , 
		result_print ,
		type         ,
		pass_fail    ,
		parent       

        result_print = entry .  get_results ( FALSE )

	type         = entry . get_type ()
	id_text      = entry . get_samp_test_field ( "ID_TEXT" )
	parent       = entry . get_samp_test_field ( "PARENT_TEST"  )

	IF ( parent <> NULL  ) AND
	   ( parent <> EMPTY ) THEN

		parent = SELECT samp_test_view . id_text
			 WHERE test_number = parent

	ELSE

		parent = EMPTY

	ENDIF

	IF self . mode = BATCH_PRINT_MODE_REPORT THEN
	
        	FORMAT pass_fail FROM   entry . get_review ()
                	         USING  batch_entry . review_status

	ELSE

		pass_fail = ""

	ENDIF

	TEST PAGE 5

	IF parent <> EMPTY THEN

LITERAL
                                
!B$type____________ $id_text______________________  of $parent________________________________ $pass_fail___  !B
                                                                   
$ENDLITERAL 	

	ELSE

LITERAL
                                
!B$type____________ $id_text______________________                                             $pass_fail______!B
                                                                   
$ENDLITERAL 	

	ENDIF

	header_type = type      
	header_id   = id_text

	IF result_print <> EMPTY THEN

		IF self . mode = BATCH_PRINT_MODE_WORKSHEET THEN

			self . print_worksheet_results ( result_print )

		ELSEIF self . mode = BATCH_PRINT_MODE_REPORT  THEN

			self . print_report_results ( result_print )

		ENDIF

	ENDIF	

        header_type = ""
	header_id   = ""
		
ENDROUTINE


{******************************************************************************}

ROUTINE std_batch_print_action_print_entries ( self )

{
*	Get the ID of the batch.  
*                               
{******************************************************************************}

	DECLARE count ,
		entry        

	count = 1

	WHILE count <= self . batch . size () DO

		entry        = self . batch . get_entry ( count )

		IF self . print_samples THEN

			IF self . only_print_failures THEN

				IF entry . get_review () <> "P" THEN

					self . print_sample ( entry )

				ENDIF

			ELSE

				self . print_sample ( entry )

			ENDIF        

		ELSEIF NOT entry . is_sample () THEN

			IF self . only_print_failures THEN

				IF entry . get_review () <> "P" THEN

					self . print_sample ( entry )

				ENDIF			

			ELSE

				self . print_sample ( entry )

			ENDIF

		ENDIF

		count = count + 1

	ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_print_action_prompt_for_batch ( self )

{
*	Get the ID of the batch.  
*
{******************************************************************************}

	DECLARE batch_name ,
		got_one

	IF prompt_in_window ( "BATCH_HEADER"                                      ,
			       get_user_message ( "BATCH_PRINT_ENTER_BATCH" , 1 ) ,
			       get_user_message ( "BATCH_PRINT_ENTER_TITLE" , 1 ) ,
		               EMPTY                                              ,
			       batch_name                                         ) THEN

		CREATE OBJECT STD_BATCH_HEADER_BASE , self . batch

		self . batch . read_for_display ( batch_name ) 

		got_one = TRUE

	ELSE

		got_one = FALSE

	ENDIF

	RETURN ( got_one )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_print_action_worksheet_report (       batch_print ,
                                                  VALUE batch_name  )
{
*	Print a worksheet  
*
{******************************************************************************}

	batch_print . imprint_path = client_get_imprint_path()

	IF ( batch_print . imprint_path <> EMPTY ) THEN

		batch_print . report_to_call = BATCH_PRINT_IMPRINT_WORKSHEET
		batch_print . imprint_print_report( batch_name )
		
	ELSE
		batch_print . mode               = BATCH_PRINT_MODE_WORKSHEET
		batch_print . print_samples       = TRUE
		batch_print . only_print_limits   = FALSE
		batch_print . only_print_failures = FALSE

		CREATE OBJECT STD_BATCH_HEADER_BASE , batch_print . batch

		batch_print . batch . read_for_display ( batch_name ) 

		batch_print . setup         ()
		batch_print . print_header  ()
		batch_print . print_entries ()
	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_print_action_batch_report (       batch_print ,
                                              VALUE batch_name  )
{
*	Print a batch report  
*
{******************************************************************************}

	batch_print . imprint_path = client_get_imprint_path()

	IF ( batch_print . imprint_path <> EMPTY ) THEN

		batch_print . report_to_call = BATCH_PRINT_IMPRINT_REPORT
		batch_print . imprint_print_report( batch_name )
		
	ELSE

		batch_print . mode                = BATCH_PRINT_MODE_REPORT
		batch_print . print_samples       = TRUE
		batch_print . only_print_limits   = FALSE
		batch_print . only_print_failures = FALSE

		CREATE OBJECT STD_BATCH_HEADER_BASE , batch_print . batch

		batch_print . batch . read_for_display ( batch_name ) 

        	batch_print . batch . review ()

		batch_print . setup         ()
		batch_print . print_header  ()
		batch_print . compress ()
		batch_print . print_entries ()

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_print_action_failure_report (       batch_print ,
                                                VALUE batch_name  ,
                                                VALUE compare_all )
{
*	Print a failure batch report  
*
{******************************************************************************}

	batch_print . mode                = BATCH_PRINT_MODE_REPORT
	batch_print . print_samples       = TRUE
	batch_print . only_print_limits   = TRUE
	batch_print . only_print_failures = TRUE
	batch_print . imprint_path        = client_get_imprint_path()

	CREATE OBJECT STD_BATCH_HEADER_BASE , batch_print . batch

	IF ( batch_print . imprint_path <> EMPTY ) THEN

		START WRITE TRANSACTION "Batch Review Update"

		batch_print . batch . read_for_modify ( batch_name ,
	      	                                  FALSE      ) 

		IF compare_all THEN

		        batch_print . batch . review_full ()
	
		ELSE

		        batch_print . batch . review ()
        
		ENDIF

		batch_print . batch . review_update ()
		COMMIT

		batch_print . report_to_call = BATCH_PRINT_IMPRINT_FAILURE_REPORT
		batch_print . imprint_print_report( batch_name )

	ELSE

		batch_print . batch . read_for_display ( batch_name )

		IF compare_all THEN

		        batch_print . batch . review_full ()

		ELSE

		        batch_print . batch . review ()
        
		ENDIF

		batch_print . setup         ()
		batch_print . print_header  ()
		batch_print . compress ()
		batch_print . print_entries ()

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_print_action_job_report (       batch_print ,
                                            VALUE job_id      )	

{
*	Get the ID of the batch.  
*
{******************************************************************************}

	DECLARE batches      ,
	        count        ,
	        message

	batch_print . imprint_path = client_get_imprint_path()

	IF ( batch_print . imprint_path <> EMPTY ) THEN

		IF batch_utils_get_all_batches_for_job ( job_id  ,
							 batches ,
							 FALSE   ) THEN

			START WRITE TRANSACTION "Job Review Update"

			count = 1

			WHILE count <= size_of_array ( batches ) DO

				message = " "

				CREATE OBJECT STD_BATCH_HEADER_BASE , 
					      batch_print . batch

				batch_print . batch . read_for_modify ( batches [ count ] ,
				                                        FALSE             ) 
				batch_print . batch . review ()
				batch_print . batch . review_update ()

				count = count + 1

			ENDWHILE

			COMMIT

		ENDIF

		batch_print . report_to_call = BATCH_PRINT_IMPRINT_JOB_REPORT
		batch_print . imprint_print_report( job_id )

	ELSE

		batch_print . mode                = BATCH_PRINT_MODE_REPORT
		batch_print . print_samples       = FALSE
		batch_print . only_print_limits   = TRUE
		batch_print . only_print_failures = FALSE

ON NEW PAGE

LITERAL
!N                       !BQA Summary for Job $job_id_______________________!B!N
                               
$ENDLITERAL
ENDON

LITERAL
                       !BQA Summary for Job $job_id_______________________!B
                               
$ENDLITERAL

		batch_print . compress ()

		message = "Printed on " : substring (  now , 1 , 11 ) 
		message = message  : " by " : strip ( operator ) 
  		message = message  : pad ( " " , " " , 80 ) 
		message = message  : "Page ### "

		SET FOOTER message

		IF batch_utils_get_all_batches_for_job ( job_id  ,
							 batches ,
							 FALSE   ) THEN

			count = 1

			WHILE count <= size_of_array ( batches ) DO


				CREATE OBJECT STD_BATCH_HEADER_BASE , 
					      batch_print . batch

				batch_print . batch . read_for_display ( batches [ count ] ) 
				batch_print . batch . review ()

				batch_print . print_brief_header ()
				batch_print . print_entries ()

				count = count + 1

			ENDWHILE

		ENDIF
	ENDIF

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_print_worksheet ( VALUE option )

{
*	Called from menu to print a batch.  
*
*******************************************************************************}


	DECLARE batch_print ,
		batch_name  

	batch_print_initialise ()

	CREATE OBJECT STD_BATCH_PRINT , batch_print

	batch_print . imprint_path = client_get_imprint_path()

	IF prompt_in_window ( "BATCH_HEADER"                                      ,
			       get_user_message ( "BATCH_PRINT_ENTER_BATCH" , 1 ) ,
			       get_user_message ( "BATCH_PRINT_ENTER_TITLE" , 1 ) ,
		              "$BATCH_PRINT_WORKSHEET"                            ,
			       batch_name                                         ) THEN
		
		batch_print . worksheet_report ( batch_name )

	ENDIF

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_print_report ( VALUE option )

{
*	Called from menu to print a batch.  
*
*******************************************************************************}

	DECLARE batch_print ,
		batch_name  

	batch_print_initialise ()

	CREATE OBJECT STD_BATCH_PRINT , batch_print

	batch_print . imprint_path = client_get_imprint_path()

	IF prompt_in_window ( "BATCH_HEADER"                                      ,
			       get_user_message ( "BATCH_PRINT_ENTER_BATCH" , 1 ) ,
			       get_user_message ( "BATCH_PRINT_ENTER_TITLE" , 1 ) ,
		              "$BATCH_PRINT_REPORT"                               ,
			       batch_name                                         ) THEN
		
		batch_print . batch_report ( batch_name )

	ENDIF

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_print_job_report ( VALUE option )

{
*	Called from menu to print a batch.  
*
*******************************************************************************}

	DECLARE batch_print  

	batch_print_initialise ()

	IF prompt_in_window ( "JOB_HEADER"                                      ,
			       get_user_message ( "BATCH_PRINT_ENTER_JOB"   , 1 ) ,
			       get_user_message ( "BATCH_PRINT_ENTER_JOB_TITLE" , 1 ) ,
		              "$BATCH_PRINT_JOB_REPORT"                           ,
			       job_id                                         ) THEN

		CREATE OBJECT STD_BATCH_PRINT , batch_print
		
		batch_print . job_report ( job_id )


	ENDIF

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_print_automatic ( VALUE batch_name ,
				VALUE printer    )

{
*	Print the batch
*
*******************************************************************************}

	DECLARE batch_print

	IF blank ( printer ) THEN

		SET NAME "DEFER/"

	ELSE

		SET NAME "PRINTER/" : strip ( printer )

	ENDIF

	batch_print_initialise ()

	CREATE OBJECT STD_BATCH_PRINT , batch_print

	batch_print . worksheet_report ( batch_name )

	FLUSH_LITERAL

ENDROUTINE


{******************************************************************************}

ROUTINE std_batch_print_action_imprint_print_report ( self,
                                                      VALUE batch_name )

{
*	Print the batch
*
*******************************************************************************}

	DECLARE imprint_report

	{ Define the class, then create an instance }

	define_imprint_class ( )

	CREATE OBJECT IMPRINT, imprint_report

	{ Generate a report }

	imprint_report . create_ole_object( )
	imprint_report . reset_ole_object ( ) 

	imprint_report . add_parameter  ( STRIP ( batch_name )) 
	imprint_report . report  = self . report_to_call
	imprint_report . generate ( )

	imprint_report . ole_object = EMPTY

ENDROUTINE

