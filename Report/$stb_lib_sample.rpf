{******************************************************************************
*
* Module Name   : $STB_LIB_SAMPLE
*
* Purpose       : 
*
*******************************************************************************}

SET NOTPROTECTED
SET COMPILE_OPTION DECLARE
SET NAME "DEFER/"

ENABLE WINDOWS


JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_PROMPT

JOIN LIBRARY $EXPLORER_RMB
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $STB_GLBL
JOIN LIBRARY $STB_LIB


CONSTANT Q = ASCII(34)
CONSTANT QC = Q : ","

CONSTANT MENU_OPTION_DFS = 10007
CONSTANT MENU_OPTION_MFS = 361

{******************************************************************************}

ROUTINE stb_matrix_action_option_sample_authorise( self )
{
* Authorise sample for current pull
*
* Parameters : self, Stb Matrix object
*
*******************************************************************************}

    DECLARE id_numeric, samp_obj

    IF self . can_sample_authorise( ) THEN

        samp_obj = self . get_current_pull_sample( )

        IF samp_obj <> EMPTY THEN

            id_numeric = SELECT sample . id_numeric IN OBJECT samp_obj

            call_menu_option( MENU_OPTION_AUTHORISE_SAMPLE, id_numeric )

        ENDIF

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_option_sample_cancel( self )
{
* Cancel sample for current pull
*
* Parameters : self, Stb Matrix object
*
*******************************************************************************}

    DECLARE id_numeric, samp_obj

    IF self . can_sample_cancel( ) THEN
    
        samp_obj = self . get_current_pull_sample( )

        IF samp_obj <> EMPTY THEN

            id_numeric = SELECT sample . id_numeric IN OBJECT samp_obj

            call_menu_option( MENU_OPTION_CANCEL_SAMPLE, id_numeric )

        ENDIF

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_option_sample_receive( self )
{
* Receive sample for current pull
*
* Parameters : self, Stb Matrix object
*
*******************************************************************************}

    DECLARE id_numeric, samp_obj
    
    IF self . can_sample_receive( ) THEN
    
        samp_obj = self . get_current_pull_sample( )

        IF samp_obj <> EMPTY THEN

            id_numeric = SELECT sample . id_numeric IN OBJECT samp_obj

            call_menu_option( MENU_OPTION_RECEIVE_SAMPLE, id_numeric )

        ENDIF

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_option_sample_result_entry( self )
{
* Result Entry by sample for current pull
*
* Parameters : self, Stb Matrix object
*
*******************************************************************************}

    DECLARE id_numeric, samp_obj

    IF self . can_sample_result_entry( ) THEN

        samp_obj = self . get_current_pull_sample( )

        IF samp_obj <> EMPTY THEN

            id_numeric = SELECT sample . id_numeric IN OBJECT samp_obj

            call_menu_option( MENU_OPTION_RESULT_ENTRY_SAMPLE, id_numeric )

        ENDIF

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_get_current_pull_sample( self )
{
* Returns an object record containing the current pull's sample or EMPTY if 
* there isn't one
*
* Parameters : self , Stb Matrix object
*
*******************************************************************************}

    DECLARE pull_record, sample_record
    
    sample_record = EMPTY
    
    pull_record = self . get_current_pull( )

    IF pull_record <> EMPTY THEN
    
        sample_record = self . get_pull_sample( pull_record )
    
    ENDIF
    
    RETURN( sample_record )

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_get_pull_sample( self, pull_record )
{
* Returns an object record containing the pull's sample or EMPTY if there isn't one
*
* Parameters : self , Stb Matrix object
*              pull_record
*
*******************************************************************************}

    DECLARE sample_obj, id_numeric

    sample_obj = EMPTY

    IF self . is_study( ) THEN

        id_numeric = SELECT pds_study_pull . created_sample_id
                         IN OBJECT pull_record

        IF ( id_numeric <> 0 ) THEN

            sample_obj = self . samples . sample_db . get_by_index( "KEY0", id_numeric )

        ENDIF

    ENDIF
    
    RETURN( sample_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE call_menu_option( VALUE menu_option, VALUE id_numeric )
{
* Call a given menu option for a sample 
*
* Parameters : menu_option, Stb Matrix object
*              id_numeric , id_numeric of sample
*
*******************************************************************************}

    DECLARE saved_labtable_mode

    IF ( CAN_ACCESS_MENU( menu_option ) = TRUE ) THEN

        saved_labtable_mode = GLOBAL("LABTABLE_MODE")

        SET GLOBAL "LABTABLE_MODE" TO  TRUE

        IF ( menu_option = MENU_OPTION_RESULT_ENTRY_SAMPLE ) THEN

            MENUPROC menu_option, Q : id_numeric : QC :
                                Q : "$EXIT" : Q

        ELSE

            MENUPROC menu_option, Q : id_numeric : Q

        ENDIF

        SET GLOBAL "LABTABLE_MODE" TO saved_labtable_mode

    ELSE

        flash_message( GET_USER_MESSAGE( "STB_smp_proc_No_access_to_menu_option", 1 ), TRUE )

    ENDIF


ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_option_sample_assign( self )
{
* Assign sample for current pull.
*
* Parameters : self, Stb Matrix object
*
*******************************************************************************}

    DECLARE pull_object

    IF self . can_sample_assign( ) THEN

        pull_object = self . get_current_pull( )

        IF pull_object <> EMPTY THEN
    
            self . pull_assign_sample( pull_object )
        
        ENDIF
    
    ENDIF
    
ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_pull_assign_sample( self, pull_object )
{
* Assign sample for passed pull
*
* Parameters : self, Stb Matrix object
*
*******************************************************************************}

    DECLARE id_numeric

    IF NOT self . pull_has_sample ( pull_object ) THEN

        IF get_identity( id_numeric                                                ,
                         GET_USER_MESSAGE( "STB_LABEL_SAMPLE_PROMPT", 1 )          ,
                         GET_USER_MESSAGE( "STB_SMP_PROC_ASSIGN_SAMPLE_TITLE", 1 ) ,
                         "SAMPLE"                                                  ,
                         EMPTY                                                     ) THEN

            IF is_valid_sample_to_assign( self, id_numeric ) THEN

                self . assign_sample_to_pull( pull_object, id_numeric )

            ENDIF

        ENDIF

    ELSE
    
        flash_message( GET_USER_MESSAGE( "STB_SMP_PROC_PULL_HAS_SAMPLE", 1 ), TRUE )

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE is_valid_sample_to_assign( self, VALUE id_numeric )
{
* Returns TRUE if passed sample id is valid to add to a study
*
* Parameters : id_numeric, id_numeric of sample
*
*******************************************************************************}

    DECLARE owner_study, context, new_assign, can_assign

    can_assign = FALSE

    push_file_descriptor( "SAMPLE", context )

    owner_study = SELECT sample . stab_study_id
                      WHERE  id_numeric = id_numeric

    pop_file_descriptor( context )

    IF owner_study = EMPTY THEN
    
        flash_message( "Sample " : STRIP( id_numeric ) : " doesn't exist", TRUE )
        
    ELSE
    
        {* enumerate through list of samples that belong to this study *}
        new_assign = FALSE

        self . samples . sample_db . set_first( )
        WHILE ( self . samples . sample_db . current <> EMPTY ) DO

            IF SELECT sample . id_numeric IN OBJECT self . samples . sample_db . current = id_numeric THEN

                new_assign = TRUE
                
            ENDIF

            self . samples . sample_db . set_next( )

        ENDWHILE
        
        IF NOT BLANK( owner_study ) OR new_assign THEN
        
            flash_message( "Sample " : STRIP( id_numeric ) : " is already associated with a different pull", TRUE )
        
        ELSE
        
            can_assign = TRUE
            
        ENDIF
        
    ENDIF

    RETURN( can_assign )

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_assign_sample_to_pull(       self          ,
                                                       pull_object   ,
                                                 VALUE id_numeric    )
{
* Assign a sample to a particular pull in a study
*
* Parameters : self          , Stb Matrix object
*              pull_object   , the pull object that the sample will be assigned to
*              id_numeric    , id_numeric of sample
*
*******************************************************************************}

    DECLARE sample_obj, layer, time, condition, id_text, errors, has_changed

    errors = self . load_sample( id_numeric )
    
    IF errors = EMPTY THEN
    
        self . samples . sample_db . set_last( )
        sample_obj = self . samples . sample_db . current

        IF lock_upgrade_object( "SAMPLE", sample_obj, has_changed ) THEN

            id_text = SELECT sample . id_text IN OBJECT sample_obj

            ASSIGN pds_study_pull . sample_id_text    IN OBJECT pull_object = id_text
            ASSIGN pds_study_pull . created_sample_id IN OBJECT pull_object = id_numeric
            ASSIGN pds_study_pull . cell_disp         IN OBJECT pull_object = "V"

            layer     = SELECT pds_study_pull . layer_factor IN OBJECT pull_object
            time      = SELECT pds_study_pull . time_factor IN OBJECT pull_object
            condition = SELECT pds_study_pull . c_factor IN OBJECT pull_object

            ASSIGN sample . stab_study_id
               IN OBJECT sample_obj = self . header_id

            ASSIGN sample . stability_sample
               IN OBJECT sample_obj = TRUE

            ASSIGN sample . layer_factor
               IN OBJECT sample_obj = layer

            ASSIGN sample . time_factor
               IN OBJECT sample_obj = time

            ASSIGN sample . c_factor
               IN OBJECT sample_obj = condition

        ELSE
        
            errors = "Could not lock sample record"
        
        ENDIF

    ENDIF

    RETURN( errors )

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_save_sample_information ( self )
{
* Updates all sample information back to the database
*
* Parameters : self, stb_matrix object
*
*******************************************************************************}

    DECLARE sample_obdb, state

    sample_obdb = self . samples . sample_db

    sample_obdb . set_first( )
    
    WHILE sample_obdb . current <> EMPTY  DO
    
        state = lock_state_object( "SAMPLE", sample_obdb . current )

        IF state = "SELECTED_WRITE" THEN
        
            sample_obdb . current . update( )
        
        ENDIF
    
        sample_obdb . set_next( )
    
    ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_option_sample_properties ( self )
{
* Opens the sample for modify or display depending on the mode
*
* Parameters : self, Stb Matrix object
*
*******************************************************************************}

    DECLARE id_numeric, samp_obj, status, modifiable

    IF self . can_sample_properties( ) THEN
    
        samp_obj = self . get_current_pull_sample( )

        IF samp_obj <> EMPTY THEN

            id_numeric = SELECT sample . id_numeric IN OBJECT samp_obj
            status     = SELECT sample . status     IN OBJECT samp_obj

            modifiable = ( ( self . mode = "MODIFY" ) OR
                           ( self . mode = "ADD"    ) OR
                           ( self . mode = "COPY"   )       ) AND
                           ( INDEX ( "CWVUH", status ) <> 0 )

            IF modifiable THEN

                MENUPROC MENU_OPTION_MFS USING id_numeric

            ELSE

                MENUPROC MENU_OPTION_DFS USING id_numeric

            ENDIF

        ENDIF

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_option_sample_actions ( self )
{
* Displays a menu of applicable sample actions for the current cell's sample
*
* Parameters : self, Stb Matrix object
*
*******************************************************************************}

    DECLARE collect, samp_obj, menu

    IF self . can_sample_actions( ) THEN

        samp_obj = self . get_current_pull_sample( )

        IF samp_obj <> EMPTY THEN

            CREATE OBJECT "STD_COLLECTION", collect
            collect . add ( samp_obj )

            {*** Load standard options for this table ***}
            menu = explorer_rmb_load_for_table ( "SAMPLE", collect )

            IF menu <> EMPTY THEN

                menu . process ( menu . start ( ) )

            ENDIF

        ENDIF

    ENDIF

ENDROUTINE