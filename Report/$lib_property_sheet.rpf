{Compared 20140123 /DKTBG}
{*******************************************************************************
*
* Module Name   : $LIB_PROPERTY_SHEET
*
* Purpose       : Generic Class for Property Sheets.
*
* Document Ref  : N/a
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    : 
*
*******************************************************************************}
JOIN STANDARD_LIBRARY STD_STRUCTURE
JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_CLASS

JOIN LIBRARY $EXPLORER_UTILS
JOIN LIBRARY $EXPLORER_RMB
JOIN LIBRARY $CRITERIA_CACHE
JOIN LIBRARY $LINE_EDITOR
JOIN LIBRARY $LIST_EDITOR
JOIN LIBRARY $PROMPT_TAB
JOIN LIBRARY $PROMPT_PICTURE
JOIN LIBRARY $LIB_ENTITYLINK_VIEW
JOIN LIBRARY $LIB_PROMPT_ARRAY
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $LIB_GRID
JOIN LIBRARY $LIB_TEXT
JOIN LIBRARY $LIB_TEMP
JOIN LIBRARY $TOOLBOX

SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILE_OPTION DECLARE
ENABLE WINDOWS

{******************************************************************************}

GLOBAL CONSTANT PROPERTY_SHEET_CLASS        = "PROPERTY"
GLOBAL CONSTANT PROPERTY_SHEET_EX_CLASS     = "PROPERTYEX"
GLOBAL CONSTANT PROPERTY_CONTAINER_CLASS    = "PROPERTY_CONTAINER"
GLOBAL CONSTANT PROPERTY_PAGE_CLASS         = "PROPERTY_PAGE"
GLOBAL CONSTANT PROPERTY_PAGE_GENERAL_CLASS = "PROPERTY_PAGE_GENERAL"
CONSTANT PROPERTY_TEMPLATE_CLASS            = "PROPERTY_TEMPLATE"

CONSTANT LIST_VIEWER_CLASS                = "LIST_VIEWER"

CONSTANT MESSAGE_POSITION                 = 1
CONSTANT TYPE_POSITION                    = 2
CONSTANT TABLE_NAME_POSITION              = 3
CONSTANT FIELD_POSITION                   = 4
CONSTANT GRID_MSG_POSITION                = 5
CONSTANT OBJECT_POSITION                  = 4
CONSTANT DFS                              = 10007        { Display Full Sample }

{*******************************************************************************
*                             M A I N   C O D E
*******************************************************************************}

EXIT

{*******************************************************************************
*                        G L O B A L   R O U T I N E S
*******************************************************************************}

GLOBAL ROUTINE property_sheet_define_class

{ This global routine is used for initialising the property class. This
* does not need to be called if the library has already been initialised
* elsewhere.
*
* Parameters   : N/a
* Return Value : N/a
*
*******************************************************************************}

IF NOT GLOBAL ( "LIBRARY_INITIALISED" ) THEN

	SET GLOBAL "LIBRARY_INITIALISED" TO TRUE

	CALL_ROUTINE "define_list_viewer_class"
	     IN LIBRARY "$LIB_LIST_VIEWER"

	line_editor_initialise_new      ( )       { Line Editor                }
	set_up_std_prompt_tab_class     ( )       { Prompt Tab Stuff.          }
	lib_grid_initialise             ( )       { Buttons.                   }	
	criteria_cache_initialise       ( )       { For Field Info Etc.        }
	set_up_std_prompt_picture_class ( )
	prompt_array_define_class       ( )
	entity_link_viewer_define_class ( )

	{**********************************************************************}
	{* Property Sheet Class                                               *}
	{**********************************************************************}

	DEFINE CLASS PROPERTY_SHEET_CLASS

		INHERIT "STD_FORM"
		INITIALISATION			

		PROPERTIES

			"initialised"            , { Check to See if form done  }
			"container"              , { For Containing Tables      }
			"auto_multi"             , { Multiple Pages on Auto.    }
			"max_mode"               , { Maximum Width Mode         }
			"title_width"            , { The Title Width            }
			"blob_tab"               , { Add a Blob Tab.            }
			"add_table"              , { Automatically Add Table    }
			"tab"                     { The Tab Dialog.            }
			
			
		ACTIONS

			"initialise"             , { Initialise Properties      }
			"create_form"            , { Create the Main Form.      }
			"automatic"              , { Generate Automatically     }
			"auto_template"          , { Generate Auto from Templ.  }
			"auto_general"           , { Generate Auto for General  }
			"auto_labtable"          , { Generate Lab Table Auto    }
			"add_stand_field"        , { Add a Standard Field Type  }
			"add_unique_field"       , { Add a Unique Field         }
			"add_field_object"       , { Add object to details array}
			"add_field"              , { Add a Field                }
			"is_labtable"            , { Is this a Lab Table?       }
			"is_template"            , { Is this a Template?        }
			"get"                    , { Returns the page with id   }
			"get_page"               , { Get a Specific Page.       }
			"get_page_count"         , { Returns no. of pages       }
			"add_table"              , { Add a Table to the Object  }
			"add_line_page"          , { Add a Line Page.           }
			"add_list_page"          , { Add a List Page.           }
			"add_template_page"      , { Add a Template Page        }
			"add_page"               , { Add a Page to the sheet.   }
			"go"                     , { Start the property Off.    }
			"invoke"                 , { Calls action on all sheets }
			"finish"                   { finalisation routine       }

	END CLASS

	DEFINE CLASS PROPERTY_PAGE_CLASS
	
		INHERIT "STD_FORM"
		
		INITIALISATION
		
		PROPERTIES
			"property_sheet"         , { the containing property sheet}
			"identity"               , { page identity                }
			"initialised"            , { is this page initialised ?   }
			"initialisation_routine" , { called when page first active}
			"callback_library"         { default callback library     }

		ACTIONS
			"finish"

	END CLASS

	DEFINE CLASS PROPERTY_SHEET_EX_CLASS
	
		INHERIT PROPERTY_SHEET_CLASS
		
		INITIALISATION
		
		PROPERTIES
			"global_fields"            { details of all fields used   } 
		ACTIONS
			"automatic"              , { Generate Automatically       }
			"set_header"             , { Sets the header text         }
			"get_subject_text"       , { returns sheet subject text   }
			"add_general_page"       , { Add record(s) details pages  }
			"add_template_page"      , { Add template fields          }
			"add_details_page"       , { Add all fields not added     }
			"add_links_page"         , { Add page with entity links   }
			"add_esig_page"          , { Add an Esigs Page            }
			"add_audit_page"         , { Add an Audits Page           }
			"add_to_global_fields"   , { Adds array to global_fields  }
			"can_view_internal"      , { user may view all fields ?   }
			"get_table"              , { returns the current table    }
			"start_prompt"             { start prompt override        }
	END CLASS

	{**********************************************************************}
	{* Form Sub Class to hold Template Information                        *}
	{**********************************************************************}

	DEFINE CLASS PROPERTY_TEMPLATE_CLASS

		INHERIT "STD_FORM"
		PROPERTIES

			"template_fields"         { Template Field Information }

	END CLASS

	{**********************************************************************}
	{* Generic Record Container Class                                     *}
	{**********************************************************************}

	DEFINE CLASS PROPERTY_CONTAINER_CLASS
	END CLASS

	{**********************************************************************}

	DEFINE CLASS PROPERTY_PAGE_GENERAL_CLASS
	
		INHERIT PROPERTY_PAGE_CLASS
		
		INITIALISATION
		
		PROPERTIES
			"prompts"
			
		ACTIONS
			"finish" ,
			"add_prompt_array"

	END CLASS


ENDIF

ENDROUTINE { property_sheet_define_class }

{*******************************************************************************
*			   R O U T I N E S
*******************************************************************************}

ROUTINE property_class_initialisation ( self )

{ This initialisation routine is called when an object is created from the
* property Class.
*
* Parameters   : Self
* Return Value : N/a
*
*******************************************************************************}

	self . prompt_id         = "$LIB_PROPERTY_SHEET_MAIN"
	self . initialised       = FALSE	
	self . title_width       = 18
	self . auto_multi        = FALSE
	self . max_mode          = FALSE
	self . add_table         = FALSE
	
ENDROUTINE { property_class_initialisation }

{******************************************************************************}

ROUTINE property_action_go ( self )

{ Main Action
*
* Parameters   : Self
* Return Value : N/a
*
*******************************************************************************}

	DECLARE page, message, ok
	ok = FALSE

	self . initialise ( )
	page = self . get_page ( 1 )

	IF page = EMPTY THEN
	
		message = GET_USER_MESSAGE ( "SHEET_NOPAGE", 1 ) 
		fatal_error ( message )

	ELSE

		self . start_prompt ( )
		self . wait_prompt  ( )
		self . end_prompt   ( )

		ok = self . get_lastkey ( ) = "DO"

	ENDIF

	self . finish( )

	RETURN ( ok )

ENDROUTINE { property_action_go }

{******************************************************************************}

ROUTINE property_action_initialise ( self )

{ Create the Main Form.
*
* Parameters   : Self
* Return Value : N/a
*
*******************************************************************************}

	IF NOT self . initialised THEN
	
		CREATE OBJECT PROPERTY_CONTAINER_CLASS, self . container
		self . create_form ( )
		self . initialised = TRUE

	ENDIF

ENDROUTINE { property_action_initialise }

{******************************************************************************}

ROUTINE property_action_create_form ( self )

{ Create the Main Form.
*
* Parameters   : Self
* Return Value : N/a
*
*******************************************************************************}

	DECLARE tab, button_array, pos, middle_width, middle_height

	CREATE OBJECT PROMPT_TAB_CLASS, tab
	ARRAY button_array
	pos = 1

	self . header       = GET_USER_MESSAGE ( "SHEET_HEADER", 1 ) 
	self . footer       = ""
	self . height       = 22
	self . width        = 50

	IF self . max_mode THEN
		self . width = GLOBAL ( "GUI_WIDTH" ) - 13
	ENDIF

	middle_width  = ( GLOBAL ( "GUI_WIDTH"  ) - self . width  ) / 2
	middle_height = ( ( GLOBAL ( "GUI_HEIGHT" ) - self . height ) / 2 ) + 3

	self . column       = middle_width
	self . row          = middle_height

	self . use_top_line = FALSE
	self . button_style = FORM_BUTTON_NONE

	self . return_behaviour   = FORM_RETURN_WRAP
	self . confirm_required   = FALSE

	tab . height = self . height - 1
	tab . width  = self . width
	tab . row    = 1
	tab . column = 1
	
	self . add_prompt ( tab )
	OBJECT_ASSIGN_UNCOUNTED( self . tab , tab )

	IF NOT self . display_only THEN

		self . height = self . height + 2

		lib_grid_lastkey_button ( button_array, pos, "DO"  , EMPTY )
		lib_grid_lastkey_button ( button_array, pos, "EXIT", EMPTY )

	ENDIF

	lib_form_add_control_buttons ( self, button_array )

ENDROUTINE { property_action_create_form }

{******************************************************************************}

ROUTINE property_action_add_page ( self, form )

{ Add a Form to the Tab Dialog.
*
* Parameters   : Self
*              : Form    - The Form to Add.
* Return Value : N/a
*
*******************************************************************************}

	self . initialise ( )

	form . return_behaviour = FORM_RETURN_WRAP
	form . display_only     = self . display_only
	
	IF OBJECT_CHECK_PROPERTY( form, "PROPERTY_SHEET" ) THEN
 		OBJECT_ASSIGN_UNCOUNTED( form . property_sheet, self )
 	ENDIF
	
	self . tab . add_form ( form )
	self . tab . set_size ( form )

ENDROUTINE { property_action_status_add_page }

{******************************************************************************}

ROUTINE property_action_automatic ( self, VALUE table )

{ 	
*	Automatic Property Sheet Generation.
*
*
*******************************************************************************}
	
	self . initialise ( )
	
	IF self . is_labtable ( table ) THEN

		self . auto_labtable ( table ) 

	ELSEIF self . is_template ( table ) THEN

		self . auto_template ( table )

	ELSE

		self . auto_general ( table )

	ENDIF
	   
ENDROUTINE { property_action_automatic }

{******************************************************************************}

ROUTINE property_action_auto_general ( self, VALUE table )

{ Automatic Property Sheet Generation.
*
* Parameters   : Self
*              : Table - Table for Auto Generation.
* Return Value : N/a
*
*******************************************************************************}

	DECLARE fields, list_details, fcnt, auto_count, message, size
	ARRAY fields
	ARRAY list_details
	
	self . initialise ( )
	self . add_table ( table )

	self . header = criteria_cache_table_title ( table )
	get_unordered_field_names ( table, fields )

	auto_count = 0
	fcnt       = 1

	WHILE fields [ fcnt, 1 ] <> EMPTY DO

		self . add_field ( table, fields [ fcnt, 1 ], list_details )
		size = SIZE_OF_ARRAY ( list_details )

		IF ( self . auto_multi              ) AND 
		   ( size = self . tab . height - 3 ) THEN

			auto_count = auto_count + 1

			message_fetch ( "SHEET_DETAILS", message )

			IF auto_count > 1 THEN
				auto_count = STRIP ( auto_count )
				message_add_parameter ( message, auto_count )
			ENDIF

			message = message_get_text ( message, 1 )

			self . add_line_page ( message, list_details )

			ARRAY list_details

		ENDIF

		fcnt = fcnt + 1

	ENDWHILE

	IF SIZE_OF_ARRAY ( list_details ) > 0 THEN

		auto_count = auto_count + 1

		message_fetch ( "SHEET_DETAILS", message )
		message_add_parameter ( message, STRIP ( auto_count ) )
		message = message_get_text ( message, 1 )

  		self . add_line_page ( message, list_details )

	ENDIF

ENDROUTINE { property_action_automatic }

{******************************************************************************}

ROUTINE property_action_auto_template ( self, VALUE table )

{
*	 Add a Table using a Template.
*
*
*******************************************************************************}

	DECLARE template, controls, field_num, include_copy, details,
	         other_details, count, fields, browse_details

	ARRAY controls
	ARRAY details
	ARRAY other_details
	ARRAY browse_details
	include_copy = FALSE

	{**********************************************************************}
	{* Browse Fields                                                      *}
	{**********************************************************************}

	explorer_utils_browse_columns ( table, browse_details,
	                                self . display_only  )

	self . add_line_page ( GET_USER_MESSAGE( "SHEET_H_BROWSE", 1 ) , browse_details )

	{**********************************************************************}
	{* Put the Template Info on the Form.                                 *}
	{**********************************************************************}

	template = SELECT 'table' . template_id IN OBJECT self . container

	read_in_template_fields ( template, table, controls, TRUE, TRUE )

	create_prompt_array ( controls, table, details, 
	                      self . display_only     , 
	                      field_num, include_copy )

	IF ( SIZE_OF_ARRAY ( details ) > 0 ) THEN

		self . add_template_page ( GET_USER_MESSAGE( "SHEET_H_TEMPLATE", 1 ), controls, details )

	ENDIF

	{**********************************************************************}
	{* Get Hold of Other Details...                                       *}
	{**********************************************************************}

	count = 1
	get_unordered_field_names ( table, fields )

	WHILE fields [ count, 1 ] <> EMPTY DO
	
		self . add_unique_field ( table, fields [ count, 1 ] , 
		                          details, other_details     )
		count = count + 1

	ENDWHILE

	IF  (  table <> "SAMPLE"                                  )  OR
	    (( table  = "SAMPLE" ) AND ( CAN_ACCESS_MENU ( DFS ) ))  THEN

		self . add_line_page ( GET_USER_MESSAGE( "SHEET_H_INTERNAL", 1 ), other_details )

	ENDIF

ENDROUTINE { property_action_auto_template }

{******************************************************************************}

ROUTINE property_action_auto_labtable ( self, VALUE table )

{
*	 Add a Laboratory Table Property Sheet.
*
*
*******************************************************************************}

	DECLARE lab_details, other_details, fields, count
	count = 1
	ARRAY lab_details
	ARRAY other_details

	self . add_stand_field ( table, "GROUP_FIELD"      , lab_details )
	self . add_stand_field ( table, "MODIFIABLE_FIELD" , lab_details )
	self . add_stand_field ( table, "MODIFIED_ON_FIELD", lab_details )
	self . add_stand_field ( table, "MODIFIED_BY_FIELD", lab_details )
	self . add_stand_field ( table, "REMOVE_FIELD"     , lab_details )

	get_unordered_field_names ( table, fields )

	WHILE fields [ count, 1 ] <> EMPTY DO
	
		self . add_unique_field ( table, fields [ count, 1 ] , 
		                          lab_details, other_details )
		count = count + 1

	ENDWHILE

	self . add_line_page ( GET_USER_MESSAGE( "SHEET_H_DETAILS", 1 ), other_details )
	self . add_line_page ( GET_USER_MESSAGE( "SHEET_H_INTERNAL", 1 ), lab_details )

ENDROUTINE { property_action_auto_labtable }

{******************************************************************************}

ROUTINE property_action_add_field ( self, VALUE table, VALUE field, details )

{
*	 Add a field to a Prompt Details Array
*
*
*******************************************************************************}

	explorer_utils_add_detail_field ( table, field, details, 
	                                  self . display_only  )

ENDROUTINE { property_action_add_field }

{******************************************************************************}

ROUTINE property_action_add_unique_field (       self   , 
                                           VALUE table  , 
                                           VALUE field  , 
                                                 details,
                                                 unique )

{
*	 Add a field to a Prompt Details Array, if its not in the original.
*
*
*******************************************************************************}

	DECLARE count, found, type
	found = FALSE
	count = 1

	WHILE ( count <= SIZE_OF_ARRAY ( details ) ) AND
	      ( NOT found                          ) DO

		type = details [ count, TYPE_POSITION ]
		
		IF ( type = "FORMAT" ) OR ( type = "DISPLAY" ) THEN
			found = ( details [ count, FIELD_POSITION ] = field )
		ENDIF
		
		count = count + 1

	ENDWHILE

	IF NOT found THEN
		self . add_field ( table, field, unique )
	ENDIF

ENDROUTINE { property_action_add_unique_field }

{******************************************************************************}

ROUTINE property_action_add_stand_field (       self    , 
                                          VALUE table   , 
                                          VALUE type    , 
                                                details )

{
*	 Add a Used for Field to the Details Array
*
*
*******************************************************************************}

	DECLARE field

	GET_TABLE_DETAILS 'table', type, field

	IF ( field <> EMPTY ) AND ( field <> ERROR ) THEN

		self . add_field ( table, field, details )

	ENDIF

ENDROUTINE { property_action_add_stand_field }

{******************************************************************************}

ROUTINE property_action_add_field_object ( self, details, VALUE message, object )

{
*
*
*******************************************************************************}

	DECLARE pos

	pos  = size_of_array ( details ) + 1

	details [ pos, TYPE_POSITION ]    = "OBJECT"
	details [ pos, MESSAGE_POSITION ] = message
	details [ pos, OBJECT_POSITION ]  = object

ENDROUTINE { property_action_add_field_object }

{******************************************************************************}

ROUTINE property_action_is_labtable ( self, VALUE table )

{
*	 Is this a LabTable?
*
*
*******************************************************************************}

	DECLARE modified, labtable

	GET_TABLE_DETAILS 'table', "MODIFIED_BY_FIELD", modified

	labtable = (( modified <> EMPTY ) AND ( modified <> ERROR ))

	RETURN ( labtable )

ENDROUTINE { property_action_is_labtable }

{******************************************************************************}

ROUTINE property_action_is_template ( self, VALUE table )

{
*	 Is this a Template Driven Table
*
*
*******************************************************************************}

	DECLARE template
	template = valid_field ( table, "TEMPLATE_ID" )

	IF template THEN

		template = SELECT template_fields . table_name
		           WHERE  table_name = table
		template = ( template <> EMPTY ) 

	ENDIF

	RETURN ( valid_field ( table, "TEMPLATE_ID" ) )

ENDROUTINE { property_action_is_template }

{******************************************************************************}

ROUTINE property_action_add_blob ( self )

{ Add a Blob Tab to this sheet.
*
* Parameters   : Self
*              : Table - Table to Add to the Object.
* Return Value : N/a
*
*******************************************************************************}

	fatal_error ( GET_USER_MESSAGE ( "SHEET_NOTIMP", 1 )  )

ENDROUTINE

{******************************************************************************}

ROUTINE property_action_add_table ( self, VALUE table )

{ Add a Table to the Property Object
*
* Parameters   : Self
*              : Table - Table to Add to the Object.
* Return Value : N/a
*
*******************************************************************************}

	IF self . add_table THEN

		object_add_table ( self . container, table )

	ENDIF

ENDROUTINE { property_action_add_table }

{******************************************************************************}

ROUTINE property_action_add_list_page (       self         , 
                                        VALUE title        ,
                                              line_details ,
                                              collection   )

{ Add a List Page to the Tab Dialog.
*
* Parameters   : Self
*              : Title        - The Tab Title
*              : Line Details - Line details array.
* Return Value : N/a
*
*******************************************************************************}

	DECLARE form, list

	self . initialise ( )

	CREATE OBJECT PROPERTY_PAGE_CLASS, form
	form . header = title
	self . tab . set_size ( form )

	CREATE OBJECT LIST_VIEWER_CLASS, list

	list . menu_view          = FALSE
	list . menu_columns       = TRUE
	list . menu_property      = TRUE
	list . menu_refresh       = FALSE
	list . menu_criteria      = FALSE
	list . menu_autocriteria  = FALSE

	list . table          = collection . table
	ARRAY_COPY ( list . prompt_details, line_details ) 

	list . autosize = TRUE

	list . create_list ( )
	list . odb = collection

	list . display_data ( )

	{ Lets do a bit of prompt positioning. }

	list . height = form . height - 1
	list . width  = form . width
	list . column = 1
	list . row    = 1

	form . add_prompt ( list )

	self . add_page ( form )

ENDROUTINE { property_action_add_list_page }

{******************************************************************************}

ROUTINE property_action_add_grid_page (       self         , 
                                        VALUE title        ,
                                              line_details ,
                                              collection   )

{ Add a Grid Page to the Tab Dialog.
*
* Parameters   : Self
*              : Title        - The Tab Title
*              : Line Details - Line details array.
* Return Value : N/a
*
*******************************************************************************}

	DECLARE form, grid, count, msg, prompt_details
	
	self . initialise ( )

	CREATE OBJECT PROPERTY_PAGE_CLASS, form
	form . header = title
	self . tab . set_size ( form )

	CREATE OBJECT "STD_GRID_EDITOR", grid

	grid . vgl_library          = GLOBAL ( "CURRENT_LIBRARY" )
	grid . prompt_cell_routine  = "LIST_GRID_PROMPT_CELL"
	grid . display_cell_routine = "LIST_GRID_DISPLAY_CELL"
	grid . title_separator_top  = GRID_SEPARATOR_CELLS
	grid . title_rendition_top  = PROMPT_RENDITION_BOLD
	grid . title_size_top       = 1
	grid . fixed_columns_left   = 1

	grid . cell_columns = SIZE_OF_ARRAY ( line_details )
	grid . cell_rows    = collection . size ( )

	{ Set up the Columns. Deal with Differing Message Positions... }

	array_copy ( prompt_details, line_details )

	count = 1
	IF ( prompt_details [ count, GRID_MSG_POSITION ] = EMPTY    ) OR 
	   ( NUMTEXT ( prompt_details [ count, GRID_MSG_POSITION ] )) THEN

		WHILE count <= SIZE_OF_ARRAY ( prompt_details ) DO

			msg = prompt_details [ count, MESSAGE_POSITION ]
			prompt_details [ count, GRID_MSG_POSITION ] = msg
			count = count + 1

		ENDWHILE

	ENDIF

	lib_grid_setup_columns ( prompt_details, grid, EMPTY )

	{ Lets do a bit of prompt positioning. }

	grid . height = form . height
	grid . width  = form . width
	grid . column = 1
	grid . row    = 1

	{ All set up. Do the References then add to the Sheet. }

	grid . user_info = collection
	form . user_info = prompt_details

	form . add_prompt ( grid )

	self . add_page   ( form )

ENDROUTINE { property_action_add_grid_page }

{******************************************************************************}

ROUTINE property_action_add_template_page (       self         ,
                                            VALUE title        ,
                                                  fields       , 
                                                  line_details )

{ Add a Line Editor for Templates Page to the Tab Dialog.
*
* Parameters   : Self
*              : Title        - The Tab Title
*              : fields       - Template Details Array
*              : Line Details - Line details array.
* Return Value : N/a
*
*******************************************************************************}

	DECLARE form

	self . initialise ( )

	CREATE OBJECT PROPERTY_TEMPLATE_CLASS, form
	form . template_fields = fields
	form . header          = title
	self . tab . set_size ( form )

	PROMPT OBJECT form . prompt_objects [ 1 ] 
	    CLASS "STD_LINE_EDITOR"
	    AT 1, 1
	    WITH (  height         = form . height     ,
	            title_width    = self . title_width,
	            prompt_details = line_details      ,
	            width          = form . width      ,
	            object         = self . container  )
		
	self . add_page ( form )

ENDROUTINE { property_action_add_template_page }

{******************************************************************************}

ROUTINE property_action_add_line_page (       self         , 
                                        VALUE title        ,
                                              line_details )

{ Add a Line Editor Page to the Tab Dialog.
*
* Parameters   : Self
*              : Title        - The Tab Title
*              : Line Details - Line details array.
* Return Value : N/a
*
*******************************************************************************}

	DECLARE form

	self . initialise ( )

	CREATE OBJECT PROPERTY_PAGE_CLASS, form
	form . header = title
	self . tab . set_size ( form )

	PROMPT OBJECT form . prompt_objects [ 1 ] 
	    CLASS "STD_LINE_EDITOR"
	    AT 1, 1
	    WITH (  height         = form . height     ,
	            title_width    = self . title_width,
	            prompt_details = line_details      ,
	            width          = form . width      ,
	            object         = self . container  )
		
	self . add_page ( form )

ENDROUTINE { property_action_add_line_page }

{******************************************************************************}

ROUTINE property_action_get_page ( self, VALUE page_number )

{
*	Get a Particular Page Number.
*
*
*******************************************************************************}

	DECLARE page
	self . initialise ( )
	page = self . tab . forms [ page_number ]
	RETURN ( page )

ENDROUTINE { property_action_status_get_page }

{******************************************************************************}

ROUTINE property_action_get_page_count ( self )

{
*	Return number of pages
*
*
*******************************************************************************}

	RETURN ( size_of_array( self . tab . forms ) )

ENDROUTINE { property_action_get_page_count }

{******************************************************************************}

ROUTINE property_action_get ( self, VALUE page_id )

{
*	Returns the page with the passed id
*
*
*******************************************************************************}

	DECLARE form, page_number, found

	found = EMPTY

	page_number = 1
	WHILE ( page_number <= self . get_page_count( ) ) AND ( found = EMPTY ) DO

		form = self . get_page( page_number )

		IF object_check_property( form, "IDENTITY" ) THEN
		
			IF form . identity = page_id THEN
				found = form
			ENDIF
 			
		ENDIF

		page_number = page_number + 1
			
	ENDWHILE
	
	RETURN( found )

ENDROUTINE { property_action_get }

{******************************************************************************}

ROUTINE property_action_invoke ( self, VALUE action_name )

{
*	Invokes an action on each of the pages
*
*
*******************************************************************************}

	DECLARE form, page_number

	page_number = 1
	WHILE page_number <= self . get_page_count( ) DO

		form = self . get_page( page_number )

		IF object_check_action( form, action_name ) THEN
 			form . ?action_name?( )
		ENDIF

		page_number = page_number + 1
			
	ENDWHILE

ENDROUTINE { property_action_invoke }

{******************************************************************************}

ROUTINE property_action_finish ( self )

{
*	Finalisation routine
*
*
*******************************************************************************}

	{* Call each page's finish action *}
	self . invoke( "FINISH" )

ENDROUTINE { property_action_invoke }

{******************************************************************************}

ROUTINE list_grid_display_cell (       grid        ,
                                 VALUE cell_column ,
                                 VALUE cell_row    ,
                                       window      ,
                                 VALUE column      ,
                                 VALUE row         ,
                                 VALUE cell_width  ,
                                 VALUE cell_height )
{
*	Display a Grid Item
*
*
*******************************************************************************}

	DECLARE object, prompt_details

	grid . user_info . set_by_number ( cell_row )
	object = grid . user_info . current

	prompt_details = grid . parent_prompt . user_info

	lib_grid_display_array ( grid               ,
	                         cell_column        ,
	                         cell_row           ,
	                         window             ,
	                         column             ,
	                         row                ,
	                         cell_width         ,
	                         object             ,
	                         prompt_details     ,
	                         EMPTY              ,
	                         FALSE              ,
	                         PROMPT_DETAILS_310 )

ENDROUTINE { list_grid_display_cell }

{******************************************************************************}

ROUTINE list_grid_prompt_cell (       grid        ,
                                VALUE cell_column ,
                                VALUE cell_row    ,
                                      window      ,
                                VALUE column      ,
                                VALUE row         ,
                                VALUE cell_width  ,
                                VALUE cell_height )
{
*	Prompt for a Grid Items.
*
*
*******************************************************************************}

	DECLARE object, prompt_details
	
	grid . user_info . set_by_number ( cell_row )
	object = grid . user_info . current

	prompt_details = grid . parent_prompt . user_info

	lib_grid_prompt_array ( grid               ,
	                        cell_column        ,
	                        cell_row           ,
	                        window             ,
	                        column             ,
	                        row                ,
	                        cell_width         ,
	                        object             ,
	                        prompt_details     ,
	                        EMPTY              ,
	                        FALSE              ,
	                        PROMPT_DETAILS_310 )

ENDROUTINE { list_grid_prompt_cell }

{******************************************************************************}
{*                         M I S C   R O U T I N E S                          *}
{******************************************************************************}

ROUTINE build_heading ( prompt_details )

{ Build a Heading from a Prompt Details Array.
*
* Parameters   : Prompt_Details - The Details Array
* Return Value : Text           - The Heading.
*
*******************************************************************************}

	DECLARE head_count, heading, col_head, width_pos

	width_pos  = EXPLORER_UTILS_WID_POS
	head_count = 1
	heading    = ""

	WHILE head_count <= SIZE_OF_ARRAY ( prompt_details ) DO

		col_head = PAD ( prompt_details [ head_count, 1 ], " ",
		                 prompt_details [ head_count, width_pos ] )

		heading    = heading : col_head : " "
		head_count = head_count + 1 

	ENDWHILE

	RETURN ( heading )

ENDROUTINE { build_heading }

{******************************************************************************}
{*** Extended Property Sheet Class ********************************************}
{******************************************************************************}

{******************************************************************************}
{* The extended property class caters for one record or multiple records.     *}
{* It requires that the container property holds a collection                 *}
{******************************************************************************}

{******************************************************************************}

ROUTINE property_ex_class_initialisation ( self )

{ 	
*	Extended Property Sheet Class Initialisation
*
*
*******************************************************************************}

	self . prompt_id = "$LIB_PROPERTY_EX_SHEET_MAIN"
	self . container = EMPTY
	ARRAY self . global_fields 

ENDROUTINE

{******************************************************************************}

ROUTINE property_ex_action_automatic ( self )

{ 	
*	Automatic Property Sheet Generation for one or more records
*
*
*******************************************************************************}
	
	IF self . container <> EMPTY THEN
	
		self . initialise ( )

		self . set_header( )

		self . add_general_page ( )

		IF self . is_template( self . get_table( ) ) THEN
			
			self . add_template_page ( )
			
		ENDIF

		IF self . can_view_internal( ) THEN
	
			self . add_details_page ( )

		ENDIF

		IF GLOBAL ( "EXPLORER_PROP_LINKS" ) THEN
		
			self . add_links_page( )
			
		ENDIF

		IF GLOBAL ( "EXPLORER_PROP_AUDIT" ) THEN
		
			self . add_audit_page ( )
			
		ENDIF

		IF GLOBAL ( "EXPLORER_PROP_ESIG" ) THEN
		
			self . add_esig_page ( )
			
		ENDIF
	
	ELSE
	
		fatal_error(GET_USER_MESSAGE( "SHEET_ERR_NO_ODB", 1 ))
	
	ENDIF

ENDROUTINE { property_action_auto_multiple }

{******************************************************************************}

ROUTINE property_ex_action_start_prompt ( self )

{
*	Start Prompt override
*
*******************************************************************************}

	DECLARE page, message

	self . initialise ( )
	page = self . get_page ( 1 )

	IF page = EMPTY THEN
	
		message = GET_USER_MESSAGE ( "SHEET_NOPAGE", 1 ) 
		fatal_error ( message )

	ELSE

		object_invoke_class ( self , PROPERTY_SHEET_CLASS , "START_PROMPT" )

	ENDIF

ENDROUTINE { property_action_start_prompt }


{******************************************************************************}

ROUTINE property_ex_action_set_header( self )

{ 	
*	Sets the property sheet's header text
*
*******************************************************************************}

	DECLARE key0_string

	IF ( self . header = GET_USER_MESSAGE ( "SHEET_HEADER", 1 ) ) AND
	   ( self . container . size( ) > 0                         ) THEN

		self . container . set_first()

		key0_string = GET_KEY0_STRING_OBJECT ( self . get_table( )        ,
		                                       self . container . current )
		self . header = STRIP( key0_string ) 

		IF self . container . size( ) > 1 THEN
			self . header = self . header : ", ..."
		ENDIF

		self . header = self . header : GET_USER_MESSAGE ( "LIST_PROPS", 1 )
		
		self . icon = explorer_utils_get_table_default_icon ( self . get_table() )
					
	ENDIF	

ENDROUTINE

{******************************************************************************}

ROUTINE property_ex_action_get_subject_text ( self )

{
*	Returns the text that summarises or describes this record or group of records
*
*******************************************************************************}

	DECLARE table, subject_text

	table = self . get_table( )
	
{**MS HBe 27-11-03}
	
	subject_text = "Sorry, Committed Information Not Available"
	
{**ME HBe}

	IF self . container . size() = 1 THEN
		
		self . container . set_first()
		subject_text = STRIP( GET_KEY0_STRING_OBJECT ( table, self . container . current ) )

	ELSEIF self . container . size() > 1 THEN

		subject_text = STRIP( self . container . size() ) :
					   GET_USER_MESSAGE( "SHEET_RECORDS", 1 ) :
					   "(" : explorer_utils_get_table_display_name ( table ) : ")"

	ENDIF
	
	RETURN( subject_text )

ENDROUTINE

{******************************************************************************}

ROUTINE property_ex_action_add_to_global_fields( self, prompt_details )
{
*	Adds the passed prompt_details array to the global_fields array.
*	This is used to ensure we can avoid repeating fields on different tabs 
*
*******************************************************************************}

	explorer_utils_append_details_array( self . global_fields, prompt_details )

ENDROUTINE

{******************************************************************************}

ROUTINE property_ex_action_get_table( self )
{
*	Returns the current table held in the container collection
*
*******************************************************************************}

	RETURN( TOUPPER( self . container . table ) )

ENDROUTINE

{******************************************************************************}

ROUTINE property_ex_action_can_view_internal( self )
{
*	Returns boolean indicating if current user has sufficient right to view all
*	fields in the current record or records
*
*******************************************************************************}

	DECLARE has_rights

	has_rights = ( self . get_table() <> "SAMPLE"        ) OR
	             ( ( self . get_table() = "SAMPLE" ) AND
	               ( CAN_ACCESS_MENU ( DFS )       )     )

	RETURN( has_rights )

ENDROUTINE

{******************************************************************************}

ROUTINE property_ex_action_add_general_page ( self )

{
*	Add general front page 
*
*******************************************************************************}

	DECLARE icon_id, subject_text, subject_width, table
	DECLARE form, icon, picture, options_button, subject_prompt, prompt_details
	
	table = self . get_table( )
	
	CREATE OBJECT PROPERTY_PAGE_GENERAL_CLASS, form
	form . header = GET_USER_MESSAGE( "SHEET_H_GENERAL", 1 )
	
	self . tab . set_size ( form )

	{**************************************************************************}
	{* Add front page summary/description information                         *}
	{**************************************************************************}

	subject_text = self . get_subject_text()
	icon_id = explorer_utils_get_table_default_icon ( table )
	icon = explorer_utils_get_icon ( icon_id )

	subject_width = LENGTH( subject_text )

	IF subject_width > form . width - 5 - 10 - 1 THEN
		subject_width = form . width - 5 - 10 - 1
	ENDIF

	CREATE OBJECT PROMPT_PICTURE_CLASS, picture

	picture . row    = 1
	picture . column = 1
	picture . set_icon_from_list ( ICONS_BUTTONS, 0, icon )

	form . add_display ( picture )

	CREATE OBJECT "STD_PROMPT_TEXT", subject_prompt
	subject_prompt . value        = subject_text
	subject_prompt . text         = subject_text
	subject_prompt . row          = 1
	subject_prompt . column       = 5
	subject_prompt . width        = subject_width
	subject_prompt . display_only = TRUE

	form . add_prompt( subject_prompt )

	CREATE OBJECT "STD_PROMPT_BUTTON", options_button
	options_button . row                 = 1
	options_button . column              = form . width - 10
	options_button . caption             = GET_USER_MESSAGE( "SHEET_B_OPTIONS", 1 )
	options_button . width               = 10
	options_button . mouse_click_routine = "property_general_options_button"

	OBJECT_ASSIGN_UNCOUNTED( options_button . user_info, self )

	form . add_prompt( options_button )

	form . add_prompt_array( self . container )

	IF form . prompts <> EMPTY THEN
	
		prompt_details = form . prompts . export_to_array( )
	
		self . add_to_global_fields( prompt_details )
	
	ENDIF

	self . add_page ( form )
	
ENDROUTINE

{******************************************************************************}

ROUTINE property_ex_action_add_template_page ( self )

{
*	Add a page containing template fields if the record was created from a
*	template.
*
*******************************************************************************}

	DECLARE controls, prompt_details, record, table, include_copy, template
	DECLARE field_num, form
	
	self . initialise ( )
	
	IF self . container . size( ) = 1 THEN

		table = self . get_table( )
		
		self . container . set_first()
		record = self . container . current

		IF self . is_template( table ) THEN
		
			ARRAY controls
			ARRAY prompt_details
			include_copy = FALSE

			template = SELECT 'table' . template_id IN OBJECT record 

			read_in_template_fields ( template, table, controls, TRUE, TRUE )

			create_prompt_array ( controls, table, prompt_details,
								  self . display_only     , 
								  field_num, include_copy )

			self . add_to_global_fields( prompt_details )

			IF ( size_of_array ( prompt_details ) > 0 ) THEN

				CREATE OBJECT PROPERTY_TEMPLATE_CLASS, form
				form . template_fields = controls
				form . header          = GET_USER_MESSAGE( "SHEET_H_TEMPLATE", 1 )
				
				self . add_page ( form )

				PROMPT OBJECT form . prompt_objects [ 1 ] 
					CLASS "STD_LINE_EDITOR"
					AT 1, 1
					WITH (  height         = form . height     ,
							title_width    = self . title_width,
							prompt_details = prompt_details    ,
							width          = form . width      ,
							object         = record            )

			ENDIF
		
		ENDIF

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE property_ex_action_add_details_page ( self )

{
*	Add a page to display remaining fields that are not on the other pages
*
*******************************************************************************}

	DECLARE record, table, form, other_details, count, fields

	self . initialise ( )
	
	IF self . container . size( ) = 1 THEN

		table = self . get_table()
		
		self . container . set_first()
		record = self . container . current

		ARRAY other_details

		count = 1
		get_unordered_field_names ( table, fields )

		WHILE fields [ count, 1 ] <> EMPTY DO

			self . add_unique_field ( table, fields [ count, 1 ] , 
									  self . global_fields, other_details )
			count = count + 1

		ENDWHILE

		IF ( size_of_array( other_details ) > 0 ) THEN

			CREATE OBJECT PROPERTY_PAGE_CLASS, form
			form . header = GET_USER_MESSAGE( "SHEET_H_INTERNAL", 1 )
			self . add_page ( form )

			PROMPT OBJECT form . prompt_objects [ 1 ] 
				CLASS "STD_LINE_EDITOR"
				AT 1, 1
				WITH (  height         = form . height     ,
						title_width    = self . title_width,
						prompt_details = other_details     ,
						width          = form . width      ,
						object         = record            )

		ENDIF

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE property_ex_action_add_links_page ( self )

{
*	Adds a sheet containing a list of linked entities. E.g it can be determined
*	what samples or instruments are at a particular location.
*
*******************************************************************************}

	DECLARE form
  
	CREATE OBJECT ENTITY_LINK_VIEWER_CLASS, form

	self . tab . set_size ( form )

	form . base_collection = self . container

	self . add_page ( form )

ENDROUTINE

{******************************************************************************}

ROUTINE property_ex_action_add_esig_page ( self )

{
*	Adds a sheet conatining a list of applicable Esig signings. If multiple
*	records are selected then the list shows all esig signings on any of the
*	selected records
*
*******************************************************************************}

	DECLARE form, list

	CREATE OBJECT PROPERTY_PAGE_CLASS, form
	form . header                 = GET_USER_MESSAGE( "SHEET_H_ESIGS", 1 )
	form . initialisation_routine = "esig_page_initialise"
	form . callback_library       = GLOBAL( "CURRENT_LIBRARY" )
	
	self . tab . set_size ( form )

	CREATE OBJECT LIST_VIEWER_CLASS, list
	list . menu_view         = FALSE
	list . menu_columns      = TRUE
	list . menu_property     = TRUE
	list . menu_refresh      = TRUE
	list . menu_criteria     = FALSE
	list . menu_autocriteria = TRUE
	list . autosize          = TRUE

	list . height = form . height - 1
	list . width  = form . width
	list . column = 1
	list . row    = 1

	ARRAY list . prompt_details ARRAYSIZE ( 0, 7 )

	IF self . container . size() > 1 THEN
		self . add_field ( "esig_data_view", "record_key0", list . prompt_details )
	ENDIF

	self . add_field ( "esig_data_view", "operator"    , list . prompt_details )
	self . add_field ( "esig_data_view", "fullname"    , list . prompt_details )
	self . add_field ( "esig_data_view", "server_date" , list . prompt_details )
	self . add_field ( "esig_data_view", "esig_reason" , list . prompt_details )

	list . create_list  ( )

	form . add_prompt ( list )

	self . add_page ( form )

ENDROUTINE { property_action_add_esig_page }

{******************************************************************************}

ROUTINE esig_page_initialise( self )

{
*	Property page callback. Search for esig data and display in list
*
*******************************************************************************}

	DECLARE list, first_time, key0_string, sheet
	
	sheet = self . property_sheet
	list  = self . prompt_objects[1]

	ARRAY_SELECT_ADD ( list . criteria      ,
					   ARRAY_SELECT_EQ      ,
					   "table_name"         ,
					   sheet . get_table( ) )

	ARRAY_SELECT_ADD ( list . criteria      ,
	                   ARRAY_SELECT_PUSH    ,
	                   EMPTY                ,
	                   EMPTY                )

	first_time = TRUE

	sheet . container . set_first()

	WHILE sheet . container . current <> EMPTY DO

		key0_string = GET_KEY0_STRING_OBJECT ( sheet . get_table( )        ,
		                                       sheet . container . current )

		IF NOT first_time THEN

			ARRAY_SELECT_ADD( list . criteria, ARRAY_SELECT_OR, EMPTY, EMPTY )

		ENDIF

		ARRAY_SELECT_ADD( list . criteria, ARRAY_SELECT_EQ, "record_key0", key0_string )

		sheet . container . set_next()

		first_time = FALSE

	ENDWHILE

	ARRAY_SELECT_ADD ( list . criteria           ,
	                   ARRAY_SELECT_POP     ,
	                   EMPTY                ,
	                   EMPTY                )

	ARRAY_SELECT_ADD ( list . criteria           ,
					   ARRAY_SELECT_ORDER     ,
					   "record_key0"          ,
					   ARRAY_SELECT_ASCENDING )

	ARRAY_SELECT_ADD ( list . criteria           ,
					   ARRAY_SELECT_ORDER     ,
					   "esig_data_id"         ,
					   ARRAY_SELECT_ASCENDING )

	list . table = "ESIG_DATA_VIEW"
	list . load_data ( )

	RETURN( TRUE )

ENDROUTINE

{******************************************************************************}

ROUTINE property_ex_action_add_audit_page ( self )

{
*	Adds a sheet conatining a list of applicable audits. If multiple
*	records are selected then the list shows all audits asociated with any of
*	the selected records
*
*******************************************************************************}

	DECLARE form, list

	CREATE OBJECT PROPERTY_PAGE_CLASS, form
	form . header                 = GET_USER_MESSAGE( "SHEET_H_AUDITS", 1 )
	form . initialisation_routine = "audit_page_initialise"
	form . callback_library       = GLOBAL( "CURRENT_LIBRARY" )

	self . tab . set_size ( form )

	CREATE OBJECT LIST_VIEWER_CLASS, list
	list . menu_view         = FALSE
	list . menu_columns      = TRUE
	list . menu_property     = TRUE
	list . menu_refresh      = TRUE
	list . menu_criteria     = FALSE
	list . menu_autocriteria = TRUE
	list . autosize          = TRUE

	list . height = form . height - 1
	list . width  = form . width
	list . column = 1
	list . row    = 1

	ARRAY list . prompt_details ARRAYSIZE ( 0, 7 )
	
	IF self . container . size() > 1 THEN
		self . add_field ( "audit_view", "record_key0", list . prompt_details )
	ENDIF
	self . add_field ( "audit_view", "user_id"         , list . prompt_details )
	self . add_field ( "audit_view", "transaction_date", list . prompt_details )
	self . add_field ( "audit_view", "transaction_name", list . prompt_details )
	self . add_field ( "audit_view", "event_reason"    , list . prompt_details )

	list . create_list  ( )

	form . add_prompt ( list )

	self . add_page ( form )

ENDROUTINE { property_action_add_audit_page }

{******************************************************************************}

ROUTINE audit_page_initialise( self )

{ 
*	Property page callback. Search for audit data and display in list
*
*******************************************************************************}

	DECLARE list, key0_string, first_time, sheet

	sheet = self . property_sheet
	list  = self . prompt_objects[1]

	ARRAY list . criteria

	ARRAY_SELECT_ADD ( list . criteria      ,
					   ARRAY_SELECT_EQ      ,
					   "table_name"         ,
					   sheet . get_table( ) )

	ARRAY_SELECT_ADD ( list . criteria      ,
	                   ARRAY_SELECT_PUSH    ,
	                   EMPTY                ,
	                   EMPTY                )

	first_time = TRUE

	sheet . container . set_first()

	WHILE sheet . container . current <> EMPTY DO

		key0_string = GET_KEY0_STRING_OBJECT ( sheet . get_table( )        ,
		                                       sheet . container . current )

		IF NOT first_time THEN

			ARRAY_SELECT_ADD( list . criteria, ARRAY_SELECT_OR, EMPTY, EMPTY )

		ENDIF

		ARRAY_SELECT_ADD( list . criteria, ARRAY_SELECT_EQ, "record_key0", key0_string )

		sheet . container . set_next()

		first_time = FALSE

	ENDWHILE

	ARRAY_SELECT_ADD ( list . criteria        ,
	                   ARRAY_SELECT_POP     ,
	                   EMPTY                ,
	                   EMPTY                )

	ARRAY_SELECT_ADD ( list . criteria        ,
					   ARRAY_SELECT_ORDER     ,
					   "record_key0"          ,
					   ARRAY_SELECT_ASCENDING )

	ARRAY_SELECT_ADD ( list . criteria        ,
					   ARRAY_SELECT_ORDER     ,
					   "event"                ,
					   ARRAY_SELECT_ASCENDING )

	list . table = "AUDIT_VIEW"
	
	list . load_data ( )

	RETURN( TRUE )

ENDROUTINE

{******************************************************************************}

ROUTINE property_general_options_button( self )

{ 
*	Oprions button callback. Displays a context sensitive list of options
*	available for the current record or group of records
*
*******************************************************************************}

	DECLARE property, table, popup, collect

	property = self . user_info

	table = property . container . table 

	collect = property . container
	popup = explorer_rmb_load_for_table ( table, collect )

	IF popup <> EMPTY THEN
		popup . process( popup . start() )
	ENDIF

ENDROUTINE

{******************************************************************************}
{*** Property Page Class ******************************************************}
{******************************************************************************}

{******************************************************************************}

ROUTINE property_page_class_initialisation( self )

{ 
*	Property Page class initialisation
*
*******************************************************************************}

	self . initialised            = FALSE
	self . initialisation_routine = EMPTY
	self . callback_library       = EMPTY
	self . enter_prompt_routine   = "property_page_enter_prompt"
	self . vgl_library            = GLOBAL( "CURRENT_LIBRARY" )
	self . property_sheet         = EMPTY
	self . identity               = ""

ENDROUTINE

{******************************************************************************}

ROUTINE property_page_action_finish( self )

{ 
*	Property Page finalisation
*
*******************************************************************************}

ENDROUTINE

{******************************************************************************}

ROUTINE property_page_enter_prompt( self )

{
*	Form's enter prompt callback. Calls Property page initialisation routine
*
*******************************************************************************}

	DECLARE lib, rout, initialised

	IF NOT self . initialised THEN
	
		IF lib_utils_get_callback ( self . initialisation_routine  ,
		                            self . callback_library        ,
		                            lib                            ,
		                            rout                           ) THEN

			CALL_ROUTINE rout
				IN LIBRARY lib
				USING self
				RETURNING initialised

			self . initialised = ( initialised = TRUE )

		ENDIF

	ENDIF

ENDROUTINE

{******************************************************************************}
{*** Property Page General Class **********************************************}
{******************************************************************************}

{******************************************************************************}

ROUTINE property_page_general_class_initialisation( self )

{ 
* Property Page General class initialisation
*
* Parameters : self , Property Page General Object
*
*******************************************************************************}

	self . prompts = EMPTY

ENDROUTINE

{******************************************************************************}

ROUTINE property_page_general_action_add_prompt_array( self, obd )

{ 
* Builds the property page general's prompt array
*
* Parameters : self , Property Page General Object
*
*******************************************************************************}

	DECLARE record, prompts, prompt_object, table, browse_fields, browse_num
	DECLARE is_key, item

	table = obd . table

	IF obd . size( ) = 1 THEN
	
		obd . set_first()
		record = obd . current

		{**********************************************************************}
		{* Create a Prompt array class to manage the creation and placement   *}
		{* of the prompts on the form in a similar manner to a line editor    *}
		{**********************************************************************}

		CREATE OBJECT PROMPT_ARRAY_CLASS, prompts
		self . prompts = prompts

		prompts . width          = self . width
		prompts . row            = 2
		prompts . column         = 1
		prompts . object         = record
		prompts . form           = self

		prompts . add_divider( )

		CREATE OBJECT "STD_PROMPT_TEXT", prompt_object
		prompt_object . display_only = TRUE
		prompt_object . set_text( explorer_utils_get_table_display_name ( table ) )

		item = prompts . add_prompt( prompt_object )
		item . title    = GET_USER_MESSAGE( "SHEET_TYPE", 1 )

		GET_TABLE_DETAILS 'table', "BROWSE_DESC", browse_fields
		browse_num = 1
		WHILE ( browse_num <= size_of_array( browse_fields ) ) AND
			  ( browse_num <= 5                              ) DO

			GET_FIELD_DETAILS 'table' . 'browse_fields[browse_num]', "KEY0_FIELD", is_key

			item = prompts . add_field( browse_fields[browse_num] )
			item . display_only = is_key

			browse_num = browse_num + 1	

		ENDWHILE

		prompts . add_divider( )

		item = prompts . add_standard_field( "MODIFIED_ON_FIELD" )
		IF item <> EMPTY THEN
			item . display_only = TRUE
		ENDIF

		item = prompts . add_standard_field( "MODIFIED_BY_FIELD" )
		IF item <> EMPTY THEN
			item . display_only = TRUE
		ENDIF

		prompts . add_divider( )

		prompts . add_standard_field( "GROUP_FIELD" )

		prompts . add_divider( )

		prompts . add_standard_field( "MODIFIABLE_FIELD" )

		item = prompts . add_standard_field( "REMOVE_FIELD" )

		IF item <> EMPTY THEN
			item . display_only = TRUE
		ENDIF

		prompts . paste_items( )
	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE property_page_general_action_finish( self )

{ 
* Property Page finalisation
*
* Parameters : self , Property Page General Object
*
*******************************************************************************}

	IF self . prompts <> EMPTY THEN
		self . prompts . finish( )
	ENDIF

	self . property_page :: finish( )

ENDROUTINE


{******************************************************************************}
{******************************************************************************}
{******************************************************************************}