{Compared 20140123 /DKTBG}
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN LIBRARY $LIB_UTILS

SET COMPILE_OPTION DECLARE
SET NOTPROTECTED

CONSTANT one_day = INTERVAL("0001 00:00:00.00")
{*****************************************************************************}

ROUTINE base( batch_login )
{
*
******************************************************************************}

      RETURN ( TRUE )

ENDROUTINE

{*****************************************************************************}

ROUTINE default( batch_login )
{
*
******************************************************************************}

      RETURN ( TRUE )

ENDROUTINE

{*****************************************************************************}

ROUTINE monday_dts( batch_login )
{
*  DKTBG 20100419 ************************************************************}

      RETURN ( DAYNUMBER ( batch_login . date_to_start ) = 1 )

ENDROUTINE

{*****************************************************************************}

ROUTINE tuesday_dts( batch_login )
{
*  DKTBG 20100419 ************************************************************}

      RETURN ( DAYNUMBER ( batch_login . date_to_start ) = 2 )

ENDROUTINE

{*****************************************************************************}

ROUTINE wednesday_dts( batch_login )
{
*  DKTBG 20100419 ************************************************************}

      RETURN ( DAYNUMBER ( batch_login . date_to_start ) = 3 )

ENDROUTINE

{*****************************************************************************}

ROUTINE thursday_dts( batch_login )
{
*  DKTBG 20100419 ************************************************************}

      RETURN ( DAYNUMBER ( batch_login . date_to_start ) = 4 )

ENDROUTINE

{*****************************************************************************}

ROUTINE friday_dts( batch_login )
{
*  DKTBG 20100419 ************************************************************}

      RETURN ( DAYNUMBER ( batch_login . date_to_start ) = 5 )

ENDROUTINE

{*****************************************************************************}

ROUTINE mondays( batch_login )
{
*
******************************************************************************}

      RETURN ( DAYNUMBER ( batch_login . login_time ) = 1 )

ENDROUTINE

{*****************************************************************************}

ROUTINE tuesdays( batch_login )
{
*
******************************************************************************}

      RETURN ( DAYNUMBER ( batch_login . login_time ) = 2 )

ENDROUTINE

{*****************************************************************************}

ROUTINE wednesdays( batch_login )
{
*
******************************************************************************}

      RETURN ( DAYNUMBER ( batch_login . login_time ) = 3 )

ENDROUTINE

{*****************************************************************************}

ROUTINE thursdays( batch_login )
{
*
******************************************************************************}

      RETURN ( DAYNUMBER ( batch_login . login_time ) = 4 )

ENDROUTINE

{*****************************************************************************}

ROUTINE fridays( batch_login )
{
*
******************************************************************************}

      RETURN ( DAYNUMBER ( batch_login . login_time ) = 5 )

ENDROUTINE

{*****************************************************************************}

ROUTINE saturdays( batch_login )
{
*
******************************************************************************}

      RETURN ( DAYNUMBER ( batch_login . login_time ) = 6 )

ENDROUTINE

{*****************************************************************************}

ROUTINE sundays( batch_login )
{
*
******************************************************************************}

      RETURN ( DAYNUMBER ( batch_login . login_time ) = 7 )

ENDROUTINE

{*****************************************************************************}

ROUTINE week_day( batch_login )
{
*
******************************************************************************}

      DECLARE success

      success = ( DAYNUMBER ( batch_login . login_time ) >= 1 ) AND
                ( DAYNUMBER ( batch_login . login_time ) <= 5 )

      RETURN ( success )

ENDROUTINE

{*****************************************************************************}

ROUTINE afternoons( batch_login )
{
*
******************************************************************************}

      DECLARE meridian

      SET DATE FORMAT "AM"
      meridian = STRING( batch_login . login_time )
      RESTORE DATE FORMAT

      RETURN ( meridian = "PM" )

ENDROUTINE

{*****************************************************************************}

ROUTINE mornings( batch_login )
{
*
******************************************************************************}

      DECLARE meridian

      SET DATE FORMAT "AM"
      meridian = STRING( batch_login . login_time )
      RESTORE DATE FORMAT

      RETURN ( meridian = "AM" )

ENDROUTINE

{*****************************************************************************}

ROUTINE first_mon_in_month( batch_login )
{
*
******************************************************************************}

      DECLARE is_first_monday, day_of_month

      is_first_monday = FALSE

      IF DAYNUMBER ( batch_login . login_time ) = 1 THEN

            SET DATE FORMAT "DD"
            day_of_month = STRING(batch_login . login_time)
            RESTORE DATE FORMAT

            IF day_of_month <= 7 THEN
                  is_first_monday = TRUE
            ENDIF
      ENDIF

      RETURN ( is_first_monday )

ENDROUTINE

{*****************************************************************************}

ROUTINE last_mon_in_month( batch_login )
{
*
******************************************************************************}

      DECLARE is_last_monday, ldom, day_of_month

      is_last_monday = FALSE
      ldom = last_date_of_month(batch_login . login_time)

      IF DAYNUMBER ( batch_login . login_time ) = 1 THEN
            SET DATE FORMAT "DZ"
                day_of_month = STRING(batch_login . login_time)
            RESTORE DATE FORMAT

            IF day_of_month > ldom - 7 THEN
                  is_last_monday = TRUE
            ENDIF
      ENDIF

      RETURN ( is_last_monday )

ENDROUTINE

{**AS1618 HBe 21-4-2005}
{*****************************************************************************}
ROUTINE even_week( batch_login )
{
*
******************************************************************************}

      DECLARE is_even_week, week_of_year, {one_day, }year

      is_even_week = FALSE
      {one_day      = INTERVAL("0001 00:00:00.00")}
{Subtracting 1 day to login time to have weeks starting Monday instead of Sunday}

      SET DATE FORMAT "WW"
      week_of_year = STRING(batch_login . login_time - one_day)
      RESTORE DATE FORMAT

      SET DATE FORMAT "YYYY"
      year = STRING (batch_login . login_time - one_day)
      RESTORE DATE FORMAT

      IF (year=2008) OR (year=2009) OR (year=2013) OR (year=2014) OR (year=2015) OR (year=2019) OR (year=2019) THEN
    week_of_year = week_of_year + 1
      ENDIF

      IF ((week_of_year MOD 2) = 0) THEN
            is_even_week = TRUE
      ENDIF

      RETURN ( is_even_week )

ENDROUTINE

{*****************************************************************************}
ROUTINE odd_week( batch_login )
{
*
******************************************************************************}

      DECLARE is_odd_week, week_of_year, {one_day, }year

      is_odd_week = FALSE
      {one_day      = INTERVAL("0001 00:00:00.00")}
{Subtracting 1 day to login time to have weeks starting Monday instead of Sunday}

      SET DATE FORMAT "WW"
      week_of_year = STRING(batch_login . login_time - one_day)
      RESTORE DATE FORMAT

      SET DATE FORMAT "YYYY"
      year = STRING (batch_login . login_time - one_day)
      RESTORE DATE FORMAT

      IF (year=2008) OR (year=2009) OR (year=2013) OR (year=2014) OR (year=2015) OR (year=2019) OR (year=2019) THEN
    week_of_year = week_of_year + 1
      ENDIF

      IF ((week_of_year MOD 2) <> 0) THEN
            is_odd_week = TRUE
      ENDIF

      RETURN ( is_odd_week )

ENDROUTINE
{*****************************************************************************}
ROUTINE even_month( batch_login )
{
*
******************************************************************************}

      DECLARE is_even_month, month_of_year

      is_even_month = FALSE


      SET DATE FORMAT "MM"
      month_of_year = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ((month_of_year MOD 2) = 0) THEN
            is_even_month = TRUE
      ENDIF

      RETURN ( is_even_month )

ENDROUTINE

{*****************************************************************************}
ROUTINE odd_month( batch_login )
{
*
******************************************************************************}

      DECLARE is_odd_month, month_of_year

      is_odd_month = FALSE


      SET DATE FORMAT "MM"
      month_of_year = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ((month_of_year MOD 2) <> 0) THEN
            is_odd_month = TRUE
      ENDIF

      RETURN ( is_odd_month )

ENDROUTINE

{*****************************************************************************}
ROUTINE week2_month1_5_9( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF (day >= 8) AND (day <= 14) AND ((month = 1) OR (month = 5) OR (month = 9)) THEN
         success = TRUE
      ENDIF

      RETURN ( success )

ENDROUTINE

{*****************************************************************************}

ROUTINE week2_month2_6_10( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF (day >= 8) AND (day <= 14) AND ((month = 2) OR (month = 6) OR (month = 10)) THEN
         success = TRUE
      ENDIF

      RETURN ( success )

ENDROUTINE

{*****************************************************************************}

ROUTINE week2_month3_7_11( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF (day >= 8) AND (day <= 14) AND ((month = 3) OR (month = 7) OR (month = 11)) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}

ROUTINE week2_month4_8_12( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF (day >= 8) AND (day <= 14) AND ((month = 4) OR (month = 8) OR (month = 12)) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}

ROUTINE week1_each_month( batch_login )
{
*
******************************************************************************}

      DECLARE success, day

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF (day >= 1) AND (day <= 7) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}

ROUTINE week2_each_month( batch_login )
{
*
******************************************************************************}

      DECLARE success, day

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF (day >= 8) AND (day <= 14) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}

ROUTINE week3_each_month( batch_login )
{
*
******************************************************************************}

      DECLARE success, day

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF (day >= 15) AND (day <= 21) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}

ROUTINE week4_each_month( batch_login )
{
*
******************************************************************************}

      DECLARE success, day

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF (day >= 22) AND (day <= 28) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}
ROUTINE WEEK14AND40( batch_login )
{
*
******************************************************************************}

      DECLARE is_1440_week, week_of_year, {one_day, }year

      is_1440_week = FALSE
      {one_day      = INTERVAL("0001 00:00:00.00")}
{Subtracting 1 day to login time to have weeks starting Monday instead of Sunday}
{Adding one week before and after actual week to compensate for non-european calendar}
      SET DATE FORMAT "WW"
      week_of_year = STRING(batch_login . login_time - one_day)
      RESTORE DATE FORMAT

      SET DATE FORMAT "YYYY"
      year = STRING (batch_login . login_time - one_day)
      RESTORE DATE FORMAT

      IF (year=2008) OR (year=2009) OR (year=2013) OR (year=2014) OR (year=2015) OR (year=2019) OR (year=2019) THEN
    week_of_year = week_of_year + 1
      ENDIF

      IF (week_of_year = 13) OR (week_of_year = 14) OR (week_of_year = 15)
          OR (week_of_year = 39) OR (week_of_year = 40) OR (week_of_year = 41) THEN
            is_1440_week = TRUE
      ENDIF

      RETURN ( is_1440_week )


ENDROUTINE

{*****************************************************************************}
ROUTINE WEEK1AND27( batch_login )
{
*
******************************************************************************}

      DECLARE is_0127_week, week_of_year, {one_day, }year

      is_0127_week = FALSE
      {one_day      = INTERVAL("0001 00:00:00.00")}
{Subtracting 1 day to login time to have weeks starting Monday instead of Sunday}
{Adding one week before and after actual week to compensate for non-european calendar}

      SET DATE FORMAT "WW"
      week_of_year = STRING(batch_login . login_time - one_day)
      RESTORE DATE FORMAT

      SET DATE FORMAT "YYYY"
      year = STRING (batch_login . login_time - one_day)
      RESTORE DATE FORMAT

      IF (year=2008) OR (year=2009) OR (year=2013) OR (year=2014) OR (year=2015) OR (year=2019) OR (year=2019) THEN
    week_of_year = week_of_year + 1
      ENDIF

      IF (week_of_year = 52) OR (week_of_year = 1) OR (week_of_year = 2)
          OR (week_of_year = 26) OR (week_of_year = 27) OR (week_of_year = 28) THEN
            is_0127_week = TRUE
      ENDIF

      RETURN ( is_0127_week )


ENDROUTINE


{*****************************************************************************}

ROUTINE week2_month2_5_8_11( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF (day >= 8) AND (day <= 14) AND ((month = 2) OR (month = 5) OR (month = 8) OR (month = 11)) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE


{**TBG 20100810}
{*****************************************************************************}
ROUTINE monday_even_week( batch_login )
{
*
******************************************************************************}

      DECLARE {is_even_week, }is_monday, week_of_year, {one_day, }year

      is_monday = FALSE
      {is_even_week = FALSE}
      {one_day      = INTERVAL("0001 00:00:00.00")}
{Subtracting 1 day to login time to have weeks starting Monday instead of Sunday}

      SET DATE FORMAT "WW"
      week_of_year = STRING(batch_login . login_time - one_day)
      RESTORE DATE FORMAT

      SET DATE FORMAT "YYYY"
      year = STRING (batch_login . login_time - one_day)
      RESTORE DATE FORMAT

      IF (year=2008) OR (year=2009) OR (year=2013) OR (year=2014) OR (year=2015) OR (year=2019) OR (year=2019) THEN
    week_of_year = week_of_year + 1
      ENDIF

      IF ((week_of_year MOD 2) = 0) THEN
            {is_even_week = TRUE}
          IF ( DAYNUMBER ( batch_login . login_time ) = 1 ) THEN
            is_monday = TRUE
          ENDIF
      ENDIF

      RETURN ( is_monday )



ENDROUTINE

{*****************************************************************************}

ROUTINE monday_odd_week( batch_login )
{
*
******************************************************************************}

DECLARE {is_even_week, }is_monday, week_of_year, {one_day, }year

    is_monday = FALSE
    {is_even_week = FALSE}
    {one_day      = INTERVAL("0001 00:00:00.00")}
    {Subtracting 1 day to login time to have weeks starting Monday instead of Sunday}

    SET DATE FORMAT "WW"
    {week_of_year = STRING(batch_login . login_time - one_day) }
    week_of_year = STRING(batch_login . login_time)
    RESTORE DATE FORMAT

    SET DATE FORMAT "YYYY"
    {year = STRING (batch_login . login_time - one_day) }
    year = STRING (batch_login . login_time)
    RESTORE DATE FORMAT

    IF (year=2008) OR (year=2009) OR (year=2013) OR (year=2014) OR (year=2015) OR (year=2019) OR (year=2019) THEN
        week_of_year = week_of_year + 1
    ENDIF

    IF ((week_of_year MOD 2) <> 0) THEN
        {is_odd_week = TRUE}
        IF ( DAYNUMBER ( batch_login . login_time ) = 1 ) THEN
            is_monday = TRUE
        ENDIF
    ENDIF

    RETURN ( is_monday )

ENDROUTINE

{*****************************************************************************}

ROUTINE mon_week1_month2_5_8_11( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND ((month = 2) OR (month = 5) OR (month = 8) OR (month = 11)) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}

ROUTINE first_mon_jan( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND (month = 1) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}

ROUTINE first_mon_feb( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND (month = 2) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}
ROUTINE first_mon_mar( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND (month = 3) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}
ROUTINE first_mon_apr( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND (month = 4) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}
ROUTINE first_mon_may( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND (month = 5) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}
ROUTINE first_mon_jun( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND (month = 6) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}
ROUTINE first_mon_jul( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND (month = 7) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}
ROUTINE first_mon_aug( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND (month = 8) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}
ROUTINE first_mon_sep( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND (month = 9) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}
ROUTINE first_mon_oct( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND (month = 10) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}
ROUTINE first_mon_nov( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND (month = 11) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}
ROUTINE first_mon_dec( batch_login )
{
*
******************************************************************************}

      DECLARE success, day, month

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      SET DATE FORMAT "MM"
      month = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF ( DAYNUMBER ( batch_login . login_time ) = 1 )
            AND (day >= 1) AND (day <= 7)
            AND (month = 12) THEN
         success = TRUE
      ENDIF
      RETURN ( success )

ENDROUTINE

{*****************************************************************************}

ROUTINE TUE_W1_EACH_MONTH (batch_login)

DECLARE success, day, day_in_week, week

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      week = (day DIV 7) + 1
      day_in_week = DAYNUMBER ( batch_login . login_time )

      IF (day_in_week = 2) AND (week = 1) THEN
        success = TRUE
      ENDIF

      RETURN(success)

ENDROUTINE

{*****************************************************************************}

ROUTINE MON_W1_EACH_MONTH (batch_login)

DECLARE success, day, day_in_week, week

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      week = (day DIV 7) + 1
      day_in_week = DAYNUMBER ( batch_login . login_time )

      IF (day_in_week = 1) AND (week = 1) THEN
        success = TRUE
      ENDIF

      RETURN(success)

ENDROUTINE

{*****************************************************************************}

ROUTINE MON_W2_EACH_MONTH (batch_login)

DECLARE success, day, day_in_week, week

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      week = (day DIV 7) + 1
      day_in_week = DAYNUMBER ( batch_login . login_time )

      IF (day_in_week = 1) AND (week = 2) THEN
        success = TRUE
      ENDIF

      RETURN(success)

ENDROUTINE

{*****************************************************************************}

ROUTINE MON_W3_EACH_MONTH (batch_login)

DECLARE success, day, day_in_week, week

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      week = (day DIV 7) + 1
      day_in_week = DAYNUMBER ( batch_login . login_time )

      IF (day_in_week = 1) AND (week = 3) THEN
        success = TRUE
      ENDIF

      RETURN(success)

ENDROUTINE

{*****************************************************************************}

ROUTINE MON_W4_EACH_MONTH (batch_login)

DECLARE success, day, day_in_week, week

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      week = (day DIV 7) + 1
      day_in_week = DAYNUMBER ( batch_login . login_time )

      IF (day_in_week = 1) AND (week = 4) THEN
        success = TRUE
      ENDIF

      RETURN(success)

ENDROUTINE

{*****************************************************************************}

ROUTINE MON_W5_EACH_MONTH (batch_login)

DECLARE success, day, day_in_week, week

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      week = (day DIV 7) + 1
      day_in_week = DAYNUMBER ( batch_login . login_time )

      IF (day_in_week = 1) AND (week = 5) THEN
        success = TRUE
      ENDIF

      RETURN(success)

ENDROUTINE

{*****************************************************************************}

ROUTINE FIRST_DAY_IN_MONTH (batch_login)

DECLARE success, day

      success = FALSE

      SET DATE FORMAT "DD"
      day = STRING(batch_login . login_time)
      RESTORE DATE FORMAT

      IF (day = 1) THEN
        success = TRUE
      ENDIF

      RETURN(success)

ENDROUTINE

ROUTINE last_date_of_month (DD)

    DECLARE month, year, ldom

    ldom = 31

    SET DATE FORMAT "MON"
        month = STRING(DD)
    RESTORE DATE FORMAT

    SET DATE FORMAT "YYYY"
        year = STRING(DD)
    RESTORE DATE FORMAT

    WHILE NOT(IS_DATE(STRIP(STRING(ldom)):"-":month:"-":year)) DO
        ldom = ldom - 1
    ENDWHILE

RETURN(ldom)

ENDROUTINE
