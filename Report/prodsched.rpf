{==============================================================================}
{ Project............:                                                         }
{ Module Name........: prodsched.rpf                                           }
{ Company............:                                                         }
{ Author.............: dedre.svc.itd.admin                                     }
{ Responsible........: dedre.svc.itd.admin                                     }
{ System.............:                                                         }
{ Portability........: Not Checked                                             }
{ Document Ref.......:                                                         }
{ Specification......:                                                         }
{ Re-entrant.........:                                                         }
{ Status.............: [X] In Work  [ ] Test  [ ] Ready for use  [ ] Released  }
{------------------------------------------------------------------------------}
{ Created on.........: 06/06/2016                                              }
{ Created by.........: dedre.svc.itd.admin                                     }
{ Last modified on...: 06/06/2016                                              }
{ Last modified by...: dedre.svc.itd.admin                                     }
{ Version............: 1.0.0.0                                                 }
{ Release date.......:                                                         }
{------------------------------------------------------------------------------}
{ Messagefiles.......:                                                         }
{ Libraries..........: see JOIN-Statements                                     }
{------------------------------------------------------------------------------}
{ Purpose, Comments..:  Second Screen Report for LTE                           }
{------------------------------------------------------------------------------}
{ History                                                                      }
{ 06/06/2016 (DSIA)....: Start                                                 }
{==============================================================================}


{==============================================================================}
{                         K N O W N   P R O B L E M S                          }
{------------------------------------------------------------------------------}
{ [001]   : Ignore the warning that "the_list_editor" is not declared. If you  }
{           declare the_list_editor the program won't work.                    }
{==============================================================================}


{==============================================================================}
{                            P R E P A R A T I O N                             }
{==============================================================================}
SET COMPILE_OPTION DECLARE
ENABLE WINDOWS
SET NAME "DEFER/"
SET NOTPROTECTED


{==============================================================================}
{                          L I B R A R Y   J O I N S                           }
{==============================================================================}
JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN LIBRARY $LIST_EDITOR
JOIN LIBRARY $LABTABLIB
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $LIB_GRID

{==============================================================================}
{                                G L O B A L S                                 }
{==============================================================================}
CONSTANT LE_TABLE_NAME     =   "PROD_SCHED"

CONSTANT FORM_WIDTH      = 40
CONSTANT FORM_HEIGHT     = 8
CONSTANT BUTTON_WIDTH    = 10
CONSTANT TEXT_LEFT       = 3
CONSTANT TEXT_WIDTH      = 24
CONSTANT PROMPT_LEFT     = 18
CONSTANT PROMPT_WIDTH    = 20


CONSTANT TAG_BROWSE_SMPT   = 1
CONSTANT TAG_BROWSE_GROUP  = 2
CONSTANT TAG_BROWSE_INSP_T = 3
{==============================================================================}
{                 * * * * * * *     M A I N     * * * * * * *                  }
{==============================================================================}
fatal_error("This report could only start from a LTE")




{==============================================================================}
{ Mainroutine to call from LTE                                                 }
{==============================================================================}
{ Parameter          Type            Comment                                   }
{------------------------------------------------------------------------------}
{ identity                           The identity                              }
{ copied_identity                    The copied identity                       }
{ operation                          The current LTE operation mode            }
{==============================================================================}
{ Return-Value: None                                                           }
{=[06/06/2016 (DSIA)]==========================================================}
GLOBAL ROUTINE lte_entry_point(VALUE identity, VALUE copied_identity, VALUE operation)

    DECLARE answer                   { For RETURN()                            }

    IF operation = "PRINT" THEN
        print_option(identity)
    ELSE
        answer = other_option(identity, copied_identity, operation)
        RETURN(answer)
    ENDIF

ENDROUTINE { lte_entry_point }




{==============================================================================}
{                                                                              }
{                               R O U T I N E S                                }
{                                                                              }
{==============================================================================}



{==============================================================================}
{ Routine to call when printing the LE.                                        }
{==============================================================================}
{ Parameter          Type            Comment                                   }
{------------------------------------------------------------------------------}
{ Identity                           The Identity.                             }
{==============================================================================}
{ Return-Value: None                                                           }
{=[06/06/2016 (DSIA)]==========================================================}
ROUTINE print_option(VALUE identity)

   DECLARE iField                    { Helpvar. for index                      }
   DECLARE field_details             { field-details array                     }
   ARRAY   field_details ARRAY_SIZE(0, 2) {-> DECLARE                          }

   iField              = 1
   field_details[iField, 1] = "fieldname_1"
   field_details[iField, 2] = "description_1"

   iField              = iField + 1
   field_details[iField, 1] = "fieldname_2"
   field_details[iField, 2] = "description_2"

   { to be compelted !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!}
   print_fields(LE_TABLE_NAME, identity, "", "", 2, 28, field_details)

ENDROUTINE { print_option }




{==============================================================================}
{ Handle the Data.                                                             }
{==============================================================================}
{ Parameter          Type            Comment                                   }
{------------------------------------------------------------------------------}
{ Identity                           The Identity.                             }
{ Copied_Identity                    The Copied Identity                       }
{ Operation          String          The Current LTE Operation Mode            }
{==============================================================================}
{ Return-Value: None                                                           }
{=[06/06/2016 (DSIA)]==========================================================}
ROUTINE other_option(VALUE identity, VALUE copied_identity, VALUE operation)

   DECLARE prompt_details
   ARRAY   prompt_details ARRAY_SIZE(0, 6)
   DECLARE answer
   DECLARE heading
   DECLARE size_id, size_ver, mlp_id
   
   GET_FIELD_DETAILS mlp_header.identity, "FIELD_SIZE", size_id
   GET_FIELD_DETAILS mlp_header.product_version, "FIELD_SIZE", size_ver
   
   mlp_id   = "(":STRIP(LEFTSTRING(identity, size_id)):"/":STRIP(RIGHTSTRING(identity, size_ver)):")"
   
   initialise(prompt_details, heading)

   list_editor_create_object(the_list_editor)

   the_list_editor.table           = LE_TABLE_NAME
   the_list_editor.header          = "Login Schedules ":mlp_id
   the_list_editor.footer          = "Press EXIT to Quit"
   the_list_editor.pre_insert      = "PRE_INSERT_ROUTINE"
   the_list_editor.post_insert     = EMPTY
   the_list_editor.delete          = EMPTY
   the_list_editor.select          = EMPTY
   the_list_editor.library         = GLOBAL("CURRENT_LIBRARY" )
   the_list_editor.compatability   = PROMPT_DETAILS_310

   the_list_editor.setup_prompt_details(prompt_details, heading)

   answer = the_list_editor.operation(identity, copied_identity, operation)

   RETURN(answer)

ENDROUTINE { other_option }





{==============================================================================}
{ Routine to insert a row.                                                     }
{==============================================================================}
{ Parameter          Type            Comment                                   }
{------------------------------------------------------------------------------}
{ Self                               List Editor Object                        }
{ Grid                               A Grid Object.                            }
{ Cell_Column        Integer         An Integer holding the Current Grid Column}
{ Cell_Row           Integer         An Integer holding the Current Grid Row.  }
{ Window                             The Current Window                        }
{ Column             Integer         An Integer holding the Window Column for  }
{                                    Display                                   }
{ Row                Integer         An Integer holding the Window Row for     }
{                                    Display.                                  }
{ Cell_Width         Integer         An Integer representing the cell width    }
{ Cell_Height        Integer         An Integer representing the cell height   }
{ New_Value                          The New Value                             }
{==============================================================================}
{ Return-Value: None                                                           }
{=[06/06/2016 (DSIA)]==========================================================}
ROUTINE pre_insert_routine(self, grid, cell_column, cell_row, window,
                           column, row, cell_width, cell_height, new_value)

   DECLARE smpt                        { Smpt                                  }
   DECLARE group                       { Group                                 }
   DECLARE form                        { Form                                  }
   DECLARE can_continue                { Can continue                          }
   DECLARE retVal                      { Ret value                             }
   DECLARE curLastKey                  { Current last key                      }
   DECLARE insptype                    { Insptype                              }

   can_continue = FALSE
   
     Create_Window(form)
     {---------------------------------------------------------------------------}
     {       Display Form  -  Activate Form  -  Remove Prompt from screen        }
     {---------------------------------------------------------------------------}
     form.start_prompt()
     RepaintPrompts(form.prompt_objects)

     REPEAT
        form.wait_prompt()
        curLastKey = form.get_last_key()
        IF (curLastKey = "EXIT") THEN
           smpt         = ""
           group        = ""
           insptype     = ""
           can_continue = TRUE
           retVal     = ""
        ELSE
           smpt         = form.prompt_objects[TAG_BROWSE_SMPT  ].VALUE
           group        = form.prompt_objects[TAG_BROWSE_GROUP ].VALUE
           insptype     = form.prompt_objects[TAG_BROWSE_INSP_T].VALUE
           
           can_continue = (NOT(BLANK(smpt)) AND NOT(BLANK(group)){AND NOT(BLANK(insptype)) })
           retVal       = smpt : group : insptype
           
{*****            FLASH_MESSAGE(retVal, TRUE)                             *****}
        ENDIF {<- IF (curLastKey = "EXIT") THEN }


     UNTIL (can_continue)
     form.end_prompt()
   
      SET GLOBAL "LASTKEY" TO "CONTINUE"

   IF (can_continue AND (curLastKey = "DO")) THEN
      new_value  =   retVal
      grid.current_column = 4
   ELSE
      {---------------}
      { Cancel-Button }
      {---------------}
      IF (cell_row = grid.cell_rows) THEN
         IF (cell_row = 1) THEN
            SET GLOBAL "LASTKEY" TO "DO"
         ELSE
            SET GLOBAL "LASTKEY" TO "UP"
         ENDIF {-> IF (cell_row = 1) THEN}

      ELSE
         IF (cell_row < grid.cell_rows) THEN
            SET GLOBAL "LASTKEY" TO "REMOVE"
         ELSE
            SET GLOBAL "LASTKEY" TO "DO"
         ENDIF {-> IF (cell_row < grid.cell_rows) THEN }
      ENDIF {-> if (cell_row = grid.cell_rows) THEN}

      new_value = ""
   ENDIF {<- IF (can_continue AND (curLastKey = "DO")) THEN } 

ENDROUTINE { pre_insert }




{==============================================================================}
{ Initialise the Field List.                                                   }
{==============================================================================}
{ Parameter          Type            Comment                                   }
{------------------------------------------------------------------------------}
{ prompt_details                     The Details Array                         }
{ Heading                            The Heading Line                          }
{==============================================================================}
{ Return-Value: None                                                           }
{=[06/06/2016 (DSIA)]==========================================================}
ROUTINE initialise(prompt_details, heading)

   DECLARE head_count               { Counter for loop                         }
   DECLARE col_head                 { Helpvar. for building the heading        }
   DECLARE count                    { Helpvar. for index                       }
   ARRAY   prompt_details ARRAY_SIZE(0, 6)

   {--------------------------------------------}
   { Set up the list of fields to be processed. }
   {--------------------------------------------}
   count = 1

   prompt_details[count, 1] = "Sample Point"
   prompt_details[count, 2] = "DISPLAY"
   prompt_details[count, 3] = "PROD_SCHED"
   prompt_details[count, 4] = "SAMPLING_POINT"
   prompt_details[count, 5] = 0
   prompt_details[count, 6] = 12

   count = count + 1
   prompt_details[count, 1] = "Login Plant"
   prompt_details[count, 2] = "DISPLAY"
   prompt_details[count, 3] = "PROD_SCHED"
   prompt_details[count, 4] = "GROUP_ID"
   prompt_details[count, 5] = 0
   prompt_details[count, 6] = 12
   
   count = count + 1
   prompt_details[count, 1] = "Type"
   prompt_details[count, 2] = "DISPLAY"
   prompt_details[count, 3] = "PROD_SCHED"
   prompt_details[count, 4] = "INSPECTION_TYPE"
   prompt_details[count, 5] = 0
   prompt_details[count, 6] = 6

   count = count + 1
   prompt_details[count, 1] = "Labels"
   prompt_details[count, 2] = "FORMAT"
   prompt_details[count, 3] = "PROD_SCHED"
   prompt_details[count, 4] = "LABEL_COUNT"
   prompt_details[count, 5] = 0
   prompt_details[count, 6] = 6

   

   count = count + 1
   prompt_details[count, 1] = "Assign Group"
   prompt_details[count, 2] = "FORMAT"
   prompt_details[count, 3] = "PROD_SCHED"
   prompt_details[count, 4] = "ASSIGNED_GROUP"
   prompt_details[count, 5] = 0
   prompt_details[count, 6] = 12
   

   count = count + 1
   prompt_details[count, 1] = "Test Schedule"
   prompt_details[count, 2] = "FORMAT"
   prompt_details[count, 3] = "PROD_SCHED"
   prompt_details[count, 4] = "TEST_SCHEDULE"
   prompt_details[count, 5] = 0
   prompt_details[count, 6] = 15



    count = count + 1
    prompt_details[count, 1] = "Description"

    prompt_details[count, 2] = "FORMAT"
    prompt_details[count, 3] = "PROD_SCHED"
    prompt_details[count, 4] = "DESCRIPTION"

    prompt_details[count, 2 ] = "ROUTINE"
    prompt_details[count, 3 ] = GLOBAL("CURRENT_LIBRARY")
    prompt_details[count, 4 ] = "SCHED_DESC"

    prompt_details[count, 5] = 0
    prompt_details[count, 6] = 50
   


   {------------------------------------------------}
   { Build up the Heading Line from the field list. }
   {------------------------------------------------}
   head_count = 1
   heading    = ""

   WHILE (head_count <= count) DO
      col_head   = PAD(prompt_details[head_count, 1], " ", prompt_details[head_count, 6])
      heading    = heading : col_head : " "
      head_count = head_count + 1
   ENDWHILE {-> WHILE (head_count <= count) DO }

ENDROUTINE { initialise }


{==============================================================================}
{ Routine to create the form with its prompts                                  }
{==============================================================================}
{ Parameter          Type            Comment                                   }
{------------------------------------------------------------------------------}
{ None                                                                         }
{==============================================================================}
{ Return-Value: None                                                           }
{=[06/06/2016 (DSIA)]==========================================================}
ROUTINE Create_Window(form)

   DECLARE current_line              { Helpvar. for Top-Position of prompts    }
{*****    DECLARE NonsenseWarning           <###0123###> Helpvar.                                <###0125###> *****}
   DECLARE prompt_object             { helpvar. for prompt-objects             }

   { Preparation }
   current_line       = 0

   {-----------------}
   { create the form }
   {-----------------}
   CREATE OBJECT "STD_FORM", form
   form.height       = FORM_HEIGHT
   form.width        = FORM_WIDTH
   form.row          = (GLOBAL("GUI_HEIGHT") - form.height) DIV 2
   form.column       = (GLOBAL("GUI_WIDTH" ) - form.width) DIV 2
   form.border       = TRUE
   form.display_only = FALSE
   form.button_style = FORM_BUTTON_NONE
   form.header       = "Sample Point, Plant, Type"
   form.FOOTER       = form.HEADER
{*****    form.validation_routine = "form_validation_routine"             *****}


   {--------------------------------}
   { Text and prompt for PROD_SCHED }
   {--------------------------------}
   current_line =  current_line +  1
   CREATE OBJECT "STD_PROMPT_TEXT", prompt_object
   prompt_object.value       = "Sample Point"
   prompt_object.row         = current_line
   prompt_object.column      = TEXT_LEFT
   prompt_object.height      = 1
   prompt_object.width       = TEXT_WIDTH
   prompt_object.raised      = TRUE

   form.add_display(prompt_object)

   PROMPT OBJECT prompt_object BROWSE ON SAMPLE_POINT.IDENTITY
   prompt_object.value                = ""
   prompt_object.row                  = current_line
   prompt_object.column               = PROMPT_LEFT
   prompt_object.height               = 1
   prompt_object.width                = PROMPT_WIDTH
   prompt_object.vgl_library          = GLOBAL("CURRENT_LIBRARY")
   prompt_object.validation_routine   = "not_blank_validation_routine"
   prompt_object.enter_prompt_routine = EMPTY
   prompt_object.leave_prompt_routine = EMPTY

   {tag_browse_smpt                    =} form.add_prompt(prompt_object)


   current_line =  current_line +  1
   CREATE OBJECT "STD_PROMPT_TEXT", prompt_object
   prompt_object.value       = "Login Plant"
   prompt_object.row         = current_line
   prompt_object.column      = TEXT_LEFT
   prompt_object.height      = 1
   prompt_object.width       = TEXT_WIDTH
   prompt_object.raised      = TRUE

   form.add_display(prompt_object)

   PROMPT OBJECT prompt_object BROWSE ON GROUP_HEADER.IDENTITY
   prompt_object.value                = ""
   prompt_object.row                  = current_line
   prompt_object.column               = PROMPT_LEFT
   prompt_object.height               = 1
   prompt_object.width                = PROMPT_WIDTH
   prompt_object.vgl_library          = GLOBAL("CURRENT_LIBRARY")
   prompt_object.validation_routine   = "not_blank_validation_routine"
   prompt_object.enter_prompt_routine = EMPTY
   prompt_object.leave_prompt_routine = EMPTY

   {tag_browse_grp                    = }form.add_prompt(prompt_object)

    {----------}
    { Insp_Type}
    {----------}
    current_line =  current_line +  1
   CREATE OBJECT "STD_PROMPT_TEXT", prompt_object
   prompt_object.value       = "Inspection Type"
   prompt_object.row         = current_line
   prompt_object.column      = TEXT_LEFT
   prompt_object.height      = 1
   prompt_object.width       = TEXT_WIDTH
   prompt_object.raised      = TRUE

   form.add_display(prompt_object)

   {PROMPT OBJECT prompt_object FORMAT PROD_SCHED.INSPECTION_TYPE }
   PROMPT OBJECT prompt_object BROWSE ON VALID_PHRASE_ID.SAP_INSP
   prompt_object.VALUE                = ""
{*****    prompt_object.ALLOWED_CHARS        = "0..9"                     *****}
   prompt_object.row                  = current_line
   prompt_object.column               = PROMPT_LEFT
   prompt_object.height               = 1
   prompt_object.width                = PROMPT_WIDTH
   prompt_object.vgl_library          = GLOBAL("CURRENT_LIBRARY")
   prompt_object.validation_routine   = "not_blank_validation_routine"
   prompt_object.enter_prompt_routine = EMPTY
   prompt_object.leave_prompt_routine = EMPTY

   {TAG_BROWSE_INSP_T                 = }form.add_prompt(prompt_object)


   {--------}
   { Button }
   {--------}
   current_line = form.height - 3
   PROMPT OBJECT prompt_object CLASS "STD_PROMPT_BUTTON"
   prompt_object.caption             = "OK"
   prompt_object.row                 = current_line
   prompt_object.column              = form.width - (2 * (BUTTON_WIDTH + 2))
   prompt_object.height              = 1
   prompt_object.width               = BUTTON_WIDTH
   prompt_object.vgl_library         = GLOBAL("CURRENT_LIBRARY")
   prompt_object.mouse_click_routine = "OKButtonClick"
   prompt_object.enabled             = TRUE
   prompt_object.send_last_key       = "DO"

   form.add_prompt(prompt_object)

   {--------------}
   { Close-Button }
   {--------------}
   PROMPT OBJECT prompt_object CLASS "STD_PROMPT_BUTTON"
   prompt_object.caption             = "Close"
   prompt_object.row                 = current_line
   prompt_object.column              = form.width - BUTTON_WIDTH
   prompt_object.height              = 1
   prompt_object.width               = BUTTON_WIDTH
   prompt_object.vgl_library         = GLOBAL("current_library")
   prompt_object.send_last_key       = "EXIT"

   form.add_prompt(prompt_object)


ENDROUTINE


{==============================================================================}
{ Draw the prompts again to get equal length                                   }
{==============================================================================}
{ Parameter          Type            Comment                                   }
{------------------------------------------------------------------------------}
{ prompt_objects     Array           Promptobjects of the form                 }
{==============================================================================}
{ Return-Value: None                                                           }
{=[06/06/2016 (DSIA)]==========================================================}
ROUTINE RepaintPrompts(prompt_objects)

   prompt_objects[TAG_BROWSE_SMPT].width       = PROMPT_WIDTH
   prompt_objects[TAG_BROWSE_SMPT].repaste()

   prompt_objects[TAG_BROWSE_GROUP].width       = PROMPT_WIDTH
   prompt_objects[TAG_BROWSE_GROUP].repaste()

   prompt_objects[TAG_BROWSE_INSP_T].width      = PROMPT_WIDTH
   prompt_objects[TAG_BROWSE_INSP_T].repaste()

ENDROUTINE

{==============================================================================}
{                                                                              }
{==============================================================================}
{ Parameter          Type            Description                               }
{------------------------------------------------------------------------------}
{ None                                                                         }
{==============================================================================}
{ Return-Value: None                                                           }
{=[07/06/2016 (DSIA)]==========================================================}
ROUTINE form_validation_routine(self)

   DECLARE all_ok
   all_ok = TRUE

   RETURN ( all_ok )

ENDROUTINE


{==============================================================================}
{                                                                              }
{==============================================================================}
{ Parameter          Type            Description                               }
{------------------------------------------------------------------------------}
{ None                                                                         }
{==============================================================================}
{ Return-Value: None                                                           }
{=[07/06/2016 (DSIA)]==========================================================}
ROUTINE not_blank_validation_routine(self)

    RETURN ( NOT BLANK ( self . text ) )

ENDROUTINE

{==============================================================================}
{                                                                              }
{==============================================================================}
{ Parameter          Type            Description                               }
{------------------------------------------------------------------------------}
{ None                                                                         }
{==============================================================================}
{ Return-Value: None                                                           }
{=[09/06/2016 (DKTBG)]=========================================================}

ROUTINE sched_desc (object, grid, 
                    VALUE cell_column, VALUE cell_row, 
                    VALUE column, VALUE row, 
                    VALUE cell_width, screen, VALUE is_display  )

    DECLARE description, cur_sched

    cur_sched = SELECT prod_sched.test_schedule
    description = SELECT test_sched_header.description
                  WHERE  identity = cur_sched
    
    IF description = EMPTY THEN
        description = ""
    ENDIF

    DISPLAY description 
        ON LINE row 
        FROM column
        IN WINDOW screen

    IF NOT is_display THEN
        PROMPT 
            ON LINE row 
            FROM column 
            IN WINDOW screen
    ENDIF

ENDROUTINE
