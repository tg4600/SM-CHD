{******************************************************************************
*
* Module Name   : $LIB_INVENTORY_ITEM
*
* Purpose       : Inventory Item class
*
*******************************************************************************}

SET NOTPROTECTED
SET COMPILE_OPTION DECLARE
SET NAME "DEFER/"

ENABLE WINDOWS

JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_PROMPT

JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $LIST_EDITOR
JOIN LIBRARY $LIB_INVENTORY
JOIN LIBRARY $LIB_LIST_VIEWER
JOIN LIBRARY $LIB_POPUP_MENU
JOIN LIBRARY $PROMPT_QTY_UNIT
JOIN LIBRARY $PROMPT_TOOLBAR
JOIN LIBRARY $ROLE_LIB

CONSTANT PRIVILEDGE_DELETE_ALLOCATED = 9023

{******************************************************************************}

GLOBAL

ROUTINE inventory_item_list_editor_initialise
{
* Defines the Inventory Item List Editor class
*
*******************************************************************************}

    list_editor_define            ( )
    prompt_toolbar_initialise     ( )
    prompt_qty_unit_initialisation( )
    set_up_popup_class            ( )
    define_list_viewer_class      ( )

    DEFINE CLASS "INVENTORY_ITEM_LIST_EDITOR"

		INITIALISATION

        INHERIT LIST_EDITOR_CLASS

        PROPERTIES
            "inventory_id" ,
            "header_unit"

        ACTIONS
            "add_toolbuttons"           ,
            "option_remove_current"     ,
            "option_show_summary"       ,
            "option_sum_selection"      ,
            "option_view_allocations"   ,
            "can_sum_selection"         ,
            "get_total"                 ,
            "get_allocated"             ,
            "get_row_sum"               ,
            "get_row_quantity"          ,
            "get_row_unallocated"       ,
            "get_row_allocated"         ,
            "get_row_allocation_count"  ,
            "view_allocations_criteria" ,
            "grid_build_context_menu"   ,
            "set_default_prompt_details"

    END CLASS

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_class_initialisation( self )
{
* Inventory item list editor class initialisation
*
* Parameters : self , Inventory Item List Editor
*
*******************************************************************************}

	self . table       = "INVENTORY_ITEM"
	self . header      = "Inventory Items"
	self . pre_insert  = "INVENTORY_ITEM_PRE_INSERT"
	self . post_insert = "INVENTORY_ITEM_POST_INSERT"
	self . library     = GLOBAL( "CURRENT_LIBRARY" )

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_set_default_prompt_details( self )
{
* Sets the prompt details
*
* Parameters : self , Inventory Item List Editor
*
*******************************************************************************}

	DECLARE prompt_details, count

	ARRAY prompt_details ARRAYSIZE ( 0 , 7 )
	{* This uses a slightly modified prompt_details: column 7 is being   *}
	{* used to hold the name of an action that will return a row's value *}

	count = 1

	prompt_details [ count , 2 ] = "DISPLAY"
	prompt_details [ count , 3 ] = "INVENTORY_ITEM"
	prompt_details [ count , 4 ] = "ITEM_ID"
	prompt_details [ count , 5 ] = "Item id"
	prompt_details [ count , 6 ] = 10
	prompt_details [ count , 7 ] = EMPTY

	count = count + 1

	prompt_details [ count , 2 ] = "FORMAT"
	prompt_details [ count , 3 ] = "INVENTORY_ITEM"
	prompt_details [ count , 4 ] = "ITEM_CODE"
	prompt_details [ count , 5 ] = "Item code"
	prompt_details [ count , 6 ] = 12
	prompt_details [ count , 7 ] = EMPTY
	count = count + 1

	prompt_details [ count , 2 ] = "ROUTINE"
	prompt_details [ count , 3 ] = GLOBAL( "CURRENT_LIBRARY" )
	prompt_details [ count , 4 ] = "prompt_quantity_raw"
	prompt_details [ count , 5 ] = "Total"
	prompt_details [ count , 6 ] = 12
	prompt_details [ count , 7 ] = "get_row_quantity"

	count = count + 1

	prompt_details [ count , 2 ] = "ROUTINE"
	prompt_details [ count , 3 ] = GLOBAL( "CURRENT_LIBRARY" )
	prompt_details [ count , 4 ] = "prompt_simple_real"
	prompt_details [ count , 5 ] = "Total (" : self . header_unit : ")"
	prompt_details [ count , 6 ] = 10
	prompt_details [ count , 7 ] = "get_row_quantity"

	count = count + 1

	prompt_details [ count , 2 ] = "ROUTINE"
	prompt_details [ count , 3 ] = GLOBAL( "CURRENT_LIBRARY" )
	prompt_details [ count , 4 ] = "prompt_simple_real"
	prompt_details [ count , 5 ] = "Unallocated (" : self . header_unit : ")"
	prompt_details [ count , 6 ] = 10
	prompt_details [ count , 7 ] = "get_row_unallocated"

	count = count + 1

	prompt_details [ count , 2 ] = "ROUTINE"
	prompt_details [ count , 3 ] = GLOBAL( "CURRENT_LIBRARY" )
	prompt_details [ count , 4 ] = "prompt_simple_real"
	prompt_details [ count , 5 ] = "Allocated (" : self . header_unit : ")"
	prompt_details [ count , 6 ] = 10
	prompt_details [ count , 7 ] = "get_row_allocated"

	count = count + 1

	prompt_details [ count , 2 ] = "ROUTINE"
	prompt_details [ count , 3 ] = GLOBAL( "CURRENT_LIBRARY" )
	prompt_details [ count , 4 ] = "prompt_allocation_count"
	prompt_details [ count , 5 ] = "Allocations"
	prompt_details [ count , 6 ] = 8
	prompt_details [ count , 7 ] = "get_row_allocation_count"

	count = count + 1

	prompt_details [ count , 2 ] = "FORMAT"
	prompt_details [ count , 3 ] = "INVENTORY_ITEM"
	prompt_details [ count , 4 ] = "LOCATION"
	prompt_details [ count , 5 ] = "Location"
	prompt_details [ count , 6 ] = 10
	prompt_details [ count , 7 ] = EMPTY

	count = count + 1

	prompt_details [ count , 2 ] = "DISPLAY"
	prompt_details [ count , 3 ] = "INVENTORY_ITEM"
	prompt_details [ count , 4 ] = "ENTERED_ON"
	prompt_details [ count , 5 ] = "Entered on"
	prompt_details [ count , 6 ] = 12
	prompt_details [ count , 7 ] = EMPTY

	count = count + 1

	prompt_details [ count , 2 ] = "DISPLAY"
	prompt_details [ count , 3 ] = "INVENTORY_ITEM"
	prompt_details [ count , 4 ] = "ENTERED_BY"
	prompt_details [ count , 5 ] = "Entered by"
	prompt_details [ count , 6 ] = 10
	prompt_details [ count , 7 ] = EMPTY

	count = count + 1

	prompt_details [ count , 2 ] = "FORMAT"
	prompt_details [ count , 3 ] = "INVENTORY_ITEM"
	prompt_details [ count , 4 ] = "LAST_TESTED_ON"
	prompt_details [ count , 5 ] = "Last tested On"
	prompt_details [ count , 6 ] = 12
	prompt_details [ count , 7 ] = EMPTY

	count = count + 1

	prompt_details [ count , 2 ] = "FORMAT"
	prompt_details [ count , 3 ] = "INVENTORY_ITEM"
	prompt_details [ count , 4 ] = "LAST_TESTED_BY"
	prompt_details [ count , 5 ] = "Last tested by"
	prompt_details [ count , 6 ] = 12
	prompt_details [ count , 7 ] = EMPTY

	count = count + 1

	prompt_details [ count , 2 ] = "FORMAT"
	prompt_details [ count , 3 ] = "INVENTORY_ITEM"
	prompt_details [ count , 4 ] = "EXPIRY_DATE"
	prompt_details [ count , 5 ] = "Expiry date"
	prompt_details [ count , 6 ] = 10
	prompt_details [ count , 7 ] = EMPTY

	count = count + 1

	prompt_details [ count , 2 ] = "FORMAT"
	prompt_details [ count , 3 ] = "INVENTORY_ITEM"
	prompt_details [ count , 4 ] = "DESCRIPTION"
	prompt_details [ count , 5 ] = "Description"
	prompt_details [ count , 6 ] = 30
	prompt_details [ count , 7 ] = EMPTY
	
	self . prompt_details = prompt_details
	
	self . update_titles( )
	
ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_add_toolbuttons( self, toolbar )
{
* Adds items to the passed toolbar
*
* Parameters : self    , Inventory Item List Editor
*              toolbar , The toolbar object to add items to
*
*******************************************************************************}

    DECLARE toolbutton

    self . std_list_editor_form :: add_toolbuttons( toolbar )

    toolbar . add_separator( )

    CREATE OBJECT TOOLBAR_BUTTON_CLASS , toolbutton
    toolbutton . set_icon  ( "INT_SUM" )
    toolbutton . set_action  ( self, "OPTION_SHOW_SUMMARY" )
    toolbutton . tooltip = "Show Summary"
    
    toolbar . add_item ( toolbutton )
    
    CREATE OBJECT TOOLBAR_BUTTON_CLASS , toolbutton
    toolbutton . set_icon  ( "INT_PADLOCK" )
    toolbutton . set_action  ( self, "OPTION_VIEW_ALLOCATIONS" )
    toolbutton . tooltip = "View Item Allocations"
    
    toolbar . add_item ( toolbutton )

ENDROUTINE


{******************************************************************************}

ROUTINE inventory_item_list_editor_action_option_remove_current ( self )

{
* Removes the current row. Can only remove an item if:
* 1. no allocations have been made against it OR
* 2. Allocations have been made but the user has privelige 9023
*
* Parameters : self . Inventory Item List Editor
*
*******************************************************************************}

    DECLARE row_obj, qty_allocated, inv_id, item_id, text, do_remove

    do_remove = FALSE

    row_obj = self . get_object ( self . grid . current_row )

    IF row_obj <> EMPTY THEN
    
        inv_id  = self . inventory_id
        item_id = SELECT inventory_item . item_id IN OBJECT row_obj
    
        qty_allocated = inventory_item_get_quantity_allocated( inv_id, item_id )
        
        IF qty_allocated = 0 THEN
        
            do_remove = TRUE
        
        ELSE
                
            text = STRIP( qty_allocated ) : " " : self . header_unit :
                   " from " : STRIP( item_id ) :
                   " has already been allocated."
        
            IF role_lib_has_privilege( PRIVILEDGE_DELETE_ALLOCATED ) THEN
        
                text = text : ASCII( 13 ) : "Do you really want to remove this item?"
        
                IF confirm_with_text( text ) THEN
                
                    IF lock_allocation_records( inv_id, item_id ) THEN
                        
                        do_remove = TRUE
                        
                    ELSE
                
                        flash_message( "You cannot remove this item. The allocation records could not be exclusively locked", TRUE )
                    
                    ENDIF
                    
                ENDIF 
            
            ELSE
            
                text =  text : "You cannot remove this item"
            
                flash_message( text, TRUE )
            
            ENDIF
            
        ENDIF
       
    ENDIF

    IF do_remove THEN
      
        self . std_list_editor :: option_remove_current( )
    
    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_option_show_summary( self )
{
* Displays the total, allocated and unallocated quantity in the inventory
*
* Parameters : self , Inventory Item List Editor
*
*******************************************************************************}

    DECLARE total, allocated, unallocated, text

    allocated = self . get_allocated( )
    total     = self . get_total( )
    unallocated = total - allocated

    text = "Summary of " : STRIP( self . inventory_id ) : " stocks:" : ASCII( 13 ) :
           ASCII( 9 ) : "Quantity allocated " : ASCII( 9 ) : "= " :
           ASCII( 9 ) : allocated : " " : self . header_unit : ASCII( 13 ) :
           ASCII( 9 ) : "Quantity unallocated " : ASCII( 9 ) : "= " :
           ASCII( 9 ) : unallocated : " " : self . header_unit : ASCII( 13 ) :
           ASCII( 9 ) : "Total in inventory " : ASCII( 9 ) : "= " :
           ASCII( 9 ) : total     : " " : self . header_unit

    flash_message( text , TRUE )

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_option_view_allocations( self )
{
* Shows the allocations relating to the current item
*
* Parameters : self , Inventory Item List Editor
*
*******************************************************************************}

    DECLARE criteria, row_obj, item_id, header_text

    row_obj = self . get_object ( self . grid . current_row )

    IF row_obj <> EMPTY THEN

        item_id = SELECT inventory_item . item_id IN OBJECT row_obj

        ARRAY criteria

        ARRAY_SELECT_ADD( criteria, ARRAY_SELECT_EQ, "ITEM_ID", item_id )

        header_text = "Allocations for " :
                      STRIP( self . inventory_id ) :
                      " (" : STRIP( item_id ) : ")"

        self . view_allocations_criteria( criteria, header_text )

    ENDIF
    
ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_view_allocations_criteria(       self        ,
                                                                           criteria    ,
                                                                     VALUE header_text )
{
* Shows the allocations for the passed criteria
*
* Parameters : self , Inventory Item List Editor
*
*******************************************************************************}

    DECLARE viewer

    ARRAY_SELECT_ADD( criteria, ARRAY_SELECT_EQ, "INVENTORY_ID", self . inventory_id )

    CREATE OBJECT LIST_VIEWER_CLASS, viewer

    viewer . header           = header_text
    viewer . autosize         = TRUE
    viewer . auto_status_icon = TRUE
    viewer . menu_columns     = TRUE
    viewer . menu_criteria    = FALSE
    viewer . menu_labtable    = FALSE
    viewer . menu_view        = TRUE
    viewer . show_removed     = FALSE
    viewer . read_lock        = FALSE
    viewer . criteria         = criteria
    viewer . table            = "INVENTORY_ALLOCATION_VIEW"

    viewer . go ( )

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_option_sum_selection( self )
{
* Sums the selected quantity in the selected column
*
* Parameters : self , Inventory Item List Editor
*
*******************************************************************************}

    DECLARE total, action_name, top, bottom, left, right
    
    IF self . grid . get_select_area( top, left, bottom, right ) THEN

        action_name = self . prompt_details[ left, 7 ]

        IF ( action_name <> EMPTY ) THEN
       
            total = self . get_row_sum( top, bottom, action_name )

            flash_message( total : " " : STRIP( self . header_unit ), TRUE )

        ENDIF
        
    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_can_sum_selection( self )
{
* Returns true if can add up the values in the grid selection. Only works if the
* selection consists of just one column and only for integer or real datatypes
* 
*
* Parameters : self , Inventory Item List Editor
*
*******************************************************************************}

    DECLARE top, left, bottom, right, valid, get_value_action

    valid = FALSE
    IF self . grid . get_select_area( top, left, bottom, right ) THEN
        IF ( left = right ) THEN
        
            get_value_action = self . prompt_details[ left, 7 ]
        
            valid = ( get_value_action <> EMPTY )
        
        ENDIF
    
    ENDIF

    RETURN( valid ) 

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_get_total( self )
{
* Returns the total amount in the grid (in header units)
*
* Parameters : self , Inventory Item List Editor
*
*******************************************************************************}

    RETURN( self . get_row_sum( 1, self . grid . cell_rows, "get_row_quantity" ) )
    
ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_get_allocated( self )
{
* Returns the total amount allocated in the grid (in header units)
*
* Parameters : self , Inventory Item List Editor
*
*******************************************************************************}

    RETURN( self . get_row_sum( 1, self . grid . cell_rows, "get_row_allocated" ) )
    
ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_get_row_quantity( self, row_obj )
{
* Returns the total quantity for the passed inventory_item row
*
* Parameters : self    , Inventory Item List Editor
*              row_obj , inventory_item object record
*
*******************************************************************************}

    RETURN( SELECT inventory_item . quantity IN OBJECT row_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_get_row_unallocated( self, row_obj )
{
* Returns the unallocated quantity for the passed inventory_item row
*
* Parameters : self    , Inventory Item List Editor
*              row_obj , inventory_item object record
*
*******************************************************************************}
    
    RETURN( self . get_row_quantity( row_obj ) - self . get_row_allocated( row_obj ) )

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_get_row_allocated( self, row_obj )
{
* Returns the allocated quantity for the passed inventory_item row
*
* Parameters : self    , Inventory Item List Editor
*              row_obj , inventory_item object record
*
*******************************************************************************}
    
    DECLARE inventory_id, item_id

    inventory_id = SELECT inventory_item . inventory_id IN OBJECT row_obj
    item_id      = SELECT inventory_item . item_id      IN OBJECT row_obj

    RETURN( inventory_item_get_quantity_allocated( inventory_id, item_id ) )

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_get_row_allocation_count( self, row_obj )
{
* Returns the number of allocations made against the passed inventory_item row
*
* Parameters : self    , Inventory Item List Editor
*              row_obj , inventory_item object record
*
*******************************************************************************}
    
    DECLARE inventory_id, item_id, count

    inventory_id = SELECT inventory_item . inventory_id IN OBJECT row_obj
    item_id      = SELECT inventory_item . item_id      IN OBJECT row_obj

    count = TRUNC( SELECT COUNT inventory_alloc_item
                       WHERE inventory_id = inventory_id
                       AND   item_id      = item_id     )

    RETURN( count )

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_get_row_sum(       self           ,
                                                       VALUE start          ,
                                                       VALUE end            ,
                                                       VALUE row_qty_action )
{
* Returns the total amount in the grid (in header units) for the
* row range specified
*
* Parameters : self           , Inventory Item List Editor
*              start          , row to start on
*              end            , row to end on
*              row_qty_action , action to call to return a number to sum
*
*******************************************************************************}

    DECLARE row_obj, row_num, total

    total = 0

    row_num = start
    WHILE row_num <= end DO
    
        row_obj = self . get_object ( row_num )
        
        IF row_obj <> EMPTY THEN
        
            total = total + self . ?row_qty_action? ( row_obj )
            
        ENDIF
        
        row_num = row_num + 1
        
    ENDWHILE

    RETURN( total )

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_list_editor_action_grid_build_context_menu( self, menu )
{
* Builds context menu
*
* Parameters : self , Inventory Item List Editor
*              menu , Menu object to add things to
*
*******************************************************************************}

    DECLARE item

    CREATE OBJECT POPUP_MENU_ITEM_CLASS, item
    item . text    = "Sum Selected"
    item . enabled = self . can_sum_selection( )
    item . set_action( self, "OPTION_SUM_SELECTION" )
    
    menu . add( item )
    
    menu . add_divider( )

    self . std_list_editor :: grid_build_context_menu( menu )

ENDROUTINE

{******************************************************************************}
{* Routines                                                                   *}
{******************************************************************************}

{*****************************************************************************}

ROUTINE lock_allocation_records( VALUE inventory_id, VALUE item_id )

{ Attempts to lock allocation records relating to the inventory_item
* Returns true if succesful
*
* Parameters : inventory_id , Inventory id
*              item_id      , Item id
*
******************************************************************************}

    DECLARE ok, entry_number, inv_id_check

    ok = TRUE
    
    entry_number = SELECT inventory_alloc_item . entry_number
                      FOR UPDATE
                      WHERE inventory_id = inventory_id
                      AND   item_id = item_id
        
    WHILE ( entry_number <> EMPTY  ) AND ok DO
    
        ok = lock_exclusive ( "INVENTORY_ALLOC_ITEM" )
    
        inv_id_check = SELECT inventory_allocation . inventory_id
                          FOR UPDATE
                          WHERE inventory_id = inventory_id
                          AND   entry_number = entry_number

        WHILE ( inv_id_check <> EMPTY  ) AND ok DO
        
            ok = lock_exclusive ( "INVENTORY_ALLOCATION" )
        
            NEXT inventory_allocation
            inv_id_check = SELECT inventory_allocation . inventory_id
            
        ENDWHILE
        
    
        NEXT inventory_alloc_item
        entry_number = SELECT inventory_alloc_item . entry_number

    ENDWHILE
    
    RETURN( ok )

ENDROUTINE

{******************************************************************************}
{* Prompt Callback Routines                                                   *}
{******************************************************************************}

{******************************************************************************}

ROUTINE prompt_quantity_raw(       self        ,
                                   grid        ,
                             VALUE cell_column ,
                             VALUE cell_row    ,
                             VALUE column      ,
                             VALUE row         ,
                             VALUE cell_width  ,
                                   window      ,
                                   is_display  )
{
* Custom column prompt to obtain a quantity and unit
*
*******************************************************************************}

    DECLARE qty, header_unit, base_unit, below_min_error, qty_unit_prompt
    DECLARE inv_id, item_id, qty_allocated
   
    qty       = SELECT inventory_item . quantity     IN OBJECT self
    inv_id    = SELECT inventory_item . inventory_id IN OBJECT self
    item_id   = SELECT inventory_item . item_id      IN OBJECT self
    base_unit = SELECT inventory_item . base_unit    IN OBJECT self

    header_unit = grid . list_editor . header_unit
    
    qty_allocated = inventory_item_get_quantity_allocated( inv_id, item_id )

    below_min_error = STRIP( qty_allocated ) : " " : header_unit :
                      " from " : STRIP( item_id ) :
                      " has already been allocated."

    PROMPT OBJECT qty_unit_prompt
        CLASS "PROMPT_QTY_UNIT"
        WITH ( column         = column          ,
               row            = row             ,
               window         = window          ,
               width          = cell_width      ,
               value          = qty             ,
               base_unit      = header_unit     ,
               display_unit   = base_unit       ,
               minimum_value  = qty_allocated   ,
               error_too_low  = below_min_error )

    qty_unit_prompt . start_prompt( )

    IF NOT is_display THEN
    
        qty_unit_prompt . wait_prompt( )

        ASSIGN inventory_item . quantity  IN OBJECT self = qty_unit_prompt . value
        ASSIGN inventory_item . base_unit IN OBJECT self = qty_unit_prompt . display_unit

        grid . redisplay_contents( )

    ENDIF

    qty_unit_prompt . end_prompt( )

    qty_unit_prompt . set_globals( )

ENDROUTINE

{******************************************************************************}

ROUTINE prompt_simple_real(       self        ,
                                  grid        ,
                            VALUE cell_column ,
                            VALUE cell_row    ,
                            VALUE column      ,
                            VALUE row         ,
                            VALUE cell_width  ,
                                  window      ,
                                  is_display  )
{
* Custom column prompt to prompt for a real number for display only using the
* routine defined against the column to obtain the value
*
*******************************************************************************}

    DECLARE val, action_name

    action_name = grid . list_editor . prompt_details[ cell_column, 7 ]

    val = grid . list_editor . ?action_name? ( self )

    IF ( is_display ) THEN

        DISPLAY val
            FORMAT REAL
            ON LINE   row
            FROM      column
            TO        column + cell_width - 1
            IN WINDOW window
            WITH( justification = PROMPT_JUSTIFY_RIGHT )
    ELSE

        PROMPT FOR val
            FORMAT REAL
            WITH ( display_only  = TRUE                 ,
                   column        = column               ,
                   row           = row                  ,
                   window        = window               ,
                   width         = cell_width           ,
                   justification = PROMPT_JUSTIFY_RIGHT )

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE prompt_allocation_count_browse( allocation_count_prompt )
{
* Browse routine for the Allocation count prompt
*
*******************************************************************************}

    DECLARE list_editor

    list_editor = allocation_count_prompt . user_info

    list_editor . option_view_allocations( )

ENDROUTINE

{******************************************************************************}

ROUTINE prompt_allocation_count(       self        ,
                                       grid        ,
                                 VALUE cell_column ,
                                 VALUE cell_row    ,
                                 VALUE column      ,
                                 VALUE row         ,
                                 VALUE cell_width  ,
                                       window      ,
                                       is_display  )
{
* custom prompt to display the number of allocations made against an item
*
*******************************************************************************}

    DECLARE val, action_name

    action_name = grid . list_editor . prompt_details[ cell_column, 7 ]

    val = grid . list_editor . ?action_name? ( self )

    IF ( is_display ) THEN

        DISPLAY val
            FORMAT INTEGER
            ON LINE   row
            FROM      column
            TO        column + cell_width - 1
            IN WINDOW window
    ELSE

        PROMPT FOR val
            FORMAT INTEGER
            WITH ( display_only   = TRUE                             ,
                   column         = column                           ,
                   row            = row                              ,
                   window         = window                           ,
                   width          = cell_width                       ,
                   browse_routine = "prompt_allocation_count_browse" ,
                   user_info      = grid . list_editor               )

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_pre_insert(       self        ,
                                         grid        ,
                                   VALUE cell_column ,
                                   VALUE cell_row    ,
                                         window      ,
                                   VALUE column      ,
                                   VALUE row         ,
                                   VALUE cell_width  ,
                                   VALUE cell_height ,
                                         new_value   )
{
* Called by list editor to obtain new row's identity
*
*******************************************************************************}

    PROMPT FOR new_value
        ON LINE row
        FROM 1
        IN WINDOW window
        FORMAT inventory_item . item_id

ENDROUTINE

{******************************************************************************}

ROUTINE inventory_item_post_insert(       self        ,
                                    VALUE cell_row    ,
                                          window      )
{
* Called by list editor to set field values after record is created
*
*******************************************************************************}

	ASSIGN inventory_item . entered_on = NOW
	ASSIGN inventory_item . entered_by = OPERATOR
	ASSIGN inventory_item . base_unit  = self . header_unit

ENDROUTINE