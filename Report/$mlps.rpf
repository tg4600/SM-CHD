{Compared 20140123 /DKTBG}
{******************************************************************************
*
* Module Name   : $MLPS
*
* Purpose       : MLP LTE definition routines used for setting up MLPs
*
* Document Ref. :
*
* Specification :
*
*******************************************************************************}

JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_WINDOW
JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN STANDARD_LIBRARY STD_GENERAL


JOIN LIBRARY $LABTABLIB
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $LIB_COMP
JOIN LIBRARY $LIB_FILTR
JOIN LIBRARY $LIB_GRID
JOIN LIBRARY $LIB_UNIT
JOIN LIBRARY $LIB_INSPECT
JOIN LIBRARY $LIMIT_MOD
JOIN LIBRARY $LEVEL_MOD
JOIN LIBRARY $LIST_EDITOR
JOIN LIBRARY $LAB_USER
JOIN LIBRARY $PROMPT_TOOLBAR
JOIN LIBRARY SAP_MATMAS


SET NOTPROTECTED
ENABLE WINDOWS
SET NAME "DEFER/"


EXIT

{* GLOBAL CONSTANTS ***********************************************************}

{* LOCAL CONSTANTS ************************************************************}

CONSTANT MLP_COMP_DEFINE_CLASS     = "STD_MLP_COMP_DEFINE"
CONSTANT MLP_COMP_GRID_CLASS       = "STD_MLP_COMP_GRID"


{* VARIABLES ******************************************************************}


DECLARE ANALYSIS_ID_SIZE         ,
        MLP_PRODUCT_ID_SIZE      ,
        MLP_PRODUCT_VERSION_SIZE ,
        places_browse_array      ,
        null_analysis            ,
        component_prompt_details ,
        component_types          ,
        mlp_component_read       ,
        mlp_component_active     ,
        mlp_component_deleted    ,
        mlp_product              ,
        mlp_version              ,
        analyses_list_editor     ,
        schedule_list_editor     ,
        old_identity

{******************************************************************************}
GLOBAL
ROUTINE mlps_initialise ( VALUE standards_screen )
{
*       Initialise the limit library.
*
*******************************************************************************}

        DECLARE n

        IF NOT global ( "LIBRARY_INITIALISED" ) THEN

                lib_grid_initialise ()
                lib_comp_initialise ()
                unit_prompt_initialise ()
                prompt_toolbar_initialise ( )

                mlps_class_define ()

                GET_FIELD_DETAILS mlp_components . analysis_id ,
                                  "FIELD_SIZE" ,
                                  ANALYSIS_ID_SIZE

                GET_FIELD_DETAILS mlp_components . product_id ,
                                  "FIELD_SIZE" ,
                                  MLP_PRODUCT_ID_SIZE

                GET_FIELD_DETAILS mlp_components . product_version ,
                                  "FIELD_SIZE" ,
                                  MLP_PRODUCT_VERSION_SIZE

                NULL_ANALYSIS = PAD ( "$NULL", " " , ANALYSIS_ID_SIZE )

                ARRAY component_prompt_details   ARRAY_SIZE ( 0 , 6 )

                IF NOT standards_screen THEN

                        component_prompt_details [ 1 , 2 ] = "ROUTINE"
                        component_prompt_details [ 1 , 3 ] = global ( "current_library" )
                        component_prompt_details [ 1 , 4 ] = "MLPS_DISPLAY_ANALYSIS"
                        component_prompt_details [ 1 , 5 ] =
                                get_user_message ( "MLPS_COMPONENT_ANALYSIS" ,1)
                        component_prompt_details [ 1 , 6 ] =  ANALYSIS_ID_SIZE

                        n = 2

                ELSE

                        n = 1

                ENDIF

                component_prompt_details [ n , 2 ] = "ROUTINE"
                component_prompt_details [ n , 3 ] = global ( "current_library" )
                component_prompt_details [ n , 4 ] = "MLPS_DISPLAY_COMPONENT"
                component_prompt_details [ n , 5 ] =
                        get_user_message (  "MLPS_COMPONENT_NAME" ,1)
                component_prompt_details [ n , 6 ] =  30

                n = n + 1


                component_prompt_details [ n , 2 ] = "ROUTINE"
                component_prompt_details [ n , 3 ] = global ( "current_library" )
                component_prompt_details [ n , 4 ] = "MLPS_PROMPT_TYPE"
                component_prompt_details [ n , 5 ] =
                        get_user_message ( "MLPS_COMPONENT_TYPE" ,1)

                IF global ( "TERMTYPE" ) = "GUI" THEN

                        component_prompt_details [ n , 6 ] =  6

                ELSE

                        component_prompt_details [ n , 6 ] =  4

                ENDIF

                n = n + 1

                component_prompt_details [ n , 2 ] = "ROUTINE"
                component_prompt_details [ n , 3 ] = global ("current_library")
                component_prompt_details [ n , 4 ] = "MLPS_PROMPT_UNITS"
                component_prompt_details [ n , 5 ] =
                        get_user_message ( "MLPS_COMPONENT_UNITS" ,1)
                component_prompt_details [ n , 6 ] =  10

                n = n + 1

                component_prompt_details [ n , 2 ] = "FORMAT"
                component_prompt_details [ n , 3 ] = "MLPS_COMPONENTS"
                component_prompt_details [ n , 4 ] = "TYPICAL_TEXT"

                IF standards_screen THEN

                        component_prompt_details [ n , 5 ] =
                                get_user_message ( "MLPS_COMPONENT_AMOUNT" ,1)

                ELSE

                        component_prompt_details [ n , 5 ] =
                                get_user_message ( "MLPS_COMPONENT_TYPICAL" ,1)

                ENDIF

                component_prompt_details [ n , 6 ] =  10

                n = n + 1

                component_prompt_details [ n , 2 ] = "ROUTINE"
                component_prompt_details [ n , 3 ] = global ( "current_library" )
                component_prompt_details [ n , 4 ] = "MLPS_PROMPT_PLACES"
                component_prompt_details [ n , 5 ] =
                        get_user_message ( "MLPS_COMPONENT_DP" ,1)
                component_prompt_details [ n , 6 ] =  4

                n = n + 1

                IF standards_screen THEN

                        lab_user_standard_component ( component_prompt_details )

                ELSE

                        lab_user_mlps_component ( component_prompt_details )

                ENDIF

                ARRAY component_types ARRAY_SIZE ( 0 , 2 )

                component_types [1,1] = "B"
                component_types [1,2] = "B"

                component_types [2,1] = "I"
                component_types [2,2] = "I"

                component_types [3,1] = "N"
                component_types [3,2] = "N"

                component_types [4,1] = "T"
                component_types [4,2] = "T"


                ARRAY places_browse_array ARRAY_SIZE ( 11 , 2 )

                places_browse_array [ 1 , 1 ] = "X"
                places_browse_array [ 1 , 2 ] = "X"

                places_browse_array [ 2 , 1 ] = "0"
                places_browse_array [ 2 , 2 ] = "0"

                places_browse_array [ 3 , 1 ] = "1"
                places_browse_array [ 3 , 2 ] = "1"

                places_browse_array [ 4 , 1 ] = "2"
                places_browse_array [ 4 , 2 ] = "2"

                places_browse_array [ 5 , 1 ] = "3"
                places_browse_array [ 5 , 2 ] = "3"

                places_browse_array [ 6 , 1 ] = "4"
                places_browse_array [ 6 , 2 ] = "4"

                places_browse_array [ 7 , 1 ] = "5"
                places_browse_array [ 7 , 2 ] = "5"

                places_browse_array [ 8 , 1 ] = "6"
                places_browse_array [ 8 , 2 ] = "6"

                places_browse_array [ 9 , 1 ] = "7"
                places_browse_array [ 9 , 2 ] = "7"

                places_browse_array [ 10 , 1 ] = "8"
                places_browse_array [ 10 , 2 ] = "8"

                places_browse_array [ 11 , 1 ] = "9"
                places_browse_array [ 11 , 2 ] = "9"

                SET GLOBAL "LIBRARY_INITIALISED" TO TRUE

        ENDIF

        ARRAY mlp_component_active  ARRAY_SIZE ( 0 )
        ARRAY mlp_component_deleted ARRAY_SIZE ( 0 )
        mlp_component_read = FALSE

ENDROUTINE

{******************************************************************************}
ROUTINE mlps_class_define

{
*       Define the classed used by the limit package.
*
*******************************************************************************}

        DEFINE CLASS MLP_COMP_GRID_CLASS

                INHERIT     PROMPT_CLASS_GRID

                PROPERTIES "LEVEL_ENTRY_CODE"         ,
                           "NEW_ANALYSIS"             ,
                           "NEW_COMPONENT"            ,
                           "COMPONENT_PROMPT_DETAILS" ,
                           "INSERT_NEW_COMPONENT"     ,
                           "IS_DISPLAY"               ,
                           "NO_ANALYSIS_FIELD"

        END CLASS


        DEFINE CLASS MLP_COMP_DEFINE_CLASS

                PROPERTIES "EXISTS"
                TABLES      MLP_COMPONENTS

        END CLASS

ENDROUTINE

{******************************************************************************}

{ Save the changes to the component list back to the database,
  the routine needs to be called inside a write transaction   }

ROUTINE mlps_components_save  ( VALUE mlp_component_read    ,
                                      mlp_component_active  ,
                                      mlp_component_deleted )

        DECLARE count              ,
                level_list         ,
                deleted_level_list ,
                entry_code         ,
                delete_object      ,
                limit_list

        IF mlp_component_read THEN

                ARRAY limit_list

                entry_code = SELECT mlp_header . entry_code

                count = 1

                WHILE count <= size_of_array ( mlp_component_deleted ) DO

                        delete_object = mlp_component_deleted [ count ]

                        IF delete_object . exists THEN

                                limit_mod_delete ( SELECT mlp_components . entry_code
                                                   IN OBJECT delete_object )

                                DELETE mlp_components IN OBJECT delete_object

                        ENDIF

                        count = count + 1

                ENDWHILE

                level_mod_active_level_list ( "MODIFY"    ,
                                               entry_code ,
                                               level_list )

                level_mod_deleted_level_list ( entry_code         ,
                                               deleted_level_list )

                count = 1

                WHILE count <= size_of_array ( mlp_component_active ) DO

                        limit_mod_update ( level_list      ,
                                           SELECT mlp_components . entry_code
                                           IN OBJECT mlp_component_active [ count ] )

                        limit_mod_delete_levels ( deleted_level_list      ,
                                                  SELECT mlp_components . entry_code
                                                  IN OBJECT mlp_component_active [ count ] )

                        ASSIGN mlp_components . order_num
                                IN OBJECT mlp_component_active [ count ] = count

                        UPDATE mlp_components
                                IN OBJECT mlp_component_active [ count ]

                        count = count + 1

                ENDWHILE

        ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_component_get ( VALUE mlp_name       ,
                             VALUE mlp_version    ,
                             VALUE mode           )

{ Read the components from the database into an array of objects }

        DECLARE count            ,
                mlp_component    ,
                component_object

        IF mlp_component_read THEN

               RETURN

        ENDIF

        count = 1

        IF ( mode = "MODIFY" ) OR ( mode = "READ_FOR_MODIFY" ) THEN

                mlp_component = SELECT mlp_components . product_id
                                FOR UPDATE
                                WHERE  ( product_id      = mlp_name    ) AND
                                       ( product_version = mlp_version )
                                ORDER ON order_num

        ELSE

                mlp_component = SELECT mlp_components . product_id
                                WHERE  ( product_id      = mlp_name    ) AND
                                       ( product_version = mlp_version )
                                ORDER ON order_num

        ENDIF

        WHILE mlp_component <> EMPTY DO

                CREATE OBJECT MLP_COMP_DEFINE_CLASS, component_object

                component_object . exists = TRUE

                object_copy_current_table (  component_object ,
                                            "mlp_components"  )

                mlp_component_active [ count ] = component_object

                NEXT mlp_components
                mlp_component = SELECT mlp_components . product_id

                count = count + 1

        ENDWHILE

        mlp_component_read = TRUE

ENDROUTINE

{******************************************************************************}

GLOBAL
ROUTINE mlps_component_copy ( VALUE mlp_name        ,
                              VALUE mlp_version     ,
                              VALUE old_mlp_name    ,
                              VALUE old_mlp_version ,
                                    version_object  )

{ Read the components from the database into an array of objects }

        DECLARE count            ,
                mlp_component    ,
                component_object ,
                status

        count = 1

        mlp_component = SELECT mlp_components . product_id
                        WHERE  ( product_id      = old_mlp_name    ) AND
                               ( product_version = old_mlp_version )
                        ORDER ON order_num

        WHILE mlp_component <> EMPTY DO

                CREATE OBJECT MLP_COMP_DEFINE_CLASS, component_object

                component_object . exists = FALSE

                RESERVE ENTRY mlp_components IN OBJECT component_object ,
                                  mlp_name                               :
                                  mlp_version                            :
                                  SELECT mlp_components . analysis_id    :
                                  SELECT mlp_components . component_name
                        COPY_FROM SELECT mlp_components . product_id :
                                  SELECT mlp_components . product_version :
                                  SELECT mlp_components . analysis_id :
                                  SELECT mlp_components . component_name ,
                        STATUS

                IF status <> EMPTY THEN

                        flash_message ( status ,
                                        TRUE   )

                ENDIF

                ASSIGN mlp_components . entry_code IN OBJECT component_object
                                = limit_get_entry_code ()


                limit_mod_copy ( SELECT mlp_components . entry_code     ,
                                 SELECT mlp_components . entry_code
                                  IN OBJECT component_object            ,
                                 SELECT mlp_components . component_type )

                IF ( version_object <> NULL ) THEN

                    version_object . mlp_component_active [ count ] = component_object

                ELSE

                    mlp_component_active [ count ] = component_object

                ENDIF

                NEXT mlp_components
                mlp_component = SELECT mlp_components . product_id

                count = count + 1

        ENDWHILE

        IF ( version_object <> NULL ) THEN

            version_object . mlp_component_read = TRUE

        ELSE

            mlp_component_read = TRUE

        ENDIF

ENDROUTINE


{----------------------------------------------------------------------------}
{----------------------------------------------------------------------------}
{ Component Edit routines                                                        }
{----------------------------------------------------------------------------}
{----------------------------------------------------------------------------}
{----------------------------------------------------------------------------}
{--------------------------------------------------------------------------}

{******************************************************************************}

ROUTINE mlps_component_exists ( VALUE new_analysis  ,
                                VALUE new_component )

        DECLARE count  ,
                found  ,
                object

        count = 1
        found = FALSE

        WHILE ( count <= size_of_array ( mlp_component_active )) AND
              ( NOT found ) DO

                object = mlp_component_active [ count ]

                IF (strip ( SELECT mlp_components . analysis_id IN OBJECT object )
                                          = strip ( new_analysis )) AND
                   (strip ( SELECT mlp_components . component_name IN OBJECT object )
                                          = strip ( new_component )) THEN

                        found = TRUE

                ENDIF

                count = count + 1

        ENDWHILE

        RETURN ( found )

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_component_already_deleted (       deleted_component ,
                                         VALUE new_analysis      ,
                                         VALUE new_component     )

        DECLARE count  ,
                found  ,
                object

        count = 1
        found = FALSE

        WHILE ( count <= size_of_array ( mlp_component_deleted )) AND
              ( NOT found ) DO

                object = mlp_component_deleted [ count ]

                IF (strip ( SELECT mlp_components . analysis_id IN OBJECT object )
                                          = strip ( new_analysis )) AND
                   (strip ( SELECT mlp_components . component_name IN OBJECT object )
                                          = strip ( new_component )) THEN

                        found = TRUE

                ELSE

                        count = count + 1

                ENDIF

        ENDWHILE

        IF found THEN

                deleted_component = object
                array_remove_slice ( mlp_component_deleted ,
                                     1                     ,
                                     count                 )

        ENDIF

        RETURN ( found )

ENDROUTINE


{******************************************************************************}

ROUTINE mlps_component_add_analysis (       self        ,
                                      VALUE cell_column ,
                                      VALUE cell_row    ,
                                            screen      ,
                                      VALUE column      ,
                                      VALUE row         ,
                                      VALUE cell_width  ,
                                      VALUE cell_height )


        DECLARE is_insert_line, prompt_object

        is_insert_line = lib_grid_is_insert_line ( self              ,
                                                   cell_row          ,
                                                   self . is_display )

        PROMPT OBJECT prompt_object
               ON LINE   row
               FROM      column
               IN WINDOW screen
               BROWSE ON ANALYSIS

        prompt_object . start_prompt()
        prompt_object . wait_prompt()

        self . new_analysis = prompt_object . value

        prompt_object . end_prompt()

        prompt_object . set_globals()

        IF ( prompt_object . get_lastkey ( ) <> "EXIT"  ) AND
           ( prompt_object . get_lastkey ( ) <> "REMOVE" ) THEN

                SET GLOBAL "LASTKEY" TO "RIGHT"

        ELSEIF NOT is_insert_line THEN

                self . remove_row ( self . current_row )

                self . new_analysis         = " "
                self . new_component        = " "
                self . insert_new_component = FALSE
                SET GLOBAL "LASTKEY" TO "CONTINUE"

        ENDIF

ENDROUTINE

{****************************************************************************}

ROUTINE mlps_copy_component_details (       component_object ,
                                      VALUE analysis_id      ,
                                      VALUE component_name   )

        DECLARE result_type

        IF ( STRIP ( SELECT component . analysis ) <> STRIP ( analysis_id    )) OR
           ( STRIP ( SELECT component . name     ) <> STRIP ( component_name )) THEN

                lib_comp_valid_analysis_component ( component_name ,
                                                    analysis_id    )

        ENDIF

        result_type = SELECT component . result_type

        IF ( result_type = "N" ) OR
           ( result_type = "L" ) OR
           ( result_type = "K" ) THEN

                { Assume K type is a Numeric calculation }

                ASSIGN mlp_components . component_type IN OBJECT component_object
                                      = "N"

                ASSIGN mlp_components . units IN OBJECT component_object
                                      = SELECT component . units

                ASSIGN mlp_components . places IN OBJECT component_object
                                      = SELECT component . places


        ELSEIF ( result_type = "B" ) THEN

                ASSIGN mlp_components . component_type IN OBJECT component_object
                                      = "B"

                ASSIGN mlp_components . units IN OBJECT component_object
                                      = " "

                ASSIGN mlp_components . places IN OBJECT component_object
                                      = -1

        ELSEIF ( result_type = "I" ) THEN

                ASSIGN mlp_components . component_type IN OBJECT component_object
                                      = "I"

                ASSIGN mlp_components . units IN OBJECT component_object
                                      = " "

                ASSIGN mlp_components . places IN OBJECT component_object
                                      = -1

        ELSE

                {T,O,F,D types }

                ASSIGN mlp_components . component_type IN OBJECT component_object
                                      = "T"


                ASSIGN mlp_components . units IN OBJECT component_object
                                      = " "

                ASSIGN mlp_components . places IN OBJECT component_object
                                      = -1


        ENDIF

        { NOT_IMPLEMENTED_YET - customisation }

ENDROUTINE

{****************************************************************************}

ROUTINE mlps_component_new_setup (       component_object ,
                                   VALUE new_analysis     ,
                                   VALUE new_component    )

        DECLARE mlp_product, mlp_version

        IF NOT mlps_component_already_deleted ( component_object ,
                                                new_analysis     ,
                                                new_component    ) THEN

                CREATE OBJECT MLP_COMP_DEFINE_CLASS, component_object

                component_object . exists = FALSE

                mlp_product = SELECT mlp_header . identity
                mlp_version = SELECT mlp_header . product_version

                RESERVE ENTRY mlp_components IN OBJECT component_object ,
                                      mlp_product   :
                                      mlp_version   :
                                      new_analysis  :
                                      new_component

                ASSIGN mlp_components . entry_code IN OBJECT component_object
                                      = limit_get_entry_code ()

                IF strip ( new_analysis ) = NULL_ANALYSIS THEN

                        ASSIGN mlp_components . component_type IN OBJECT component_object
                                              = "N"

                ELSE

                        mlps_copy_component_details ( component_object ,
                                                      new_analysis     ,
                                                      new_component)

                ENDIF

        ENDIF

ENDROUTINE

{****************************************************************************}

ROUTINE mlps_component_include_all (       grid           ,
                                     VALUE current_row    ,
                                     VALUE new_analysis   ,
                                     VALUE is_insert_line )

        DECLARE new_component    ,
                create_row       ,
                created_one      ,
                component_object

        created_one = FALSE
        create_row  = FALSE

        new_component = SELECT component . name
                        WHERE  analysis = new_analysis
                        ORDER  ON order_number

        WHILE new_component <> EMPTY DO

                IF NOT mlps_component_exists ( new_analysis  ,
                                               new_component ) THEN

                        mlps_component_new_setup ( component_object ,
                                                   new_analysis     ,
                                                   new_component    )

                        array_insert_slice ( mlp_component_active ,
                                             1                    ,
                                             current_row             )

                        mlp_component_active [ current_row ] = component_object

                        IF create_row THEN

                                grid . insert_row ( current_row         ,
                                                    1                   ,
                                                    GRID_SEPARATOR_NONE )


                        ELSEIF is_insert_line THEN

                                grid . insert_row ( grid . cell_rows + 1 ,
                                                    1                    ,
                                                    GRID_SEPARATOR_NONE  )

                        ENDIF

                        lib_grid_redisplay_row ( grid        ,
                                                 current_row )

                        current_row = current_row + 1

                        create_row  = TRUE
                        created_one = TRUE

                ENDIF

                NEXT component
                new_component = SELECT component . name

        ENDWHILE

        RETURN ( created_one )

ENDROUTINE

{****************************************************************************}

ROUTINE mlps_component_prompt_component ( VALUE row            ,
                                          VALUE column         ,
                                          VALUE cell_width     ,
                                                screen         ,
                                          VALUE analysis_name  ,
                                                component_name )

        IF strip ( analysis_name ) = NULL_ANALYSIS THEN

                lib_comp_all_prompt ( row            ,
                                      column         ,
                                      cell_width     ,
                                      screen         ,
                                      FALSE          ,
                                      TRUE           ,
                                      component_name )

        ELSE

                lib_comp_analysis_prompt ( row            ,
                                           column         ,
                                           cell_width     ,
                                           screen         ,
                                           FALSE          ,
                                           TRUE           ,
                                           analysis_name  ,
                                           component_name )

        ENDIF

ENDROUTINE

{****************************************************************************}

ROUTINE mlps_component_add_component (       self        ,
                                       VALUE cell_column ,
                                       VALUE cell_row    ,
                                             screen      ,
                                       VALUE column      ,
                                       VALUE row         ,
                                       VALUE cell_width  ,
                                       VALUE cell_height )

        DECLARE keep_going        ,
                create_object     ,
                include_all_comps ,
                component_object  ,
                is_insert_line    ,
                footer_mess

        is_insert_line = lib_grid_is_insert_line ( self              ,
                                                   cell_row          ,
                                                   self . is_display )

        IF blank ( self . new_analysis ) THEN

                self . new_analysis = NULL_ANALYSIS

        ELSE

                self . new_analysis = PAD ( self . new_analysis ,
                                            " "                 ,
                                            ANALYSIS_ID_SIZE    )

        ENDIF


        self . new_component = " "
        create_object        = FALSE
        keep_going           = TRUE

        WHILE keep_going DO

                include_all_comps = FALSE

                mlps_component_prompt_component ( row                  ,
                                                  column               ,
                                                  cell_width           ,
                                                  screen               ,
                                                  self . new_analysis  ,
                                                  self . new_component )

                IF lastkey = "LEFT" THEN

                        keep_going = FALSE

                ELSEIF (( lastkey = "INSERT HERE"      )   AND
                        ( blank ( self . new_component ))) THEN

                        IF strip ( self . new_analysis ) <> NULL_ANALYSIS THEN

                                keep_going                  = FALSE
                                include_all_comps           = TRUE
                                self . insert_new_component = FALSE

                                screen_begin_update ()
                                keep_going = NOT mlps_component_include_all (
                                                      self                ,
                                                      cell_row            ,
                                                      self . new_analysis ,
                                                      is_insert_line      )

                                screen_end_update ()

                                SET GLOBAL "LASTKEY" TO "CONTINUE"

                        ELSE

                                keep_going    = TRUE
                                create_object = FALSE

                        ENDIF

                ELSEIF ( lastkey <> "EXIT"   ) AND
                       ( lastkey <> "REMOVE" ) THEN

                        IF NOT blank ( self . new_component ) THEN

                                IF NOT mlps_component_exists ( self . new_analysis ,
                                                               self . new_component ) THEN

                                        keep_going    = FALSE
                                        create_object = TRUE

                                ENDIF

                        ELSE

                                keep_going    = NOT is_insert_line
                                create_object = FALSE

                        ENDIF

                ELSE

                        keep_going = FALSE

                ENDIF

                footer_mess = get_user_message ( "MLPS_COMPONENT_FOOTER" , 1 )
                self . parent_prompt . change_footer ( footer_mess )

        ENDWHILE

        IF include_all_comps THEN

        ELSEIF create_object THEN

                IF is_insert_line THEN

                        self . insert_row ( self . cell_rows + 1  ,
                                            1                     ,
                                            GRID_SEPARATOR_NONE   )

                ENDIF

                mlps_component_new_setup ( component_object     ,
                                           self . new_analysis  ,
                                           self . new_component )

                array_insert_slice ( mlp_component_active ,
                                     1                    ,
                                     cell_row             )

                mlp_component_active [ cell_row ] = component_object

                self . insert_new_component = FALSE

                lib_grid_redisplay_row ( self     ,
                                         cell_row )


        ELSEIF lastkey <> "LEFT"  THEN

                IF NOT is_insert_line THEN

                        self . remove_row ( self . current_row )
                        SET GLOBAL "LASTKEY" TO "CONTINUE"

                ENDIF

                self . new_analysis         = " "
                self . new_component        = " "
                self . insert_new_component = FALSE
                lib_grid_redisplay_row ( self     ,
                                         cell_row )

        ENDIF

        IF self . new_analysis = NULL_ANALYSIS THEN

                self . new_analysis = " "

        ENDIF

ENDROUTINE

{****************************************************************************}

ROUTINE mlps_display_analysis (       self        ,
                                      grid        ,
                                VALUE cell_column ,
                                VALUE cell_row    ,
                                VALUE column      ,
                                VALUE line        ,
                                VALUE width_1     ,
                                      display_id  ,
                                VALUE is_display  )

        DECLARE analysis

        analysis = SELECT mlp_components . analysis_id IN OBJECT self

        IF analysis = NULL_ANALYSIS THEN

                analysis = " "

        ENDIF

        IF is_display THEN

                DISPLAY analysis ON LINE line FROM column
                                 IN WINDOW display_id

        ELSE

                PROMPT FOR analysis
                       ON LINE line FROM column
                       IN WINDOW display_id
                       BROWSE ON analysis
                       WITH ( display_only = TRUE )
        ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_display_component (       self        ,
                                       grid        ,
                                 VALUE cell_column ,
                                 VALUE cell_row    ,
                                 VALUE column      ,
                                 VALUE line        ,
                                 VALUE width_1     ,
                                       display_id  ,
                                 VALUE is_display  )

        DECLARE component        ,
                old_component    ,
                keep_going       ,
                create_object    ,
                component_object ,
                next_pos         ,
                analysis_id

        component     = SELECT mlp_components .component_name IN OBJECT self
        analysis_id   = SELECT mlp_components .analysis_id    IN OBJECT self

        old_component = component
        create_object = FALSE

        IF is_display THEN

                DISPLAY component ON LINE line FROM column
                                  TO column + width_1 - 1
                                  IN WINDOW display_id

        ELSE

                keep_going = TRUE

                WHILE keep_going DO

                        mlps_component_prompt_component ( line          ,
                                                          column        ,
                                                          width_1       ,
                                                          display_id    ,
                                                          analysis_id   ,
                                                          component     )

                        IF ( lastkey = "EXIT"   ) OR
                           ( lastkey = "REMOVE" ) THEN

                                keep_going = FALSE

                        ELSEIF component = old_component THEN

                                keep_going = FALSE

                        ELSEIF NOT blank ( component ) THEN

                                IF NOT mlps_component_exists ( analysis_id  ,
                                                               component    ) THEN

                                        keep_going    = FALSE
                                        create_object = TRUE

                                ENDIF

                        ENDIF

                ENDWHILE

        ENDIF

        IF create_object  THEN

                mlps_component_new_setup ( component_object ,
                                           analysis_id      ,
                                           component        )

                next_pos = size_of_array ( mlp_component_deleted ) + 1
                mlp_component_deleted [ next_pos ] = self
                mlp_component_active  [ grid . current_row ] = component_object

                grid . insert_new_component = FALSE
                grid . redisplay_row ( grid . current_row )

        ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_prompt_type (       self        ,
                                 grid        ,
                           VALUE cell_column ,
                           VALUE cell_row    ,
                           VALUE column      ,
                           VALUE line        ,
                           VALUE width_1     ,
                                 display_id  ,
                           VALUE is_display  )

        DECLARE component_type ,
                entry_code     ,
                level_list     ,
                original_value


        component_type = SELECT mlp_components .component_type IN OBJECT self
        original_value = component_type

        IF is_display THEN

                DISPLAY component_type ON LINE line FROM column
                                       TO column + width_1 - 1
                                       IN WINDOW display_id
                                       CHOOSE OUTOF component_types

        ELSE

                PROMPT FOR component_type ON LINE line FROM column
                                          TO column + width_1 - 1
                                          IN WINDOW display_id
                                          CHOOSE OUTOF component_types
                                          WITH ( is_spin = TRUE )

                IF ( lastkey <> "EXIT"                ) AND
                   ( original_value <> component_type ) THEN


                        ASSIGN mlp_components .component_type IN OBJECT self =
                                        component_type

                        { need to change any limits defined for the
                          component - for both the active and deleted
                          level list }

                        entry_code = SELECT mlp_components . entry_code
                                     IN OBJECT self

                        level_mod_active_level_list ( "MODIFY"           ,
                                                       SELECT mlp_header .
                                                              entry_code ,
                                                       level_list        )

                        limit_mod_change_type ( level_list     ,
                                                entry_code     ,
                                                component_type )

                        level_mod_deleted_level_list (  SELECT mlp_header .
                                                               entry_code ,
                                                        level_list        )

                        limit_mod_change_type ( level_list     ,
                                                entry_code     ,
                                                component_type )

                        lib_grid_redisplay_row ( grid     ,
                                                 cell_row )

                ENDIF


        ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_prompt_units (       self        ,
                                  grid        ,
                            VALUE cell_column ,
                            VALUE cell_row    ,
                            VALUE column      ,
                            VALUE line        ,
                            VALUE width_1     ,
                                  display_id  ,
                            VALUE is_display  )

        DECLARE units

        units  = SELECT mlp_components . units IN OBJECT self

        IF is_display THEN

                DISPLAY units ON LINE line FROM column
                              TO column + width_1 - 1
                              IN WINDOW display_id
                              FORMAT mlp_components . units

        ELSE

                PROMPT FOR units
                  CLASS UNIT_PROMPT_CLASS
                  WITH ( display_only = global ("DISPLAY_MODE" ) ,
                         column       = column                   ,
                         row          = line                     ,
                         window       = display_id               ,
                         width        = width_1                  )

                ASSIGN mlp_components . units IN OBJECT self = units

        ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_validate_dp_prompt ( self )

{
*       Validates the prompt for significant figures etc.
*
*******************************************************************************}

        DECLARE return_value

        return_value = FALSE

        IF STRIP ( self . text ) <> "X" THEN

                IF NUMERIC ( self . text ) <> ERROR THEN
                        IF NUMERIC ( self . text ) >= 0 THEN
                                return_value = TRUE
                        ENDIF
                ENDIF

        ELSE

                return_value = TRUE

        ENDIF

        RETURN ( return_value )

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_prompt_places (       self        ,
                                   grid        ,
                             VALUE cell_column ,
                             VALUE cell_row    ,
                             VALUE column      ,
                             VALUE line        ,
                             VALUE width_1     ,
                                   display_id  ,
                             VALUE is_display  )

        DECLARE component_type ,
                dec_places     ,
                original_value ,
                the_val

        component_type = SELECT mlp_components . component_type IN OBJECT self
        dec_places     = SELECT mlp_components . places IN OBJECT self

        IF is_display THEN

                IF component_type = "N" THEN

                        display_dp ( dec_places ,
                                     display_id ,
                                     column     ,
                                     line       )

                ELSE

                        CLEAR LINE      line
                              FROM      column
                              TO        column + width_1 - 1
                              IN WINDOW display_id

                ENDIF

        ELSEIF component_type = "N" THEN

                original_value = dec_places

                IF dec_places = -1 THEN

                        the_val = "X"

                ELSE

                        the_val = STRIP ( dec_places )

                ENDIF

                PROMPT FOR       the_val
                       ON LINE   line
                       FROM      column
                       IN WINDOW display_id
                       CHOOSE OUTOF places_browse_array
                       WITH ( always_validate = TRUE                              ,
                              validation_routine = "mlps_validate_dp_prompt" ,
                              is_spin = TRUE                                      )

                IF the_val = "X" THEN

                        dec_places = -1

                ELSE

                        dec_places = NUMERIC ( the_val )

                ENDIF

                IF ( lastkey <> "EXIT"            ) AND
                   ( original_value <> dec_places ) THEN

                        ASSIGN mlp_components . places IN OBJECT self =
                                                dec_places

                ENDIF

        ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_component_display (       grid        ,
                                 VALUE cell_column ,
                                 VALUE cell_row    ,
                                       screen      ,
                                 VALUE column      ,
                                 VALUE row         ,
                                 VALUE cell_width  ,
                                 VALUE cell_height )

        DECLARE object

        IF ( grid . insert_new_component ) OR
           ( lib_grid_is_insert_line ( grid              ,
                                       cell_row          ,
                                       grid . is_display )) THEN

                CLEAR LINE      row
                      FROM      column
                      TO        column + cell_width - 1
                      IN WINDOW screen

        ELSE

                object = mlp_component_active [ cell_row ]

                lib_grid_display_array ( grid                     ,
                                         cell_column              ,
                                         cell_row                 ,
                                         screen                   ,
                                         column                   ,
                                         row                      ,
                                         cell_width               ,
                                         object                   ,
                                         component_prompt_details ,
                                         "MLP_COMPONENTS"         ,
                                         FALSE                    ,
                                         PROMPT_DETAILS_310       )

        ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_component_prompt (       grid        ,
                                VALUE cell_column ,
                                VALUE cell_row    ,
                                      screen      ,
                                VALUE column      ,
                                VALUE row         ,
                                VALUE cell_width  ,
                                VALUE cell_height )

        DECLARE object, val

        IF ( grid . insert_new_component ) OR
           ( lib_grid_is_insert_line ( grid              ,
                                       cell_row          ,
                                       grid . is_display )) THEN

                IF ( cell_column = 1              ) AND
                   ( NOT grid . no_analysis_field ) THEN

{MOD GC 25-6-99}
                    IF ( grid . display_only ) THEN

                        PROMPT FOR val
                            ON LINE row
                            FROM column
                            TO column + cell_width - 1
                            IN WINDOW screen
                            WITH ( display_only = TRUE )


                    ELSE
{ENDMOD GC 25-6-99}

                        mlps_component_add_analysis ( grid        ,
                                                      cell_column ,
                                                      cell_row    ,
                                                      screen      ,
                                                      column      ,
                                                      row         ,
                                                      cell_width  ,
                                                      cell_height )

                    ENDIF

                ELSE

{MOD GC 25-6-99}
                    IF ( grid . display_only ) THEN


                        PROMPT FOR val
                            ON LINE row
                            FROM column
                            TO column + cell_width - 1
                            IN WINDOW screen
                            WITH ( display_only = TRUE )


                    ELSE
{ENDMOD GC 25-6-99}

                        mlps_component_add_component ( grid        ,
                                                       cell_column ,
                                                       cell_row    ,
                                                       screen      ,
                                                       column      ,
                                                       row         ,
                                                       cell_width  ,
                                                       cell_height )

                    ENDIF

                ENDIF

        ELSE

                object = mlp_component_active [ cell_row ]

                lib_grid_prompt_array ( grid                     ,
                                        cell_column              ,
                                        cell_row                 ,
                                        screen                   ,
                                        column                   ,
                                        row                      ,
                                        cell_width               ,
                                        object                   ,
                                        component_prompt_details ,
                                        "MLP_COMPONENTS"         ,
                                        FALSE                    ,
                                        PROMPT_DETAILS_310       )

        ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_component_insert ( self )

        DECLARE current_row

        current_row    = self . current_row

        self . insert_new_component = TRUE
        self . insert_row ( current_row , 1 , GRID_SEPARATOR_NONE )
        self . set_position ( 1 , current_row )

        RETURN ( TRUE )

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_component_remove ( self )

        DECLARE current_row, object

        current_row = self . current_row

        IF current_row <> self . cell_rows THEN

                object = mlp_component_active [ current_row ]

                mlp_component_deleted [ size_of_array ( mlp_component_deleted ) + 1 ]=
                        object

                array_remove_slice ( mlp_component_active ,
                                     1                    ,
                                     current_row          )


                self . remove_row ( current_row )

        ENDIF

        RETURN ( TRUE )

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_component_check_move (       grid           ,
                                    VALUE current_column ,
                                    VALUE current_row    ,
                                          new_column     ,
                                          new_row        )

{
*       Check to see if the column the user is going to is valid for
*       the given component type.
*
*
*******************************************************************************}

        DECLARE component_object , footer_mess

        footer_mess = get_user_message ( "MLPS_COMPONENT_FOOTER" , 1 )

        IF lib_grid_is_insert_line ( grid              ,
                                     current_row       ,
                                     grid . is_display ) THEN

                IF NOT blank ( grid . new_analysis ) THEN

                        new_row = current_row

                ENDIF

                IF new_column <> 1 THEN

                        new_column = 2

                ENDIF

                IF ( new_column = 2 ) AND
                   ( NOT blank ( grid . new_analysis ) ) THEN

                        footer_mess = get_user_message ( "MLPS_NO_COMP_FOOTER" ,
                                                         1 )
                ENDIF

        ELSEIF lib_grid_is_insert_line ( grid              ,
                                         new_row           ,
                                         grid . is_display ) THEN

                grid . new_analysis  = " "
                grid . new_component = " "

                IF new_column > 2 THEN

                        new_column = 1

                ENDIF

        ELSE

                component_object = mlp_component_active [ new_row ]

                IF component_object = EMPTY THEN

                        new_column = current_column
                        new_row    = current_row

                ELSEIF SELECT mlp_components . component_type
                       IN OBJECT component_object <> "N" THEN

                        IF new_column = 4 THEN

                                IF current_column < 4 THEN

                                        new_column = 5

                                ELSE

                                        new_column = 3

                                ENDIF

                        ELSEIF new_column = 6 THEN

                                new_column = 5

                        ENDIF

                ENDIF

        ENDIF

        grid . parent_prompt . change_footer ( footer_mess )

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_create_limit_object (       component_object ,
                                         limit_entry_list ,
                                   VALUE count            )

{
*       Define the grid object for the component list
*
*******************************************************************************}

    { LIT001 START }

        DECLARE name

        CREATE OBJECT LIMIT_ENTRY_CLASS , limit_entry_list [ count ]

        limit_entry_list [ count ] . entry_code      = SELECT mlp_components . entry_code IN OBJECT component_object
        limit_entry_list [ count ] . copy_entry_code = EMPTY

        name = SELECT mlp_components . analysis_id IN OBJECT component_object

        IF  name = "$NULL" THEN

                limit_entry_list [ count ] . title [1]  = " "

        ELSE

                limit_entry_list [ count ] . title [1]  = name

        ENDIF
        {WriteToLog("limit_entry_list [ count ] . title [1] = limit_entry_list [ ":STRIP(count):" ] . title [1] = ":limit_entry_list [ count ] . title [1])}
        limit_entry_list [ count ] . title [2]        = SELECT mlp_components . component_name IN OBJECT component_object
        limit_entry_list [ count ] . datatype         = SELECT mlp_components . component_type IN OBJECT component_object
        limit_entry_list [ count ] . places           = SELECT mlp_components . places         IN OBJECT component_object
        limit_entry_list [ count ] . units            = SELECT mlp_components . units          IN OBJECT component_object
{        limit_entry_list [ count ] . component_name   = SELECT mlp_components . component_name IN OBJECT component_object
        limit_entry_list [ count ] . analysis_id      = SELECT mlp_components . analysis_id    IN OBJECT component_object}
        limit_entry_list [ count ] . component_object = component_object


ENDROUTINE    { LIT001 END }

{******************************************************************************}

ROUTINE mlps_component_select ( grid_object )

{
*       Define the grid object for the component list
*
*******************************************************************************}

        DECLARE level_list       ,
                limit_entry_list ,
                component_object ,
                mode

        IF grid_object . is_display THEN
                mode = "DISPLAY"
        ELSE
                mode = "MODIFY"
        ENDIF

        ARRAY limit_entry_list

        IF NOT lib_grid_is_insert_line ( grid_object               ,
                                         grid_object . current_row ,
                                         grid_object . is_display  )

                level_mod_active_level_list ( mode                           ,
                                              SELECT mlp_header . entry_code ,
                                              level_list                     )

                component_object = mlp_component_active [ grid_object . current_row ]

                IF component_object <> EMPTY THEN
                      mlps_create_limit_object ( component_object ,
                                                 limit_entry_list ,
                                                 1                )

                      limit_mod_screen ( mode                   ,
                                         level_list                   ,
                                         limit_entry_list             )

                ENDIF

        ENDIF

        RETURN ( TRUE )

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_component_grid (       grid_object       ,
                              VALUE mode              ,
                              VALUE no_analysis_field )

{
*       Define the grid object for the mlp component screen.
*
*******************************************************************************}

        CREATE OBJECT MLP_COMP_GRID_CLASS , grid_object

        grid_object . new_analysis         = " "
        grid_object . new_component        = " "
        grid_object . insert_new_component = FALSE
        grid_object . no_analysis_field    = no_analysis_field

        grid_object . width   = 5
        grid_object . height  = global ( "SCREEN_HEIGHT" )

        grid_object . column   = 1
        grid_object . row      = 2

        grid_object . border   = FALSE


        grid_object . vgl_library          = global ( "current_library" )

        grid_object . prompt_cell_routine  = "mlps_component_prompt"
        grid_object . display_cell_routine = "mlps_component_display"

        IF mode <> "DISPLAY" THEN

                grid_object . insert_routine     = "mlps_component_insert"
                grid_object . remove_routine     = "mlps_component_remove"
                grid_object . is_display         = FALSE

        ELSE
                grid_object . is_display         = TRUE
        ENDIF

        grid_object . check_move_routine   = "mlps_component_check_move"
        grid_object . select_routine       = "mlps_component_select"

        grid_object . title_separator_top   = GRID_SEPARATOR_CELLS
        grid_object . title_rendition_top   = PROMPT_RENDITION_BOLD

        grid_object . title_size_top        = 1
        grid_object . fixed_columns_left    = 1

        grid_object . cell_columns = size_of_array ( component_prompt_details )
        grid_object . cell_rows    =
                lib_grid_number_of_lines ( grid_object . is_display               ,
                                           size_of_array ( mlp_component_active    ))

        lib_grid_setup_columns ( component_prompt_details ,
                                 grid_object              ,
                                 "MLP_COMPONENTS"         )

ENDROUTINE

{******************************************************************************}

GLOBAL
ROUTINE mlps_component_screen ( VALUE mode         ,
                                VALUE mlp_product  ,
                                VALUE mlp_version  ,
                                VALUE is_standards )

{
*       The main routine to call to modify the Components of an MLP.
*
*
*******************************************************************************}

    DECLARE form, grid, button_list, header_mess, footer_mess, button_object
    DECLARE toolbar, item, mlp, ID

    ARRAY button_list

    IF ( mode = "DISPLAY" ) OR ( mode = "MODIFY" ) THEN

        mlps_component_get ( mlp_product ,
                             mlp_version ,
                             mode        )

        mlps_component_grid ( grid         ,
                              mode         ,
                              is_standards )

        ID = "  (":STRIP(SUBSTRING(mlp_product,1,INDEX(mlp_product," "))):"/":STRIP(SUBSTRING(mlp_product,INDEX(mlp_product," "),20)):")"

        IF is_standards THEN

                header_mess = get_user_message ( "MLPS_COMPONENT_STANDARDS_HEADER" ,1  )

        ELSE

                header_mess = get_user_message ( "MLPS_COMPONENT_HEADER" ,1  ):ID

        ENDIF

        footer_mess = get_user_message ( "MLPS_COMPONENT_FOOTER" ,1  )

        lib_grid_create_form ( grid               ,
                               form               ,
                               mode = "MODIFY"    ,
                               0                  ,
                               header_mess        ,
                               footer_mess        ,
                               button_list        )

        CREATE OBJECT TOOLBAR_CLASS , toolbar
        toolbar . column = 1
        toolbar . height = 0.9

        form . add_prompt( toolbar )

        CREATE OBJECT TOOLBAR_BUTTON_CLASS , item
        item . tooltip      = GET_USER_MESSAGE( "SMP_PROMPT_BUTTON_INSERT", 1 ) :" (F5)"
        item . send_lastkey = "INSERT HERE"
        item . enabled      = ( mode <> "DISPLAY" )
        item . set_icon( "INT_NEW_ITEM" )

        toolbar . add_item ( item )

        CREATE OBJECT TOOLBAR_BUTTON_CLASS , item
        item . tooltip      = GET_USER_MESSAGE( "SMP_PROMPT_BUTTON_REMOVE", 1 ) : " (F6)"
        item . send_lastkey = "REMOVE"
        item . enabled      = ( mode <> "DISPLAY" )
        item . set_icon( "INT_DELETE_ITEM" )

        toolbar . add_item ( item )

        toolbar . add_separator( )

        CREATE OBJECT TOOLBAR_BUTTON_CLASS , item
        item . tooltip      = GET_USER_MESSAGE( "MLPS_BUTTON_LIMITS", 1 ) : " (F3)"
        item . send_lastkey = "SELECT"
        item . set_icon( "INT_MLPS" )

        toolbar . add_item ( item )

        toolbar . add_separator( )

        CREATE OBJECT TOOLBAR_BUTTON_CLASS , item
        item . set_icon  ( "INT_HELP_BUBBLE" )
        item . identity      = "HELP"
        item . send_last_key = "HELP"
        item . tooltip       = GET_USER_MESSAGE( "SMP_PROMPT_BUTTON_HELP", 1 ) : " (F1)"

        toolbar . add_item ( item )


        PROMPT OBJECT button_object
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row          = form . height - 0.5 ,
                   column       = form . width - 9   ,
                   caption      = GET_USER_MESSAGE ( "SMP_PROMPT_BUTTON_CLOSE" , 1 ) ,
                   width        = 10   ,
                   send_lastkey = "DO" )

        form . add_prompt ( button_object )

        form . add_panel( 1                   ,
                          form . height - 0.3 ,
                          1                   ,
                          form . width        ,
                          PANEL_H_ALIGN_RIGHT + PANEL_H_EXPAND_ON )



        form . display_only = ( mode = "DISPLAY" )

        form . prompt_id = GLOBAL ("CURRENT_LIBRARY") : "_COMPS"
        form . start_prompt ()
        form . wait_prompt  ()
        form . end_prompt   ()

    ELSEIF mode = "SAVE" THEN

        mlps_components_save ( mlp_component_read    ,
                               mlp_component_active  ,
                               mlp_component_deleted )

    ENDIF

ENDROUTINE


{******************************************************************************}

ROUTINE mlps_pre_schedule ( line , display_id , new_value)

        DECLARE valid

        REPEAT

                PROMPT FOR new_value ON LINE line FROM 1 IN WINDOW display_id
                                     BROWSE ON mlp_header

                IF ( lastkey <> "EXIT"   ) AND
                   ( lastkey <> "REMOVE" ) THEN


                        IF new_value = substring ( mlp_product         ,
                                                   1                   ,
                                                   MLP_PRODUCT_ID_SIZE )

                                valid = FALSE
                                flash_message ( get_user_message ( "MLPS_ERROR_RECURSIVE" , 1 ),
                                                TRUE                                          )

                        ELSE
                                valid = TRUE

                        ENDIF

                ELSE

                        valid = TRUE

                ENDIF

        UNTIL valid

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_schedule_description   ( VALUE column     ,
                                      VALUE line       ,
                                      VALUE width_1    ,
                                            display_id ,
                                      VALUE is_display )


        DECLARE description   ,
                context       ,
                message_ptr   ,
                identity      ,
                version       ,
                prompt_object

        identity = SELECT  mlp_schedule . mlp_id
        version  = SELECT  mlp_schedule . mlp_version

        push_file_descriptor ( "MLP_HEADER" , context )

        IF version = 0 THEN
                version = SELECT MAX mlp_header . product_version
                                WHERE ( identity = identity ) AND
                              ( approval_status = APPR_APPROVED )
        ENDIF

        description = SELECT mlp_header . description
                      WHERE  identity        = identity
                      AND    product_version = version

        pop_file_descriptor ( context )

        IF description = EMPTY THEN

                message_fetch ( "MLPS_ERROR_MLP_GONE" ,
                                 message_ptr          )

                message_add_parameter ( message_ptr                  ,
                                        SELECT mlp_schedule . mlp_id )

                description = message_get_text ( message_ptr , 1 )

        ENDIF

        PROMPT OBJECT prompt_object
                ON LINE line
                FROM column
                IN WINDOW display_id
                WITH( value = description       ,
                      display_only = TRUE )

        prompt_object . start_prompt()

        IF NOT is_display THEN
                prompt_object . wait_prompt()
        ENDIF

        prompt_object . end_prompt()

        prompt_object . set_globals()

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_schedule_version   ( VALUE column     ,
                                  VALUE line       ,
                                  VALUE width_1    ,
                                        display_id ,
                                  VALUE is_display )


        DECLARE mlp_identity, mlp_version, choose_array, version, pos, prompt_object

        mlp_identity = SELECT mlp_schedule . mlp_id
        mlp_version  = SELECT mlp_schedule . mlp_version

        ARRAY choose_array ARRAYSIZE (0,2)

        version = SELECT mlp_header . product_version
                        WHERE ( identity = mlp_identity ) AND
                          ( approval_status = APPR_APPROVED )

        WHILE version <> EMPTY DO
                pos = size_of_array( choose_array ) + 1
                choose_array[pos,1] = SUBSTITUTE( version, " ", "" )
                choose_array[pos,2] = version

                NEXT mlp_header
                version = SELECT mlp_header . product_version
        ENDWHILE

        pos = size_of_array( choose_array ) + 1
        choose_array[pos,1] = "Current"
        choose_array[pos,2] = 0

        PROMPT OBJECT prompt_object
                ON LINE line
                FROM column
                IN WINDOW display_id
                CHOOSE OUTOF choose_array
                WITH( value = mlp_version       ,
                      display_only = is_display )
        prompt_object . start_prompt()

        IF NOT is_display THEN
                prompt_object . wait_prompt()
                ASSIGN mlp_schedule . mlp_version = prompt_object . value
        ENDIF

        prompt_object . end_prompt()

        prompt_object . set_globals()

ENDROUTINE

{******************************************************************************}

GLOBAL
ROUTINE mlps_pre_schedule_screen ( VALUE mlp_id     ,
                                   VALUE old_mlp_id ,
                                         mode       )

{
*       The main routine to call to modify the schedule of an MLP.
*
*
*******************************************************************************}

        old_identity = old_mlp_id
    {**AS 2003R1}
    JOIN LIBRARY $lib_utils
    IF mode = "MODIFY" THEN
   {FLASH_MESSAGE("Warning: The 'MLP Schedule' function not supported by Chr. Hansen custom functionality", TRUE)}
    ENDIF
    {**AE 2003R1}

    mlps_schedule_screen ( mode )
    IF mode = "SAVE" THEN
        DECLARE m, v, prod_id, prod_ver
        GET_FIELD_DETAILS MLP_HEADER.IDENTITY, "FIELD_SIZE", m
        prod_id = LEFTSTRING(mlp_id, m)
        GET_FIELD_DETAILS MLP_HEADER.PRODUCT_VERSION, "FIELD_SIZE", v
        prod_ver = RIGHTSTRING(mlp_id, v)
        status = SELECT mlp_header_view.approval_status WHERE identity = prod_id AND product_version = prod_ver
        IF (status = EMPTY) OR (status = "V") THEN
            WriteToLog("INSERT_IU: ":mlp_id:", ":status) 
            {insert_iu("UPDATE", "UPDATE_MLP", prod_id, prod_ver) }
        ENDIF
    ENDIF

ENDROUTINE

{******************************************************************************}

GLOBAL
ROUTINE mlps_schedule_screen ( option )

{
*       The main routine to call to modify the schedule of an MLP.
*
*
*******************************************************************************}

        DECLARE context        ,
                header_line    ,
                field_details  ,
                answer         ,
                prompt_details ,
                message_ptr    ,
                mlp_product    ,
                mlp_version, win_header

        mlp_product = SELECT mlp_header . identity
        mlp_version = SELECT mlp_header . product_version

        push_file_descriptor ( "MLP_HEADER" , context )

        IF mode = "PRINT" THEN

                message_fetch ( "MLPS_SCHEDULE_PRINT_HEADER" ,
                                 message_ptr                 )
                message_add_parameter ( message_ptr   ,
                                        mlp_product   )

                header_line = message_get_text ( message_ptr , 1 )

                ARRAY field_details ARRAY_SIZE ( 0 , 2 )

                field_details [ 1 , 1 ] = "MLP_ID"
                field_details [ 1 , 2 ] = "Mlp Name"
                field_details [ 2 , 1 ] = "MLP_VERSION"
                field_details [ 2 , 2 ] = "Version"


                print_fields ( "MLP_SCHEDULE",
                                mlp_product : mlp_version ,
                                header_line  ,
                                " " ,
                                2                ,
                                28               ,
                                field_details    )
                answer = TRUE

        ELSE

                ARRAY prompt_details ARRAY_SIZE ( 0 , 6 )

                prompt_details [ 1 , 2 ] = "DISPLAY"
                prompt_details [ 1 , 3 ] = "MLP_SCHEDULE"
                prompt_details [ 1 , 4 ] = "MLP_ID"
                prompt_details [ 1 , 5 ] = 3
                prompt_details [ 1 , 6 ] = MLP_PRODUCT_ID_SIZE

                prompt_details [ 2 , 2 ] = "ROUTINE"
                prompt_details [ 2 , 3 ] = global ( "Current_library" )
                prompt_details [ 2 , 4 ] = "MLPS_SCHEDULE_VERSION"
                prompt_details [ 2 , 5 ] = 3
                prompt_details [ 2 , 6 ] = MLP_PRODUCT_VERSION_SIZE

                prompt_details [ 3 , 2 ] = "ROUTINE"
                prompt_details [ 3 , 3 ] = global ( "Current_library" )
                prompt_details [ 3 , 4 ] = "MLPS_SCHEDULE_DESCRIPTION"
                prompt_details [ 3 , 5 ] = 3 + MLP_PRODUCT_ID_SIZE + 5
                prompt_details [ 3 , 6 ] = 70 - MLP_PRODUCT_ID_SIZE - 10

                lab_user_mlps_schedule ( prompt_details )

                WIN_HEADER = "MLP Schedule ":" (": STRIP(mlp_product) :"/" : STRIP(mlp_version) :")"

                answer = list_editor_version1
                                     ( 19 ,
                                       70 ,
                                       5  ,
                                       3  ,
                                       "MLP_SCHEDULE" ,
                                       WIN_HEADER {GET_USER_MESSAGE ( "MLPS_SCHEDULE_TOP_LINE", 1 )} ,
                                       GET_USER_MESSAGE ( "MLPS_SCHEDULE_HEAD_LINE", 1 ) ,
                                       GET_USER_MESSAGE ( "MLPS_SCHEDULE_BOT_LINE", 1 ) ,
                                       TRUE             ,
                                       EMPTY            ,
                                       EMPTY            ,
                                       prompt_details   ,
                                       "MLPS_PRE_SCHEDULE"     ,
                                       EMPTY     ,
                                       EMPTY            ,
                                       EMPTY            ,
                                       old_identity       ,
                                       mlp_product : mlp_version           ,
                                       global ( "current_library" ) ,
                                       mode            ,
                                       schedule_list_editor )



        ENDIF

        pop_file_descriptor ( context )
        return ( ANSWER )

ENDROUTINE

{******************************************************************************}

ROUTINE get_mlp_analysis_sampling_plan_type

        DECLARE analysis_identity, sampling_plan_type

        analysis_identity = SELECT mlp_analysis . analysis_id

        sampling_plan_type = SELECT versioned_analysis . sampling_plan_type
                                WHERE identity         = analysis_identity
                                AND   analysis_version = 1

        RETURN( sampling_plan_type )

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_sampling_insp_level   ( VALUE column     ,
                                     VALUE line       ,
                                     VALUE width_1    ,
                                           display_id ,
                                     VALUE is_display )

        DECLARE prompt_object, phrase, choose_array

        IF get_mlp_analysis_sampling_plan_type( ) = "FIXED" THEN

                PROMPT OBJECT prompt_object
                        ON LINE line
                        FROM column
                        IN WINDOW display_id
                        WITH( display_only = TRUE )

                prompt_object . value             = "N/A"
                prompt_object . display_only      = TRUE
                prompt_object . foreground_colour = PROMPT_COLOUR_GREY

                prompt_object . start_prompt()

                IF NOT is_display THEN
                        prompt_object . wait_prompt()
                ENDIF

                prompt_object . end_prompt()
                prompt_object . set_globals()

        ELSE

                IF get_mlp_analysis_sampling_plan_type( ) = "VAR_SINGLE" THEN

                        phrase = "STAT_SIL_V"

                ELSE

                        phrase = "STAT_SIL_A"

                ENDIF

                choose_array = lib_utils_build_phrase_choose_array ( phrase )

                PROMPT OBJECT prompt_object
                        CHOOSE OUTOF choose_array
                        ON LINE line
                        FROM column
                        IN WINDOW display_id
                        WITH( display_only = is_display    )

                prompt_object . value = SELECT mlp_analysis . sampling_insp_level

                prompt_object . start_prompt()

                IF NOT is_display THEN
                        prompt_object . wait_prompt()
                ENDIF
                ASSIGN mlp_analysis . sampling_insp_level = prompt_object . value

                prompt_object . end_prompt()
                prompt_object . set_globals()

        ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_inspection_level   ( VALUE column     ,
                                  VALUE line       ,
                                  VALUE width_1    ,
                                        display_id ,
                                  VALUE is_display )

        DECLARE prompt_object

        IF get_mlp_analysis_sampling_plan_type( ) <> "FIXED" THEN

                PROMPT OBJECT prompt_object
                        FORMAT mlp_analysis . inspection_level
                        ON LINE line
                        FROM column
                        IN WINDOW display_id
                        WITH( display_only = is_display )

                prompt_object . value = SELECT mlp_analysis . inspection_level

                prompt_object . start_prompt()

                IF NOT is_display THEN
                        prompt_object . wait_prompt()
                ENDIF
                ASSIGN mlp_analysis . inspection_level = prompt_object . value

                prompt_object . end_prompt()
                prompt_object . set_globals()

        ELSE

                PROMPT OBJECT prompt_object
                        ON LINE line
                        FROM column
                        IN WINDOW display_id
                        WITH( display_only = TRUE )

                prompt_object . value             = "N/A"
                prompt_object . display_only      = TRUE
                prompt_object . foreground_colour = PROMPT_COLOUR_GREY

                prompt_object . start_prompt()

                IF NOT is_display THEN
                        prompt_object . wait_prompt()
                ENDIF

                prompt_object . end_prompt()
                prompt_object . set_globals()

        ENDIF

ENDROUTINE

{*****************************************************************************}

ROUTINE is_in_array ( array_name, VALUE value_to_check )

{
*       finds if a given value is in an array or not
*
******************************************************************************}

        DECLARE found, count

        found = FALSE
        count = 1

        WHILE ( count <= size_of_array ( array_name ) ) AND ( NOT found ) DO

                IF array_name[count,2] = value_to_check THEN

                        found = TRUE

                ENDIF

                count = count + 1

        ENDWHILE

        RETURN ( found )

ENDROUTINE

{******************************************************************************}

ROUTINE mlps_pre_analysis( line, display_id, new_value )

{
*
*******************************************************************************}

        DECLARE choose_array, count, choose_count, analysis, prompt_object
        DECLARE analysis_object, in_collection

        ARRAY choose_array ARRAYSIZE (0,2)
        choose_array[1, 1] = " "
        choose_array[1, 2] = " "

        count        = 1
        choose_count = 2

        WHILE count <= size_of_array( mlp_component_active ) DO

                analysis = SELECT mlp_components . analysis_id
                                IN OBJECT mlp_component_active [ count ]

                analysis_object = analyses_list_editor . collection . get_by_index( "analysis_id" ,
                                                                                    analysis      )

                IF analysis_object <> EMPTY THEN
                        in_collection = NOT analysis_object . deleted
                ELSE
                        in_collection = FALSE
                ENDIF

                IF ( NOT is_in_array ( choose_array, analysis ) ) AND
                   ( NOT in_collection                          ) AND
                   ( analysis <> "$NULL"                        ) THEN

                        choose_array[choose_count, 1] = analysis
                        choose_array[choose_count, 2] = analysis

                        choose_count = choose_count + 1
                ENDIF

                count = count + 1
        ENDWHILE

        PROMPT OBJECT prompt_object
                ON LINE line
                IN WINDOW display_id
                CHOOSE OUTOF choose_array

        prompt_object . start_prompt()
        prompt_object . wait_prompt()

        new_value = prompt_object . value

        prompt_object . end_prompt()

        prompt_object . set_globals()


ENDROUTINE

{******************************************************************************}

GLOBAL
ROUTINE mlps_analyses_screen ( VALUE mlp_id     ,
                               VALUE old_mlp_id ,
                                     mode       )

{
*       The main routine to call to modify the analyses details of an MLP.
*
*
*******************************************************************************}

        DECLARE header_line    ,
                field_details  ,
                answer         ,
                prompt_details ,
                message_ptr


        mlp_product = mlp_id
        extract_mlp_version ( mlp_version, mlp_product )

        mlps_component_get ( mlp_product ,
                             mlp_version ,
                             mode        )

        IF mode = "PRINT" THEN

                message_fetch ( "MLPS_ANALYSIS_PRINT_HEADER" ,
                                 message_ptr                 )
                message_add_parameter ( message_ptr   ,
                                        mlp_id   )

                header_line = message_get_text ( message_ptr , 1 )

                ARRAY field_details ARRAY_SIZE ( 0 , 2 )

                field_details [ 1 , 1 ] = "ANALYSIS_ID"
                field_details [ 1 , 2 ] = get_user_message ( "LTE_MLP_MESSAGE_ANALID" ,1 ) {"Analysis Id"}
                field_details [ 2 , 1 ] = "SAMPLING_INSP_LEVEL"
                field_details [ 2 , 2 ] = get_user_message ( "LTE_MLP_MESSAGE_SAMP_INSP" ,1 ) {"Sampling Inspection Level"}
                field_details [ 3 , 1 ] = "INSPECTION_LEVEL"
                field_details [ 3 , 2 ] = get_user_message ( "LTE_MLP_MESSAGE_INSP_LEV" ,1 ) {"Inspection Level"}

                print_fields ( "MLP_ANALYSIS",
                                mlp_id ,
                                header_line  ,
                                " " ,
                                2                ,
                                28               ,
                                field_details    )
                answer = TRUE

        ELSE

                ARRAY prompt_details ARRAY_SIZE ( 0 , 6 )

                prompt_details [ 1 , 2 ] = "DISPLAY"
                prompt_details [ 1 , 3 ] = "MLP_ANALYSIS"
                prompt_details [ 1 , 4 ] = "ANALYSIS_ID"
                prompt_details [ 1 , 5 ] = 3
                prompt_details [ 1 , 6 ] = 10

                prompt_details [ 2 , 2 ] = "ROUTINE"
                prompt_details [ 2 , 3 ] = global ( "Current_library" )
                prompt_details [ 2 , 4 ] = "MLPS_SAMPLING_INSP_LEVEL"
                prompt_details [ 2 , 5 ] = 3
                prompt_details [ 2 , 6 ] = 20

                prompt_details [ 3 , 2 ] = "ROUTINE"
                prompt_details [ 3 , 3 ] = global ( "Current_library" )
                prompt_details [ 3 , 4 ] = "MLPS_INSPECTION_LEVEL"
                prompt_details [ 3 , 5 ] = 3
                prompt_details [ 3 , 6 ] = 16

                lab_user_mlps_analysis ( prompt_details )

                IF list_editor_create_object ( analyses_list_editor ) THEN

                        analyses_list_editor . compatability = PROMPT_DETAILS_260

                        analyses_list_editor . table  = "MLP_ANALYSIS"
                        analyses_list_editor . header = GET_USER_MESSAGE ( "MLPS_ANALYSIS_TOP_LINE", 1 )
                        analyses_list_editor . footer = GET_USER_MESSAGE ( "MLPS_ANALYSIS_BOT_LINE", 1 )

                        analyses_list_editor . pre_insert  = "mlps_pre_analysis"
                        analyses_list_editor . post_insert = EMPTY
                        analyses_list_editor . delete      = EMPTY
                        analyses_list_editor . select      = EMPTY

                        analyses_list_editor . library     = global ( "current_library" )

                        analyses_list_editor . setup_prompt_details ( prompt_details ,
                                                             GET_USER_MESSAGE ( "MLPS_ANALYSIS_HEAD_LINE", 1 )    )

                        analyses_list_editor . collection . add_index( "ANALYSIS_ID" )
                        analyses_list_editor . collection . add_index( "KEY0" )

                ENDIF

                answer = analyses_list_editor . operation ( mlp_id ,
                                                            old_mlp_id ,
                                                            mode        )

        ENDIF

        return ( answer )

ENDROUTINE

{******************************************************************************}

GLOBAL
ROUTINE mlps_component_limits ( VALUE mode            ,
                                VALUE mlp_product     ,
                                VALUE mlp_version     ,
                                VALUE mlp_level_entry )

{
*       The main routine to call to modify the limits for an MLP.
*
*
*******************************************************************************}

    DECLARE count            ,
            limit_entry_list ,
            level_list

    IF ( mode = "MODIFY" ) OR ( mode = "DISPLAY" ) THEN

        level_mod_active_level_list ( mode            ,
                                      mlp_level_entry ,
                                      level_list      )

        mlps_component_get ( mlp_product ,
                             mlp_version ,
                             mode        )


        ARRAY limit_entry_list
        count = 1


        WHILE count <= size_of_array ( mlp_component_active ) DO
                mlps_create_limit_object ( mlp_component_active [ count ] ,
                                           limit_entry_list               ,
                                           count                          )

                count = count + 1

        ENDWHILE

        limit_mod_screen ( mode                         ,
                           level_list                   ,
                           limit_entry_list             )

    ELSEIF mode = "SAVE" THEN
        DECLARE m, v, prod_id, prod_ver
        GET_FIELD_DETAILS MLP_HEADER.IDENTITY, "FIELD_SIZE", m
        prod_id = LEFTSTRING(mlp_id, m)
        GET_FIELD_DETAILS MLP_HEADER.PRODUCT_VERSION, "FIELD_SIZE", v
        prod_ver = RIGHTSTRING(mlp_id, v)
        status = SELECT mlp_header_view.approval_status WHERE identity = prod_id AND product_version = prod_ver
        IF (status = EMPTY) OR (status = "V") THEN
            WriteToLog("INSERT_IU: ":mlp_id:", ":status) 
            {insert_iu("UPDATE", "UPDATE_MLP", prod_id, prod_ver) }
        ENDIF
    ENDIF

ENDROUTINE


{******************************************************************************}

ROUTINE mlps_components_screen ( option )
{
*       The main routine to call to modify the limits for an MLP.
*
*
*******************************************************************************}

        mlps_component_screen ( mode        ,
                                mlp_header  ,
                                mlp_version ,
                                FALSE       )

ENDROUTINE


{******************************************************************************}

ROUTINE mlp_limits_screen ( option )

{
*       The main routine to call to modify the limits for an MLP.
*
*
*******************************************************************************}

        mlps_component_limits ( mode            ,
                                mlp_header      ,
                                mlp_version     ,
                                mlp_level_entry )

ENDROUTINE


{******************************************************************************}
GLOBAL
ROUTINE mlp_levels_screen ( VALUE identity        ,
                            VALUE old_identity    ,
                            VALUE mode            )
{
*       The main routine to call to modify the levels for an MLP.
*
*******************************************************************************}

        IF ( mode = "MODIFY" ) OR ( mode = "DISPLAY" ) THEN

            level_mod_screen ( mode     ,
                               SELECT mlp_header . entry_code )

        ELSEIF ( mode = "SAVE" ) THEN

            level_mod_save ()

        ENDIF

ENDROUTINE


{******************************************************************************}

GLOBAL

ROUTINE mlps_versions_edit ( VALUE mode            ,
                             VALUE mlp_product     )

{
*       The main routine to call to modify the Components of an MLP.
*
*
*******************************************************************************}

    IF mode = "ADD" THEN

        MENUPROC (551) USING mlp_product

    ELSEIF mode = "MODIFY" THEN

        MENUPROC (554) USING mlp_product

    ELSEIF mode = "COPY" THEN

        MENUPROC (553) USING mlp_product

    ELSEIF mode = "DISPLAY" THEN

        MENUPROC (557) USING mlp_product

    ELSEIF mode = "NEW_VERSION" THEN

        MENUPROC (555) USING mlp_product

    ENDIF

ENDROUTINE


{******************************************************************************}

GLOBAL

ROUTINE mlps_versions_screen ( VALUE mlp_header      ,
                               VALUE old_identity    ,
                               VALUE mode            )

{
*       The main routine to call to display the versions for an MLP.
*       Due to changes in MLP versioning this routine now calls the header
*       page for the product, in the appropriate mode
*
*
*******************************************************************************}

    IF mode = "ADD" THEN

        MENUPROC (551) USING mlp_header

    ELSEIF mode = "MODIFY" THEN

        MENUPROC (554) USING mlp_header

    ELSEIF mode = "COPY" THEN

        MENUPROC (553) USING old_identity, mlp_header

    ELSEIF mode = "DISPLAY" THEN

        MENUPROC (557) USING mlp_header

    ELSEIF mode = "NEW_VERSION" THEN

        MENUPROC (555) USING mlp_header

    ENDIF

ENDROUTINE


{******************************************************************************}
GLOBAL
ROUTINE new_mlp ( VALUE mode )

{
*       The routine to get an entry code for the mlp.
*
*
*******************************************************************************}

        DECLARE entry_code, old_entry_code

        level_mod_initialise ()
        limit_mod_initialise ()

        mlp_component_read = FALSE
        ARRAY mlp_component_active
        ARRAY mlp_component_deleted

        IF  ( mode = "ADD"  ) THEN

            entry_code = SELECT mlp_header . entry_code FOR UPDATE

            entry_code = level_get_entry_code ()

            ASSIGN mlp_header . entry_code = entry_code

        ELSEIF ( mode = "MODIFY" )

            entry_code = SELECT mlp_header . entry_code FOR UPDATE

        ELSEIF ( mode = "COPY" ) OR
               ( mode = "NEW_VERSION" ) THEN

            old_entry_code = SELECT mlp_header . entry_code

            entry_code = level_get_entry_code ()

            ASSIGN mlp_header . entry_code = entry_code

            level_mod_copy ( entry_code ,
                             old_entry_code          )


        ENDIF

ENDROUTINE


{******************************************************************************}
GLOBAL

ROUTINE extract_mlp_version ( mlp_version, mlp_product )
{
* Parses the old_mlp_product line to get the product and the version
*
*******************************************************************************}

    DECLARE mlp_id_len, mlp_id

    GET_FIELD_DETAILS mlp_header . identity, "FIELD_SIZE", mlp_id_len

    mlp_id = LEFTSTRING ( mlp_product, mlp_id_len )

    mlp_version = RIGHTSTRING ( mlp_product, STRINGLENGTH ( mlp_product ) - mlp_id_len )
    mlp_version = STRIP ( mlp_version )
    mlp_version = PACKED_DECIMAL ( mlp_version )

    mlp_product = mlp_id

ENDROUTINE { extract_mlp_version }


{******************************************************************************}
GLOBAL
ROUTINE mlps_pre_component_screen ( VALUE mlp_id     ,
                                    VALUE old_mlp_id ,
                                          mode       )

{
* Called prior to launching the mlp components_screen
*
*******************************************************************************}

    DECLARE is_standards, old_mlp_version, null_var

    is_standards = FALSE
    old_mlp_version = 0
    null_var = NULL

    mlp_version = SELECT mlp_header . product_version


    IF     ( mode = "DISPLAY" )
        OR ( mode = "MODIFY" )
        OR ( mode = "SAVE" ) THEN

        mlps_component_screen ( mode         ,
                                mlp_id       ,
                                mlp_version  ,
                                is_standards )

    ELSEIF ( mode = "COPY" ) OR
           ( mode = "NEW_VERSION" ) THEN

        extract_mlp_version ( old_mlp_version, old_mlp_id )
        extract_mlp_version ( mlp_version, mlp_id )

        mlp_version = SELECT mlp_header . product_version

        mlps_component_copy ( mlp_id          ,
                              mlp_version     ,
                              old_mlp_id      ,
                              old_mlp_version ,
                              null_var  )

    ENDIF

ENDROUTINE { mlps_pre_component_screen }



{******************************************************************************}
GLOBAL
ROUTINE mlps_pre_component_limits ( VALUE mlp_id     ,
                                    VALUE old_mlp_id ,
                                    VALUE mode       )
{
* Called prior to launching the mlp limits screen
*
*******************************************************************************}

    DECLARE mlp_version, mlp_level_entry

    mlp_version = SELECT mlp_header . product_version

    mlp_level_entry = SELECT mlp_header . entry_code

    mlps_component_limits ( mode            ,
                            mlp_id          ,
                            mlp_version     ,
                            mlp_level_entry )

ENDROUTINE { mlps_pre_component_limits }

{******************************************************************************}

ROUTINE mlps_get_component_object( VALUE row )

{
*     Returns the mlp component object for the passed row
*
*******************************************************************************}

      RETURN( mlp_component_active[row] )

ENDROUTINE

{*************************************************************************
* Purpose      : Writes to predefined log,
*                using WriteLog in $lib_utils
* Parameters   : Msg - what to write in log
* Return Value : N/A
**************************************************************************}
ROUTINE WriteToLog(VALUE Msg)

    WriteLog(Msg, global("current_library"))

ENDROUTINE
{******************************************************************************}

GLOBAL ROUTINE SAP_MATMAS(VALUE mlp, VALUE copied_identity, VALUE operation)

DECLARE updates, id, i, field, context
ARRAY updates   ARRAY_SIZE (0,4) 
    
    GetSAPDetails(mlp, copied_identity, operation, updates)

RETURN

{**************************************************************************************************************
***************************************************************************************************************}
    IF size_of_array(updates) > 0 THEN
        push_file_descriptor ("mlp_header", context)
        IF (operation = "MODIFY"          ) OR 
           (operation = "READ_FOR_MODIFY" ) OR
           (operation = "ADD"             ) OR 
           (operation = "COPY"            ) OR 
           (operation = "NEW_VERSION"     ) THEN 
            fm("Values to update:":ASCII(10):GetArray(updates))
            IF NOT(transaction_is_write()) THEN
                START WRITE TRANSACTION "Update from SAP_MATMAS"
                GET_FIELD_DETAILS MLP_HEADER.IDENTITY, "FIELD_SIZE", size
                ver = RIGHTSTRING(mlp, LENGTH(mlp) - size)
                id  = LEFTSTRING(mlp, size)
                id = SELECT mlp_header.identity FOR UPDATE WHERE identity = id AND product_version = ver
                i = 1
                WHILE i <= size_of_array(updates)
                    field = updates[i,1]
                    ASSIGN mlp_header.'field' = updates[i,2]
                    i = i + 1
                ENDWHILE
                UPDATE mlp_header
                COMMIT 
            ELSE
                i = 1
                WHILE i <= size_of_array(updates)
                    field = updates[i,1]
                    ASSIGN mlp_header.'field' = updates[i,2]
                    i = i + 1
                ENDWHILE
            ENDIF
            fm("Assigned values:":ASCII(10):GetArray(updates))
        ENDIF
        pop_file_descriptor(context)
    ENDIF    

ENDROUTINE    