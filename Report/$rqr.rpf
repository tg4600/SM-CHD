{Compared 20140123 /DKTBG}
{******************************************************************************
*
* Module Name   : $RQR.RPF
*
* Purpose       :
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}

SET NOTPROTECTED
JOIN LIBRARY $AUX_LIB
SET NAME "DISPLAY/"
ENABLE WINDOWS
SET COMPILE_OPTION declare

{******************************************************************************}
{ Libraries required by Sample Login }
{******************************************************************************}

JOIN STANDARD_LIBRARY STD_LOGIN
JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_MESSAGE

JOIN LIBRARY $LIB_SAMP
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $LIB_WORKFLOW
JOIN LIBRARY $SAMP_EGC
JOIN LIBRARY $SAMP_JOB

{******************************************************************************}
{ Constants                                                                    }
{******************************************************************************}

CONSTANT FIELD_NAME_POS     = 1
CONSTANT ALIAS_POS          = 2
CONSTANT SYNTAX_ID_POSITION = 5
CONSTANT NO_SAMPLE_LOGIN    = FALSE
CONSTANT SAMPLE_LOGGED      = TRUE

{******************************************************************************}
{                   USER INPUT BEGINS HERE                              }
{******************************************************************************}

{SECTION A - SCREEN SETUP}
{specify the header text for the command window}
{ie header_txt =  "Change Sample Status"}

    DECLARE header_txt

    header_txt = get_user_message("RQR_HDR",1)

{specify footer text for the command window }

    DECLARE footer_txt

    footer_txt = get_user_message("RQR_FTR",1)

{specify the text string to be displayed upon        }
{successful completion of the command                }
{ie success_txt = "Sample Status Changed"            }

    DECLARE success_txt

    success_txt = get_user_message("RQR_SUCCESS",1)

{specify the text string to be displayed upon        }
{abortion from the command                           }
{ie abort_txt =   "Change Sample Status Aborted"     }

    DECLARE abort_txt

    abort_txt = get_user_message("RQR_ABORT",1)

{specify the sample statuses allowable within the    }
{browse list for this command if sample identity     }
{is prompted for.                                    }

    DECLARE samp_stat_allowed, job_stat_allowed, test_stat_allowed

    {*******************************************************************
    * v1.1Add status C as allowable status for a sample to be resampled
    * v1.2Add status UV as allowable status for a sample to be resampled
    ********************************************************************}
    {samp_stat_allowed = "AXR"}
    samp_stat_allowed = "AXRCUVH"
    job_stat_allowed  = "AXRVC"
    test_stat_allowed = " "


{SECTION B - INITIAL PROMPTS }


{Specify the tables that the initial prompts browse  }
{upon .                                              }

    DECLARE table_names ARRAY table_names

    table_names [ 1 ]    = "SAMPLE"

{Specify the initial prompt fields and the associated}
{prompt text strings                                 }

    DECLARE prompt_text ARRAY prompt_text

    prompt_text [ 1 ]    = get_user_message("RQR_ENTER_SID",1)

{SECTION C - DISPLAY INFORMATION}

{The user may require a header for the display area }
{Any descriptive text may be used here              }

    DECLARE mess_area_one

    mess_area_one = " "


{Specify the fields which require displaying with the}
{appropriate descriptive text string                 }

  DECLARE display_details ARRAY display_details ARRAY_SIZE ( 0 , 6 )

  display_details [ 1, MESSAGE_POSITION    ]   = get_user_message("RQR_SAMP_STAT",1)
  display_details [ 1, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 1, TABLE_NAME_POSITION ]   = "SAMPLE"
  display_details [ 1, FIELD_NAME_POSITION ]   = "STATUS"

  display_details [ 2, MESSAGE_POSITION    ]   = get_user_message("RQR_J_NAME",1)
  display_details [ 2, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 2, TABLE_NAME_POSITION ]   = "SAMPLE"
  display_details [ 2, FIELD_NAME_POSITION ]   = "JOB_NAME"

  display_details [ 3, MESSAGE_POSITION    ]   = get_user_message("RQR_L_DATE",1)
  display_details [ 3, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 3, TABLE_NAME_POSITION ]   = "SAMPLE"
  display_details [ 3, FIELD_NAME_POSITION ]   = "LOGIN_DATE"

{ SECTION D - FIELD ASSIGNMENT               }

{  This section is divided into three areas; }
{                                            }
{         (1) Interactive Update             }
{         (2) Non-interactive Update         }
{         (3) Status Change Update           }

{----------------------------------------------------}
{  1.   I N T E R A C T I V E   U P D A T E          }
{----------------------------------------------------}

{Specify the fields which require Updating and also  }
{require a user input.Define the text string         }
{associated with the input along with the browse type}


  {Update fields associated with prompt_table[1]}
  {Interactive_browse may be filled with either }
  {the browse table_name.field or a number to   }
  {define the size of the prompted field ie "10"}
  {or if no browse required " ".                }

{The user may require a header for the prompt area. }
{ Any descriptive text may be used here.            }

    DECLARE mess_area_two

    mess_area_two = " "

    DECLARE prompt_details  ARRAY prompt_details ARRAY_SIZE ( 0 , 6 )


{-----------------------------------------------------}
{   2.   S T A T U S    C H A N G E   U P D A T E     }
{-----------------------------------------------------}


{  Non interactive update of the status field        }
{  is defined within the array change_stat[n]        }
{  where n = the array element that defines the      }
{  table associated with the status in the array     }
{  prompt_table[n].                                  }
{  To update sample.status to "V" the user would     }
{  define change_stat[1] = "V" where prompt_table[1] }
{   = "SAMPLE"                                       }
{  If the status change should be back to the old    }
{  status change_stat[n] = "OLD_STATUS".             }

    DECLARE change_stat ARRAY change_stat ARRAY_SIZE (3) = " "


{*************************************************}
{             END  OF  USER  INPUT                }
{*************************************************}

aux_generator (  header_txt ,
         footer_txt ,
             mess_area_one ,
         mess_area_two  ,
                 samp_stat_allowed ,
                 job_stat_allowed ,
                 test_stat_allowed ,
         prompt_text       ,
         table_names       ,
                 change_stat                  ,
                 global ( "current_library" ) ,
                 Success_txt ,
         Abort_txt   ,
         TRUE      ,
         display_details ,
         prompt_details  ,
         "Read Transaction"  ,
         "Write Transaction")

RETURN

{******************************************************************************}
{                            Action Resample Routine                       }
{******************************************************************************}

ROUTINE resample_action

{
*   Decide whether to use workflow of VGL to create the resample
*
*******************************************************************************}

    DECLARE entity_temple_id ,
            resample_created

    entity_temple_id = SELECT sample.entity_template_id

    IF NOT BLANK ( entity_temple_id ) THEN

        lib_workflow_perform_action ( "SAMPLE"   ,
                                      "RESAMPLE" )

        COMMIT

        resample_created = TRUE

    ELSE

        resample_created = resample_action_vgl ()

    ENDIF

    RETURN ( resample_created )

ENDROUTINE

{******************************************************************************}
{                        Resample a sample created using VGL                   }
{******************************************************************************}

ROUTINE resample_action_vgl

    DECLARE reactivate_job,
            do_default,
            original_sid,
            resamp_text_id,
            resamp_templ_id,
            default_syntax,
            jname,
            jstat,
            samp_templ_id,
            sid,options,
            local_key,
            old_mode,
            original_sid_text,
            stat, checkstat,
            current_option,
            message_ptr,
            text_message,
            login_details,
            object

  samp_job_initialise ()

  original_sid      = SELECT sample.id_numeric
  original_sid_text = SELECT sample.id_text
  resamp_templ_id   = GLOBAL( "RESAMP_TEMPL_ID" )
  resamp_text_id    = GLOBAL( "RESAMP_TEXT_ID" )
  default_syntax    = "RESAMPLED"
  do_default        = ( index ( "NOT_SPECIFIED", resamp_templ_id ) = 1 ) OR
                      blank ( resamp_templ_id )

  { Check status of sample's job }

  jname = SELECT sample.job_name

  IF jname = " " THEN
    reactivate_job = FALSE
  ELSE
    jstat = SELECT job_header.job_status
        WHERE  job_name = jname
        ORDER ON job_name
    reactivate_job = NOT ( INDEX ( "AXR", jstat ) = 0 )
  ENDIF

  IF reactivate_job THEN
    IF confirm_with_message ( "RQR_CONF_REACT_JOB" ) THEN

      checkstat = SELECT job_header.job_status FOR UPDATE
                  WHERE  job_name = jname
                  ORDER ON job_name

      IF jstat = checkstat THEN

        { ASSIGN JOB WITH STATUS 'V' }

        START WRITE TRANSACTION "RQR - write reactivate job"
        CHANGE JOB STATUS TO "C", stat

        IF ( stat <> EMPTY ) THEN
          ROLLBACK
          flash_message ( stat, TRUE )
          RETURN ( NO_SAMPLE_LOGIN )
        ENDIF

        UPDATE job_header
        COMMIT

      ELSE
        RETURN ( NO_SAMPLE_LOGIN )
      ENDIF

    ELSE
      RETURN ( NO_SAMPLE_LOGIN )
    ENDIF

  ENDIF

  { Create new sample }

  IF   blank ( resamp_templ_id ) OR
     ( index ( "PARENT_RECORD", resamp_templ_id ) = 1 ) OR
     ( index ( "NOT_SPECIFIED", resamp_templ_id ) = 1 ) THEN

    { Use parent sample template }
    resamp_templ_id = SELECT sample.template_id

  ENDIF

  samp_templ_id = SELECT samp_tmpl_header.identity
          WHERE identity = resamp_templ_id
          ORDER ON identity

  IF ( samp_templ_id <> resamp_templ_id ) THEN
    flash_message ( "RQR_ERR_SAMP_TEMPL", TRUE )
    RETURN ( NO_SAMPLE_LOGIN )
  ENDIF

  IF ( index ( "PARENT_RECORD", resamp_text_id ) = 1 ) THEN

    resamp_text_id = SELECT samp_tmpl_header.syntax_id

        IF ( resamp_text_id = " "   ) OR
           ( resamp_text_id = EMPTY ) THEN

      resamp_text_id = default_syntax

    ENDIF

  ENDIF

  CREATE OBJECT SAMP_JOB_SAMPLE_LOGIN_CLASS, login_details

  login_details . template_id         = resamp_templ_id
  login_details . job_name            = SELECT sample . job_name
  login_details . syntax              = resamp_text_id
  login_details . use_template_syntax = FALSE

  IF do_default THEN

      { USE CURRENT PARENT SAMPLE VALUES }

      lib_utils_copy_from_table ( "SAMPLE"                      ,
                   object                       ,
                   login_details . field_values )

      { SUBSTITUTE DEFAULT SYSTEM VALUES }

      lib_utils_set_field_value ( login_details . field_values,
                      "AUTHORISATION_NOTES",  "" )
      lib_utils_set_field_value ( login_details . field_values,
                  "AUTHORISER",  " " )
      lib_utils_set_field_value ( login_details . field_values,
                  "AUTHORISE_DATE",  DATE(" "))
      lib_utils_set_field_value ( login_details . field_values,
                  "COMPARED",  FALSE )
      lib_utils_set_field_value ( login_details . field_values,
                      "COMPLETER",  " " )
      lib_utils_set_field_value ( login_details . field_values,
                  "COMP_PROD_VER",  " " )
      lib_utils_set_field_value ( login_details . field_values,
                      "DATERESAVAIL",  DATE(" "))
      lib_utils_set_field_value ( login_details . field_values,
                      "DATERESREQ",  DATE(" "))
      lib_utils_set_field_value ( login_details . field_values,
                  "DATE_STARTED",  DATE(" "))
      lib_utils_set_field_value ( login_details . field_values,
                  "DATE_AUTHORISED",  DATE(" "))
      lib_utils_set_field_value ( login_details . field_values,
                  "DATE_COMPLETED",  DATE(" "))
      lib_utils_set_field_value ( login_details . field_values,
                  "LOGIN_BY",  " " )
      lib_utils_set_field_value ( login_details . field_values,
                  "LOGIN_DATE",  NOW )
      lib_utils_set_field_value ( login_details . field_values,
                  "OLD_STATUS",  " " )
      lib_utils_set_field_value ( login_details . field_values,
                  "ON_SPEC",  FALSE )
      lib_utils_set_field_value ( login_details . field_values,
                  "ON_WKS",  FALSE )
      lib_utils_set_field_value ( login_details . field_values,
                  "PRODUCT_VERSION",  " " )
      lib_utils_set_field_value ( login_details . field_values,
                  "RE_SAMPLED",  FALSE )
      lib_utils_set_field_value ( login_details . field_values,
                  "STANDARD",  FALSE )
      lib_utils_set_field_value ( login_details . field_values,
                  "STARTER",  " "  )
      lib_utils_set_field_value ( login_details . field_values,
                  "STATUS",  " " )
      lib_utils_set_field_value ( login_details . field_values,
                  "TESTS_TO_DO", 0 )
  ELSE
      lib_utils_initialise_table_copy ( login_details . field_values )
      lib_utils_set_field_value ( login_details . field_values ,
                 "TEMPLATE_ID" , resamp_templ_id )
  ENDIF

  {REQUIRED BY SYNTAX RESAMPLED}
  lib_utils_set_field_value ( login_details . field_values,
                  "ID_TEXT" , original_sid_text )

  lib_utils_set_field_value ( login_details . field_values,
                  "ORIGINAL_SAMPLE" , original_sid )


  sid = login_details . login_a_sample ()
  IF sid = ERROR THEN
    flash_message ( "RQR_ERR_SAMP_NOT_LOGGED", TRUE )
    RETURN ( NO_SAMPLE_LOGIN )
  ENDIF

  IF ( ( sid = ERROR ) OR ( sid = EMPTY ) ) THEN
    flash_message ( "RQR_ERR_SAMP_NOT_LOGGED", TRUE )
    RETURN ( NO_SAMPLE_LOGIN )

  ENDIF


  { PRESENT OPTIONS TO EDIT TESTS / MODIFY FULL SAMPLE }

  message_fetch ( "RQR_OPT_1", message_ptr )

  IF global ( "SAMP_BROWSE" ) = "N" THEN
     message_add_parameter ( message_ptr, strip ( sid ))
  ELSE
     message_add_parameter ( message_ptr, strip ( SELECT sample . id_text ))
  ENDIF

  text_message = message_get_text ( message_ptr, 1 )

  ARRAY options ARRAYSIZE(3,3) = ""

  options [1,1] = "*"
  options [1,2] = text_message
  options [1,3] = "$RQR_OPTIONS"
  options [2,1] = "E"
  options [2,2] = GET_USER_MESSAGE("RQR_OPT_2" ,1)
  options [2,3] = "ETP"
  options [3,1] = "M"
  options [3,2] = GET_USER_MESSAGE("RQR_OPT_3" ,1)
  options [3,3] = "MFS"

  old_mode = GLOBAL( "LABTABLE_MODE" )
  SET GLOBAL "LABTABLE_MODE" TO TRUE

  REPEAT

    CHOOSE current_option OUTOF options at 28,10

    local_key = LASTKEY

    IF local_key <> "EXIT" THEN

      MENUPROC MENUNUMBER(current_option), sid

    ENDIF

  UNTIL ( local_key = "EXIT" )

  SET GLOBAL "LABTABLE_MODE" TO old_mode

RETURN ( SAMPLE_LOGGED )

ENDROUTINE {resample_action}

{******************************************************************************}
{                            Action Routine                                }
{******************************************************************************}

ROUTINE action ( VALUE val1, VALUE val2 )

    DECLARE return_value, sample_pushed, update_current_sample

    {****************************************************************
    * v1.1 Remove the check for the sample already been resampled
    * to allow the same sample to be resampled many times.
    * The IF, ELSE, ENDIF commented out
    ****************************************************************}

{***
    IF SELECT sample. re_sampled THEN

        flash_message ( "RQR_ALREADY_RESAMPLED", TRUE )
        return_value = FALSE

    ELSE
***}
        lock_retain ( "SAMPLE" )
        push_file_descriptor ( "SAMPLE", sample_pushed )

        ROLLBACK

        val1 = SELECT sample . id_numeric
               WHERE  id_numeric = val1

        update_current_sample = resample_action ( )

        pop_file_descriptor ( sample_pushed )
        lock_unretain ( "SAMPLE" )
        START WRITE TRANSACTION "RQR - update original sample"

        IF update_current_sample THEN

            ASSIGN sample.re_sampled = TRUE
            return_value = TRUE

        ELSE

            return_value = FALSE

        ENDIF
{***
    ENDIF
***}

    RETURN ( return_value )

ENDROUTINE {action}

{******************************************************************************}
{                            ID Mandatory Array                                }
{******************************************************************************}

ROUTINE prompt_mandatory_array ( VALUE prompt_num )

    DECLARE mand_array

    ARRAY mand_array ARRAYSIZE ( 0, 3 )

    array_select_add ( mand_array      ,
                       ARRAY_SELECT_EQ ,
                       "RE_SAMPLED"    ,
                       FALSE           )

    RETURN ( mand_array )

ENDROUTINE

{******************************************************************************}
{                            Select Routine                                }
{******************************************************************************}

ROUTINE select_key ( VALUE line     , display_id      ,
                     VALUE first_id , VALUE second_id )

{menuprocs ...etc}

ENDROUTINE

{******************************************************************************}
{                           Validation Routine                             }
{******************************************************************************}

ROUTINE validation ( display_id )

RETURN ( TRUE )

ENDROUTINE

{******************************************************************************}
{******************************************************************************}
{******************************************************************************}
