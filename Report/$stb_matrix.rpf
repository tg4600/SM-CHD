{==============================================================================}
{                                                                              }
{  TENSOR TECHNOLOGIES                                                         }
{                                                                              }
{  Filename         : $STB_MATRIX.RPF                                          }
{  Version          : 1.0                                                      }
{  Document Ref.    :                                                          }
{  Author           : John O' Gorman                                           }
{  Date Created     : 20-May-97                                                }
{  Responsible      : Tensor Technologies Limited                              }
{  Description      : This library contains any information nesscary to        }
{                     maintain and initialise the matrix object and its        }
{                     associated objects.                                      }
{                                                                              }
{==============================================================================}

SET NAME "DEFER/"

SET COMPILE_OPTION DECLARE

SET NOTPROTECTED

JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_GENERAL
JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_WINDOW


JOIN LIBRARY $LABTABLIB
JOIN LIBRARY $LIB_DB
JOIN LIBRARY $LIB_INVENTORY
JOIN LIBRARY $LIB_UNIT
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $PROMPT_QTY_UNIT
JOIN LIBRARY $PROMPT_TAB
JOIN LIBRARY $PROMPT_TOOLBAR
JOIN LIBRARY $STB_GLBL
JOIN LIBRARY $STB_HEADER_LIB
JOIN LIBRARY $STB_LIB
JOIN LIBRARY $STB_LIB_MATRIX
JOIN LIBRARY $STB_LOGIN
JOIN LIBRARY $STB_PRODUCT_PULL

CONSTANT FORMAT_3_DP = "999999999.999"

DECLARE matrix_object, do_once

{******************************************************************************}

GLOBAL ROUTINE get_matrix_object ( matrix_address )
{
* Returns the matrix object
*
* Parameters : matrix_address - the matrix object
*
*******************************************************************************}

    IF variable_is_assigned ( matrix_object ) THEN
        matrix_address = matrix_object
    ENDIF

ENDROUTINE
    
{******************************************************************************}

ROUTINE setup_layer_factor_class
{
* Defines the Stability Layer Factor Class
*
* Parameters : None
*
*******************************************************************************}

    DEFINE CLASS "STB_LAYER_FACTORS"

        INHERIT "STD_OBJECT_DATABASE"

        INITIALISATION

    END CLASS

ENDROUTINE
    
{******************************************************************************}

ROUTINE stb_layer_factors_class_initialisation ( self )
{
* Stb Layer Factors Class Initialisation
*
* Parameters : self , Stb Layer Factors Object
*
*******************************************************************************}

    self . initialise ( "PDS_AXIS_POINT" )

    self . add_index ( "AXIS_POS" )

ENDROUTINE

{******************************************************************************}

ROUTINE setup_time_factor_class
{
* Defines the Stability Time Factors Class
*
* Parameters : None
*
*******************************************************************************}

    DEFINE CLASS "STB_TIME_FACTORS"

        INHERIT "STD_OBJECT_DATABASE"

        INITIALISATION

    END CLASS

ENDROUTINE
    
{******************************************************************************}

ROUTINE stb_time_factors_class_initialisation ( self )
{
* Stb Time Factors Class Initialisation
*
* Parameters : self , Stb Time Factors Object
*
*******************************************************************************}

    self . initialise ( "PDS_AXIS_POINT" )

    self . add_index ( "AXIS_POS" )

ENDROUTINE

{******************************************************************************}

ROUTINE setup_c_factor_class
{
* Defines the Stability C Factors Class
*
* Parameters : None
*
*******************************************************************************}

    DEFINE CLASS "STB_C_FACTORS"

        INHERIT "STD_OBJECT_DATABASE"

        INITIALISATION

    END CLASS

ENDROUTINE

{******************************************************************************}

ROUTINE stb_c_factors_class_initialisation ( self )
{
* Stb C Factors Class Initialisation
*
* Parameters : self , Stb C Factors Object
*
*******************************************************************************}

    self . initialise ( "PDS_AXIS_POINT" )

    self . add_index ( "AXIS_POS" )

ENDROUTINE
    
{******************************************************************************}

ROUTINE setup_matrix_pulls_class
{
* Defines the Stability Matrix Pulls Class
*
* Parameters : None
*
*******************************************************************************}

    DEFINE CLASS "STB_MATRIX_PULLS"

        INHERIT "STD_OBJECT_DATABASE"

        INITIALISATION

        PROPERTIES
            "del_pull_orig_ndx"

    END CLASS

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_pulls_class_initialisation ( self )
{
* Stb Matrix Pulls Class Initialisation
*
* Parameters : self , Stb Matrix Pulls Object
*
*******************************************************************************}

    ARRAY self . del_pull_orig_ndx ARRAYSIZE ( 0 )

ENDROUTINE

{******************************************************************************}

ROUTINE setup_sample_class
{
* Defines the Stability Sample Class
*
* Parameters : None
*
*******************************************************************************}

    DEFINE CLASS "STB_SAMPLE"

        INITIALISATION

        PROPERTIES
            "parent_matrix" ,
            "sample_db"
    END CLASS

ENDROUTINE

{******************************************************************************}

ROUTINE stb_sample_class_initialisation ( self )
{
* Stb Sample Class Initialisation
*
* Parameters : self , Stb Sample Object
*
*******************************************************************************}

    self . parent_matrix = EMPTY
    object_create ( self . sample_db, "STD_OBJECT_DATABASE" )
    self . sample_db . initialise ( "SAMPLE" )

ENDROUTINE

{******************************************************************************}

ROUTINE setup_basetime_class
{
* Defines the Stability Basetimes Class
*
* Parameters : None
*
*******************************************************************************}

    DEFINE CLASS "STB_BASETIMES"

        INITIALISATION

        PROPERTIES
            "basetime_db"

    END CLASS

ENDROUTINE

{******************************************************************************}

ROUTINE stb_basetimes_class_initialisation ( self )
{
* Stb Basetimes Class Initialisation
*
* Parameters : self , Stb Basetimes Object
*
*******************************************************************************}

    object_create ( self . basetime_db, "STD_OBJECT_DATABASE" )
    self . basetime_db . initialise ( "PDS_BASETIME" )

ENDROUTINE

{******************************************************************************}

ROUTINE setup_stb_matrix_cell_class
{
* Defines the Stb Matrix Cell Class
*
* Parameters : None
*
*******************************************************************************}

    DEFINE CLASS "STB_MATRIX_CELL"

        INITIALISATION

        PROPERTIES
            "pull_info",
            "pull_records",
            "current_pull"

    END CLASS

ENDROUTINE
{******************************************************************************}

ROUTINE stb_matrix_cell_class_initialisation ( self )
{
* Stb Matrix Cell Class Initialisation
*
* Parameters : self , Stb Matrix Cell Object
*
*******************************************************************************}

    ARRAY self . pull_info    = ""
    ARRAY self . pull_records
    
    self . current_pull = 0

ENDROUTINE

{******************************************************************************}

ROUTINE setup_matrix_class
{
* Defines the matrix class
*
* Parameters : None
*
*******************************************************************************}

    prompt_toolbar_initialise      ( )
    set_up_std_prompt_tab_class    ( )
    prompt_qty_unit_initialisation ( )

    DEFINE CLASS "STB_MATRIX_FORM"

        INHERIT PROMPT_CLASS_FORM

        INITIALISATION

        PROPERTIES
            "parent_matrix" ,
            "toolbar" ,
            "tab" ,
            "button_pull_info" ,
            "button_overview"

        ACTIONS
            "create_toolbar"             ,
            "repaste"                    ,
            "validation"                 ,
            "create_tab"                 ,
            "add_tab_forms_from_array"

    END CLASS


    DEFINE CLASS "STB_MATRIX"

        PROPERTIES
            "mode"                          , { add, modify or display }
            "matrix_type"                   , { protocol or study      }
            "header_id"                     ,
            "header_ver"                    ,
            "header_table"                  ,
            "pull_table"                    ,
            "layer_factors"                 ,
            "time_factors"                  ,
            "c_factors"                     ,
            "basetimes"                     ,
            "pulls"                         ,
            "samples"                       ,
            "tab_forms"                     ,
            "matrix_form"                   ,
            "command_form"                  ,
            "pull_info_form"                ,
            "overview_form"                 , 
            "product_info_form"             , { inventory product info form }
            "current_layer"                 ,
            "current_time"                  ,
            "current_c"                     ,
            "current_pull"                  ,
            "allow_save"                    , { only used to indicate of the mod screen has opened }
            "std_cell_syn"                  ,
            "copy_value"                    ,
            "time_xaxis"                    , { if true time factor is xaxis   }
            "copy_range"                    

        ACTIONS
        
            "is_protocol"                   ,
            "is_study"                      ,
            "is_active_study"               ,
            "is_display_only"               ,
            "layer_count"                   ,
            "time_count"                    ,
            "condition_count"               ,
            "get_pull_key0"                 ,
            "get_pull"                      ,
            "get_current_cell_pull_key0"    ,
            "get_current_cell"              ,
            "get_current_pull_key0"         ,
            "get_pull_grid_by_position"     ,
            "get_current_pull_grid"         ,
            "current_cell_is_active"        ,
            "pull_has_sample"               ,
            "current_pull_has_sample"       ,
            "get_layer_id_at_position"      ,
            "get_time_id_at_position"       ,
            "get_condition_id_at_position"  ,
            "get_current_layer_id"          ,
            "get_current_time_id"           ,
            "get_current_condition_id"      ,
            "get_timezero_pull_key0"        ,
            "get_timezero_pull"             ,
            "get_pull_by_key0"              ,
            "get_current_cell_pull"         ,
            "get_current_cell_pull_count"   ,
            "get_cell_pull_count"           ,
            "get_product_unit"              ,
            "get_product"                   ,
            "factor_exists"                 ,
            "time_id_exists"                ,
            "condition_id_exists"           ,
            "layer_id_exists"               ,
            "pull_is_pending"               ,
            "pull_is_available"             ,
            "get_condition_pull_count"      ,
            "get_condition_pulled_count"    ,
            "get_condition_pull_amount"     ,
            "get_condition_pulled_amount"   ,
            "get_condition_spare_amount"    ,
            "get_condition_object"          ,
            "format_quantity"               ,
            
            "print_pull_sample_label"
                IN LIBRARY "$stb_print_label" ,

            "create_propagate_form"
                IN LIBRARY "$stb_lib_matrix" ,

            "set_pull_property_visible"
                IN LIBRARY "$stb_lib_matrix" ,

            "is_pull_property_visible"
                IN LIBRARY "$stb_lib_matrix" ,
                
            "toggle_pull_property_visibility"
                IN LIBRARY "$stb_lib_matrix" ,

            "set_matrix_overview_visible"
                IN LIBRARY "$stb_lib_matrix" ,

            "is_matrix_overview_visible"
                IN LIBRARY "$stb_lib_matrix" ,

            "toggle_matrix_overview_visibility"
                IN LIBRARY "$stb_lib_matrix" ,

            "update_pull_property_sheet"
                IN LIBRARY "$stb_lib_pullmods" ,

            "update_overview_property_sheet"
                IN LIBRARY "$stb_lib_matrix" ,

            "setup_layers"
                 IN LIBRARY "$stb_lib_matrix",

            "create_matrix_form"
                 IN LIBRARY "$stb_lib_matrix",

            "create_pull_form"
                IN LIBRARY "$stb_lib_pullmods",

            "create_overview_form"
                IN LIBRARY "$stb_lib_matrix",

            "rebuild_matrix"
                 IN LIBRARY "$stb_lib_matrix",

            "get_current_pull"
                IN LIBRARY "$stb_lib_matrix" ,

            "get_current_pull_number"
                IN LIBRARY "$stb_lib_matrix" ,

            "get_current_cell_pull"
                IN LIBRARY "$stb_lib_matrix" ,

            "get_pull_syntax"
                IN LIBRARY "$stb_lib_matrix" ,

            "get_pull_sample"
                IN LIBRARY "$stb_lib_sample" ,
                
            "get_current_pull_sample"
                IN LIBRARY "$stb_lib_sample" ,
                
            "pull_assign_sample"
                IN LIBRARY "$stb_lib_sample" ,

            "insert_pull_in_current"
                IN LIBRARY "$stb_lib_pullmods",

            "delete_current_pull"
                IN LIBRARY "$stb_lib_pullmods",

            "delete_pull"
                IN LIBRARY "$stb_lib_pullmods",

            "insert_pulls"
                IN LIBRARY "$stb_grid_click" ,
                
            "remove_time_factor_by_pos"
                IN LIBRARY "$stb_lib_matrix",

            "remove_c_factor_by_pos"
                IN LIBRARY "$stb_lib_matrix",

            "option_new_c_factor_before"
                IN LIBRARY "$stb_lib_matrix",

            "option_new_c_factor_options"
                IN LIBRARY "$stb_lib_matrix",

            "option_new_c_factor_after"
                IN LIBRARY "$stb_lib_matrix",

            "option_new_time_factor_before"
                IN LIBRARY "$stb_lib_matrix",

            "option_new_time_factor_after"
                IN LIBRARY "$stb_lib_matrix",

            "option_new_time_factor_options"
                IN LIBRARY "$stb_lib_matrix",

            "option_new_layer_factor_before"
                IN LIBRARY "$stb_lib_matrix",

            "option_new_layer_factor_after"
                IN LIBRARY "$stb_lib_matrix",

            "option_new_layer_factor_options"
                IN LIBRARY "$stb_lib_matrix",

            "option_remove_time_factor"
                IN LIBRARY "$stb_lib_matrix",

            "option_remove_c_factor"
                IN LIBRARY "$stb_lib_matrix",

            "option_remove_layer_factor"
                IN LIBRARY "$stb_lib_matrix",

            "option_modify_column_width"
                IN LIBRARY "$stb_lib_matrix",

            "option_modify_cell_syntax"
                IN LIBRARY "$stb_lib_matrix",

            "option_update_global_pull"
                IN LIBRARY "$stb_lib_matrix",

            "option_insert_pull"
                IN LIBRARY "$stb_lib_pullmods",

            "option_delete_pull"
                IN LIBRARY "$stb_lib_pullmods",

            "option_copy_current_cell"
                IN LIBRARY "$stb_lib_pullmods",

            "option_timezero_properties"
                IN LIBRARY "$stb_lib_pullmods",
                
            "option_toggle_cell_activation"
                IN LIBRARY "$stb_lib_matrix",
                
            "option_toggle_condition_activation"
                IN LIBRARY "$stb_lib_matrix",

            "option_basetime_properties"
                IN LIBRARY "$stb_basetime",

            "option_graph"
                IN LIBRARY "$stb_graph" ,

            "option_sample_assign"
                IN LIBRARY "$stb_lib_sample" ,

            "option_sample_authorise"
                IN LIBRARY "$stb_lib_sample" ,

            "option_sample_cancel"
                IN LIBRARY "$stb_lib_sample" ,

            "option_sample_actions"
                IN LIBRARY "$stb_lib_sample" ,

            "option_sample_label"
                IN LIBRARY "$stb_print_label" ,

            "option_sample_properties"
                IN LIBRARY "$stb_lib_sample" ,

            "option_sample_receive"
                IN LIBRARY "$stb_lib_sample" ,

            "option_sample_result_entry"
                IN LIBRARY "$stb_lib_sample" ,

            "option_copy_selected_pulls"
                IN LIBRARY "$stb_grid_click" ,
                
            "option_paste_pulls"
                IN LIBRARY "$stb_grid_click" ,

            "option_propagate_current"
                IN LIBRARY "$stb_grid_click" ,
                
            "option_delete_selected_pulls"
                IN LIBRARY "$stb_grid_click" ,

            "option_insert_pulls"
                IN LIBRARY "$stb_grid_click" ,

            "can_copy_current_cell"
                IN LIBRARY "$stb_lib_commands" ,

            "can_delete_pull"
                IN LIBRARY "$stb_lib_commands" ,

            "can_graph"
                IN LIBRARY "$stb_lib_commands" ,

            "can_insert_pull"
                IN LIBRARY "$stb_lib_commands" ,

            "can_new_c_factor_after"
                IN LIBRARY "$stb_lib_commands" ,

            "can_new_c_factor_before"
                IN LIBRARY "$stb_lib_commands" ,

            "can_new_c_factor_options"
                IN LIBRARY "$stb_lib_commands" ,

            "can_new_layer_factor_after"
                IN LIBRARY "$stb_lib_commands" ,

            "can_new_layer_factor_before"
                IN LIBRARY "$stb_lib_commands" ,

            "can_new_layer_factor_options"
                IN LIBRARY "$stb_lib_commands" ,

            "can_new_time_factor_after"
                IN LIBRARY "$stb_lib_commands" ,

            "can_new_time_factor_before"
                IN LIBRARY "$stb_lib_commands" ,

            "can_new_time_factor_options"
                IN LIBRARY "$stb_lib_commands" ,

            "can_remove_c_factor"
                IN LIBRARY "$stb_lib_commands" ,

            "can_remove_layer_factor"
                IN LIBRARY "$stb_lib_commands" ,

            "can_remove_time_factor"
                IN LIBRARY "$stb_lib_commands" ,

            "can_sample_assign"
                IN LIBRARY "$stb_lib_commands" ,

            "can_sample_authorise"
                IN LIBRARY "$stb_lib_commands" ,

            "can_sample_cancel"
                IN LIBRARY "$stb_lib_commands" ,

            "can_sample_label"
                IN LIBRARY "$stb_lib_commands" ,

            "can_sample_properties"
                IN LIBRARY "$stb_lib_commands" ,

            "can_sample_receive"
                IN LIBRARY "$stb_lib_commands" ,

            "can_sample_result_entry"
                IN LIBRARY "$stb_lib_commands" ,

            "can_copy_selected_pulls"
                IN LIBRARY "$stb_grid_click" ,
                
            "can_paste_pulls"
                IN LIBRARY "$stb_grid_click" ,

            "can_propagate_current"
                IN LIBRARY "$stb_grid_click" ,

            "can_insert_pulls"
                IN LIBRARY "$stb_grid_click" ,
                
            "can_delete_selected_pulls"
                IN LIBRARY "$stb_grid_click" ,

            "can_toggle_cell_activation"
                IN LIBRARY "$stb_lib_commands" ,

            "can_toggle_condition_activation"
                IN LIBRARY "$stb_lib_commands" ,

            "can_sample_actions"
                IN LIBRARY "$stb_lib_commands" ,

            "add_toolbuttons_dimensioning"
                IN LIBRARY "$stb_lib_commands" ,
                
            "add_toolbuttons_presentation"
                IN LIBRARY "$stb_lib_commands" ,
                
            "add_toolbuttons_manipulation"
                IN LIBRARY "$stb_lib_commands" ,
                
            "add_toolbuttons_sample_tools"
                IN LIBRARY "$stb_lib_commands" ,
                
            "update_screen_state"
                IN LIBRARY "$stb_lib_commands" ,

            "load_basetimes"
                IN LIBRARY "$stb_lib_matrix"   ,

            "load_factors"
                IN LIBRARY "$stb_lib_matrix"   ,

            "load_matrix_pulls"
                IN LIBRARY "$stb_lib_matrix"   ,

            "load_pull_samples"
                IN LIBRARY "$stb_lib_matrix"   ,

            "load_pull_sample"
                IN LIBRARY "$stb_lib_matrix"   ,

            "load_sample"
                IN LIBRARY "$stb_lib_matrix"   ,

            "get_factor_list"
                IN LIBRARY "$stb_lib_matrix"   ,

            "new_time_factor_at"
                IN LIBRARY "$stb_lib_matrix" ,

            "new_condition_factor_at"
                IN LIBRARY "$stb_lib_matrix" ,

            "new_layer_factor_at"
                IN LIBRARY "$stb_lib_matrix" ,

            "assign_sample_to_pull"
                IN LIBRARY "$stb_lib_sample" ,

            "save_sample_information"
                 IN LIBRARY "$stb_lib_sample",

            "create_timezero_pull"
                IN LIBRARY "$stb_lib_pullmods",

            "create_pull"
                IN LIBRARY "$stb_lib_pullmods",

            "allocate_stock"
                IN LIBRARY "$stb_header_lib"
                
        INITIALISATION

    END CLASS

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_class_initialisation ( self )
{
*
* Initialises the Stb Matrix class
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    OBJECT_CREATE ( self . layer_factors, "STB_LAYER_FACTORS" )
    OBJECT_CREATE ( self . time_factors , "STB_TIME_FACTORS"  )
    OBJECT_CREATE ( self . c_factors    , "STB_C_FACTORS"     )
    OBJECT_CREATE ( self . pulls        , "STB_MATRIX_PULLS"  )
    OBJECT_CREATE ( self . samples      , "STB_SAMPLE"        )
    OBJECT_CREATE ( self . basetimes    , "STB_BASETIMES"     )

    ARRAY self . tab_forms
    ARRAY self . std_cell_syn

    self . allow_save = FALSE

    self . copy_range = EMPTY
  
    self . mode                 = EMPTY
    self . matrix_type          = EMPTY
    self . header_id            = EMPTY
    self . header_ver           = EMPTY
    self . header_table         = EMPTY
    self . pull_table           = EMPTY
    self . matrix_form          = EMPTY
    self . command_form         = EMPTY
    self . pull_info_form       = EMPTY
    self . overview_form        = EMPTY
    self . product_info_form    = EMPTY
    self . current_layer        = EMPTY
    self . current_time         = EMPTY
    self . current_c            = EMPTY
    self . current_pull         = EMPTY
    self . time_xaxis           = EMPTY

ENDROUTINE
    
{*****************************************************************************}

ROUTINE stb_matrix_action_is_protocol( self )
{
*
* Returns True if the matrix is a protocol
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    RETURN( self . matrix_type = "P" )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_is_study( self )
{
*
* Returns True if the matrix is a study
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    RETURN( self . matrix_type = "S" )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_is_active_study( self )

{
* Returns True if the matrix is a study and it is active
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    DECLARE is_active_study

    is_active_study = FALSE

    IF self . is_study( ) THEN
        is_active_study = ( ( SELECT pds_study . status <> EMPTY ) AND
                            ( INDEX( "OS", SELECT pds_study . status ) = 0 ) )
    ENDIF

    RETURN( is_active_study )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_is_display_only( self )

{
* Returns True if the matrix is display only
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    RETURN( self . mode = "DISPLAY" )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_cell_pull_count(       self          ,
                                               VALUE layer_id      ,
                                               VALUE time_id       ,
                                               VALUE condition_id  )
{
* Returns the number of pulls in the specified cell
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    DECLARE count, pull, pull_number

    count = 0

    pull_number = 1
    pull = self . get_pull( layer_id, time_id, condition_id, pull_number )
    
    WHILE pull <> EMPTY DO

        IF NOT pull . deleted THEN
            count = count + 1
        ENDIF

        pull_number = pull_number + 1
        pull = self . get_pull( layer_id, time_id, condition_id, pull_number )

    ENDWHILE

    RETURN ( count )

ENDROUTINE


{*****************************************************************************}

ROUTINE stb_matrix_action_get_product_unit( self )
{
* Returns the default unit of the specified product or EMPTY if not defined
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    DECLARE unit, product_id

    unit = EMPTY

    product_id = self . get_product ( )

    IF NOT BLANK( product_id ) THEN
        unit = inventory_get_unit( product_id )
    ENDIF

    RETURN( unit )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_product( self )
{
* Returns the specified product or EMPTY if not defined
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    RETURN( SELECT 'self . header_table' . product_id )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_current_cell_pull_count( self )
{
* Returns the number of pulls in the current cell
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    DECLARE layer_id, time_id, condition_id

    layer_id     = self . get_current_layer_id( )
    time_id      = self . get_current_time_id( )
    condition_id = self . get_current_condition_id( )

    RETURN ( self . get_cell_pull_count( layer_id      ,
                                         time_id       ,
                                         condition_id  ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_pull_key0(       self          ,
                                         VALUE layer_id      ,
                                         VALUE time_id       ,
                                         VALUE condition_id  ,
                                         VALUE pull_number   )
{
* Returns  cell key0 string for the given layer, time, condition and
* pull number
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    DECLARE key

    ARRAY key

    IF self . is_protocol( ) THEN
    
        key[1] = self . header_id
        key[2] = self . header_ver
        key[3] = layer_id
        key[4] = time_id
        key[5] = condition_id
        key[6] = pull_number
        
    ELSE
    
        key[1] = self . header_id
        key[2] = layer_id
        key[3] = time_id
        key[4] = condition_id
        key[5] = pull_number
        
    ENDIF

    RETURN ( lib_db_array_to_padded ( self . pull_table, key ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_pull(       self          ,
                                    VALUE layer_id      ,
                                    VALUE time_id       ,
                                    VALUE condition_id  ,
                                    VALUE pull_number   )
{
* Returns pull record for the given layer, time, condition and pull number
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    DECLARE key0, pull_record, pull_db

    key0 = self . get_pull_key0( layer_id, time_id, condition_id, pull_number )
  
    pull_db = self . pulls 
   
    pull_record = pull_db . get_by_index ( "KEY0", key0 )

    RETURN( pull_record )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_timezero_pull(       self          ,
                                             VALUE layer_id      ,
                                             VALUE pull_number   )
{
* Returns timezero pull for the given layer and pull number
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    RETURN( self . get_pull( layer_id     ,
                             "__TIMEZERO" ,
                             "__TIMEZERO" ,
                             pull_number  ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_current_pull ( self )
{
* Return the currently selected pull's object record or EMPTY
*
* Parameters : self , Stb Matrix object
*
*******************************************************************************}

    DECLARE current_key0, pull

    pull = EMPTY
   
    current_key0 = self . get_current_pull_key0 ( )
    
    IF current_key0 <> ERROR THEN
    
        pull = self . get_pull_by_key0( current_key0 )
    
    ENDIF
    
    RETURN( pull )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_timezero_pull_key0(       self        ,
                                                  VALUE layer_id    ,
                                                  VALUE pull_number )
{
* Return the timezero pull key corresponding to the passed layer and pull
* number.
*
* Parameters : self , Stb Matrix object
*
*******************************************************************************}

    RETURN( self . get_pull_key0( layer_id      ,
                                  "__TIMEZERO"  ,
                                  "__TIMEZERO"  ,
                                  pull_number   ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_pull_by_key0( self, VALUE key0 )
{
* Return the pull corresponding to the passed key0
*
* Parameters : self , Stb Matrix object
*
*******************************************************************************}

    DECLARE pull_db, pull

    pull_db = self . pulls
    
    pull_db . set_by_index ( "KEY0", key0 )
    pull = pull_db . current
    
    RETURN( pull )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_current_cell( self )
{
* Returns current cell object or EMPTY
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    DECLARE current_grid, current_col, current_row, current_cell

    current_cell = EMPTY

    current_grid = self . get_current_pull_grid( )

    IF current_grid <> EMPTY THEN

        current_col = current_grid . current_column
        current_row = current_grid . current_row

        current_cell = current_grid . userinfo [ current_col, current_row ] 

    ENDIF   

    RETURN ( current_cell )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_current_cell_pull_key0( self, VALUE pull_number )
{
* Returns current cell key0 string for the given pull number
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    DECLARE pull_ndx, layer_id, time_id, condition_id

    pull_ndx = ERROR

    layer_id     = self . get_current_layer_id( )
    time_id      = self . get_current_time_id( )
    condition_id = self . get_current_condition_id( )

    IF ( layer_id     <> EMPTY ) AND
       ( time_id      <> EMPTY ) AND
       ( condition_id <> EMPTY ) THEN 
       
        pull_ndx = self . get_pull_key0( layer_id     ,
                                         time_id      ,
                                         condition_id ,
                                         pull_number  )
        

    ENDIF

    RETURN ( pull_ndx )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_current_pull_key0( self )
{
* Returns current pull's key0 string
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    RETURN ( self . get_current_cell_pull_key0( self . current_pull ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_layer_count( self )
{
*
* Returns number of layers in matrix
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    RETURN( undel_size_db ( self . layer_factors ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_time_count( self )
{
*
* Returns number of time factors in matrix
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    RETURN( undel_size_db ( self . time_factors ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_condition_count( self )
{
*
* Returns number of conditions in matrix
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    RETURN( undel_size_db ( self . c_factors ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_pull_grid_by_position( self, VALUE pos )
{
*
* Returns pull grid object at passed position or EMPTY if none
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    DECLARE tab_prompt, grid
    
    grid = EMPTY
    
    tab_prompt = self . matrix_form . tab

    IF ( size_of_array( tab_prompt . forms ) > 0    ) AND
       ( pos <= size_of_array( tab_prompt . forms ) ) THEN
        
        grid = tab_prompt . forms [ pos ] . prompt_objects [ 1 ] 
    
    ENDIF

    RETURN( grid )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_current_pull_grid( self )
{
*
* Returns current layer grid object
*
* Parameters : self , Stb Matrix Object
*
******************************************************************************}

    DECLARE current_tab

    current_tab = self . matrix_form . tab . selected

    RETURN( self . get_pull_grid_by_position( current_tab ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_current_cell_is_active ( self ) 
{
* Returns true if the current cell is active
*
* Parameters : self , Stb Matrix object
*   
******************************************************************************}

    DECLARE current_pull
    
    current_pull = self . get_current_pull( )
    
    RETURN ( SELECT 'current_pull . table' . active IN OBJECT current_pull )
    
ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_current_pull_has_sample ( self ) 
{
* Returns true if the current pull has a sample
*
* Parameters : self , Stb Matrix object
*   
******************************************************************************}

    RETURN( self . get_current_pull_sample( ) <> EMPTY )

    
ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_pull_has_sample ( self, pull_record ) 
{
* Returns true if the passed pull has a sample
*
* Parameters : self        , Stb Matrix object
*              pull_record , pull object record
*   
******************************************************************************}

    RETURN( self . get_pull_sample( pull_record ) <> EMPTY )
    
ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_layer_id_at_position ( self, VALUE pos ) 
{
* Returns the identity corresponding to the passed position
*
* Parameters : self , Stb Matrix object
*              pos  , visible position
*
******************************************************************************}

    RETURN( get_correct_factor ( self . layer_factors , pos ) )
    
ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_time_id_at_position ( self, VALUE pos ) 
{
* Returns the identity corresponding to the passed position
*
* Parameters : self , Stb Matrix object
*              pos  , visible position
*
******************************************************************************}

    RETURN( get_correct_factor ( self . time_factors, pos ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_condition_id_at_position ( self, VALUE pos ) 
{
* Returns the identity corresponding to the passed position
*
* Parameters : self , Stb Matrix object
*              pos  , visible position
*
******************************************************************************}
    
    RETURN( get_correct_factor ( self . c_factors , pos ) )
    
ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_current_layer_id( self ) 
{
* Returns the identity corresponding to the current position
*
* Parameters : self , Stb Matrix object
*
******************************************************************************}

    RETURN( self . get_layer_id_at_position ( self . current_layer ) )
    
ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_current_time_id( self ) 
{
* Returns the identity corresponding to the current position
*
* Parameters : self , Stb Matrix object
*
******************************************************************************}

    RETURN( self . get_time_id_at_position ( self . current_time ) )
    
ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_current_condition_id( self ) 
{
* Returns the identity corresponding to the current position
*
* Parameters : self , Stb Matrix object
*
******************************************************************************}

    RETURN( self . get_condition_id_at_position ( self . current_c ) )
    
ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_factor_exists ( self, factor_db, VALUE factor_id )
{
* Returns True if the passed time factor id exists
*
* Parameters : self      , Stb Matrix object
*              factor_db , factor object database to search within
*              factor_id   , factor id
*
*******************************************************************************}

    DECLARE count, test_id, exists

    exists = FALSE

    count = 1
    WHILE ( count <= factor_db . size () ) AND NOT exists DO

        factor_db . set_by_number ( count )

        IF NOT ( factor_db . current . deleted ) THEN

            test_id = object_select_field ( factor_db . current,
                                            "PDS_AXIS_POINT"   ,
                                            "AXIS_POINT_NAME"  )

            IF ( test_id = factor_id ) THEN
            
                exists = TRUE
                
            ENDIF

        ENDIF

        count = count + 1

    ENDWHILE

    RETURN ( exists )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_time_id_exists ( self, VALUE time_id )
{
* Returns True if the passed time factor id exists
*
* Parameters : self    , Stb Matrix object
*              time_id , Time factor id
*
*******************************************************************************}

    RETURN ( self . factor_exists ( self . time_factors, time_id ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_condition_id_exists ( self, VALUE condition_id )
{
* Returns True if the passed condition factor id exists
*
* Parameters : self         , Stb Matrix object
*              condition_id , Time factor id
*
*******************************************************************************}

    RETURN ( self . factor_exists ( self . c_factors, condition_id ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_layer_id_exists ( self, VALUE layer_id )
{
* Returns True if the passed layer factor id exists
*
* Parameters : self     , Stb Matrix object
*              layer_id , layer factor id
*
*******************************************************************************}

    RETURN ( self . factor_exists ( self . layer_factors, layer_id ) )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_pull_is_pending ( self, pull_record )
{
* Returns True if the passed record is pending. (i.e no sample)
*
* Parameters : self        , Stb Matrix object
*              pull_record , Pull record
*
*******************************************************************************}

    DECLARE pending

    IF self . is_protocol( ) THEN
    
        pending = TRUE
        
    ELSE

        pending = ( SELECT pds_study_pull . cell_disp IN OBJECT pull_record = "P" )
        
    ENDIF
    
    RETURN( pending )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_pull_is_available ( self, pull_record )
{
* Returns True if the passed record is available. (i.e has associated sample )
*
* Parameters : self        , Stb Matrix object
*              pull_record , Pull record
*
*******************************************************************************}

    DECLARE available

    IF self . is_protocol( ) THEN
    
        available = FALSE
        
    ELSE

        available = ( SELECT pds_study_pull . cell_disp IN OBJECT pull_record = "V" )
        
    ENDIF
    
    RETURN( available )

ENDROUTINE


{*****************************************************************************}

ROUTINE stb_matrix_action_get_condition_pull_count(       self         ,
                                                    VALUE condition_id ,
                                                    VALUE layer_id     )

{
* Returns the number of pulls for the passed condition and layer
*
* Parameters : self        , Stb Matrix object
*
******************************************************************************}

    DECLARE count, pull_db, curr_cond, curr_layer

    pull_db = self . pulls

    count = 0
    pull_db . set_first()
    WHILE pull_db . current <> EMPTY DO

        curr_cond = SELECT 'pull_db . table' . c_factor
                        IN OBJECT pull_db . current
                        
        curr_layer = SELECT 'pull_db . table' . layer_factor
                         IN OBJECT pull_db . current

        IF NOT ( pull_db . current . deleted ) AND
               ( curr_cond  = condition_id   ) AND
               ( curr_layer = layer_id       ) THEN

            count = count + 1

        ENDIF

        pull_db . set_next()

    ENDWHILE

    RETURN( count )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_condition_pulled_count(       self         ,
                                                      VALUE condition_id ,
                                                      VALUE layer_id     )

{
* Returns the number of pulled pulls for the passed condition and layer
*
* Parameters : self        , Stb Matrix object
*
*
******************************************************************************}

    DECLARE count, pull_db, curr_cond, curr_layer, pull_available

    pull_db = self . pulls

    count = 0
    pull_db . set_first()
    WHILE pull_db . current <> EMPTY DO

        curr_cond = SELECT 'pull_db . table' . c_factor
                        IN OBJECT pull_db . current
                        
        curr_layer = SELECT 'pull_db . table' . layer_factor
                         IN OBJECT pull_db . current

        pull_available = self . pull_is_available( pull_db . current )

        IF NOT ( pull_db . current . deleted ) AND
               ( pull_available              ) AND
               ( curr_cond  = condition_id   ) AND
               ( curr_layer = layer_id       ) THEN

            count = count + 1

        ENDIF

        pull_db . set_next()

    ENDWHILE

    RETURN( count )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_condition_pull_amount(       self         ,
                                                     VALUE layer_id     ,
                                                     VALUE condition_id )

{
* Returns the pull amount for the passed condition and layer in product
* units. 
*
* Parameters : self        , Stb Matrix object
*
******************************************************************************}

      DECLARE total, pull_db, pull_amount, pull_obj, pull_condition_id, pull_layer_id

      total = 0

      pull_db = self . pulls

      pull_db . set_first()
      WHILE ( pull_db . current <> EMPTY ) DO

            pull_obj = pull_db . current

            pull_condition_id = SELECT 'pull_db . table' . c_factor
                                       IN OBJECT pull_obj

            pull_layer_id     = SELECT 'pull_db . table' . layer_factor
                                       IN OBJECT pull_obj

            IF ( pull_condition_id = condition_id ) AND
               ( pull_layer_id = layer_id         ) AND
               ( NOT pull_obj . deleted              ) THEN

                  pull_amount = SELECT 'pull_db . table' . pull_amount
                                          IN OBJECT pull_obj

                  total = total + pull_amount

            ENDIF

            pull_db . set_next()

      ENDWHILE

      RETURN( total )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_condition_pulled_amount(       self         ,
                                                       VALUE layer_id     ,
                                                       VALUE condition_id )

{
* Returns the pulled amount for the passed condition and layer in product
* units. 
*
* Parameters : self        , Stb Matrix object
*
******************************************************************************}

    DECLARE total, pull_db, pull_amount, pull_obj, pull_condition_id, pull_layer_id

    total = 0

    pull_db = self . pulls

    pull_db . set_first()
    WHILE ( pull_db . current <> EMPTY ) DO

        pull_obj = pull_db . current

        pull_condition_id = SELECT 'pull_db . table' . c_factor
                                   IN OBJECT pull_obj

        pull_layer_id     = SELECT 'pull_db . table' . layer_factor
                                   IN OBJECT pull_obj

        IF     ( self . pull_is_available ( pull_obj ) ) AND
               ( pull_condition_id = condition_id      ) AND
               ( pull_layer_id = layer_id              ) AND
           NOT ( pull_obj . deleted                    ) THEN

                pull_amount = SELECT 'pull_db . table' . pull_amount
                                  IN OBJECT pull_obj

                total = total + pull_amount

        ENDIF

        pull_db . set_next()

    ENDWHILE

    RETURN( total )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_condition_object(       self         ,
                                                VALUE layer_id     ,
                                                VALUE condition_id )

{
* Returns the condition object
*
* Parameters : self , Stb Matrix object
*
******************************************************************************}

    DECLARE row_object, condition_obdb

    row_object = EMPTY

    IF self . product_info_form <> EMPTY THEN

        condition_obdb = self . product_info_form . condition_object

        condition_obdb . set_first()

        IF condition_obdb . current <> EMPTY THEN

            WHILE ( condition_obdb . current <> EMPTY ) AND ( row_object = EMPTY ) DO

                IF ( SELECT condition_entry . c_factor
                        IN OBJECT condition_obdb . current = condition_id ) AND
                   ( SELECT condition_entry . layer_factor
                        IN OBJECT condition_obdb . current = layer_id ) THEN

                    row_object = condition_obdb . current

                ELSE
                    condition_obdb . set_next()
                ENDIF

            ENDWHILE

        ENDIF

    ENDIF

    RETURN ( row_object )

ENDROUTINE

{*****************************************************************************}

ROUTINE stb_matrix_action_get_condition_spare_amount(       self         ,
                                                      VALUE layer_id     ,
                                                      VALUE condition_id )

{
* Returns the spare amount for the passed condition and layer in product
* units. 
*
* Parameters : self , Stb Matrix object
*
******************************************************************************}

    DECLARE object, condition_reserved, pull_amount_reqd, allocation_id, product_id

    object = self . get_condition_object( layer_id, condition_id )

    product_id = matrix_object . get_product( )

    allocation_id = SELECT condition_entry . allocation_id
                        IN OBJECT object

    condition_reserved = SELECT inventory_alloc_summary_view . total_allocated
                             WHERE inventory_id = product_id
                             AND   entry_number = allocation_id

    IF condition_reserved = EMPTY THEN
            
        condition_reserved = 0
                  
    ENDIF

    pull_amount_reqd = self . get_condition_pull_amount( layer_id, condition_id )

    RETURN( condition_reserved - pull_amount_reqd )
    
ENDROUTINE

    
{******************************************************************************}

ROUTINE stb_matrix_action_format_quantity( self, VALUE qty, VALUE unit ) 
{
* Returns a string formatted to the reporting unit. qty must be in product
* units
*
* Parameters : self , Stb Matrix object
*              qty  , quantity to format
*              unit , unit to coerce to, and display in
*
*******************************************************************************}

      DECLARE product_id, product_unit, qty_reporting, error_message, text, old_format

      product_id = self . get_product( )

      product_unit = inventory_get_unit( product_id )
      
      IF BLANK( unit ) THEN
            
            unit = product_unit
            
      ENDIF
      
      qty_reporting = unit_convert ( qty           ,
                                     product_unit  ,
                                     unit          ,
                                     error_message )

      IF error_message <> EMPTY THEN

            text = message_get_text( error_message, 1 )

      ELSE

            
            old_format = GLOBAL ( "FORMAT_TEXT" )
            SET FORMAT FORMAT_3_DP
            
            text = STRING( qty_reporting )
            
            SET FORMAT old_format

      ENDIF


      RETURN( STRIP( text ) )

ENDROUTINE


{*****************************************************************************}
{* Global Routines                                                           *}
{*****************************************************************************}

{*****************************************************************************}

GLOBAL ROUTINE modify_protocol_matrix ( VALUE identity        ,
                                        VALUE copied_identity ,
                                        VALUE mode            )
{
* special action routine. protocol matrix button. setups a matrix for adding,
* modify and display modes of an LTE
*
* Parameters : identity        , index of record
*              copied_identity , Not applicable 
*              mode            , action         
*
*******************************************************************************}

    DECLARE return_value

    stb_matrix_initialisation ( )

    return_value = FALSE

    IF mode = "ADD" THEN
        
        matrix_object = create_protocol_matrix ( )

        matrix_object . mode = "ADD"

        do_once = TRUE

    ELSEIF mode = "COPY" THEN

        matrix_object = create_protocol_matrix ( )

        matrix_object . mode = "COPY"
        matrix_object . copy_value = copied_identity
        matrix_object . allow_save = TRUE

        setup_matrix ( matrix_object )

        do_once = FALSE

    ELSEIF mode = "READ_FOR_MODIFY" THEN

        matrix_object = create_protocol_matrix ( )

        matrix_object . mode = "MODIFY"

        do_once = TRUE

    ELSEIF mode = "READ_FOR_DISPLAY" THEN

        matrix_object = create_protocol_matrix ( )

        matrix_object . mode = "DISPLAY"

        do_once = TRUE

    ELSEIF mode = "MODIFY" THEN

        do_matrix ( matrix_object )

    ELSEIF mode = "DISPLAY" THEN

        IF ( do_once ) THEN

            setup_matrix ( matrix_object )
            do_once = FALSE
        ENDIF

        do_matrix ( matrix_object )

    ELSEIF mode = "SAVE" THEN

        IF matrix_object . mode = "MODIFY" THEN
            CALL_ROUTINE "after_protocol_modification" USING matrix_object IN LIBRARY "$STB_USER"
        ENDIF

        IF matrix_object . allow_save  THEN

            window_set_status ( "Saving Pulls..." )
            matrix_object . pulls . invoke_all ( "UPDATE" )

            window_set_status ( "Saving Samples..." )
            matrix_object . save_sample_information ()

            window_set_status ( "Saving Layer Factors..." )
            matrix_object . layer_factors . invoke_all ( "UPDATE" )

            window_set_status ( "Saving Time Factors..." )
            matrix_object . time_factors . invoke_all ( "UPDATE" )

            window_set_status ( "Saving C Factors..." )
            matrix_object . c_factors . invoke_all ( "UPDATE" )

            window_set_status ( "Saving Basetimes..." )
            matrix_object . basetimes . basetime_db . invoke_all ( "UPDATE" )

            window_set_status ( "Saving Layer Products..." )
            matrix_object . product_info_form . product_object . invoke_all ( "UPDATE" )

            window_set_status ( "Saving Condition Products..." )
            matrix_object . product_info_form . condition_object . invoke_all ( "UPDATE" )

            return_value = TRUE

        ENDIF

        matrix_object . matrix_form . end_prompt ( )

        matrix_object . allow_save = TRUE

    ELSEIF mode = "QUIT" THEN

        matrix_object . matrix_form . end_prompt ( )

        matrix_object . allow_save = TRUE

    ENDIF

    IF ( do_once ) THEN

        setup_matrix ( matrix_object )
        do_once = FALSE

    ENDIF

    RETURN ( return_value )

ENDROUTINE

{******************************************************************************}

GLOBAL ROUTINE modify_study_matrix ( VALUE identity        ,
                                     VALUE copied_identity ,
                                     VALUE mode            )
{
* special action routine. study matrix button. setups a matrix for adding,
* modify and display modes of an LTE
*
* Parameters : identity        , index of record
*              copied_identity , Not applicable 
*              mode            , action         
*
*******************************************************************************}

    DECLARE return_value, finalise_active

    stb_matrix_initialisation ( )

    return_value = FALSE

    IF mode = "ADD" THEN

        matrix_object = create_study_matrix ( )

        matrix_object . mode = "ADD"

        do_once = TRUE

    ELSEIF mode = "COPY" THEN

        matrix_object = create_study_matrix ( )

        matrix_object . mode = "COPY"
        matrix_object . copy_value = copied_identity
        matrix_object . allow_save = TRUE

        setup_matrix ( matrix_object )

        do_once = FALSE

    ELSEIF mode = "READ_FOR_MODIFY" THEN

        matrix_object = create_study_matrix ( )

        matrix_object . mode = "MODIFY"

        do_once = TRUE

    ELSEIF mode = "READ_FOR_DISPLAY" THEN

        matrix_object = create_study_matrix ( )

        matrix_object . mode = "DISPLAY"

        do_once = TRUE

    ELSEIF mode = "MODIFY" THEN

        do_matrix ( matrix_object )

    ELSEIF mode = "DISPLAY" THEN

        IF ( do_once ) THEN

            setup_matrix ( matrix_object )
            do_once = FALSE
    
        ENDIF

        do_matrix ( matrix_object )

    ELSEIF mode = "SAVE" THEN

        IF matrix_object . allow_save  THEN

            IF SELECT pds_study . status = "C" THEN
                IF NOT ( check_study_completed ( matrix_object ) ) THEN
                    ASSIGN pds_study . status = "A"
                ENDIF
            ENDIF

            IF check_study_completed ( matrix_object ) THEN
                ASSIGN pds_study . status = "C"
                CALL_ROUTINE "after_study_completion" USING matrix_object IN LIBRARY "$STB_USER"
            ENDIF

            IF matrix_object . is_active_study( ) THEN

                window_set_status ( "Updating Scheduler..." )
                update_timer_queue ( matrix_object . pulls )

            ENDIF

            IF matrix_object . mode = "MODIFY" THEN
                CALL_ROUTINE "after_study_modification" USING matrix_object IN LIBRARY "$STB_USER"
            ENDIF

            window_set_status ( "Saving Pulls..." )
            matrix_object . pulls . invoke_all ( "UPDATE" )

            window_set_status ( "Saving Samples..." )
            matrix_object . save_sample_information ( )

            window_set_status ( "Saving Layer Factors..." )
            matrix_object . layer_factors . invoke_all ( "UPDATE" )

            window_set_status ( "Saving Time Factors..." )
            matrix_object . time_factors . invoke_all ( "UPDATE" )

            window_set_status ( "Saving C Factors..." )
            matrix_object . c_factors . invoke_all ( "UPDATE" )

            window_set_status ( "Saving Basetimes..." )
            matrix_object . basetimes . basetime_db . invoke_all ( "UPDATE" )

            window_set_status ( "Saving Layer Products..." )
            matrix_object . product_info_form . product_object . invoke_all ( "UPDATE" )

            window_set_status ( "Saving Condition Products..." )
            matrix_object . product_info_form . condition_object . invoke_all ( "UPDATE" )

            return_value = TRUE

        ENDIF

        matrix_object . matrix_form . end_prompt ()

        matrix_object . allow_save = TRUE

    ELSEIF mode = "QUIT" THEN

        DECLARE cancel_active, reactivate_active
        
        IF ( ( LASTKEY = "DO" ) OR ( LASTKEY = "RETURN" ) ) THEN

            CALL_ROUTINE "is_cancel_active" RETURNING cancel_active IN LIBRARY "$STB_LTE_STUDY"
            
            IF cancel_active THEN

                {* TODO: cancel allocated stock *}

                set_study_status ( "X" )
                update_timequeue_status_change ( "CANCEL", matrix_object . pulls )

                CALL_ROUTINE "after_study_cancellation" 
                    USING matrix_object IN LIBRARY "$STB_USER"


            ENDIF

            CALL_ROUTINE "is_reactivate_active" RETURNING reactivate_active IN LIBRARY "$STB_LTE_STUDY"

            IF reactivate_active THEN

                {* TODO: reactivate allocated stock *}

                set_study_status ( "A" )
                stb_login_activate ( matrix_object . header_id )

                CALL_ROUTINE "after_study_reactivation"
                       USING matrix_object IN LIBRARY "$STB_USER"


            ENDIF

            CALL_ROUTINE "is_finalise_active" RETURNING finalise_active IN LIBRARY "$STB_LTE_STUDY"

            IF finalise_active THEN

                {* TODO: finalise allocated stock *}

                set_study_status ( "F" )
                update_timequeue_status_change ( "FINALISE", matrix_object . pulls )

                CALL_ROUTINE "after_study_finalisation" USING matrix_object IN LIBRARY "$STB_USER"

            ENDIF

        ENDIF

        matrix_object . matrix_form . end_prompt ()

        matrix_object . allow_save = TRUE

    ENDIF

    IF ( do_once ) THEN

        setup_matrix ( matrix_object )
        do_once = FALSE

    ENDIF

    RETURN ( return_value )

    ENDROUTINE
    
{******************************************************************************}

ROUTINE create_protocol_matrix
{
* init matrix for use by protocols
*
* Parameters : matrix_object, Matrix Object
*
*******************************************************************************}

    DECLARE matrix_object

    OBJECT_CREATE ( matrix_object, "STB_MATRIX" )

    matrix_object . header_table = "PDS_PROTO"
    matrix_object . matrix_type  = "P"
    matrix_object . header_id    = SELECT 'matrix_object . header_table' . identity
    matrix_object . header_ver   = SELECT 'matrix_object . header_table' . protocol_version

    matrix_object . pull_table   = "PDS_PROTO_PULL"

    matrix_object . pulls . initialise ( "PDS_PROTO_PULL" )

    RETURN( matrix_object )

ENDROUTINE

{******************************************************************************}

ROUTINE create_study_matrix
{
* init matrix for use by studies
*
* Parameters : matrix_object, Matrix Object
*
*******************************************************************************}

    DECLARE matrix_object

    OBJECT_CREATE ( matrix_object, "STB_MATRIX" )

    matrix_object . header_table = "PDS_STUDY"
    matrix_object . matrix_type  = "S"
    matrix_object . header_id    = SELECT 'matrix_object . header_table' . identity
    matrix_object . header_ver   = 1

    matrix_object . pull_table   = "PDS_STUDY_PULL"

    matrix_object . pulls . initialise ( "PDS_STUDY_PULL" )

    RETURN( matrix_object )

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_initialisation
{
* Initialises the classes
*
* Parameters : None
*
*******************************************************************************}

    setup_layer_factor_class ()
    setup_time_factor_class ()
    setup_c_factor_class ()
    setup_basetime_class ()
    setup_matrix_pulls_class ()
    setup_sample_class()
    setup_stb_matrix_cell_class ()
    setup_matrix_class ()

ENDROUTINE

{******************************************************************************}

GLOBAL ROUTINE setup_matrix ( matrix_object )
{
* 
*
* Parameters : matrix_object , Stb matrix object
*
*******************************************************************************}

    DECLARE errors

    window_set_status ( GET_USER_MESSAGE ( "MATRIX_LOAD_DATA", 1 ) )
    matrix_object . load_factors( matrix_object . layer_factors , "Z" )

    window_set_status ( GET_USER_MESSAGE ( "MATRIX_LOAD_DATA", 2 ) )
    matrix_object . load_factors( matrix_object . time_factors, "T" )

    window_set_status ( GET_USER_MESSAGE ( "MATRIX_LOAD_DATA", 3 ) )
    matrix_object . load_factors( matrix_object . c_factors, "C" )

    window_set_status ( GET_USER_MESSAGE ( "MATRIX_LOAD_DATA", 4 ) )
    matrix_object . load_matrix_pulls ( )

    window_set_status( "Loading samples..." )
    errors = matrix_object . load_pull_samples( )
    IF errors <> EMPTY THEN 
        fatal_error( errors )
    ENDIF

    window_set_status ( GET_USER_MESSAGE ( "MATRIX_LOAD_DATA", 5 ) )
    matrix_object . load_basetimes ( )

    matrix_object . time_xaxis = get_default_config_item ( SELECT 'matrix_object . header_table' . default_config, "x_axis" )

    IF ( ( matrix_object . time_xaxis = ERROR ) OR ( matrix_object . time_xaxis = EMPTY ) ) THEN
         matrix_object . time_xaxis = TRUE
    ENDIF

    matrix_object . setup_layers ( )

    matrix_object . create_matrix_form ( )

    matrix_object . matrix_form . start_prompt ( )

    matrix_object . update_screen_state( )

ENDROUTINE

{******************************************************************************}

ROUTINE do_matrix ( matrix_object )
{
* 
*
* Parameters : matrix_object, The matrix object
*
*******************************************************************************}

    matrix_object . matrix_form . set_visible( TRUE )

    matrix_object . matrix_form . wait_prompt ( )

    matrix_object . matrix_form . set_visible( FALSE )

    matrix_object . allow_save = TRUE

ENDROUTINE
    
{******************************************************************************}
{* Stb Matrix Form Class                                                      *}
{******************************************************************************}

{******************************************************************************}

ROUTINE stb_matrix_form_class_initialisation( self )
{
* Stb Matrix Form Initialisation
*
* Parameters : self, Stb Matrix Form object
*
*******************************************************************************}

    self . column = 4
    self . row    = 4
    self . button_style = FORM_BUTTON_NONE
    self . width  = 105
    self . height = 19
    self . use_top_line = TRUE
    self . visible = FALSE
    
    self . toolbar = EMPTY
    self . tab     = EMPTY
    
    self . parent_matrix = EMPTY
  
    self . button_pull_info = EMPTY
    self . button_overview = EMPTY
  
ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_form_action_validation( self )
{
* Stb Matrix Form Validation
*
* Parameters : self, Stb Matrix Form object
*
*******************************************************************************}

    RETURN( check_pulls_have_test_schedule( self ) )

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_form_action_repaste( self )
{
* Stb Matrix Form enter prompt routine
*
* Parameters : self, Stb Matrix Form object
*
*******************************************************************************}

	DECLARE grid
	
    self . std_form :: repaste( )

    self . parent_matrix . overview_form . refresh( )
    
    {* make sure the current tab is at the front and the grid is rebuilt *}
    IF self . tab . selected <> 0 THEN

		self . tab . set_current_tab ( self . tab . selected )
		self . parent_matrix . current_layer =  self . tab . selected

		grid = self . parent_matrix . get_current_pull_grid( )
		grid . rebuild ()

	ENDIF	
    
ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_form_action_create_toolbar( self )
{
* Adds toolbuttons to the toolbar
*
* Parameters : self, Stb Matrix Form object
*
*******************************************************************************}

    CREATE OBJECT TOOLBAR_CLASS , self . toolbar
    self . toolbar . width   = self . width
    self . toolbar . height  = 1
        
    self . add_prompt( self . toolbar )
    
ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_form_action_create_tab( self )
{
* Adds tab control
*
* Parameters : self, Stb Matrix Form object
*
*******************************************************************************}

    CREATE OBJECT PROMPT_TAB_CLASS , self . tab

    self . tab . height = self . height - 4
    self . tab . width  = self . width
    self . tab . row    = 2
    self . tab . column = 1

    self . add_prompt( self . tab )

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_form_action_add_tab_forms_from_array( self, tabs )
{
* Adds tab forms to tab
*
* Parameters : self , Stb Matrix Form object
*              tabs , array of forms to add
*
*******************************************************************************}

    DECLARE count

    ARRAY self . tab . titles    ARRAYSIZE ( 0 )
    ARRAY self . tab . forms     ARRAYSIZE ( 0 )

    count = 1
    WHILE ( count <= size_of_array ( tabs ) ) DO

        self . tab . set_size ( tabs [ count ] )
        self . tab . add_form ( tabs [ count ] )

        count = count + 1
        
    ENDWHILE

ENDROUTINE