{** 1452: HBe 11-2-03                                                         }
{Handling of Laboratory label text for all component names                    }
{                                                                             }
{ --------------------------------------------------------------------------- }

ROUTINE modify_option ( option )

initialise ( "modify" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE display_option ( option )

initialise ( "display" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE initialise (VALUE operation)

SET name "DEFER/"
ENABLE WINDOWS
SET COMPILE_OPTION DECLARE
JOIN LIBRARY toolbox

DECLARE the_group				{Group chosen}
DECLARE l_k_p					{last key pressed}
DECLARE rc					{return_code}
DECLARE empty_arr				{An empty select array}

the_group = EMPTY
l_k_p  = EMPTY
ARRAY empty_arr


REPEAT

SET DISPLAY FALSE

rc = prompt_user ( "Group_header", "Label Text Components: ":strip(operation):" mode",
                     EMPTY,
                     TRUE, "Select Owner Group:",
                     empty_arr, the_group, l_k_p )

IF (rc) AND (NOT BLANK (the_group)) THEN
   handle_labels ( the_group, operation )
ENDIF


UNTIL rc = FALSE


ENDROUTINE



{ --------------------------------------------------------------------------- }

ROUTINE handle_labels ( VALUE the_group, VALUE operation)


JOIN STANDARD_LIBRARY STD_BLOCK
JOIN LIBRARY $LIB_UTILS
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT


DECLARE the_form				{form objects}
DECLARE component_grid				{grid object}
DECLARE name_of_table
DECLARE name_block
declare row_idx
declare row_save_idx
declare component
declare check_ok
declare select_array
declare size_block
declare field1  {result_type}
declare field2  {component_name}
declare field3  {print_label}
declare field4  {label_text}
declare field5  {modified_by}
declare field6  {modified_on}
declare field7  {group owner}


CONSTANT GRID_POS = 1

field1     	= "RESULT_TYPE"
field2     	= "COMPONENT_NAME"
field3     	= "PRINT_LABEL"
field4     	= "LABEL_TEXT" 
field5     	= "MODIFIED_BY" 
field6          = "MODIFIED_ON"
field7          = "GROUP_ID"
name_of_table 	= "LABLABEL_CHAR"
name_block 	= "component_block"


IF operation = "modify" THEN
   SET DISPLAY FALSE
ELSE
   SET DISPLAY TRUE
ENDIF


CREATE OBJECT "STD_FORM", the_form

{setup defaults}
the_form . header	=  "Laboratory Label Component Text: " :STRIP(operation) : " mode"
the_form . footer = "Press DO to exit"
the_form . row	=  1
the_form . column	=   2
the_form . width	= 130 
the_form . height	=  15

the_form . return_behaviour = FORM_RETURN_STAY


the_form . add_display ( "Owner Group: " : STRIP(the_group), 10,1,prompt_rendition_bold)


CREATE OBJECT "STD_GRID_EDITOR" , component_grid

ARRAY component_grid . user_info ARRAYSIZE ( 0, 6 ) = ""

component_grid . row		= 2
component_grid . column 	= 8
component_grid . height 	= 13
component_grid . width 		= 120
component_grid . cell_rows 	= 0
component_grid . cell_columns   = 6
component_grid . column_size [ 1 ]	= 12
component_grid . column_size [ 2 ]	= 40
component_grid . column_size [ 3 ]	= 12
component_grid . column_size [ 4 ]	= 20
component_grid . column_size [ 5 ]	= 8
component_grid . column_size [ 6 ]	= 20
component_grid . title_size_top = 1
component_grid . title_rendition_top = PROMPT_RENDITION_BOLD
component_grid . title_text_top [ 1 , 1 ] = "Result Type"
component_grid . title_text_top [ 2 , 1 ] = "Component Name"
component_grid . title_text_top [ 3 , 1 ] = "Print Label"
component_grid . title_text_top [ 4 , 1 ] = "Label Text"
component_grid . title_text_top [ 5 , 1 ] = "Modified by"
component_grid . title_text_top [ 6 , 1 ] = "Modified on"
component_grid . title_separator_top = GRID_SEPARATOR_BOTH
component_grid . column_separator [ 1 ] = GRID_SEPARATOR_BOTH
component_grid . column_separator [ 2 ] = GRID_SEPARATOR_BOTH
component_grid . column_separator [ 3 ] = GRID_SEPARATOR_BOTH
component_grid . column_separator [ 4 ] = GRID_SEPARATOR_BOTH
component_grid . column_separator [ 5 ] = GRID_SEPARATOR_BOTH
component_grid . column_separator [ 6 ] = GRID_SEPARATOR_BOTH
component_grid . display_cell_routine   = "DISPLAY_GRID_CELL"
component_grid . prompt_cell_routine    = "PROMPT_GRID_CELL"
component_grid . check_move_routine     = "CHECK_MOVE"
component_grid . fixed_columns_left     = 2

the_form . add_prompt (component_grid)

IF operation = "modify" then

   ARRAY select_array

   select_array[1,1] = ARRAY_SELECT_EQ
   select_array[1,2] = field7
   select_array[1,3] = the_group
   select_array[2,1] = ARRAY_SELECT_ORDER
   select_array[2,2] = field1
   select_array[3,1] = ARRAY_SELECT_ORDER
   select_array[3,2] = field2



   block_row_initialise ( name_block, name_of_table)
   check_ok = block_row_select ( name_block, select_array, TRUE)

   if check_ok <> TRUE then
      flash_message(check_ok: ". Unable to handle components for labels, somone else might be working on it!",true)
      RETURN
   endif


   row_idx = 1

   size_block = block_row_size (name_block)

   component = block_row_field_select (name_block, field1)

   WHILE (STRIP(component) <> EMPTY) AND (row_idx <= size_block) DO

      component_grid . user_info [ row_idx, 1 ] = block_row_field_select (name_block, field1)
      component_grid . user_info [ row_idx, 2 ] = block_row_field_select (name_block, field2)
      component_grid . user_info [ row_idx, 3 ] = block_row_field_select (name_block, field3)
      component_grid . user_info [ row_idx, 4 ] = block_row_field_select (name_block, field4)
      component_grid . user_info [ row_idx, 5 ] = block_row_field_select (name_block, field5)
      component_grid . user_info [ row_idx, 6 ] = block_row_field_select (name_block, field6)

      row_idx = row_idx + 1

      block_row_next (name_block)

      component = block_row_field_select (name_block, field1)


   ENDWHILE

   component_grid . cell_rows = row_idx - 1

ELSEIF operation = "display"

   row_idx = 1

   component = select lablabel_char . component_name
               where group_id = the_group
               order on result_type , component_name

   WHILE component <> EMPTY DO

      component_grid . user_info [ row_idx, 1 ] = select lablabel_char . result_type
      component_grid . user_info [ row_idx, 2 ] = component
      component_grid . user_info [ row_idx, 3 ] = select lablabel_char . print_label
      component_grid . user_info [ row_idx, 4 ] = select lablabel_char . label_text
      component_grid . user_info [ row_idx, 5 ] = select lablabel_char . modified_by
      component_grid . user_info [ row_idx, 6 ] = select lablabel_char . modified_on


      row_idx = row_idx + 1

      NEXT lablabel_char

      component = select lablabel_char . component_name


   ENDWHILE

   component_grid . cell_rows = row_idx - 1

ELSE 

   flash_message ("Unknown operation " : strip(operation), TRUE)
   RETURN (EMPTY)

ENDIF

the_form . start_prompt ()
REPEAT
	the_form . wait_prompt ()
UNTIL (the_form . get_lastkey () = "EXIT") OR (the_form . get_lastkey () = "DO")

the_form . end_prompt ()


IF (the_form . get_lastkey () = "DO") AND (OPERATION = "modify") THEN

   row_save_idx = 1
   block_row_first (name_block)


   WHILE (row_save_idx <= size_block)

      IF row_save_idx > 1 THEN
         block_row_next (name_block)
      ENDIF

      IF  (component_grid . user_info [ row_save_idx, 1 ] = block_row_field_select (name_block, field1))
      AND (component_grid . user_info [ row_save_idx, 2 ] = block_row_field_select (name_block, field2))
      THEN
         block_row_field_assign (name_block	,
				 field3	,
                                 component_grid . user_info [ row_save_idx, 3 ])

         block_row_field_assign (name_block	,
				 field4	,
				 component_grid . user_info [ row_save_idx, 4 ])

      ELSE
         FLASH_MESSAGE("Problem updating block row, key mismatch, not saving anything!", TRUE)
         RETURN (false)
      ENDIF

      row_save_idx = row_save_idx + 1

   ENDWHILE

   START WRITE TRANSACTION "save_translation"

   BLOCK_ROW_UPDATE  (name_block)

   COMMIT

   BLOCK_ROW_RELEASE (name_block)
   
   FLASH_MESSAGE ("Changes saved", TRUE)

ENDIF


ENDROUTINE {handle_labels}


{ --------------------------------------------------------------------------- }


ROUTINE check_move 	(self           ,
			VALUE old_column,
			VALUE old_row	,
			      new_column,
			      new_row   )

IF     new_column < 3 THEN
       new_column = 3
ELSEIF new_column > 4 THEN
       new_column = 4
ENDIF


ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE display_grid_cell ( 	self,
					VALUE cell_column ,
					VALUE cell_row ,
					window,
					VALUE column,
					VALUE row,
					VALUE cell_width,
					VALUE cell_height )

DECLARE val

   val = self . user_info [ cell_row, cell_column ]
   IF   val = EMPTY
   THEN val = pad( "", " ", cell_width )
   ELSE 
      IF cell_column = 3
      THEN
         val = get_boolean_text(val)
      ELSE
         val = substring( val, 1, cell_width )
      ENDIF
   ENDIF

   DISPLAY val
      AT column, row
      IN WINDOW window
      to column + cell_width - 1

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE prompt_grid_cell    ( self,
					VALUE cell_column ,
					VALUE cell_row ,
					window,
					VALUE column,
					VALUE row,
					VALUE cell_width,
					VALUE cell_height )


IF cell_column = 3 THEN
   PROMPT FOR self . user_info [ cell_row, cell_column ]
	AT column, row
	IN WINDOW window
	TO column + cell_width - 1
        BROWSE ON boolean
	with ( DISPLAY_ONLY = false ,
	ZAP_ON_FIRST = false )
ELSEIF cell_column = 4 THEN
   PROMPT FOR self . user_info [ cell_row, cell_column ]
	AT column, row
	IN WINDOW window
	TO column + cell_width - 1
        FORMAT lablabel_char.label_text
	with ( DISPLAY_ONLY = false ,
	ZAP_ON_FIRST = false )
ELSE
   PROMPT FOR self . user_info [ cell_row, cell_column ]
	AT column, row
	IN WINDOW window
	TO column + cell_width - 1
	with ( DISPLAY_ONLY = false ,
	ZAP_ON_FIRST = false )
ENDIF

endroutine

{ --------------------------------------------------------------------------- }

