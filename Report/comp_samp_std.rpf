SET NAME "DEFER/"
ENABLE WINDOWS

JOIN  STANDARD_LIBRARY  STD_PROMPT
JOIN  STANDARD_LIBRARY  STD_UTILS
JOIN  STANDARD_LIBRARY  STD_BLOCK
JOIN  LIBRARY           $LIB_UTILS
JOIN  LIBRARY           MLP_ANALYSIS

CREATE   OBJECT PROMPT_CLASS_FORM, get_anal

wh = 11
ww = 60
wr = 8
wc = 10

ht = "Compare Sample/Standard for Analysis/Component"
ft = "Press DO to enter component name / Exit to quit"

get_anal . height   =  wh
get_anal . width    =  ww
get_anal . row      =  wr
get_anal . column   =  wc
get_anal . border   =  TRUE
get_anal . header   =  ht
get_anal . footer   =  ft

anal_row = 2
anal_pr  = "Enter Analysis  ID  : "
anal_off = 5
comp_pr  = "Enter Component Name: "
mlp_pr   = "Enter MLP Identity  : "
sp_pr    = "Enter Sample Point  : "
dl_pr    = "Enter Date Limits   :             -"

PROMPT   OBJECT anal_id
         BROWSE ON analysis
         ON    LINE anal_row FROM LENGTH(anal_pr)+anal_off+1
         IN    WINDOW get_anal . window

get_anal . add_prompt ( anal_id )

get_anal . add_display ( anal_pr,
                         anal_off,
                         anal_row,
                         PROMPT_RENDITION_BOLD)

get_anal . start_prompt ()

REPEAT

   get_anal . wait_prompt()

   IF (get_anal . get_lastkey () <> "EXIT")    AND
      (NOT BLANK( anal_id . text ))            THEN
      get_anal_comp ( anal_id . text )
   ENDIF

UNTIL    get_anal . get_lastkey () = "EXIT"

get_anal . end_prompt ()


ROUTINE  get_anal_comp ( VALUE analysis_id )

         CREATE   OBJECT PROMPT_CLASS_FORM, get_comp

         ch = 2

         get_comp . height   =  wh-ch
         get_comp . width    =  ww
         get_comp . row      =  wr+ch
         get_comp . column   =  wc
         get_comp . border   =  FALSE
         get_comp . header   =  "Component for Analysis:" : analysis_id
         get_comp . header   =  EMPTY
         get_comp . footer   =  "Press DO to enter MLP / Exit to quit"

         PROMPT   OBJECT get_comp . prompt_objects [ 1 ]
                  ON    LINE anal_row FROM LENGTH(comp_pr)+anal_off+1
                  IN    WINDOW get_comp . window
                  FORMAT   component . name
                  WITH  (  browse_routine          = "analysis_components",
                           validation_routine      = "comp_val",
                           always_validate         = TRUE  )

         get_comp . add_display (  comp_pr,
                                   anal_off,
                                   anal_row,
                                   PROMPT_RENDITION_BOLD)

         get_comp . start_prompt()

         REPEAT

            get_comp . wait_prompt()

            component_name = get_comp . prompt_objects [ 1 ] . text

            IF check_input ( get_comp.get_lastkey(), component_name ) THEN
               get_mlp_id ()
            ENDIF

         UNTIL ( get_comp . get_lastkey () = "EXIT" )

         get_comp . end_prompt()

         return ( check_input ( get_comp.get_lastkey(), component_name ) )

ENDROUTINE


ROUTINE  check_input ( VALUE the_key, VALUE input_value )
   IF ( the_key <> "EXIT" ) AND ( NOT BLANK ( input_value ) )
   THEN return ( TRUE  )
   ELSE return ( FALSE )
   ENDIF
ENDROUTINE


ROUTINE  analysis_components ( self )
   get_anal_components ( self, anal_id.text )
ENDROUTINE


ROUTINE  comp_val ( self )
   return ( component_in_analysis ( self, anal_id.text ) )
ENDROUTINE

ROUTINE  get_mlp_id

   CREATE   OBJECT PROMPT_CLASS_FORM, get_mlp

   get_mlp . height   =  wh-ch-ch
   get_mlp . width    =  ww
   get_mlp . row      =  wr+ch+ch
   get_mlp . column   =  wc
   get_mlp . border   =  FALSE
   get_mlp . header   =  EMPTY
   get_mlp . footer   =  "Press DO to enter Sample Point / Exit to quit"

   PROMPT   OBJECT mlp_id
            BROWSE ON mlp_header
            ON    LINE anal_row FROM LENGTH(anal_pr)+anal_off+1
            IN    WINDOW get_mlp . window

   get_mlp . add_prompt ( mlp_id )

   get_mlp . add_display ( mlp_pr,
                           anal_off,
                           anal_row,
                           PROMPT_RENDITION_BOLD)

   get_mlp . start_prompt ()

REPEAT

   get_mlp . wait_prompt()

   IF (get_mlp . get_lastkey () <> "EXIT")    AND
      (NOT BLANK( mlp_id . text ))            THEN
      get_sp_id ()
   ENDIF

UNTIL    get_mlp . get_lastkey () = "EXIT"

get_mlp . end_prompt ()

ENDROUTINE


ROUTINE  get_sp_id

   CREATE   OBJECT PROMPT_CLASS_FORM, get_sp

   get_sp . height   =  wh-ch-ch-ch
   get_sp . width    =  ww
   get_sp . row      =  wr+ch+ch+ch
   get_sp . column   =  wc
   get_sp . border   =  FALSE
   get_sp . header   =  EMPTY
   get_sp . footer   =  "Press DO to enter Date Limits / Exit to quit"

   PROMPT   OBJECT sp_id
            BROWSE ON sample_point
            ON    LINE anal_row FROM LENGTH(anal_pr)+anal_off+1
            IN    WINDOW get_sp . window

   get_sp . add_prompt ( sp_id )

   get_sp . add_display ( sp_pr,
                          anal_off,
                          anal_row,
                          PROMPT_RENDITION_BOLD)

   get_sp . start_prompt ()

REPEAT

   get_sp . wait_prompt()

   IF (get_sp . get_lastkey () <> "EXIT")    AND
      (NOT BLANK( sp_id . text ))            THEN
      get_date_limits()
   ENDIF

UNTIL    get_sp . get_lastkey () = "EXIT"

get_sp . end_prompt ()

ENDROUTINE


ROUTINE  get_date_limits

   CREATE   OBJECT PROMPT_CLASS_FORM, get_dl

   get_dl . height   =  wh-ch-ch-ch-ch
   get_dl . width    =  ww
   get_dl . row      =  wr+ch+ch+ch+ch
   get_dl . column   =  wc
   get_dl . border   =  FALSE
   get_dl . header   =  EMPTY
   get_dl . footer   =  "Press DO to Create Report / Exit to quit"

   PROMPT   OBJECT dl_from
            FORMAT DATE
            ON    LINE anal_row FROM LENGTH(anal_pr)+anal_off+1
            IN    WINDOW get_dl . window

   get_dl . add_prompt ( dl_from )

   PROMPT   OBJECT dl_to
            FORMAT DATE
            ON    LINE anal_row FROM LENGTH(anal_pr)+anal_off+1+14
            IN    WINDOW get_dl . window

   get_dl . add_prompt ( dl_to )

   get_dl . add_display ( dl_pr,
                          anal_off,
                          anal_row,
                          PROMPT_RENDITION_BOLD)

   get_dl . start_prompt ()

REPEAT

   get_dl . wait_prompt()

   IF (get_dl . get_lastkey () <> "EXIT") THEN
      IF   (NOT BLANK(dl_to.text)) AND (dl_from.text > dl_to.text)
      THEN flash_message("Lower Date Limit greater than Upper Date Limit",TRUE)
      ELSE create_report()
      ENDIF
   ENDIF

UNTIL    get_dl . get_lastkey () = "EXIT"

get_dl . end_prompt ()

ENDROUTINE


ROUTINE  print_init

   SET FORMAT "99"
   SET DATE FORMAT   "DD/MM/YYYY"
   current_date   =  TODAY
   the_user       =  OPERATOR

   pc = 0

   ON NEW PAGE
      print_header()
   ENDON

ENDROUTINE


ROUTINE  print_header

   pc = pc + 1

LITERAL
Date: $current_date   Standard/Sample Compare                        Page: $pc
User: $the_user       Analysis ID : $anal_____ Component : $comp______________
                      MLP ID      : $mlp______ Sample Pt.: $sp_____________
                      Date Limits : $from_dt___ - $to_dt_____

Job ID               Component Result             Standard Result
-------------------- ---------------------------- ----------------------------
$ENDLITERAL

ENDROUTINE


ROUTINE  create_report

   anal    = anal_id.text
   comp    = component_name
   mlp     = mlp_id.text
   sp      = sp_id.text
   from_dt = dl_from . text
   to_dt   = dl_to   . text

   IF   BLANK( from_dt )
   THEN sel_from = "01-JAN-1000"
   ELSE sel_from = from_dt
   ENDIF

   IF   BLANK( to_dt )
   THEN sel_to = "31-DEC-9999"
   ELSE sel_to = to_dt
   ENDIF

   test_no = select samp_worksheet_std.test_number
             where  analysis = anal
             and    product  = mlp
             and    sampling_point = sp
             and    name = comp
             and    login_date between sel_from and sel_to

   lines = 0
   WHILE test_no <> EMPTY DO
      lines = lines + 1
      IF lines = 1 THEN
         print_init()
         print_header()
      ENDIF
      job_n = select samp_worksheet_std.job_name
      samp_res = select samp_worksheet_std.test_result
      std_res  = select samp_worksheet_std.std_result

LITERAL
$job_n______________ $samp_res___________________ $std_res____________________
$ENDLITERAL

      NEXT samp_worksheet_std
      test_no = select samp_worksheet_std.test_number
   ENDWHILE

   IF   lines > 0
   THEN FLUSH_LITERAL
   ELSE flash_message("No results exists to print on report",TRUE)
   ENDIF

ENDROUTINE

