{******************************************************************************
*
* Module Name   : $BATCH.RPF
*
* Purpose       : Main interface to the batch utility reports.
*                                                    
* Document Ref. :
*
* Specification : SE/T/VGSM320-WORK-BATCH
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}

ENABLE WINDOWS
SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_ARRAY

{* CONSTANTS ******************************************************************}

GLOBAL CONSTANT BATCH_ENTRY_EMPTY            = "EMPTY"
GLOBAL CONSTANT BATCH_ENTRY_NEWSLOT          = "NEWSLOT"
GLOBAL CONSTANT BATCH_ENTRY_SECTION_START    = "START"
GLOBAL CONSTANT BATCH_ENTRY_SECTION_REPEAT   = "REPEAT"
GLOBAL CONSTANT BATCH_ENTRY_SECTION_TRAIL    = "TRAIL"

GLOBAL CONSTANT BATCH_ENTRY_SAMPLE           = "SAMPLE"
GLOBAL CONSTANT BATCH_ENTRY_CONTROL          = "CONTROL"
GLOBAL CONSTANT BATCH_ENTRY_STANDARD         = "STANDARD"
GLOBAL CONSTANT BATCH_ENTRY_BLANK            = "BLANK"
GLOBAL CONSTANT BATCH_ENTRY_WASH             = "WASH"
GLOBAL CONSTANT BATCH_ENTRY_MS               = "MS"
GLOBAL CONSTANT BATCH_ENTRY_MSD              = "MSD"
GLOBAL CONSTANT BATCH_ENTRY_CAL_STD          = "CAL_STD"
GLOBAL CONSTANT BATCH_ENTRY_CAL_BLANK        = "CAL_BLANK"
GLOBAL CONSTANT BATCH_ENTRY_BLANK_CHK        = "BLANK_CHK"
GLOBAL CONSTANT BATCH_ENTRY_METH_BLANK       = "METH_BLANK"
GLOBAL CONSTANT BATCH_ENTRY_CAL_CHK          = "CAL_CHK"
GLOBAL CONSTANT BATCH_ENTRY_INDEP_CHK        = "INDEP_CHK"
GLOBAL CONSTANT BATCH_ENTRY_INIT_CHK         = "INIT_CHK"
GLOBAL CONSTANT BATCH_ENTRY_INTERF_CHK       = "INTERF_CHK"
GLOBAL CONSTANT BATCH_ENTRY_DUPLICATE        = "DUPLICATE"

GLOBAL CONSTANT BATCH_TEMPLATE_START_SECTION  = "S"
GLOBAL CONSTANT BATCH_TEMPLATE_REPEAT_SECTION = "R"
GLOBAL CONSTANT BATCH_TEMPLATE_TRAIL_SECTION  = "T"


GLOBAL CONSTANT STD_BATCH_SCREEN_LIST    = "STD_BATCH_SCREEN_LIST"
GLOBAL CONSTANT STD_BATCH_SCREEN_HEADER  = "STD_BATCH_SCREEN_HEADER"
GLOBAL CONSTANT STD_BATCH_SCREEN_RESULT  = "STD_BATCH_SCREEN_RESULT"
GLOBAL CONSTANT STD_BATCH_SCREEN_UPLOAD  = "STD_BATCH_SCREEN_UPLOAD"
GLOBAL CONSTANT STD_BATCH_SCREEN_CONTAIN = "STD_BATCH_SCREEN_CONTAIN"
GLOBAL CONSTANT STD_BATCH_SCREEN_INCLUDE = "STD_BATCH_SCREEN_INCLUDE"
GLOBAL CONSTANT STD_BATCH_SCREEN_SUBGRID = "STD_BATCH_SCREEN_SUBGRID"
GLOBAL CONSTANT STD_BATCH_SCREEN_FIELDS  = "STD_BATCH_SCREEN_FIELDS"


GLOBAL CONSTANT STD_BATCH_HEADER_BASE   = "STD_BATCH_HEADER_BASE"

GLOBAL CONSTANT STD_BATCH_ENTRY_BASE            = "STD_BATCH_ENTRY_BASE"
GLOBAL CONSTANT STD_BATCH_ENTRY_SAMPLE          = "STD_BATCH_ENTRY_SAMPLE"
GLOBAL CONSTANT STD_BATCH_ENTRY_CONTROL         = "STD_BATCH_ENTRY_CONTROL"
GLOBAL CONSTANT STD_BATCH_ENTRY_STANDARD        = "STD_BATCH_ENTRY_STANDARD"
GLOBAL CONSTANT STD_BATCH_ENTRY_WASH            = "STD_BATCH_ENTRY_WASH"
GLOBAL CONSTANT STD_BATCH_ENTRY_MS              = "STD_BATCH_ENTRY_MS"
GLOBAL CONSTANT STD_BATCH_ENTRY_MSD             = "STD_BATCH_ENTRY_MSD"
GLOBAL CONSTANT STD_BATCH_ENTRY_BLANK           = "STD_BATCH_ENTRY_BLANK"
GLOBAL CONSTANT STD_BATCH_ENTRY_CAL_STD         = "STD_BATCH_ENTRY_CAL_STD"
GLOBAL CONSTANT STD_BATCH_ENTRY_CAL_BLANK       = "STD_BATCH_ENTRY_CAL_BLANK"
GLOBAL CONSTANT STD_BATCH_ENTRY_BLANK_CHK       = "STD_BATCH_ENTRY_BLANK_CHK"
GLOBAL CONSTANT STD_BATCH_ENTRY_METH_BLANK      = "STD_BATCH_ENTRY_METH_BLANK"
GLOBAL CONSTANT STD_BATCH_ENTRY_CAL_CHK         = "STD_BATCH_ENTRY_CAL_CHK"
GLOBAL CONSTANT STD_BATCH_ENTRY_INDEP_CHK       = "STD_BATCH_ENTRY_INDEP_CHK"
GLOBAL CONSTANT STD_BATCH_ENTRY_INIT_CHK        = "STD_BATCH_ENTRY_INIT_CHK"
GLOBAL CONSTANT STD_BATCH_ENTRY_INTERF_CHK      = "STD_BATCH_ENTRY_INTERF_CHK"
GLOBAL CONSTANT STD_BATCH_ENTRY_DUPLICATE       = "STD_BATCH_ENTRY_DUPLICATE"


GLOBAL CONSTANT STD_BATCH_TEMPLATE_BASE = "STD_BATCH_TEMPLATE_BASE"
GLOBAL CONSTANT STD_BATCH_TEMPLATE_LIST = "STD_BATCH_TEMPLATE_LIST"

GLOBAL CONSTANT BATCH_SCREEN_CREATE     = "CREATE"
GLOBAL CONSTANT BATCH_SCREEN_DISPLAY    = "DISPLAY"
GLOBAL CONSTANT BATCH_SCREEN_MODIFY     = "MODIFY"
GLOBAL CONSTANT BATCH_SCREEN_REVIEW     = "REVIEW"
GLOBAL CONSTANT BATCH_SCREEN_INSPECT    = "INSPECT"
GLOBAL CONSTANT BATCH_SCREEN_AUTHORISE  = "AUTHORISE"
GLOBAL CONSTANT BATCH_SCREEN_UPLOAD     = "UPLOAD"
GLOBAL CONSTANT BATCH_SCREEN_CANCEL     = "CANCEL"
GLOBAL CONSTANT BATCH_SCREEN_REACTIVATE = "REACTIVATE"


GLOBAL CONSTANT STD_BATCH_CHROM_LINK      = "STD_BATCH_CHROM_LINK"
GLOBAL CONSTANT STD_BATCH_CHROM_ANALYSIS  = "STD_BATCH_CHROM_ANALYSIS"
GLOBAL CONSTANT STD_BATCH_CHROM_SAMPLE    = "STD_BATCH_CHROM_SAMPLE"
GLOBAL CONSTANT STD_BATCH_CHROM_PEAK      = "STD_BATCH_CHROM_PEAK"

GLOBAL CONSTANT STD_BATCH_XCHROM_LINK     = "STD_BATCH_XCHROM_LINK"
GLOBAL CONSTANT STD_BATCH_XCHROM_ANALYSIS = "STD_BATCH_XCHROM_ANALYSIS"
GLOBAL CONSTANT STD_BATCH_XCHROM_SAMPLE   = "STD_BATCH_XCHROM_SAMPLE"
GLOBAL CONSTANT STD_BATCH_XCHROM_PEAK     = "STD_BATCH_XCHROM_PEAK"

GLOBAL CONSTANT STD_BATCH_ATLAS_ANALYSIS  = "STD_BATCH_ATLAS_ANALYSIS"

GLOBAL CONSTANT STD_BATCH_UPLOAD_CHANGE   = "STD_BATCH_UPLOAD_CHANGE"

GLOBAL CONSTANT STD_BATCH_TEMPLATE_TYPE  = "STD_BATCH_TEMPLATE_TYPE"
GLOBAL CONSTANT STD_BATCH_TEMPLATE_ENTRY = "STD_BATCH_TEMPLATE_ENTRY"

GLOBAL CONSTANT STD_BATCH_TYPE_BASE        = "STD_BATCH_TYPE_BASE"
GLOBAL CONSTANT STD_BATCH_TYPE_PREP        = "STD_BATCH_TYPE_PREP"
GLOBAL CONSTANT STD_BATCH_TYPE_PREPWEIGHT  = "STD_BATCH_TYPE_PREPWEIGHT"
GLOBAL CONSTANT STD_BATCH_TYPE_PREPLIQUID  = "STD_BATCH_TYPE_PREPLIQUID"
GLOBAL CONSTANT STD_BATCH_TYPE_PREPFILTER  = "STD_BATCH_TYPE_PREPFILTER"
GLOBAL CONSTANT STD_BATCH_TYPE_PREPWIPE    = "STD_BATCH_TYPE_PREPWIPE"
GLOBAL CONSTANT STD_BATCH_TYPE_INSTRUMENT  = "STD_BATCH_TYPE_INSTRUMENT"
GLOBAL CONSTANT std_BATCH_TYPE_FULLNOREP   = "STD_BATCH_TYPE_FULLNOREP"
GLOBAL CONSTANT std_BATCH_TYPE_FULLREP     = "STD_BATCH_TYPE_FULLREP"
GLOBAL CONSTANT std_BATCH_TYPE_FULLWEIGHT  = "STD_BATCH_TYPE_FULLWEIGHT"
GLOBAL CONSTANT std_BATCH_TYPE_FULLLIQUID  = "STD_BATCH_TYPE_FULLLIQUID"
GLOBAL CONSTANT std_BATCH_TYPE_FULLWIPE    = "STD_BATCH_TYPE_FULLWIPE"
GLOBAL CONSTANT std_BATCH_TYPE_FULLFILTER  = "STD_BATCH_TYPE_FULLFILTER"


{* VARIABLES ******************************************************************}


{******************************************************************************}

GLOBAL

ROUTINE batch_utils_initialise

{
*	Initialise all the batch utility modules
*
*******************************************************************************}

	IF NOT global ( "LIBRARY_INITIALISED" ) THEN

		SET GLOBAL "LIBRARY_INITIALISED" TO TRUE

	ENDIF

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_utils_get_batch_class_name ( VALUE database_name )

{
*	Return the name of the class for the given batch type
*
*******************************************************************************}

	RETURN ( "STD_BATCH_TYPE_" : strip ( database_name ))

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_utils_get_all_batches_for_job ( VALUE job_id            ,
						    batches           ,
					      VALUE include_cancelled )	 	

{
*	Find all the batches for the given job
*
*******************************************************************************}

	DECLARE count        ,
		test_number  ,
		batch_id     ,
		add_it	

	ARRAY batches

	
	test_number = SELECT samp_test_view . test_number
		      WHERE  job_name = job_id

	WHILE test_number <> EMPTY DO

		batch_id = SELECT batch_entry . identity
			   WHERE  test = test_number

		WHILE batch_id <> EMPTY DO

			add_it = TRUE
			count  = 1

			IF NOT include_cancelled THEN

				IF "X" = SELECT batch_header . status
				         WHERE identity = batch_id THEN

					add_it = FALSE
					count  = size_of_array ( batches )

				ENDIF

			ENDIF

			WHILE count <= size_of_array ( batches ) DO

				IF batches [ count ] = batch_id THEN

					add_it = FALSE
					count  = size_of_array ( batches )

				ENDIF

				count = count + 1

			ENDWHILE

			IF add_it THEN
	
				batches [ count ] = batch_id

			ENDIF

			NEXT batch_entry

			batch_id = SELECT batch_entry . identity

		ENDWHILE

		NEXT samp_test_view
		test_number = SELECT samp_test_view . test_number

	ENDWHILE

	RETURN ( size_of_array ( batches ) > 0 )

ENDROUTINE


