{******************************************************************************
*
* Module Name   : $BATCH_TEMPLATE_HEAD.RPF
*
* Purpose       : Modify the batch template header details 
*		  
*
* Document Ref. : 
*
* Specification : SE/T/VGSM320-WORK-BATCH
*
* Portability   : Not Checked
*
* Re-entrant    : 
*
*******************************************************************************}

ENABLE WINDOWS
SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_GENERAL

JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $BATCH_USER

{******************************************************************************}

ROUTINE batch_template_head_add_prompt (       form           ,
					 VALUE field_name     ,
					 VALUE message        ,
					 VALUE message_column ,
					 VALUE message_width  ,
					 VALUE prompt_column  ,
					 VALUE prompt_width   ,
					 VALUE row            ,
					 VALUE display_only   )	

{
*	Create a prompt
*
*******************************************************************************}

	DECLARE prompt_object ,
		terminator    ,
		field_type

	get_field_details batch_tmpl_header . 'field_name'
			  "DATA_TYPE" ,
			   field_type

	IF global ( "TERMTYPE" ) = "GUI" THEN

		terminator = ""

	ELSE

		terminator = ":" 	

	ENDIF

	message = pad ( message , " " , message_width ) : terminator

	form . add_display ( message                  ,
			     message_column           ,
			     row	              ,
			     PROMPT_RENDITION_BOLD    +
			     PROMPT_RENDITION_RAISED  )

	PROMPT OBJECT prompt_object
	       ON LINE row
	       FROM prompt_column
	       TO   prompt_column + prompt_width - 1 	
	       FORMAT batch_tmpl_header . 'field_name'
	      
	prompt_object . value                = SELECT batch_tmpl_header . 'field_name' 
	prompt_object . vgl_library          = global ( "current_library" )             
	prompt_object . leave_prompt_routine = "batch_template_head_leave_prompt"
	prompt_object . display_only         = display_only
	prompt_object . user_info            = field_name

	IF field_type = "Boolean" THEN

		prompt_object . is_check = TRUE

	ENDIF

	form . add_prompt ( prompt_object )
							

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_head_creation (       form         ,
				       VALUE display_only )	

{
*	Create the sample count fields
*
*******************************************************************************}

	DECLARE message        ,
		message_column ,
		message_width  ,
		prompt_column  ,
		prompt_width


	message_column = 2
	message_width  = 23
	prompt_column  = 26
	prompt_width   = 15

	message = get_user_message ( "BATCH_TEMPLATE_HEAD_SYNTAX" , 1 )
	
	batch_template_head_add_prompt (  form             ,
					 "Syntax"          ,
					  message          ,
					  message_column   ,
					  message_width    ,
					  prompt_column    ,
					  prompt_width     ,
					  1                ,
					  display_only     )	

	message = get_user_message ( "BATCH_TEMPLATE_HEAD_EDIT_LIST" , 1 )
	
	batch_template_head_add_prompt (  form              ,
					 "EDIT_LIST"        ,
					  message           ,
					  message_column    ,
					  message_width     ,
					  prompt_column     ,
					  prompt_width      ,
					  2                 ,
					  display_only      )	
					
	message = get_user_message ( "BATCH_TEMPLATE_HEAD_EDIT_CRITERIA" , 1 )
	
	batch_template_head_add_prompt (  form              ,
					 "EDIT_CRITERIA"    ,
					  message           ,
					  message_column    ,
					  message_width     ,
					  prompt_column     ,
					  prompt_width      ,
					  3                 ,
					  display_only      )	

	message = get_user_message ( "BATCH_TEMPLATE_HEAD_AUTO_SELECT" , 1 )
	
	batch_template_head_add_prompt (  form              ,
					 "Automatic_select" ,
					  message           ,
					  message_column    ,
					  message_width     ,
					  prompt_column     ,
					  prompt_width      ,
					  4                 ,
					  display_only      )	


	message = get_user_message ( "BATCH_TEMPLATE_HEAD_MIN_SAMPLES" , 1 )
	
	batch_template_head_add_prompt (  form             ,
					 "minimum_samples" ,
					  message          ,
					  message_column   ,
					  message_width    ,
					  prompt_column    ,
					  prompt_width     ,
					  5                ,
					  display_only     )	

	message = get_user_message ( "BATCH_TEMPLATE_HEAD_MAX_SAMPLES" , 1 )
	
	batch_template_head_add_prompt (  form             ,
					 "maximum_samples" ,
					  message          ,
					  message_column   ,
					  message_width    ,
					  prompt_column    ,
					  prompt_width     ,
					  6                ,
					  display_only     )	

	message = get_user_message ( "BATCH_TEMPLATE_HEAD_COMPRESSION" , 1 )
	
	batch_template_head_add_prompt (  form             ,
					 "compression"     ,
					  message          ,
					  message_column   ,
					  message_width    ,
					  prompt_column    ,
					  prompt_width     ,	
					  7                ,
					  display_only     )	
		
ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_head_randoms (       form         ,
			              VALUE display_only )	

{
*	Create the Random fields
*
*******************************************************************************}

	DECLARE message        ,
		message_column ,
		message_width  ,
		prompt_column  ,
		prompt_width


	message_column = 45
	message_width  = 23
	prompt_column  = 69
	prompt_width   = 15

	message = get_user_message ( "BATCH_TEMPLATE_HEAD_RAND_CONTROL" , 1 )
	
	batch_template_head_add_prompt (  form             ,
					 "RANDOM_CONTROL"  ,
					  message          ,
					  message_column   ,
					  message_width    ,
					  prompt_column    ,
					  prompt_width     ,
					  1                ,
					  display_only     )	

	message = get_user_message ( "BATCH_TEMPLATE_HEAD_RAND_EVERY" , 1 )
	
	batch_template_head_add_prompt (  form             ,
					 "RANDOM_NUMBER"   ,
					  message          ,
					  message_column   ,
					  message_width    ,
					  prompt_column    ,
					  prompt_width     ,
					  2                ,
					  display_only     )	
							
ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_head_printing (       form         ,
			               VALUE display_only )	

{
*	Create the Printing fields
*
*******************************************************************************}

	DECLARE message        ,
		message_column ,
		message_width  ,
		prompt_column  ,
		prompt_width


	message_column = 45
	message_width  = 23
	prompt_column  = 69
	prompt_width   = 15

	message = get_user_message ( "BATCH_TEMPLATE_HEAD_AUTO_PRINT" , 1 )
	
	batch_template_head_add_prompt (  form               ,
					 "PRINT_ON_CREATION" ,
					  message            ,
					  message_column     ,
					  message_width      ,
					  prompt_column      ,
					  prompt_width       ,
					  4                  ,
					  display_only       )	

	message = get_user_message ( "BATCH_TEMPLATE_HEAD_PRINTER" , 1 )
	
	batch_template_head_add_prompt (  form             ,
					 "PRINTER"         ,
					  message          ,
					  message_column   ,
					  message_width    ,
					  prompt_column    ,
					  prompt_width     ,
					  5                ,
					  display_only     )	
							
ENDROUTINE


{******************************************************************************}

ROUTINE batch_template_head_create_form (       form         ,
					  VALUE identity     ,
					  VALUE display_only )

{
*	Create the form and put on all the prompts.
*
*******************************************************************************}

	CREATE OBJECT PROMPT_CLASS_FORM , form
	       
	form . height = 7
	form . width  = 86
	form . row    = 8
	form . column = 4
	form . border = TRUE
	form . header = get_user_message ( "BATCH_TEMPLATE_HEAD_HEADER" ,1 ) :
					    " "                              :	
					    identity                    

	form . footer = get_user_message ( "BATCH_TEMPLATE_HEAD_FOOTER" , 1 )

	form . button_style     = FORM_BUTTON_CLOSE
	form . return_behaviour = FORM_RETURN_STAY

	form . help_context = "$BATCH_TMPL_PARAMS"

	batch_template_head_creation ( form         ,
			 	       display_only )	
	       		
	batch_template_head_randoms  ( form         ,
				       display_only )	

	batch_template_head_printing ( form         ,
				       display_only )	

        form . add_frame ( ""            ,
			   1             ,
			   1             ,
			   form . height ,
			   form . width  )		
	
ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_head_leave_prompt ( self )

{
*	Leave the prompt - copy the value back again
*
*******************************************************************************}

	IF ( self . get_lastkey () <> "EXIT" ) AND
	   ( NOT self . display_only         ) THEN

		ASSIGN batch_tmpl_header . 'self . user_info' =
				self . value 

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_head_validation ( self )

{
*	Validate the form.
*
*******************************************************************************}

	DECLARE valid   ,
		message

	valid = TRUE

	IF ( SELECT batch_tmpl_header . minimum_samples <> 0 ) AND
	   ( SELECT batch_tmpl_header . maximum_samples <> 0 ) THEN	

		IF ( SELECT batch_tmpl_header . minimum_samples ) >
		   ( SELECT batch_tmpl_header . maximum_samples ) THEN

			message = get_user_message ( "BATCH_TEMPLATE_HEAD_MIN_ERROR" ,1  ) 
			flash_message ( message , TRUE )
	
			valid = FALSE
		
		ENDIF

	ENDIF

	IF ( NOT SELECT batch_tmpl_header . edit_list ) THEN

		ASSIGN batch_tmpl_header . automatic_select = TRUE

	ENDIF

	RETURN ( valid )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_template_head_labtable ( VALUE identity      ,
				       VALUE copy_identity ,
				       VALUE mode          )		

{
*	Called from labtable editor.
*
*******************************************************************************}

	DECLARE form

	IF mode = "MODIFY" THEN

		batch_template_head_create_form ( form     ,
						  identity ,
						  FALSE    )

		form . validation_routine = "batch_template_head_validation"
		form . start_prompt ()
		form . wait_prompt  ()
		form . end_prompt   ()

	ELSEIF mode = "DISPLAY" THEN

		batch_template_head_create_form ( form     ,
						  identity ,
						  TRUE     )

		form . start_prompt ()
		form . wait_prompt  ()
		form . end_prompt   ()

	ELSEIF mode = "SAVE" THEN
    
		CALL_ROUTINE "batch_template_criteria_write_stored"
		     IN LIBRARY "$BATCH_TEMPLATE" USING identity

	ENDIF

ENDROUTINE
