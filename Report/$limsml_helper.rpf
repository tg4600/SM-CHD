{Compared 20140123 /DKTBG}

{*******************************************************************************
*
* Module Name   : $LIMSML_HELPER
*
* Purpose       : LIMSML Helper wrap classes
*
* Document Ref  : None
*
*******************************************************************************}
JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_VGL
JOIN STANDARD_LIBRARY STD_ARRAY

JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $BL
JOIN LIBRARY $LIMSML_SMADO
SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILE_OPTION DECLARE
ENABLE WINDOWS

{******************************************************************************}

GLOBAL CONSTANT HELPER_RICHDOCUMENT	= "HELPER_RICH" 	{ Limsml Doc   }
GLOBAL CONSTANT HELPER_DOCUMENT	    	= "HELPER_DOC"		{ Limsml Doc   }
GLOBAL CONSTANT HELPER_ENTITY		= "HELPER_ENTITY" 	{ Limsml Entity }
GLOBAL CONSTANT HELPER_ACTION		= "HELPER_ACTIONML" 	{ Limsml Action }
GLOBAL CONSTANT HELPER_TRANSACTION	= "HELPER_TRANSACTION" 	{ Limsml Transaction }
GLOBAL CONSTANT HELPER_FIELD		= "HELPER_FIELD" 	{ Limsml Field }
GLOBAL CONSTANT HELPER_ERROR		= "HELPER_ERROR" 	{ Limsml Error }
GLOBAL CONSTANT HELPER_PARAMETER	= "HELPER_PARAMETER" 	{ Limsml Parameter }

GLOBAL CONSTANT LIMSML_STD_NET		= "STD_NET_SERVER"      { .Net Class }

{GLOBAL CONSTANT HELPER_VERSION          = "9.2.1.0"}

{Reference to .Net assembly}
{GLOBAL CONSTANT HELPER_ASSEMBLY		= "Thermo.SM.LIMSML.Helper, Culture=" : ASCII(34) : ASCII(34) : 
                                          ", PublicKeyToken=c8f5c7c0d4405e65, Version=" : HELPER_VERSION} 

GLOBAL CONSTANT HELPER_ASSEMBLY		= "Thermo.SM.LIMSML.Helper"

{*******************************************************************************
*                          M A I N   C O D E
*******************************************************************************}

example_of_usage ()
example_of_usage_file ()

EXIT


{*******************************************************************************
*                      G L O B A L   R O U T I N E S
********************************************************************************}

GLOBAL ROUTINE limsml_helper_define_class

{ This global routine is used for initialising the LIMSMLRICHDOCUMENT classes.
* This does not need to be called if the library has already been initialised
* elsewhere.
*
* Parameters   : None
* Return Value : None
*
*******************************************************************************}

	{**********************************************************************}
	{* LIMSML Rich Document Class                                         *}
	{**********************************************************************}

	DEFINE CLASS HELPER_RICHDOCUMENT

		{**************************************************************}
		{* LIMSML Rich Document Class is used to create new xml       *}
		{* documents. This is a wrapper class for the helper assembly.*}
		{* All routines are to create xml, the intialisation of this  *}
		{* class create header, transaction and error nodes of the xml*}
		{**************************************************************}

		INITIALISATION

		PROPERTIES

			"document"       { limsml document object              }

		ACTIONS

			"returnxml"   ,  { Return built xml in a string        }
			"setresponse" ,  { Set the type to data/system         }
			"adduserlogin",  { Add a user header to the limsml     }
			"addentity"   ,  { Add a entity to the limsml          }
			"addentityxml",  { Add a entity to the limsml by xml   }
			"addheader"   ,  { Add a header to the limsml          }
			"addtransaction",{ Add a transaction to the limsml     }
			"gettransaction",{ Get a transaction                   }
			"transactiontotal", { Get number of transactions       }
			"adddata"	,{ Add a data to the limsml            }
			"adderror"	,{ Add a error to the limsml           }
			"adderrorall"	,{ Add a error to the limsml           }
			"adderrorxml"	,{ Add a serialized error              }
			"geterror"	,{ Get a error from the limsml         }
			"errortotal"	,{ Get number of errors                }
			"trace"		,{ Send object information to EventLog.}
			"reset"          { Set any refs to empty               }

	END CLASS


	{**********************************************************************}
	{* LIMSML Document Class                                              *}
	{**********************************************************************}

	DEFINE CLASS HELPER_DOCUMENT

		{**************************************************************}
		{* LIMSML Document Class is used to process xml documents.    *}
		{* This is a wrapper class for the helper assembly. No xml is *}
		{* created in the initialisation of the class.                *}
		{**************************************************************}

		INITIALISATION

		PROPERTIES

			"document"       { limsml document object              }


		ACTIONS
			"returnxml"   ,  { Return built xml in a string        }
			"addtransaction",{ Add a transaction to the limsml     }
			"gettransaction",{ Get a transaction                   }
			"transactiontotal", { Get number of transactions       }
			"adddata"       ,{ Add a data to the limsml            }
			"addfile"	,{ Add a file to the limsml            }
			"addtempfile"   ,{ Add a temporary file to the limsml  }
			"adderror"	,{ Add a error to the limsml           }
			"adderrorall"	,{ Add a error to the limsml           }
			"adderrorxml"	,{ Add a serialized error              }
			"geterror"	,{ Get a error from the limsml         }
			"errortotal"	,{ Get number of errors                }
			"trace"		,{ Send object information to EventLog.}
			"reset"          { Set any refs to empty               }


	END CLASS



	{**********************************************************************}
	{* LIMSML Entity Class                                                *}
	{**********************************************************************}

	DEFINE CLASS HELPER_ENTITY

		{**************************************************************}
		{* LIMSML Entity Class to represent the object in vgl.        *}
		{**************************************************************}

		PROPERTIES

			"entity"       	     { limsml document object          }

		ACTIONS

			"create",            { create the entity object        }
			"returnxml",         { Xml string of entity            }
			"gettype",           { Get entity type                 }

			"addaction",         { Add action to current entity    }
			"getaction",         { Return an action                }
			"actiontotal",       { Return number of actions        }


			"addchild",          { Add child to current entity     }
			"addchildxml",       { Add child to current entity     }
			"getchild",          { Get field from current entity   }
			"copy",		     { Copy Entity                     }
			"childtotal",        { Return number of children       }

			"field_out",         { Add a field with dir Out        }
			"field_in",          { Add a field with dir In         }
			"field_inout",       { Add a field with dir InOut      }
			"get_field_by_name", { Get field by its name           }
			"get_field_by_index",{ Get field by its index value    }
			"get_field_default", { Get field or use default val    }
			"set_field_by_name", { Set a fields value              }
			"get_field_value",   { Return value of a field         }
			"fieldtotal",        { Return number of fields         }

			"fields_bl_set",     { Set fields to business logic    }
			"fields_bl_get",     { Get fields to business logic    }
			"bl_update",         { Set fields to business logic    }

			"reset"              { Set any refs to empty           }

	END CLASS



	{**********************************************************************}
	{* LIMSML Transaction Class                                           *}
	{**********************************************************************}

	DEFINE CLASS HELPER_TRANSACTION

		{**************************************************************}
		{* LIMSML Transaction Class to represent the object in vgl.   *}
		{**************************************************************}

		PROPERTIES

			"transaction"

		ACTIONS

			"create"      	, { Create the transaction object     }
			"returnxml"	, { Return the serialized version     }
			"getentity" 	, { Get an entity by the index value  }
			"entitytotal"	, { Return number of entites          }
			"get_resp_type" , { Return the reponse type           }
			"get_identity"  , { Return the transaction id         }
			"reset"           { Set the transaction to empty      }

	END CLASS



	{**********************************************************************}
	{* LIMSML Action Class                                                *}
	{**********************************************************************}

	DEFINE CLASS HELPER_ACTION

		{**************************************************************}
		{* LIMSML Action Class to represent the object in vgl.        *}
		{**************************************************************}

		PROPERTIES

			"action"       { Action document object              }

		ACTIONS

			"create"      ,  { Create the action object          }
			"addparameter",  { Add parameter to current action   }
			"get_param_by_index",{ Get parameter by index        }
			"get_param_by_name", { Get parameter by name         }
			"get_param_default", { Get parameter by default value}
			"getcommand"  ,  { Return command                    }
			"paramtotal"  ,  { Return number of parameters       }
			"reset"          { Set any refs to empty             }

	END CLASS


	{**********************************************************************}
	{* LIMSML Field Class                                                *}
	{**********************************************************************}

	DEFINE CLASS HELPER_FIELD

		{**************************************************************}
		{* LIMSML Field Class to represent the object in vgl.         *}
		{**************************************************************}

			PROPERTIES

				"field"       { Action document object              }

			ACTIONS

				"create"      	, { Create the field object           }
				"getname"	, { Get field name                    }
				"getvalue"  	, { Get value of field                }
				"setvalue"  	, { Set value of field                }
				"getdirection"  , { Get field direction               }
				"getfieldtype"  , { Get field data type               }
				"setfieldtype"  , { Set field data type               }
				"reset"           { Set any refs to empty             }

	END CLASS


	{**********************************************************************}
	{* LIMSML Parameter Class                                             *}
	{**********************************************************************}

	DEFINE CLASS HELPER_PARAMETER

		{**************************************************************}
		{* LIMSML Parameter Class to represent the object in vgl.     *}
		{**************************************************************}

			PROPERTIES

				"parameter"       { Parameter object              }

			ACTIONS

				"create"      	, { Create the param object           }
				"getname"	, { Get param name                    }
				"getvalue"  	, { Get value of param                }
				"reset"           { Set any refs to empty             }

	END CLASS


	{**********************************************************************}
	{* LIMSML Error Class                                                 *}
	{**********************************************************************}

	DEFINE CLASS HELPER_ERROR

		{**************************************************************}
		{* LIMSML Error Class to represent the object in vgl.         *}
		{**************************************************************}

			PROPERTIES

				"error"       { Error object              }

			ACTIONS

				"create"      	, { Create the param object           }
				"returnxml"	, { Serialized error                  }
				"addchild"	, { Add child error                   }
				"adddumpfile"	, { Add a vgl crash to the error      }
				"adderrorall"	, { Add child error                   }
				"getchild"	, { Get child error                   }
				"childtotal"	, { Total number of child errors      }
				"setcode"	, { Set property                      }
				"setdescription", { Set property                      }
				"setseverity"	, { Set property                      }
				"setsource"	, { Set property                      }
				"getcode"	, { Get property                      }
				"getdescription", { Get property                      }
				"getsummary"    , { Get property                      }
				"getseverity"   , { Get property                      }
				"getsource"     , { Get property                      }
				"reset"           { Set any refs to empty             }

	END CLASS


ENDROUTINE


{******************************************************************************}
{*        L I M S M L    D O C U M E N T     C L A S S                        *}
{******************************************************************************}

ROUTINE helper_doc_class_initialisation ( self )

{ This initialisation routine is called when an ob" )the
* LIMSML Rich Class.
*
* Parameters   : Self [HELPER_DOC]
*
* Return Value : None
*
*******************************************************************************}


	CREATE OBJECT LIMSML_STD_NET, self . document

	self . document . create ( HELPER_ASSEMBLY, 
	                           "Thermo.SM.LIMSML.Helper.High.Document")

ENDROUTINE



{******************************************************************************}

ROUTINE helper_doc_action_returnxml ( self )

{ Return a serialized string of the limsml document.
*
* Parameters   : Self, [HELPER_DOC]
*
* Return Value : [Text]Serialized string
*
*******************************************************************************}

	RETURN ( self . document . GetXml() )

ENDROUTINE


{******************************************************************************}



ROUTINE helper_doc_action_addtransaction ( self , VALUE xml )

{ Add a transaction to the limsml document.
*
* Parameters   : Self, [HELPER_DOC]
*                Xml ,[Text]Serialized string of a transaction
* Return Value : None
*
*******************************************************************************}

	DECLARE error_mess

	error_mess = self . document . AddTransactionVGL ( xml )

	RETURN ( error_mess )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_doc_action_gettransaction ( self , VALUE index_val )

{ Get a transaction from the limsml document.
*
* Parameters   : Self, [HELPER_DOC]
*                Index_val, [Integer] Index value of transaction
* Return Value : [HELPER_TRANSACTION]Object, EMPTY if index_val is out of range.
*
*******************************************************************************}

	DECLARE transaction_obj, return_obj

	return_obj = self . document . GetTransaction ( index_val )

	IF return_obj <> EMPTY THEN

		CREATE OBJECT HELPER_TRANSACTION, transaction_obj

		transaction_obj . transaction = return_obj
	ELSE

		transaction_obj = EMPTY

	ENDIF

	RETURN ( transaction_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_doc_action_transactiontotal ( self )

{ Get number of transactions
*
* Parameters   : Self, [HELPER_DOC]
*
* Return Value : [Integer]Number of Transactions
*
*******************************************************************************}

	RETURN ( self . document . NumberOfTransactions () )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_doc_action_adddata ( self , VALUE xml )

{ Add a data to the limsml document.
*
* Parameters   : Self, [HELPER_DOC]
*                Xml, [Text] Serialized string of a dataset
* Return Value : None
*
*******************************************************************************}

	DECLARE error_mess

	error_mess = self . document . AddData ( xml )

	RETURN ( error_mess )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_doc_action_addfile ( self , VALUE filename , VALUE completefile )

{ Add a data to the limsml document.
*
* Parameters   : Self, [HELPER_DOC]
*                Filename, [Text] file name and path
*                Completefile, [Text] To encode file from vgl
* Return Value : [Text]Error message, blank if ok
*
*******************************************************************************}

	DECLARE error_mess, search_array, stat_var, size, absolute



	FILE FIND filename, search_array, stat_var


	size = size_of_array(search_array)

	IF ( size = 1) THEN

		absolute = search_array[1]
		error_mess = self . document . AddFile ( absolute , completefile )

	ELSEIF ( size < 1 ) THEN

		error_mess = "No file found"

	ELSE

		error_mess = "More then one file found"

	ENDIF


	RETURN ( error_mess )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_doc_action_addtempfile ( self 			,
                                        VALUE filename 		,
                                        VALUE completefile      )

{ Add a data to the limsml document.
*
* Parameters   : Self, [HELPER_DOC]
*                Filename, [Text] file name and path
*                Completefile, [Boolean] To encode file from vgl
*                Deletefile, [Boolean] Delete file once encoded
* Return Value : [Text]Error message, blank if ok
*
*******************************************************************************}

	DECLARE error_mess, search_array, stat_var, size, absolute



	FILE FIND filename, search_array, stat_var


	size = size_of_array(search_array)

	IF ( size = 1) THEN

		absolute = search_array[1]
		error_mess = self . document . AddTempFile ( absolute 		,
		                                             completefile	,
		                                             TRUE 	)

	ELSEIF ( size < 1 ) THEN

		error_mess = "No file found"

	ELSE

		error_mess = "More then one file found"

	ENDIF


	RETURN ( error_mess )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_doc_action_adderror ( self , VALUE error_summary )

{ Add a error to the limsml document.
*
* Parameters   : Self, [HELPER_DOC]
*                Error_summary, [Text]Summary Property
* Return Value : [HELPER_ERROR]Object
*
*******************************************************************************}

	DECLARE error_obj

	CREATE OBJECT HELPER_ERROR, error_obj

	error_obj . error = self . document . AddError ( error_summary )

	RETURN ( error_obj )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_doc_action_adderrorall ( self , VALUE error_summary, VALUE desc ,
					       VALUE code, VALUE severity ,
					       VALUE source )

{ Add a error to the limsml document.
*
* Parameters   : Self, [HELPER_DOC]
*                error_summary, [Text]Summary Property
*                desc, [Text]Description Property
*                code, [Text]Code Property
*                severity, [Text]Severity Property
* Return Value : [HELPER_ERROR]Object
*
*******************************************************************************}

	DECLARE error_obj

	CREATE OBJECT HELPER_ERROR, error_obj

	error_obj . error = self . document . AddError ( error_summary )

	error_obj . setcode ( code )
	error_obj . setdescription ( desc )
	error_obj . setseverity ( severity )
	error_obj . setsource ( source )

	RETURN ( error_obj )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_doc_action_geterror ( self , VALUE index_val )

{ Get an error by the index value
*
* Parameters   : Self, [HELPER_DOC]
*                index_val, [Integer]Array value
* Return Value : [HELPER_ERROR]Object, EMPTY if index_val is out of range.
*
*******************************************************************************}

	DECLARE error_obj, return_obj

	return_obj = self . document . GetError ( index_val )

	IF return_obj <> EMPTY THEN

		CREATE OBJECT HELPER_ERROR, error_obj

		error_obj . error = return_obj
	ELSE

		error_obj = EMPTY

	ENDIF

	RETURN ( error_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_doc_action_adderrorxml ( self , VALUE error_xml )

{ Add a serialized error to the limsml document.
*
* Parameters   : Self, [HELPER_DOC]
*                Error_summary, [Text]Summary Property
* Return Value : [HELPER_ERROR]Object
*
*******************************************************************************}

	DECLARE error_obj

	CREATE OBJECT HELPER_ERROR, error_obj

	error_obj . error = self . document .AddErrorXml ( error_xml )

	RETURN ( error_obj )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_doc_action_errortotal ( self )

{ Get an error by the index value
*
* Parameters   : Self, [HELPER_DOC]
*
* Return Value : [Integer]Number of errors
*
*******************************************************************************}

	RETURN ( self . document . NumberOfErrors (  ) )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_doc_action_trace ( self , VALUE log_name )

{ Write details of the LIMSML object to the EventLog
  Once called look with the Application section of the Event Viewer.
  These should include the log_name section with lims data within.
*
* Parameters   : Self, [HELPER_DOC]
*                Log_name, [Text]Log Event Name
*
* Return Value : N/a
*
*******************************************************************************}

	self . document . LimsmlTrace ( log_name )

ENDROUTINE


{******************************************************************************}

ROUTINE helper_doc_action_reset ( self )

{ Remove any references to .NET objects.
*
* Parameters   : Self, [HELPER_DOC]
*
* Return Value : None
*
*******************************************************************************}

	self . document = EMPTY

ENDROUTINE


{******************************************************************************}
{*        L I M S M L     R I C H  D O C U M E N T     C L A S S              *}
{******************************************************************************}

ROUTINE helper_rich_class_initialisation ( self )

{ This initialisation routine is called when an object is created from the
* LIMSML Rich Class.
*
* Parameters   : Self [HELPER_RICH]
*
* Return Value : None
*
*******************************************************************************}


	CREATE OBJECT LIMSML_STD_NET, self . document

	self . document . create ( HELPER_ASSEMBLY, 
	                           "Thermo.SM.LIMSML.Helper.High.RichDocument")

ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_returnxml ( self )

{ Return a serialized string of the limsml document.
*
* Parameters   : Self, [HELPER_RICH]
*
* Return Value : [Text]Serialized string
*
*******************************************************************************}

	RETURN ( self . document . GetXml() )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_setresponse ( self , VALUE response_type)

{ Set response
*
* Parameters   : Self, [HELPER_RICH]
*                Response_type, [Text]Xml Serialized Sting
* Return Value : None
*
*******************************************************************************}

	self . document . SetResponse( response_type )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_adduserlogin ( self, VALUE user, VALUE password )

{ Add user login header information to the limsml document.
*
* Parameters   : Self, [HELPER_RICH]
*                User, [Text]user name
*                Password, [Text]value of password
* Return Value : None
*
*******************************************************************************}

	self . document . AddUserLogin ( user, password )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_addentity ( self , VALUE type )

{ Add a entity to the limsml document.
*
* Parameters   : Self, [HELPER_RICH]
*                Type, [Text]Entity Type ie SAMPLE
* Return Value : [HELPER_ENTITY]Object
*
*******************************************************************************}

	DECLARE entity_obj

	CREATE OBJECT HELPER_ENTITY, entity_obj

	entity_obj . entity = self . document . AddEntity( type )

	RETURN ( entity_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_addentityxml ( self , VALUE xmlstring )

{ Add a entity to the limsml document.
*
* Parameters   : Self, [HELPER_RICH]
*                Xmlstring , [Text]Serialized version of an Entity
* Return Value : [HELPER_ENTITY]Object
*
*******************************************************************************}

	DECLARE entity_obj

	CREATE OBJECT HELPER_ENTITY, entity_obj

	entity_obj . entity = self . document . AddEntityXml( xmlstring )

	RETURN ( entity_obj )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_addheader ( self, VALUE name, VALUE head_val )

{ Add a header to the limsml document.
*
* Parameters   : Self, [HELPER_RICH]
*                Name , [Text]Name of parameter in header
*                Head_val , [Text]Value of the parameter
* Return Value : [HELPER_PARAMETER]Object
*
*******************************************************************************}

	DECLARE parameter_obj

	CREATE OBJECT HELPER_PARAMETER, parameter_obj

	parameter_obj . parameter = self . document . AddParameter ( name, head_val )

	RETURN ( parameter_obj )

ENDROUTINE


{******************************************************************************}

ROUTINE helper_rich_action_addtransaction ( self , VALUE xml )

{ Add a transaction to the limsml document.
*
* Parameters   : Self, [HELPER_RICH]
*                Xml , [Text]Serialized string of a transaction
* Return Value : None
*
*******************************************************************************}

	DECLARE error_mess, doc

	doc = self . document

	error_mess = doc . AddTransactionVGL ( xml )

	RETURN ( error_mess )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_gettransaction ( self , VALUE index_val )

{ Get a transaction from the limsml document.
*
* Parameters   : Self, [HELPER_RICH]
*                Index_val, [Integer]Index value of transaction
*
* Return Value : [HELPER_TRANSACTION]Object, EMPTY if index_val is out of range.
*
*******************************************************************************}

	DECLARE transaction_obj, return_obj

	return_obj = self . document . GetTransaction ( index_val )

	IF return_obj <> EMPTY THEN

		CREATE OBJECT HELPER_TRANSACTION, transaction_obj

		transaction_obj . transaction = return_obj

	ELSE

		transaction_obj = EMPTY

	ENDIF

	RETURN ( transaction_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_transactiontotal ( self )

{ Get number of transactions
*
* Parameters   : Self, [HELPER_RICH]
*
* Return Value : [Integer]Number of Transactions
*
*******************************************************************************}

	RETURN ( self . document . NumberOfTransactions () )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_adddata ( self , VALUE xml )

{ Add a data to the limsml document.
*
* Parameters   : Self, [HELPER_RICH]
*                Xml, [Text]Serialized string of a dataset
* Return Value : None
*
*******************************************************************************}

	DECLARE error_mess

	error_mess = self . document . AddData ( xml )

	RETURN ( error_mess )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_adderror ( self , VALUE error_summary )

{ Add a error to the limsml document.
*
* Parameters   : Self, [HELPER_RICH]
*                Error_summary, [Text]Summary Property
* Return Value : [HELPER_ERROR]Object
*
*******************************************************************************}

	DECLARE error_obj

	CREATE OBJECT HELPER_ERROR, error_obj

	error_obj . error = self . document .AddError ( error_summary )

	RETURN ( error_obj )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_adderrorall ( self , VALUE error_summary, VALUE desc,
					        VALUE code, VALUE severity ,
                                                VALUE source )

{ Add a error to the limsml document.
*
* Parameters   : Self, [HELPER_RICH]
*                error_summary, [Text]Summary Property
*                desc, [Text]Description Property
*                code, [Text]Code Property
*                severity, [Text]Severity Property
* Return Value : [HELPER_ERROR]Object
*
*******************************************************************************}

	DECLARE error_obj

	CREATE OBJECT HELPER_ERROR, error_obj

	error_obj . error = self . document . AddError ( error_summary )

	error_obj . setcode ( code )
	error_obj . setdescription ( desc )
	error_obj . setseverity ( severity )
	error_obj . setsource ( source )
	RETURN ( error_obj )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_geterror ( self , VALUE index_val )

{ Get an error by the index value
*
* Parameters   : Self, [HELPER_RICH]
*                Index_val, [Integer]Index value
* Return Value : [HELPER_ERROR]Object, EMPTY if index_val is out of range.
*
*******************************************************************************}

	DECLARE error_obj, return_obj

	return_obj = self . document . GetError ( index_val )

	IF return_obj <> EMPTY THEN

		CREATE OBJECT HELPER_ERROR, error_obj

		error_obj . error = return_obj

	ELSE
		error_obj = EMPTY

	ENDIF

	RETURN ( error_obj )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_adderrorxml ( self , VALUE error_xml )

{ Add a serialized error to the limsml document.
*
* Parameters   : Self, [HELPER_RICH]
*                Error_summary, [Text]Summary Property
* Return Value : [HELPER_ERROR]Object
*
*******************************************************************************}

	DECLARE error_obj

	CREATE OBJECT HELPER_ERROR, error_obj

	error_obj . error = self . document .AddErrorXml ( error_xml )

	RETURN ( error_obj )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_errortotal ( self )

{ Get an error by the index value
*
* Parameters   : Self, [HELPER_RICH]
*
* Return Value : [Integer]Number of errors
*
*******************************************************************************}

	RETURN ( self . document . NumberOfErrors (  ) )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_trace ( self , VALUE log_name )

{ Write details of the LIMSML object to the EventLog
  Once called look with the Application section of the Event Viewer.
  These should include the log_name section with lims data within.
*
* Parameters   : Self, [HELPER_DOC]
*                Log_name, [Text]Log Event Name
*
* Return Value : N/a
*
*******************************************************************************}

	self . document . LimsmlTrace ( log_name )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_rich_action_reset ( self )

{ Remove any references to .NET objects.
*
* Parameters   : Self, [HELPER_RICH]
*
* Return Value : None
*
*******************************************************************************}

	self . document = EMPTY

ENDROUTINE

{******************************************************************************}
{*               L I M S M L     E N T I T Y     C L A S S                    *}
{******************************************************************************}

ROUTINE helper_entity_action_create ( self )

{ Create the entity class, within the assembly.
*
* Parameters   : Self [HELPER_ENTITY]
*
* Return Value : None
*******************************************************************************}


	CREATE OBJECT LIMSML_STD_NET, self . entity

	self . entity . create ( HELPER_ASSEMBLY, 
	                         "Thermo.SM.LIMSML.Helper.Low.Entity")

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_returnxml ( self )

{ Return a serialized string of the entity.
*
* Parameters   : Self, [HELPER_ENTITY]
*
* Return Value : [Text]Serialized string
*
*******************************************************************************}

	RETURN ( self . entity . GetXml() )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_gettype ( self )

{ Create the entity class, within the assembly.
*
* Parameters   : Self, [HELPER_ENTITY]
*
* Return Value : [Text]Type of entity
*
*******************************************************************************}

	DECLARE entity_type

	entity_type = self . entity . Name

	RETURN ( entity_type )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_addaction ( self , VALUE command )

{ Add an action to the current entity
*
* Parameters   : Self, [HELPER_ENTITY]
*                Command,[Text]Command to add to action ie CreateByTemplate
* Return Value : [HELPER_ACTIONML]Object
*
*******************************************************************************}

	DECLARE action_obj

	CREATE OBJECT HELPER_ACTION, action_obj

	action_obj . action = self . entity . AddAction( command )

	RETURN ( action_obj )

ENDROUTINE


{******************************************************************************}

ROUTINE helper_entity_action_getaction ( self , VALUE index_val )

{ Get an action
*
* Parameters   : Self, [HELPER_ENTITY]
*                Index_val,[Integer]Array index value
* Return Value : [HELPER_ACTIONML]Object, EMPTY if index_val is out of range.
*
*******************************************************************************}

	DECLARE action_obj, return_obj

	return_obj = self . entity . GetAction( index_val )

	IF return_obj <> EMPTY THEN

		CREATE OBJECT HELPER_ACTION, action_obj

		action_obj . action  = return_obj

	ELSE

		action_obj = EMPTY

	ENDIF


	RETURN ( action_obj )

ENDROUTINE



{******************************************************************************}

ROUTINE helper_entity_action_addchild ( self , VALUE type )

{ Add an action to the current entity
*
* Parameters   : Self, [HELPER_ENTITY]
*                Type,[Text]Type of entity ie TEST
* Return Value : [HELPER_ENTITY]Object
*
*******************************************************************************}

	DECLARE entity_obj

	CREATE OBJECT HELPER_ENTITY, entity_obj

	entity_obj . entity = self . entity . AddChild( type )

	RETURN ( entity_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_addchildxml ( self , VALUE xmlstring )

{ Add an action to the current entity
*
* Parameters   : Self, [HELPER_ENTITY]
*                Type,[Text]Serialized xml string
* Return Value : [HELPER_ENTITY]Object
*
*******************************************************************************}

	DECLARE entity_obj

	CREATE OBJECT HELPER_ENTITY, entity_obj


	entity_obj . entity = self . entity . AddChildXml( xmlstring )


	RETURN ( entity_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_getchild ( self, VALUE index_val )

{ Add an action to the current entity
*
* Parameters   : Self, [HELPER_ENTITY]
*                Index_val ,[Integer]Array index value
* Return Value : [HELPER_ENTITY]Object, EMPTY if index_val is out of range.
*
*******************************************************************************}

	DECLARE entity_obj, return_obj

	CREATE OBJECT HELPER_ENTITY, entity_obj

	return_obj = self . entity . GetChild( index_val )

	IF return_obj <> EMPTY THEN

		entity_obj . entity =  return_obj

	ELSE

		entity_obj = EMPTY

	ENDIF

	RETURN ( entity_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_copy ( self, VALUE copy_child )

{ Add an action to the current entity
*
* Parameters   : Self, [HELPER_ENTITY]
*                Index_val ,[Integer]Array index value
* Return Value : [HELPER_ENTITY]Object
*
*******************************************************************************}

	DECLARE entity_obj, return_obj

	CREATE OBJECT HELPER_ENTITY, entity_obj

	return_obj = self . entity . CopyEntity( copy_child )

	IF return_obj <> EMPTY THEN
		entity_obj . entity =  return_obj
	ELSE
		entity_obj = EMPTY
	ENDIF

	RETURN ( entity_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_field_out ( self , VALUE name )

{ Add an field to the current entity with its direction set to Out
*
* Parameters   : Self, [HELPER_ENTITY]
*                Name,[Text]Field identity
* Return Value : [HELPER_FIELD]Object
*
*******************************************************************************}

	DECLARE field_obj

	CREATE OBJECT HELPER_FIELD, field_obj

	field_obj . field = self . entity . DirGetField ( name )

	RETURN ( field_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_field_in ( self , VALUE name , VALUE field_val )

{ Add an field to the current entity with its direction set to In
*
* Parameters   : Self, [HELPER_ENTITY]
*                Name,[Text]identity
*                Field_val,[Text]Field value
* Return Value : [HELPER_FIELD]Object
*
*******************************************************************************}

	DECLARE field_obj

	CREATE OBJECT HELPER_FIELD, field_obj

	field_obj . field = self . entity . DirSetField ( name , field_val )

	RETURN ( field_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_field_inout ( self , VALUE name , VALUE field_val )

{ Add an field to the current entity with its direction set to InOut
*
* Parameters   : Self, [HELPER_ENTITY]
*                Name,[Text]Field identity
*                Field_val,[Text]Field value
* Return Value : [HELPER_FIELD]Object
*
*******************************************************************************}

	DECLARE field_obj

	CREATE OBJECT HELPER_FIELD, field_obj

	field_obj . field = self . entity . DirGetSetField ( name , field_val )

	RETURN ( field_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_get_field_by_index ( self , VALUE index_val )

{ Returns a field by it index value
*
* Parameters   : Self, [HELPER_ENTITY]
*                Index_val,[Integer]Array value
* Return Value : [HELPER_FIELD]Object, EMPTY if index_val is out of range.
*
*******************************************************************************}

	DECLARE field_obj, return_obj

	return_obj = self . entity . GetField ( index_val )

	IF return_obj <> EMPTY THEN

		CREATE OBJECT HELPER_FIELD, field_obj

		field_obj . field = return_obj

	ELSE

		field_obj = EMPTY

	ENDIF

	RETURN ( field_obj )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_get_field_default ( self , VALUE fieldname, VALUE default )

{ Get the field and return its value
*
* Parameters   : Self, [HELPER_ENTITY]
*                Fieldname,[Integer]Field name
*                Default,[Integer]Default value for the field
* Return Value : [Text]Field value
*
*******************************************************************************}

	DECLARE field, field_val, val

	field = self . get_field_by_name ( fieldname )

	IF field <> EMPTY THEN

		field_val = field . getvalue ( )

		field . reset()

	ELSE

		field_val = EMPTY

	ENDIF


	IF field_val <> EMPTY THEN

		val = field_val

	ELSE

		val = default

	ENDIF


	RETURN ( val )


ENDROUTINE


{******************************************************************************}

ROUTINE helper_entity_action_get_field_by_name ( self , VALUE name )

{ Returns a field by it name
*
* Parameters   : Self, [HELPER_ENTITY]
*                Name,[Integer]Field name
* Return Value : [HELPER_FIELD]Object, EMPTY if name is not found.
*
*******************************************************************************}

	DECLARE field_obj, return_obj

	CREATE OBJECT HELPER_FIELD, field_obj

	return_obj = self . entity . GetFieldById ( name )

	IF return_obj <> EMPTY THEN

		field_obj . field = return_obj

	ELSE

		field_obj = EMPTY

	ENDIF


	RETURN ( field_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_set_field_by_name ( self ,
						 VALUE name ,
						 VALUE field_val)

{ Set the value of a field
*
* Parameters   : Self, [HELPER_ENTITY]
*                Name,[Text]Field name
*                Field,[Text]Value of Field
* Return Value : [BOOLEAN]TRUE if field is set
*
*******************************************************************************}

	DECLARE field_obj, ok

	ok = FALSE

	field_obj = self . get_field_by_name ( name )

	IF ( field_obj <> EMPTY ) THEN
		field_obj . set_value ( field_val)
		ok = TRUE
	ENDIF

	RETURN ( ok )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_get_field_value ( self , VALUE fieldname )

{ Get the field and return its value
*
* Parameters   : Self, [HELPER_ENTITY]
*                Fieldname,[Integer]Field name
* Return Value : [Text]Field value
*
*******************************************************************************}

	DECLARE field, field_val

	field = self . get_field_by_name ( fieldname )

	IF field <> EMPTY THEN

		field_val = field . getvalue ( )

		field . reset()

	ELSE

		field_val = EMPTY

	ENDIF


	RETURN ( field_val )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_fields_bl_set ( self , bl_object )

{ Set fields according to business logic
*
* Parameters   : Self, [HELPER_ENTITY]
*                bl_object,[BL_ITEM]Business logic object
* Return Value : None
*
*******************************************************************************}

	DECLARE name, val, count, field_num, current_field

	count = 0

	field_num = self . fieldtotal ( )

	WHILE ( count <= field_num - 1) DO

		current_field = self . get_field_by_index ( count )

		IF ( current_field . getdirection() <> "IN" ) THEN

			name = current_field . getname()
			val  = bl_object . get_value ( name )

			current_field . setvalue( val )

		ENDIF

		count = count + 1

	ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_fields_bl_get ( self , bl_object )

{ Set fields according to business logic
*
* Parameters   : Self, [HELPER_ENTITY]
*                bl_object,[BL_ITEM]Business logic object
* Return Value : None
*
*******************************************************************************}

	DECLARE count, field_num, current_field, curr_name, curr_val

	count = 0

	field_num = self . fieldtotal ( )

	WHILE ( count <= field_num - 1) DO

		current_field = self . get_field_by_index ( count )

		IF ( current_field . getdirection() <> "OUT" ) THEN

			curr_name = current_field . getname()
			curr_val = current_field . getvalue()

			bl_object . set_value ( curr_name, curr_val )

		ENDIF

		count = count + 1

		current_field . reset()

	ENDWHILE

ENDROUTINE
{******************************************************************************}

ROUTINE helper_entity_action_bl_update ( self, bl_object )

{ Set the field values according to the items in Business Logic Object
*
* Parameters   : Self, [HELPER_ENTITY]
*                bl_object,[BL_ITEM]Business logic object
* Return Value : None
*
*******************************************************************************}

	DECLARE count, field_num, current_field, name, val

	count = 0

	field_num = self . fieldtotal ( )

	WHILE ( count <= field_num - 1 ) DO

		current_field = self . get_field_by_index ( count )

		name = current_field . getname()
		val  = bl_object . get_value ( name )

		current_field . setvalue( val )

		count = count + 1

	ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE helper_entity_action_actiontotal ( self )

{ Return number of items
*
* Parameters   : Self, [HELPER_ENTITY]
*
* Return Value : [Integer]Number of items
*
*******************************************************************************}

	RETURN ( self . entity . NumberOfActions() )

ENDROUTINE


{******************************************************************************}

ROUTINE helper_entity_action_childtotal ( self )

{ Return number of items
*
* Parameters   : Self, [HELPER_ENTITY]
*
* Return Value : [Integer]Number of items
*
*******************************************************************************}

	RETURN ( self . entity . NumberOfChildren() )

ENDROUTINE



{******************************************************************************}

ROUTINE helper_entity_action_fieldtotal ( self )

{ Return number of items
*
* Parameters   : Self, [HELPER_ENTITY]
*
* Return Value : [Integer]Number of items
*
*******************************************************************************}

	RETURN ( self . entity . NumberOfFields() )

ENDROUTINE


{******************************************************************************}

ROUTINE helper_entity_action_reset ( self )

{ Remove any references to .NET objects.
*
* Parameters   : Self, [HELPER_ENTITY]
*
* Return Value : None
*
*******************************************************************************}

	self . entity = EMPTY

ENDROUTINE

{******************************************************************************}
{*               L I M S M L     T R A N S A C T I O N    C L A S S           *}
{******************************************************************************}

ROUTINE helper_transaction_action_create ( self )

{ Create the transaction class, within the assembly.
*
* Parameters   : Self [HELPER_TRANSACTION]
*
* Return Value : None
*
*******************************************************************************}


	CREATE OBJECT LIMSML_STD_NET, self . transaction

	self . transaction . create ( HELPER_ASSEMBLY, 
	                              "Thermo.SM.LIMSML.Helper.Low.Transaction")

ENDROUTINE

{******************************************************************************}



ROUTINE helper_transaction_action_returnxml ( self )

{ Return xml from the transaction
*
* Parameters   : Self, [HELPER_TRANSACTION]
*
* Return Value : [Text]Serialized string
*
*******************************************************************************}

	RETURN ( self . transaction . GetXml() )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_transaction_action_getentity ( self , VALUE index_val )

{ Return total number of entities within transaction
*
* Parameters   : Self, [HELPER_TRANSACTION]
*                Index_val,[Integer]Array value
* Return Value : [HELPER_ENTITY]Object, EMPTY if index_val is out of range.
*
*******************************************************************************}

	DECLARE entity_obj, return_obj

	return_obj = self . transaction. GetEntity( index_val )

	IF return_obj <> EMPTY THEN

		CREATE OBJECT HELPER_ENTITY, entity_obj

		entity_obj . entity  = return_obj

	ELSE

		entity_obj = EMPTY

	ENDIF

	RETURN ( entity_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_transaction_action_entitytotal ( self )

{ Return total number of entities within transaction
*
* Parameters   : Self, [HELPER_TRANSACTION]
* Return Value : [Integer]Number of entities
*
*******************************************************************************}

	RETURN ( self . transaction. NumberOfEntites() )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_transaction_action_get_resp_type ( self )

{ Get response type, from the transaction
*
* Parameters   : Self, [HELPER_TRANSACTION]
* Return Value : [Text]DATA or SYSTEM
*
*******************************************************************************}

	DECLARE response_type

	response_type = self . transaction. GetResponseType( )

	RETURN ( response_type )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_transaction_action_get_identity ( self )

{ Get transaction id
*
* Parameters   : Self, [HELPER_TRANSACTION]
* Return Value : [Text]Transaction Id
*
*******************************************************************************}

	RETURN ( self . transaction . GetIdentity() )

ENDROUTINE


{******************************************************************************}

ROUTINE helper_transaction_action_reset ( self )

{ Remove any references to .NET objects.
*
* Parameters   : Self, [HELPER_TRANSACTION]
* Return Value : None
*
*******************************************************************************}

	self . transaction = EMPTY

ENDROUTINE

{******************************************************************************}

{******************************************************************************}
{*               L I M S M L     A C T I O N     C L A S S                    *}
{******************************************************************************}

ROUTINE helper_actionml_action_create ( self )

{ Create the action class, within the assembly.
*
* Parameters   : Self [HELPER_ACTIONML]
*
* Return Value : None
*
*******************************************************************************}


	CREATE OBJECT LIMSML_STD_NET, self . action

	self . action . create ( HELPER_ASSEMBLY, 
	                         "Thermo.SM.LIMSML.Helper.Low.Action")

ENDROUTINE

{******************************************************************************}

ROUTINE helper_actionml_action_getcommand ( self )

{ Get command from current action
*
* Parameters   : Self, [HELPER_ACTIONML]
*
* Return Value : [Text]Action Command
*
*******************************************************************************}

	DECLARE command

	command = self . action . Name

	RETURN ( command )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_actionml_action_addparameter ( self, VALUE name, VALUE param_val )

{ Add a parameter to the current action
*
* Parameters   : Self, [HELPER_ACTIONML]
*                Name,[Text]Name of parameter
*                Param_val,[Text]Value of parameter
* Return Value : None
*
*******************************************************************************}

	self . action . AddParameter( name, param_val )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_actionml_action_get_param_by_index ( self, VALUE index_val )

{ Get a parameter by an index value
*
* Parameters   : Self, [HELPER_ACTIONML]
*                Index_val,[Integer]Array number
* Return Value : [HELPER_PARAMETER]Object, EMPTY if index_val is out of range.
*
*******************************************************************************}

	DECLARE parameter_obj, return_obj

	return_obj = self . action . GetParameter( index_val )

	IF return_obj <> EMPTY THEN

		CREATE OBJECT HELPER_PARAMETER, parameter_obj

		parameter_obj . parameter = return_obj
	ELSE

		parameter_obj = EMPTY

	ENDIF

	RETURN ( parameter_obj )

ENDROUTINE


{******************************************************************************}

ROUTINE helper_actionml_action_get_param_by_name ( self, VALUE paramname )

{ Get a parameter, by the parameter command
*
* Parameters   : Self, [HELPER_ACTIONML]
*                Paramname,[Text]Parameter name
* Return Value : [HELPER_PARAMETER]Object, EMPTY if paramname is not found.
*
*******************************************************************************}

	DECLARE parameter_obj, return_obj

	CREATE OBJECT HELPER_PARAMETER, parameter_obj

	return_obj = self . action . GetParameterById( paramname )

	IF return_obj <> EMPTY THEN

		parameter_obj . parameter = return_obj

	ELSE
		parameter_obj = EMPTY

	ENDIF


	RETURN ( parameter_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_actionml_action_get_param_default (       self     ,
						   VALUE paramname,
						   VALUE default  )

{ Get the param and return its value
*
* Parameters   : Self, [HELPER_ACTIONML]
*                Paramname,[Text]Parameter Name
*                Default,[Text]Default value
* Return Value : [Text]Parameter value
*
*******************************************************************************}

	DECLARE param, param_val, val



	param = self . get_param_by_name ( paramname )


	IF param <> EMPTY THEN

		param_val = param . getvalue ( )

		param . reset ( )


	ELSE

		param_val = EMPTY

	ENDIF


	IF param_val <> EMPTY THEN

		val = param_val

	ELSE

		val = default

	ENDIF



	RETURN ( val )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_actionml_action_paramtotal ( self )

{ Return number of items
*
* Parameters   : Self, [HELPER_ACTIONML]
*
* Return Value : [Integer]Number of items
*
*******************************************************************************}

	RETURN ( self . action . NumberOfParameters() )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_actionml_action_reset ( self )

{ Remove any references to .NET objects.
*
* Parameters   : Self, [HELPER_ACTIONML]
*
* Return Value : None
*
*******************************************************************************}

	self . action = EMPTY

ENDROUTINE

{******************************************************************************}


{******************************************************************************}
{*               L I M S M L     F I E L D       C L A S S                    *}
{******************************************************************************}

ROUTINE helper_field_action_create ( self )

{ Create the field class, within the assembly.
*
* Parameters   : Self [HELPER_FIELD]
*
* Return Value : None
*
*******************************************************************************}


	CREATE OBJECT LIMSML_STD_NET, self . field

	self . field . create ( HELPER_ASSEMBLY, 
	                        "Thermo.SM.LIMSML.Helper.Low.Field" )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_field_action_getname ( self )

{ Get the name of the field
*
* Parameters   : Self, [HELPER_FIELD]
*
* Return Value : [Text]Field Name
*
*******************************************************************************}

	DECLARE field_name

	field_name = self . field . Name

	RETURN ( field_name )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_field_action_getvalue ( self )

{ Get the value of the field
*
* Parameters   : Self, [HELPER_FIELD]
*
* Return Value : [Text]Field Value
*
*******************************************************************************}

	DECLARE temp_val, field_val, field_type

	temp_val = self . field . Value
	field_type = self . getfieldtype()

	IF ( temp_val = EMPTY ) THEN

		field_val = ""
	ELSE

		IF ( NOT BLANK ( field_type ) ) THEN

			field_val = smado_string_to_value( temp_val, field_type )
		ELSE

			field_val = temp_val

		ENDIF

	ENDIF

	RETURN ( field_val )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_field_action_getdirection ( self )

{ Get the direction of the field
*
* Parameters   : Self, [HELPER_FIELD]
*
* Return Value : [Text]Direction Value
*
*******************************************************************************}

	RETURN ( self . field . GetDirection() )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_field_action_getfieldtype ( self )

{ Get the data type of the field
*
* Parameters   : Self, [HELPER_FIELD]
*
* Return Value : [Text]Field Type
*
*******************************************************************************}

	RETURN ( self . field . GetFieldType() )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_field_action_setfieldtype ( self, VALUE type )

{ Get the data type of the field
*
* Parameters   : Self, [HELPER_FIELD]
*
* Return Value : [Text]Field Type
*
*******************************************************************************}

	self . field . SetFieldType( type )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_field_action_setvalue ( self , VALUE field_val )

{ Set the value of the field
*
* Parameters   : Self, [HELPER_FIELD]
*                Field_val,[Text]Field Value
* Return Value : None
*
*******************************************************************************}

	self . field . Value = field_val

ENDROUTINE

{******************************************************************************}

ROUTINE helper_field_action_reset ( self )

{ Remove any references to .NET objects.
*
* Parameters   : Self, [HELPER_FIELD]
* Return Value : None
*
*******************************************************************************}

	self . field = EMPTY

ENDROUTINE

{******************************************************************************}

{******************************************************************************}
{*               L I M S M L   P A R A M E T E R       C L A S S              *}
{******************************************************************************}

ROUTINE helper_parameter_action_create ( self )

{ Create the parameter class, within the assembly.
*
* Parameters   : Self [HELPER_PARAMETER]
*
* Return Value : None
*
*******************************************************************************}


	CREATE OBJECT LIMSML_STD_NET, self . parameter

	self . parameter . create ( HELPER_ASSEMBLY, 
	                            "Thermo.SM.LIMSML.Helper.Low.Parameter" )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_parameter_action_getname ( self )

{ Get the name of the parameter
*
* Parameters   : Self, [HELPER_PARAMETER]
*
* Return Value : [Text]Name of Parameter
*
*******************************************************************************}

	DECLARE param_name

	param_name = self . parameter . Name

	RETURN ( param_name )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_parameter_action_getvalue ( self )

{ Get the value of the parameter
*
* Parameters   : Self, [HELPER_PARAMETER]
*
* Return Value : [Text]Value of Parameter
*
*******************************************************************************}

	RETURN ( self . parameter . Value )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_parameter_action_reset ( self )

{ Remove any references to .NET objects.
*
* Parameters   : Self, [HELPER_PARAMETER]
*
* Return Value : None
*
*******************************************************************************}

	self . parameter = EMPTY

ENDROUTINE

{******************************************************************************}


{******************************************************************************}
{*               L I M S M L     E R R O R       C L A S S                    *}
{******************************************************************************}

ROUTINE helper_error_action_create ( self )

{ Create the error class, within the assembly.
*
* Parameters   : Self [HELPER_ERROR]
*
* Return Value : None
*
*******************************************************************************}


	CREATE OBJECT LIMSML_STD_NET, self . error

	self . error . create ( HELPER_ASSEMBLY, 
	                        "Thermo.SM.LIMSML.Helper.Low.Error" )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_returnxml ( self )

{ Return a serialized string of the limsml error.
*
* Parameters   : Self, [HELPER_ERROR]
*
* Return Value : [Text]Serialized string
*
*******************************************************************************}

	RETURN ( self . error . GetXml() )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_addchild ( self , VALUE summary)

{ Add child error
*
* Parameters   : Self, [HELPER_ERROR]
*                Summary,[Text]Error Summary Property
* Return Value : [HELPER_ERROR]Object
*
*******************************************************************************}

	DECLARE error_obj

	CREATE OBJECT HELPER_ERROR, error_obj

	error_obj . error = self . error . AddChild ( summary )

	RETURN ( error_obj )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_adderrorall ( self , VALUE error_summary, VALUE desc,
					         VALUE code, VALUE severity,
					         VALUE source )

{ Add a error to the limsml document.
*
* Parameters   : Self, [HELPER_DOC]
*                error_summary, [Text]Summary Property
*                desc, [Text]Description Property
*                code, [Text]Code Property
*                severity, [Text]Severity Property
*                source, [Text]Source Property
* Return Value : [HELPER_ERROR]Object
*
*******************************************************************************}

	DECLARE error_obj

	CREATE OBJECT HELPER_ERROR, error_obj

	error_obj . error = self . error . AddChild ( error_summary )

	error_obj . setcode ( code )
	error_obj . setdescription ( desc )
	error_obj . setseverity ( severity )
	error_obj . setsource ( source )

	RETURN ( error_obj )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_adddumpfile ( self , VALUE filename     ,
                                                 VALUE completefile ,
                                                 VALUE deletefile   )

{ Add a crash dump to the current error
*
* Parameters   : Self, [HELPER_ERROR]
*                Filename,[Text]File name and path of crash dump
*                Complete,[Text]Encode file now or later
*                Delete,[Text]Delete file once encoded
* Return Value : [TEXT]Error message
*
*******************************************************************************}

	DECLARE error_message

	error_message = ""
	error_message = self . error . AddFile ( filename     ,
	                                         completefile ,
	                                         deletefile   )

	RETURN ( error_message )

ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_childtotal ( self )

{ Return number of child errors
*
* Parameters   : Self, [HELPER_ERROR]
*
* Return Value : [Integer]Number of Error Children
*
*******************************************************************************}

	RETURN ( self . error . NumberOfChildren ( ) )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_setcode ( self , VALUE code )

{ Set error property
*
* Parameters   : Self, [HELPER_ERROR]
*                Code,[Text]Error Property
* Return Value : None
*
*******************************************************************************}

	self . error . Code = code


ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_setdescription ( self , VALUE description)

{ Set error property
*
* Parameters   : Self, [HELPER_ERROR]
*                Description,[Text]Error Property
* Return Value : None
*
*******************************************************************************}

	self . error . Description = description


ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_setseverity ( self , VALUE severity )

{ Set error property
*
* Parameters   : Self, [HELPER_ERROR]
*                Severity,[Text]Error Property
* Return Value : None
*
*******************************************************************************}

	self . error . Severity = severity


ENDROUTINE



{******************************************************************************}

ROUTINE helper_error_action_setsource ( self , VALUE source )

{ Set error property
*
* Parameters   : Self, [HELPER_ERROR]
*                Source,[Text]Error Property
* Return Value : None
*
*******************************************************************************}

	self . error . Source = source


ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_getcode ( self )

{ Get error property
*
* Parameters   : Self, [HELPER_ERROR]
* Return Value : [Text]Property Value
*
*******************************************************************************}

	RETURN ( self . error . Code )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_getdescription ( self )

{ Get error property
*
* Parameters   : Self, [HELPER_ERROR]
* Return Value : [Text]Property Value
*
*******************************************************************************}

	RETURN ( self . error . Description )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_getseverity ( self )

{ Get error property
*
* Parameters   : Self, [HELPER_ERROR]
* Return Value : [Text]Property Value
*
*******************************************************************************}

	RETURN ( self . error . Severity )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_getsummary ( self )

{ Get error property
*
* Parameters   : Self, [HELPER_ERROR]
*
* Return Value : [Text]Property Value
*
*******************************************************************************}

	RETURN ( self . error . Summary )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_getsource ( self )

{ Get error property
*
* Parameters   : Self, [HELPER_ERROR]
*
* Return Value : [Text]Property Value
*
*******************************************************************************}

	RETURN ( self . error . Source )


ENDROUTINE

{******************************************************************************}

ROUTINE helper_error_action_reset ( self )

{ Remove any references to .NET objects.
*
* Parameters   : Self, [HELPER_ERROR]
*
* Return Value : None
*
*******************************************************************************}

	self . error = EMPTY

ENDROUTINE

{******************************************************************************}

GLOBAL
ROUTINE limsml_helper_create_document ( VALUE xml_string )

{ Create an xml document from a serialized xml string.
*
* Parameters   : Self, [HELPER_ERROR]
*
* Return Value : [HELPER_DOCUMENT],New document
*
*******************************************************************************}

	DECLARE limsml, valid_limsml, test_string

	limsml_helper_define_class()

	test_string = xml_string

	CREATE OBJECT HELPER_DOCUMENT, limsml

	valid_limsml = limsml . document . ValidDocument( test_string )

	IF BLANK(valid_limsml) THEN

		limsml . document = limsml . document. CreateDocument( xml_string )
	ELSE

		limsml . document = EMPTY

	ENDIF

	RETURN ( limsml )

ENDROUTINE

{*******************************************************************************
*                               R O U T I N E S
*******************************************************************************}

ROUTINE example_of_usage

{ The following creates two limsml documents.  The first builds a document, the
  second uses the transaction to build the second.
*
* Parameters   : None
* Return Value : None
*
*******************************************************************************}

	DECLARE limsml, sample, test, bytempl_action, transaction, transactionstr,
		error1

	limsml_helper_define_class()

	CREATE OBJECT HELPER_RICHDOCUMENT, limsml

	limsml . addheader ( "headername", "header val" )

	sample = limsml . addentity ("SAMPLE")
	sample . field_in ("description","hello world")
	sample . field_out ("id_numeric")

	test = sample . addchild ("TEST")
	test . field_in ("analysis","hptest")
	test . field_out ("test_number")

	test = sample . addchild ("TEST")
	test . field_in ("analysis","hptest")
	test . field_out ("test_number")

	bytempl_action = sample . addaction ("CREATE_BY_TEMPLATE")
	bytempl_action . addparameter ("TEMPLATE", "TEMPLATE_A")

	transaction = limsml . gettransaction( 0 )

	transactionstr = transaction . returnxml()

	error1 = limsml . adderror ("test summary")
	error1 . setcode ("hello")
	error1 . setdescription ("hello2")
	error1 . setseverity ("hello3")

	flash_message ( transactionstr , TRUE )
	WriteToLog(transactionstr)
	flash_message ( error1 . returnxml() , TRUE )

	bytempl_action . reset ()
	test . reset ()
	sample . reset ()
   	limsml . reset ()

ENDROUTINE

{*******************************************************************************
*                               R O U T I N E S
*******************************************************************************}

ROUTINE example_of_usage_file

{ The following creates two limsml documents.  The first builds a document, the
  second uses the transaction to build the second.
*
* Parameters   : None
* Return Value : None
*
*******************************************************************************}

	DECLARE limsml, error_message, status, error_obj

	{Test file encode and delete the file}
	FILE COPY "smp$reports:$work_profile.rpf", "smp$reports:new_temp.rpf", status
	FILE COPY "smp$reports:$work_profile.rpf", "smp$reports:new_temp2.rpf", status

	IF ( status = EMPTY ) THEN
		limsml_helper_define_class()

		CREATE OBJECT HELPER_DOCUMENT, limsml

		error_message = limsml . addtempfile("smp$reports:new_temp.rpf", TRUE )
		flash_message ( error_message , TRUE )

		error_message = limsml . addtempfile("smp$reports:invalid.rpf", TRUE )
		flash_message ( error_message , TRUE )

		error_message = limsml . addtempfile("smp$reports:$*.rpf", TRUE )
		flash_message ( error_message , TRUE )


		error_obj = limsml . adderror ("Test error")

		error_message = error_obj . adddumpfile ("smp$reports:new_temp2.rpf", TRUE, TRUE )
		flash_message ( error_message , TRUE )


	ENDIF

   	limsml . reset ()

ENDROUTINE


{******************************************************************************}
{******************************************************************************}
{******************************************************************************}

{*************************************************************************
* Purpose      : Writes to predefined log
* Parameters   : Msg - what to write in log
* Return Value : N/A
**************************************************************************}
ROUTINE WriteToLog(VALUE Msg)
DECLARE file_name, check_ok

    file_name = "smp$logfiles:":global("current_library"):".log"
    SET DATE FORMAT "DZ-MZ-YYYY H24:MI:SS"

    IF NOT FILE EXISTS ( file_name ) THEN
        FILE CREATE file_name, check_ok
    ENDIF

    FILE EXTEND file_name, check_ok
    FILE WRITE file_name, Now() : " " : Msg , check_ok
    FILE CLOSE file_name, check_ok

    RESTORE DATE FORMAT

ENDROUTINE

{*************************************************************************}
