{******************************************************************************
*
* Module Name   : sqcwin_main
*
* Purpose       : Main control library for sqc
*                 
*
*******************************************************************************}

SET NOTPROTECTED

ENABLE WINDOWS

SET NAME "DISPLAY/"

SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN LIBRARY $lib_utils
JOIN LIBRARY $criteria_edit

JOIN LIBRARY $sqcwin_class
JOIN LIBRARY $sqcwin_data
JOIN LIBRARY $sqcwin_draw
JOIN LIBRARY $sqcwin_lib
JOIN LIBRARY $sqcwin_glbl
JOIN LIBRARY $sqcwin_calc

DECLARE sqc_chart

        define_sqc_chart()
        CREATE OBJECT "SQC_CHART", sqc_chart
        sqc_chart . edit_mode = "MODIFY"
        sqcwin_main(sqc_chart)


{******************************************************************************}

ROUTINE add_option (self)

{ 
* Add option routine
* 
* 
*
* Parameters   : self
* Return Value : n/a
*
*******************************************************************************}

        define_sqc_chart()
        CREATE OBJECT "SQC_CHART", sqc_chart
        sqc_chart . edit_mode = "ADD"
        sqcwin_main(sqc_chart)

ENDROUTINE

{******************************************************************************}

ROUTINE modify_option (self)

{ 
* Modify option routine
* 
* 
*
* Parameters   : self
* Return Value : n/a
*
*******************************************************************************}

        define_sqc_chart()
        CREATE OBJECT "SQC_CHART", sqc_chart
        sqc_chart . edit_mode = "MODIFY"
        sqcwin_main(sqc_chart)
ENDROUTINE

{******************************************************************************}

ROUTINE copy_option (self)

{ 
* Copy option routine
* 
* 
*
* Parameters   : self
* Return Value : n/a
*
*******************************************************************************}

        define_sqc_chart()
        CREATE OBJECT "SQC_CHART", sqc_chart
        sqc_chart . edit_mode = "COPY"
        sqc_chart . copy_chart_id = get_chart_id_action ()
        IF (sqc_chart . next_screen <> "EXIT") THEN
            sqcwin_main(sqc_chart)
        ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE delete_option (self)

{ 
* Delete option routine
* 
* 
*
* Parameters   : self
* Return Value : n/a
*
*******************************************************************************}

DECLARE answer, got_the_records

        got_the_records = FALSE

        define_sqc_chart()
        CREATE OBJECT "SQC_CHART", sqc_chart
        sqc_chart . edit_mode ="DELETE"

        WHILE ( NOT got_the_records ) DO

            sqc_chart . chart_id = get_chart_id_action ()

            IF (sqc_chart . next_screen <> "EXIT") THEN

                answer = confirm_with_text ( GET_USER_MESSAGE ( "SQCWIN_MAIN_CONF_1",1):
                                             STRIP(sqc_chart . chart_id) )

                IF (answer) THEN

                    got_the_records = get_sqc_chart (sqc_chart)

                    IF got_the_records THEN

                        update_database ( sqc_chart )
                        flash_message ( STRIP(sqc_chart . chart_id):
                                        GET_USER_MESSAGE ( "SQCWIN_MAIN_CONF_2", 1 ) ,
                                        TRUE )

                    ENDIF

                ENDIF

            ELSE

                got_the_records = TRUE

            ENDIF

        ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE view_option (self)

{ 
* View option routine
* 
* 
*
* Parameters   : self
* Return Value : n/a
*
*******************************************************************************}

DECLARE got_the_records


    define_sqc_chart()
    CREATE OBJECT "SQC_CHART", sqc_chart
    sqc_chart . edit_mode = "VIEW"
    sqc_chart . chart_id = get_chart_id_action ()

    IF ( sqc_chart . next_screen <> "EXIT" ) THEN

        got_the_records = get_sqc_chart ( sqc_chart )

        IF  got_the_records THEN

            sqc_chart . next_screen = "DRAW"
            draw_chart(sqc_chart)

        ENDIF

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE sqcwin_main (sqc_chart)

{ 
* Main sqcwin routine
* 
* 
*
* Parameters   : sqc_chart
* Return Value : n/a
*
*******************************************************************************}

   sqc_header (sqc_chart)

   chart_screens ( sqc_chart )

ENDROUTINE

{******************************************************************************}

ROUTINE chart_screens ( sqc_chart )

{ 
* Routine to control movement between sqc screens
* 
* 
*
* Parameters   : sqc_chart
* Return Value : n/a
*
*******************************************************************************}

DECLARE samp_test_result_data, continue

	continue = TRUE

	WHILE ( (sqc_chart . next_screen<>"EXIT") AND continue ) DO

	    IF (sqc_chart . next_screen="CRIT") THEN

		sqcwin_criteria(sqc_chart )

		IF ( sqc_chart . next_screen <> "EXIT" ) AND 
		   ( sqc_chart . next_screen <> "HEAD" ) THEN

			samp_test_result_data =
			    get_samp_test_result_data ( sqc_chart )

			IF (samp_test_result_data . size () = 0) THEN

			    flash_message ( GET_USER_MESSAGE ( "SQCWIN_MAIN_CONF_3", 1 ) ,
					    TRUE )
			    sqc_chart . next_screen = "CRIT"

			ELSE

			    change_to_sqcpoint_table (samp_test_result_data,sqc_chart)

			ENDIF

		ELSE

		    IF NOT ( sqc_chart . first_time ) THEN

			continue = FALSE

		    ENDIF

		ENDIF
	    ENDIF

	    IF continue THEN

		    IF (sqc_chart . next_screen="EDIT") THEN
			IF (sqc_chart . sqc_point . size() = 0) THEN
			    flash_message ( GET_USER_MESSAGE ( "SQCWIN_MAIN_CONF_3", 1 ) ,
					    TRUE )
			    sqc_chart . next_screen = "CRIT"
			ELSE
			    edit_screen (sqc_chart)
			ENDIF
		    ENDIF

		    IF (sqc_chart . next_screen="TYPE") THEN
			sqc_chart . ok_button_only = FALSE
			get_chart_type (sqc_chart)
		    ENDIF

		    IF (sqc_chart . next_screen=CUSUM) THEN
			cusum_chart_params (sqc_chart)
		    ENDIF

		    IF (sqc_chart . next_screen=IND_MR) THEN
			indmr_chart_params (sqc_chart)
		    ENDIF

		    IF (sqc_chart . next_screen=MEAN_RANGE) THEN
			meanr_chart_params (sqc_chart)
		    ENDIF

		    IF (sqc_chart . next_screen=MEAN_STD) THEN
			means_chart_params (sqc_chart)
		    ENDIF

		    IF (sqc_chart . next_screen=PROC_CAP) THEN
			procc_chart_params (sqc_chart)
		   ENDIF

		    IF (sqc_chart . next_screen="DRAW")
			draw_chart (sqc_chart)
		    ENDIF

		    IF ( sqc_chart . next_screen  = "HEAD" ) THEN
			sqc_header( sqc_chart )
		    ENDIF

		    IF ( sqc_chart . next_screen = "REDRAW" ) THEN

			continue = FALSE

		    ENDIF

	    ENDIF

	ENDWHILE

	IF ( sqc_chart . ok_button_only ) THEN

		RETURN

	ELSE

		EXIT

	ENDIF	

ENDROUTINE

{******************************************************************************}

ROUTINE sqc_header (sqc_chart)

{ 
* Main sqc header entry screen
* 
* 
*
* Parameters   : sqc_chart
* Return Value : n/a
*
*******************************************************************************}

DECLARE form,grid
DECLARE text_one,text_two,text_three
DECLARE prompt_one,prompt_two,prompt_three
DECLARE select_array_point, not_exiting, modified_on_text, modified_by_text

	IF variable_is_assigned( sqc_chart . sqc_header . current ) THEN

		modified_on_text = SELECT sqcwin_header . modified_on
		                   IN OBJECT sqc_chart . sqc_header . current

		modified_by_text = SELECT sqcwin_header . modified_by
		                   IN OBJECT sqc_chart . sqc_header . current

	ELSE

		modified_on_text = ""
		modified_by_text = ""

	ENDIF

	define_sqc_form()

	create_sqc_form( form )
	form.button_style=FORM_BUTTON_NONE
	form.border = TRUE
	form.header = GET_USER_MESSAGE ( "SQCWIN_MAIN_HEAD_2", 1 )
	form . return_behaviour = FORM_RETURN_STAY

	form.user_info=sqc_chart

	PROMPT OBJECT text_one
	    CLASS "STD_PROMPT_TEXT"
	    ON LINE 2 FROM 2 TO 20
	    BOLD
	    WITH ( raised = TRUE ,
		   value = GET_USER_MESSAGE ( "SQCWIN_MAIN_PROMPT_1" , 1 ) )

	PROMPT OBJECT text_two
	    CLASS "STD_PROMPT_TEXT"
	    ON LINE 3 FROM 2 TO 20
	    BOLD
	    WITH ( raised = TRUE,
		   value = GET_USER_MESSAGE ( "SQCWIN_MAIN_PROMPT_2" , 1 ) )

	PROMPT OBJECT text_three
	    CLASS "STD_PROMPT_TEXT"
	    ON LINE 4 FROM 2 TO 20
	    BOLD
	    WITH ( raised = TRUE,
		   value = GET_USER_MESSAGE ( "SQCWIN_MAIN_PROMPT_3" , 1 ) )

	IF (sqc_chart . edit_mode = "MODIFY") THEN
	    PROMPT OBJECT prompt_one
		    ON LINE 2 FROM 23
		    BROWSE ON sqcwin_header.identity
		    WITH(   always_validate=TRUE,
			    validation_routine="check_id",
			    value = sqc_chart . chart_id ,
			    user_info = FALSE)
	ELSE
	    PROMPT OBJECT prompt_one
		    ON LINE 2 FROM 23
		    FORMAT identity20
		    WITH(   always_validate=TRUE,
			    validation_routine="check_id",
			    value = sqc_chart . chart_id ,
			    user_info = FALSE)
	ENDIF

	PROMPT OBJECT prompt_two
	    ON LINE 3 FROM 23 TO 51
	    WITH ( lowered = TRUE 	    ,
	           value = modified_on_text )

	PROMPT OBJECT prompt_three
	    ON LINE 4 FROM 23 TO 35
	    WITH ( lowered = TRUE 	    ,
	           value = modified_by_text )

	form.add_display(text_one)
	form.add_display(text_two)
	form.add_display(text_three)
	
	form . add_frame( ""           ,
			  1            ,
			  6            ,
			  0            ,
			  form . width )
	form.add_prompt(prompt_one)
	form.add_display(prompt_two)
	form.add_display(prompt_three)

	CREATE OBJECT PROMPT_CLASS_GRID,grid

	grid.column       = 2
	grid.row          = 8
	grid.height       = 3
	grid.width        = form.width-2
	grid.border       = TRUE
	grid.cell_columns =1
	grid.cell_rows    =3

	grid.column_size[1]     =52
	grid.title_size_left    =20
	grid.title_text_left[1,1] = GET_USER_MESSAGE ( "SQCWIN_MAIN_TITL_1", 1 )
	grid.title_text_left[2,1] = GET_USER_MESSAGE ( "SQCWIN_MAIN_TITL_2", 1 )
	grid . title_text_left [ 3, 1 ] = GET_USER_MESSAGE ( "SQCWIN_MAIN_TITL_3", 1 )

	grid.display_cell_routine="display_grid_cell"
	grid.prompt_cell_routine="prompt_grid_cell"

	grid.column_separator[1]=GRID_SEPARATOR_BOTH


	ARRAY grid.user_info ARRAYSIZE (0)

	form.add_prompt(grid)

	IF (GLOBAL("TERMTYPE")="GUI") THEN

	    add_buttons( form )

	ENDIF

	form.active_prompt=1
	form.start_prompt()

	not_exiting = TRUE

	WHILE (not_exiting) DO

		form.wait_prompt()

		IF ( form . get_lastkey() = "EXIT" ) THEN

			not_exiting = NOT(confirm_with_text(GET_USER_MESSAGE("SQCWIN_MAIN_CONF_4",1)))
			sqc_chart . next_screen = "EXIT"

		ELSEIF ( sqc_chart . next_screen = "EXIT") THEN

			not_exiting = FALSE

		ELSEIF (GLOBAL ("lastkey")="RIGHT") THEN

			not_exiting = FALSE

		ENDIF

	ENDWHILE

	form.end_prompt()

	IF ( form . get_lastkey() <> "EXIT" ) THEN

		sqc_chart .sqc_header . set_by_number ( 1 )

		ASSIGN sqcwin_header . modified_on IN OBJECT sqc_chart . sqc_header .current
		    =now
		ASSIGN sqcwin_header . modified_by IN OBJECT sqc_chart . sqc_header .current
		    = OPERATOR
		ASSIGN sqcwin_header . description IN OBJECT sqc_chart . sqc_header .current
		    = grid . user_info [ 1 ]
		ASSIGN sqcwin_header . group_id IN OBJECT sqc_chart . sqc_header .current
		    = grid . user_info [ 2 ]

		ASSIGN sqcwin_header . data_selection IN OBJECT sqc_chart . sqc_header .current
		    = grid . user_info [ 3 ]

		IF form . prompt_objects [ 3 ] . user_info THEN

			IF sqc_chart . edit_mode = "ADD" THEN

			    add_sqc_chart_types ( sqc_chart ) 

			ENDIF

			START WRITE TRANSACTION "Commit All Updates"

			sqc_chart . sqc_header     . invoke_all ( "UPDATE" )
			sqc_chart . sqc_chart_type . invoke_all ( "UPDATE" )

			COMMIT

		ENDIF

		IF (GLOBAL("lastkey")="RIGHT") THEN

			sqc_chart . sqc_header . set_by_number (1)

			IF      (sqc_chart . edit_mode ="MODIFY") AND
					(sqc_chart . data_selection_was=FALSE) AND
			    ((SELECT sqcwin_header . data_selection IN OBJECT
				sqc_chart . sqc_header . current) =FALSE) THEN

					ARRAY select_array_point
					array_select_add(select_array_point, ARRAY_SELECT_EQ,
					    "CHART_ID",(SELECT sqcwin_header . identifier
							IN OBJECT sqc_chart . sqc_header))
					sqc_chart . sqc_point . select ( select_array_point )
					    sqc_chart . next_screen="EDIT"

			ELSE

					sqc_chart . next_screen="CRIT"

			ENDIF

		ELSEIF ((GLOBAL("lastkey")="EXIT") OR (form . get_lastkey() = "EXIT")) THEN

			sqc_chart . next_screen="EXIT"

		ENDIF

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE display_grid_cell (     self              ,
                                VALUE cell_column ,
                                VALUE cell_row    ,
                                      window      ,
                                VALUE column      ,
                                VALUE row         ,
                                VALUE cell_width  ,
                                VALUE cell_height )

{ 
* Sqc header display grid cell routine.
* 
* 
*
* Parameters   : self, cell_column, cell_row, window, column, row
*                cell_width, cell_column
* Return Value : n/a
*
*******************************************************************************}

DECLARE display_text, current_header

	IF variable_is_assigned( self . parent_prompt . user_info . sqc_header . current ) THEN

		current_header = self . parent_prompt . user_info . sqc_header . current

		IF cell_row = 1 THEN

			display_text = SELECT sqcwin_header . description 
			               IN OBJECT current_header

		ELSEIF cell_row = 2 THEN

			display_text = SELECT sqcwin_header . group_id
				       IN OBJECT current_header

		ELSEIF cell_row = 3 THEN 

			display_text = SELECT sqcwin_header . data_selection
			               IN OBJECT current_header

		ENDIF

	ELSE
        
		display_text=self.user_info[cell_row]

	ENDIF

	IF (display_text=EMPTY) THEN

	    display_text=""

	ELSEIF (cell_row=3) THEN

	    IF (display_text="TRUE") THEN

		display_text = GET_USER_MESSAGE ( "SQCWIN_GEN_1", 1 )

	    ELSE

		display_text = GET_USER_MESSAGE ( "SQCWIN_GEN_2", 1 )

	    ENDIF

	ENDIF

		DISPLAY display_text
			AT column,row
			IN WINDOW window

ENDROUTINE

{******************************************************************************}

ROUTINE prompt_grid_cell (      self              ,
                                VALUE cell_column ,
                                VALUE cell_row    ,
                                      window      ,
                                VALUE column      ,
                                VALUE row         ,
                                VALUE cell_width  ,
                                VALUE cell_height )

{ 
* Sqc header prompt grid cell routine
* 
* 
*
* Parameters   : 
* Return Value : n/a
*
*******************************************************************************}

        IF (cell_row=1) THEN

                PROMPT FOR self.user_info[1]
                        FORMAT text_234
                        AT column,row
                        IN WINDOW window
                        TO column+cell_width-1

        ENDIF

        IF (cell_row=2) THEN

                PROMPT FOR self.user_info[2]
                        BROWSE ON group_header.identity
                        AT column,row
                        IN WINDOW window
                        TO column+cell_width-1

        ENDIF

        IF ( cell_row = 3 ) THEN

                PROMPT FOR self.user_info[3]
                        BROWSE ON boolean
                        AT column,row
                        IN WINDOW window
                        TO column+cell_width-1
                        WITH ( true_word = GET_USER_MESSAGE ( "SQCWIN_GEN_1", 1 ),
                               false_word = GET_USER_MESSAGE ( "SQCWIN_GEN_2", 1 ))

        ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE display_header (self)

{ 
* Header display routine
* 
* 
*
* Parameters   : self
* Return Value : got_the_records
*
*******************************************************************************}

DECLARE mod_on, mod_by, desc, group, got_the_records

    got_the_records = FALSE

    sqc_chart . chart_id = self . parent_prompt . prompt_objects [1] . value
    got_the_records = get_sqc_chart (sqc_chart)

    IF got_the_records THEN

        sqc_chart . sqc_header .set_by_number ( 1 )

        mod_on = SELECT sqcwin_header.modified_on IN OBJECT
                        sqc_chart . sqc_header . current
        mod_by = SELECT sqcwin_header.modified_by IN OBJECT
                        sqc_chart . sqc_header . current
        desc   = SELECT sqcwin_header.description IN OBJECT
                        sqc_chart . sqc_header . current
        group  = SELECT sqcwin_header.group_id IN OBJECT
                        sqc_chart . sqc_header . current
        sqc_chart . data_selection_was  = SELECT sqcwin_header.data_selection
                    IN OBJECT sqc_chart . sqc_header .current

        self . parent_prompt . display_objects [ 4 ] . text = mod_on
        self . parent_prompt . display_objects [ 4 ] . value = mod_on
        self . parent_prompt . display_objects [ 4 ] . repaste ( )
        self . parent_prompt . display_objects [ 5 ] . text = mod_by
        self . parent_prompt . display_objects [ 5 ] . value = mod_by
        self . parent_prompt . display_objects [ 5 ] . repaste ( )

        self . parent_prompt . prompt_objects [ 2 ] . user_info [ 1 ] = desc
        self . parent_prompt . prompt_objects [ 2 ] . user_info [ 2 ] = group
        self . parent_prompt . prompt_objects [ 2 ] . user_info [ 3 ] =
                sqc_chart . data_selection_was

        self . parent_prompt . prompt_objects [ 2 ] . redisplay_contents ( )

    ENDIF

RETURN ( got_the_records )

ENDROUTINE

{******************************************************************************}

ROUTINE check_id (self)

{ 
* Identity checking routine for sqc_header
* 
* 
*
* Parameters   : self
* Return Value : status
*
*******************************************************************************}

DECLARE status

        IF (self.value="") THEN

            flash_message ( GET_USER_MESSAGE ( "SQCWIN_MAIN_CONF_5", 1) , TRUE )
            status = FALSE

        ELSEIF ( ( ( SELECT sqcwin_header . identifier WHERE identifier = 
                     self.value ) <> EMPTY ) AND
                 ( ( sqc_chart . edit_mode = "ADD"  ) OR 
                   ( sqc_chart . edit_mode = "COPY" ) ) ) THEN

            flash_message ( GET_USER_MESSAGE ( "SQCWIN_MAIN_CONF_6", 1) , TRUE )
            status = FALSE

        ELSE

            status = display_header(self)

        ENDIF

    RETURN ( status )

ENDROUTINE

{******************************************************************************}

ROUTINE add_buttons ( form )

{ 
* Routine to add buttons to the header form
* 
* 
*
* Parameters   : form
* Return Value : n/a
*
*******************************************************************************}

DECLARE button_one,button_two,button_three,button_four, line_no

	line_no = form . height - 1


        PROMPT OBJECT button_one
                CLASS "STD_PROMPT_BUTTON"
                ON LINE line_no FROM 1 TO 13
                WITH ( caption = GET_USER_MESSAGE ( "SQCWIN_BUT_OK", 1 ) ,
                       mouse_click_routine = "header_write"              ,
                       user_info = FALSE                                 )

        PROMPT OBJECT button_two
                CLASS "STD_PROMPT_BUTTON"
                ON LINE line_no FROM 15 TO 27
                WITH ( caption = GET_USER_MESSAGE ( "SQCWIN_BUT_NEXT", 1 ) ,
                       user_info = "NEXT"                                  ,
                       vgl_library = "$sqcwin_data"                            ,
                       mouse_click_routine="button_press"                  )

        PROMPT OBJECT button_three
                CLASS "STD_PROMPT_BUTTON"
                ON LINE line_no FROM form . width -26 TO form . width - 14
                WITH ( caption = GET_USER_MESSAGE ( "SQCWIN_BUT_HELP", 1 ) )

        PROMPT OBJECT button_four
                CLASS "STD_PROMPT_BUTTON"
                ON LINE line_no FROM form . width -12 TO form . width
                WITH ( send_lastkey = "EXIT",
                       caption = GET_USER_MESSAGE ( "SQCWIN_BUT_CANCEL", 1 ) )

        form.add_prompt(button_one)
        form.add_prompt(button_two)
        form.add_prompt(button_three)
        form.add_prompt(button_four)

ENDROUTINE

{******************************************************************************}

ROUTINE get_chart_id_action

{ 
* Routine to prompt for chart identity
* 
* 
*
* Parameters   : n/a
* Return Value : temp
*
*******************************************************************************}

DECLARE chart_id

	

	IF NOT ( prompt_in_window ( "SQCWIN_HEADER"                           ,
		 GET_USER_MESSAGE ( "SQCWIN_MAIN_PROMPT_4", 1 )               , 
		 sqc_chart . edit_mode:GET_USER_MESSAGE ( "SQCWIN_GEN_3", 1 ) ,
		 EMPTY                                                        ,
		 chart_id                                                     ) ) THEN

		sqc_chart . next_screen = "EXIT"

	ENDIF

	RETURN ( chart_id )

ENDROUTINE

{******************************************************************************}

ROUTINE header_write ( self )

{ 
* Routine to write header
* 
* 
*
* Parameters   : self
* Return Value : n/a
*
*******************************************************************************}

	self . parent_prompt . stop_prompt()
	sqc_chart . next_screen = "EXIT"

	self . user_info = TRUE

ENDROUTINE
