{******************************************************************************
*
* Module Name   : $STB_GRID_CLICK
*
* Purpose       : Right mouse options
*
*******************************************************************************}

SET NOTPROTECTED
SET COMPILE_OPTION DECLARE
SET NAME "DEFER/"

ENABLE WINDOWS


ENABLE WINDOWS
SET NAME "DISPLAY/"

SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_WINDOW
JOIN STANDARD_LIBRARY STD_GENERAL

JOIN LIBRARY $STB_GLBL
JOIN LIBRARY $STB_LIB_MATRIX
JOIN LIBRARY $STB_LIB_PULLMODS
JOIN LIBRARY $STB_LIB
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $PROMPT_GRID
JOIN LIBRARY $PROMPT_TAB
JOIN LIBRARY $STB_PRODUCT_PULL

GLOBAL CONSTANT DELETE_CURRENT = 1
GLOBAL CONSTANT DELETE_KEY     = 2
GLOBAL CONSTANT DELETE_ALL     = 3

EXIT

{******************************************************************************}

ROUTINE stb_matrix_action_can_copy_selected_pulls ( self )
{
* Returns true if can copy selected pulls
*
* Parameters : self , Stb Matrix Object
*
*******************************************************************************}

	DECLARE grid

	grid = self . get_current_pull_grid( )

	RETURN( NOT ( self . is_display_only( )     ) AND
	            ( grid . is_selection_active( ) )     )

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_option_copy_selected_pulls ( self )
{
* Copies the selected cell range into a buffer
*
* Parameters : self , Stb Matrix Object
*
*******************************************************************************}

	DECLARE grid, current_tab, top , left , bottom , right

	grid = self . get_current_pull_grid( )

	IF grid . get_select_area ( top, left, bottom, right ) THEN

		IF ( top = 0 ) THEN
			top = 1
		ENDIF

		IF ( left = 0 ) THEN
			left = 1
		ENDIF

		IF ( bottom = 0 ) THEN
			bottom = 1
		ENDIF

		IF ( right = 1 ) THEN
			right = 1
		ENDIF

		top         = PAD (STRIP( top    ), " ", 10)
		left        = PAD (STRIP( left   ), " ", 10)
		bottom      = PAD (STRIP( bottom ), " ", 10)
		right       = PAD (STRIP( right  ), " ", 10)
		current_tab = self . matrix_form . tab . selected
		current_tab = PAD(STRIP(current_tab)," ",10)
		
		self . copy_range = current_tab : top : left : bottom : right
		
	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_can_paste_pulls ( self )
{
* Returns true if can paste pulls
*
* Parameters : self , Stb Matrix Object
*
*******************************************************************************}

	RETURN( NOT ( self . is_display_only( )  ) AND
	            ( self . copy_range <> EMPTY )     )

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_option_paste_pulls ( self )
{
* Pastes the previously selected cell range onto the currently selected range
*
* Parameters : self , Stb Matrix Object
*
*******************************************************************************}

	DECLARE target_top, target_left, target_bottom, target_right, grid
	DECLARE copy_tab , copy_top , copy_left , copy_bottom , copy_right

	IF self . can_paste_pulls( )
		
		grid = self . get_current_pull_grid( )

		IF grid . get_select_area ( target_top    ,
		                            target_left   ,
		                            target_bottom ,
		                            target_right  ) THEN

			IF check_shape ( self,
			                 target_top   ,
			                 target_left  ,
			                 target_bottom,
			                 target_right ,
			                 copy_tab     ,
			                 copy_top     ,
			                 copy_left    ,
			                 copy_bottom  ,
			                 copy_right   ) THEN

				do_many_cell_copy ( self ,
				                    target_top    ,
				                    target_left   ,
				                    target_bottom ,
				                    target_right  ,
				                    copy_tab      ,
				                    copy_top      ,
				                    copy_left     ,
				                    copy_bottom   ,
				                    copy_right    )
			ELSE
				flash_message (GET_USER_MESSAGE ( "STB_GRID_CLICK_MESS02", 1 )  , True)
			ENDIF
			
		ENDIF

		self . rebuild_matrix ()
		
	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE check_shape ( matrix_object ,
                      target_top    ,
                      target_left   ,
                      target_bottom ,
                      target_right  ,
                      copy_tab      ,
                      copy_top      ,
                      copy_left     ,
                      copy_bottom   ,
                      copy_right    )
{
*
*
*
*******************************************************************************}

DECLARE target_x_diff , target_y_diff , copy_x_diff , copy_y_diff

	target_x_diff = target_right - target_left
	target_y_diff = target_bottom - target_top

	copy_tab   = LEFTSTRING(matrix_object . copy_range , 10     )
	copy_top   = MIDSTRING (matrix_object . copy_range , 11 , 10)
	copy_left  = MIDSTRING (matrix_object . copy_range , 21 , 10)
	copy_bottom= MIDSTRING (matrix_object . copy_range , 31 , 10)
	copy_right = MIDSTRING (matrix_object . copy_range , 41 , 10)

	copy_x_diff = copy_right - copy_left
	copy_y_diff = copy_bottom - copy_top

	RETURN ( ( copy_x_diff = target_x_diff ) AND
	       ( copy_y_diff = target_y_diff ) )

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_can_propagate_current( self )
{
*
* Parameters : self , Stb Matrix Object
*
*******************************************************************************}

	RETURN( ( NOT self . is_display_only( )            ) AND
	        ( self . get_current_pull_grid( ) <> EMPTY )     )

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_option_propagate_current ( self )

{
*
* Parameters : self , Stb Matrix Object
*
*******************************************************************************}

	DECLARE form, tab, grid, range_form, range_specified
	DECLARE start_layer, end_layer, start_time, end_time, start_c
	DECLARE end_c, target_top, target_left, target_bottom, target_right

	IF self . can_propagate_current( ) THEN

		range_specified = FALSE

		grid = self . get_current_pull_grid( )

		IF ( grid . get_select_area ( target_top   ,
		                              target_left  ,
		                              target_bottom,
		                              target_right ) ) THEN

			start_layer = self . get_current_layer_id ( )
			end_layer   = self . get_current_layer_id ( )

			IF (self . time_xaxis) THEN

				start_time = self . get_time_id_at_position ( target_left  )
				end_time   = self . get_time_id_at_position ( target_right )

				start_c = self . get_condition_id_at_position ( target_top    )
				end_c   = self . get_condition_id_at_position ( target_bottom )

			ELSE
			

				start_time = self . get_time_id_at_position ( target_top    )
				end_time   = self . get_time_id_at_position ( target_bottom )

				start_c = self . get_condition_id_at_position ( target_left  )
				end_c   = self . get_condition_id_at_position ( target_right )
			
			ENDIF
			
			range_specified = TRUE

		ENDIF

		form = self . create_propagate_form(  )
		form . start_prompt ( )
		
		IF range_specified THEN
		
			tab        = form . prompt_objects[1]
			range_form = tab . forms[1]

			range_form . prompt_objects [1] . text = start_layer 
			range_form . prompt_objects [2] . text = start_time 
			range_form . prompt_objects [3] . text = start_c 

			range_form . prompt_objects [4] . text = end_layer 
			range_form . prompt_objects [5] . text = end_time 
			range_form . prompt_objects [6] . text = end_c 

			range_form . repaste( )

		ENDIF

		form . wait_prompt ()
		form . end_prompt ()

		self . rebuild_matrix ()
		
	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_can_delete_selected_pulls ( self )

{
*
* Parameters : self , Stb Matrix Object
*
*******************************************************************************}

	RETURN( NOT self . is_display_only( ) ) 

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_option_delete_selected_pulls ( self )

{
*
* Parameters : self , Stb Matrix Object
*
*******************************************************************************}

	DECLARE target_top, target_left, target_bottom, target_right, start_row,
	        start_col, end_row, end_col, start_time, start_cond, grid, row_inc,
	        col_inc, doing_many_deletes, delete_mode, delete_pull

	grid = self . get_current_pull_grid( )

	doing_many_deletes = TRUE

    IF get_pull_delete_number ( delete_mode, delete_pull ) THEN

        IF grid . get_select_area ( target_top    ,
                                    target_left   ,
                                    target_bottom ,
                                    target_right  ) THEN

            start_row = target_top
            start_col = target_left
            end_row   = target_bottom
            end_col   = target_right

            IF ( self . time_xaxis ) then
                start_time = target_left
                start_cond = target_top
            ELSE
                start_time = target_top
                start_cond = target_left
            ENDIF

            grid . current_row    = target_top
            grid . current_column = target_left

            col_inc = 0
            WHILE ( start_col + col_inc <= end_col) DO

                row_inc = 0
                grid . current_row = target_top

                WHILE ( start_row + row_inc <= end_row ) DO

                    set_matrix_factors ( self       ,
                                         start_row + row_inc ,
                                         start_col + col_inc )

                    grid_delete_pull ( self               ,
                                       doing_many_deletes ,
                                       delete_mode        ,
                                       delete_pull        )

                    row_inc = row_inc + 1
                    grid . current_row = grid . current_row + 1

                ENDWHILE

                col_inc = col_inc + 1
                grid . current_column = grid . current_column + 1
                
            ENDWHILE

            self . current_c      = start_cond
            self . current_time   = start_time
            grid . current_column = target_left
            grid . current_row    = target_top

            self . rebuild_matrix ()

            grid . set_position( target_left, target_top )

        ENDIF

    ENDIF

ENDROUTINE


{******************************************************************************}

ROUTINE set_matrix_factors (       matrix_object ,
                             VALUE curr_row      ,
                             VALUE curr_col      )
{
*
*
*
*******************************************************************************}

	IF ( matrix_object . time_xaxis ) then

		matrix_object . current_time = curr_col
		matrix_object . current_c    = curr_row
	ELSE
		matrix_object . current_time = curr_row
		matrix_object . current_c    = curr_col
	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE do_many_cell_copy ( matrix_object,
                            target_top   ,
                            target_left  ,
                            target_bottom,
                            target_right ,
                            copy_tab     ,
                            copy_top     ,
                            copy_left    ,
                            copy_bottom  ,
                            copy_right   )
{
*
*
*
*******************************************************************************}

	DECLARE target_layer , target_grid , copy_layer , copy_grid
	DECLARE start_row , start_col , end_row , end_col
	DECLARE col_inc , row_inc
	DECLARE copy_cell_obj , header_ndx
	DECLARE target_cell_obj , target_cell_ndx
	DECLARE target_layer_id , target_time_id , target_c_id
	DECLARE report_array, new_cell_obj

	ARRAY report_array

	target_layer = matrix_object . current_layer

	target_grid  = matrix_object . get_pull_grid_by_position( target_layer )

	target_grid  . current_row    = target_top
	target_grid  . current_column = target_left

	copy_layer = copy_tab

	copy_grid  = matrix_object . get_pull_grid_by_position( copy_layer )

	copy_grid . current_row = copy_top
	copy_grid . current_column = copy_left

	start_row = target_top
	start_col = target_left
	end_row   = target_bottom
	end_col   = target_right

	col_inc = 0

	WHILE ( start_col + col_inc <= end_col ) do

	row_inc = 0
	target_grid . current_row = target_top
	copy_grid   . current_row = copy_top

		WHILE (start_row + row_inc <= end_row) DO

		    set_matrix_factors ( matrix_object       ,
		                         copy_top + row_inc  ,
		                         copy_left + col_inc )

			IF ( matrix_object . time_xaxis ) THEN

				copy_cell_obj = get_cell_object ( matrix_object       ,
				                                  copy_layer          ,
				                                  copy_left + col_inc ,
				                                  copy_top + row_inc  )
			ELSE
				copy_cell_obj = get_cell_object ( matrix_object       ,
				                                  copy_layer          ,
				                                  copy_top + row_inc  ,
				                                  copy_left + col_inc )
			ENDIF

			set_matrix_factors ( matrix_object         ,
			                     target_top + row_inc  ,
			                     target_left + col_inc )

			IF ( matrix_object . time_xaxis ) THEN

				target_cell_obj = get_cell_object ( matrix_object         ,
				                                    target_layer          ,
				                                    target_left + col_inc ,
				                                    target_top + row_inc  )
			ELSE
				target_cell_obj = get_cell_object ( matrix_object         ,
				                                    target_layer          ,
				                                    target_top + row_inc  ,
				                                    target_left + col_inc )
			ENDIF

			target_layer_id = matrix_object . get_layer_id_at_position ( target_layer )

			IF matrix_object . time_xaxis THEN
			
				target_time_id = matrix_object . get_time_id_at_position ( target_left + col_inc )
				target_c_id    = matrix_object . get_condition_id_at_position ( target_top + row_inc )
				
			ELSE
			
				target_time_id = matrix_object . get_time_id_at_position ( target_top + row_inc )
				target_c_id    = matrix_object . get_condition_id_at_position ( target_left + col_inc )

			ENDIF

			header_ndx = matrix_object . header_id

			IF matrix_object . is_protocol( ) THEN
				header_ndx = header_ndx : matrix_object . header_ver
			ENDIF

			target_cell_ndx = header_ndx      :
			                  target_layer_id :
			                  target_time_id  :
			                  target_c_id

			IF cell_has_available_sample ( matrix_object, target_cell_obj ) THEN

				add_to_failure_report ( report_array    ,
				                        target_layer_id ,
				                        target_time_id  ,
				                        target_c_id     )

				flash_message ( GET_USER_MESSAGE ( "PULL_EDIT_FAILED_PASTE",1 ) , TRUE )
			ELSE

				do_copy_over_database ( matrix_object ,
				                        target_cell_ndx ,
				                        copy_cell_obj   )

				setup_cell_object ( matrix_object  ,
				                    target_layer_id,
				                    target_time_id ,
				                    target_c_id    ,
				                    new_cell_obj   ,
				                    1              )

				target_grid . userinfo [
						target_left + col_inc ,
						target_top + row_inc  ] = new_cell_obj

			ENDIF

			row_inc = row_inc + 1
			copy_grid . current_row = copy_grid . current_row + 1
			target_grid . current_row = target_grid . current_row + 1

		ENDWHILE

		col_inc = col_inc + 1
		copy_grid . current_column = copy_grid . current_column + 1
		target_grid . current_column = target_grid . current_column + 1

	ENDWHILE

	IF ( matrix_object . time_xaxis ) THEN

		matrix_object . current_c    = target_top
		matrix_object . current_time = target_left
	ELSE
		matrix_object . current_c    = target_left
		matrix_object . current_time = target_top
	ENDIF

	target_grid . current_column = target_left
	target_grid . current_row    = target_top

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_can_insert_pulls ( self )

{
*
* Parameters : self , Stb Matrix Object
*
*******************************************************************************}

	RETURN( NOT self . is_display_only( ) ) 

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_option_insert_pulls ( self )

{
*
* Parameters : self , Stb Matrix Object
*
*******************************************************************************}

    DECLARE target_top, target_left, target_bottom, target_right
    DECLARE number_of_pulls, grid

    grid = self . get_current_pull_grid( )

    IF ( grid . get_select_area ( target_top    ,
                                  target_left   ,
                                  target_bottom ,
                                  target_right  ) ) THEN
                                  
        number_of_pulls = get_insert_pull_count( )
        
        IF ( number_of_pulls <> -1 ) THEN
        
            self . insert_pulls( target_top      ,
                                 target_left     ,
                                 target_bottom   ,
                                 target_right    ,
                                 number_of_pulls )
        
        ENDIF
                                  
    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE stb_matrix_action_insert_pulls (       self            ,
                                         VALUE cell_top        ,
                                         VALUE cell_left       ,
                                         VALUE cell_bottom     ,
                                         VALUE cell_right      ,
                                         VALUE number_of_pulls )

{
*
* Parameters : self            , Stb Matrix Object
*              cell_top        , Top row of cells to insert into
*              cell_left       , Left column of cells to insert into
*              cell_bottom     , Bottom row of cells to insert into
*              cell_right      , Right column of cells to insert into
*              number_of_pulls , Number of pulls to add
*
*******************************************************************************}

    DECLARE insert_form, pull_count

    CALL_ROUTINE "setup_insert_pull_form"
        IN LIBRARY "$stb_lib_pullmods"
        USING insert_form , self

    insert_form . start_prompt ( )
    insert_form . set_position( 4 )
    insert_form . wait_prompt ( )
    insert_form . end_prompt ( )

    IF ( insert_form . get_lastkey() = "DO") THEN

        pull_count = 1
        
        WHILE pull_count <= number_of_pulls DO

            insert_into_region ( self        ,
                                 insert_form ,
                                 cell_top    ,
                                 cell_left   ,
                                 cell_bottom ,
                                 cell_right  )

            pull_count = pull_count + 1

        ENDWHILE

	ENDIF

    self . rebuild_matrix ()

ENDROUTINE

{******************************************************************************}

ROUTINE insert_into_region (       self        ,
                                   insert_form ,
                             VALUE cell_top    ,
                             VALUE cell_left   ,
                             VALUE cell_bottom ,
                             VALUE cell_right  )
{
*
* Parameters : self, Stb Matrix Object
*
*******************************************************************************}

	DECLARE grid, start_time, end_time, start_c, end_c, inc_time, inc_c

    IF ( self . time_xaxis ) THEN

        start_time = cell_left
        end_time   = cell_right
        start_c    = cell_top
        end_c      = cell_bottom
    ELSE
        start_time = cell_top
        end_time   = cell_bottom
        start_c    = cell_left
        end_c      = cell_right
    ENDIF

    grid = self . get_current_pull_grid( )
    
    inc_time = 0

    WHILE ( start_time + inc_time <= end_time ) DO

        inc_c = 0

        WHILE ( start_c + inc_c <= end_c ) DO

            self . current_time = start_time + inc_time
            self . current_c    = start_c   + inc_c

            IF ( self . time_xaxis ) THEN
                grid . current_row    = start_c    + inc_c
                grid . current_column = start_time + inc_time
            ELSE
                grid . current_row    = start_time + inc_time
                grid . current_column = start_c    + inc_c
            ENDIF

            insert_form . do_pull_save ( )

            inc_c = inc_c + 1

        ENDWHILE

        inc_time = inc_time + 1

    ENDWHILE

ENDROUTINE


{******************************************************************************}

ROUTINE get_insert_pull_count

{
* Returns the number of pulls to insert. Returns -1 if error or user
* cancel
*
*
*******************************************************************************}

    DECLARE prompt_pull_count, pull_count, insert_form

    pull_count = -1

	CREATE OBJECT "STD_FORM" , insert_form
	insert_form . height       = 1
	insert_form . width        = 40
	insert_form . row          = 4
	insert_form . column       = 20
	insert_form . border       = TRUE
	insert_form . button_style = FORM_BUTTON_OK_CANCEL
	insert_form . header       = GET_USER_MESSAGE ( "STB_GRID_CLICK_MESS04", 1 )
	insert_form . use_top_line = TRUE

    insert_form . add_display ( "Number of pulls to insert", 1, 1, PROMPT_RENDITION_NORMAL )

	PROMPT OBJECT prompt_pull_count
	    FORMAT INTEGER
	    WITH ( row     = 1                 ,
	           column  = 28                ,
	           value   = 2                 ,
	           width   = 4                 ,
	           minimum = 1                 ,
	           maximum = MAX_PULLS_IN_CELL )

    insert_form . add_prompt ( prompt_pull_count )

	insert_form . start_prompt ()
	insert_form . wait_prompt ()
	insert_form . end_prompt ()

    IF ( insert_form . get_lastkey() = "DO" ) THEN

        pull_count = prompt_pull_count . value
        
    ENDIF
    
    RETURN( pull_count )

ENDROUTINE


{******************************************************************************}

ROUTINE get_pull_delete_number( delete_mode, pull_number )

{
* Prompts the user for a delete mode .
*
* Parameters : delete_mode , Passes back selected mode
*                            (DELETE_CURRENT, DELETE_KEY, DELETE_ALL)
*              pull_number , Passes back the selected pull
*                            (only applicable for mode DELETE_KEY)
*
*******************************************************************************}

    DECLARE single_prompt, many_prompt, num_of_pulls, delete_form
	DECLARE ok_button, cancel_button, key_prompt, ret_ok

    ret_ok = TRUE
    
    delete_mode = EMPTY
    pull_number = -1

	CREATE OBJECT "STD_FORM" , delete_form
	delete_form . height= 6
	delete_form . width = 30
	delete_form . row = 4
	delete_form . column = 20
	delete_form . border = TRUE
	delete_form . button_style = FORM_BUTTON_NONE
	delete_form . header = GET_USER_MESSAGE ( "STB_GRID_CLICK_MESS10", 1 )
	delete_form . use_top_line = TRUE

	PROMPT OBJECT single_prompt
		ON LINE 1 FROM 1
		FORMAT BOOLEAN
		WITH ( is_radio = TRUE                         ,
		       toggled_routine = "toggle_delete_value" ,
		       value = TRUE                            ,
		       caption = GET_USER_MESSAGE ( "STB_GRID_CLICK_MESS11", 1 ))

	delete_form . add_prompt ( single_prompt )

	PROMPT OBJECT key_prompt
		ON LINE 2 FROM 1
		FORMAT BOOLEAN
		WITH ( is_radio = TRUE                         ,
		       toggled_routine = "toggle_delete_value" ,
		       value = FALSE                           ,
		       caption = GET_USER_MESSAGE( "STB_GRID_CLICK_MESS12", 1 ))

	delete_form . add_prompt ( key_prompt )

	    PROMPT OBJECT num_of_pulls
		FORMAT integer
		with ( row = 2        ,
		       column = 25    ,
		       value = 2      ,
		       enabled = FALSE,
		       width = 4      ,
		       minimum = 1    ,
		       maximum = MAX_PULLS_IN_CELL )

	delete_form . add_prompt ( num_of_pulls )

	PROMPT OBJECT many_prompt
		ON LINE 3 FROM 1
		FORMAT BOOLEAN
		WITH ( is_radio = TRUE                         ,
		       toggled_routine = "toggle_delete_value" ,
		       value = FALSE                           ,
		       caption = GET_USER_MESSAGE ( "STB_GRID_CLICK_MESS13", 1 ))

	delete_form . add_prompt ( many_prompt )

	CREATE OBJECT "STD_PROMPT_BUTTON" , ok_button
	ok_button . height = 1
	ok_button . width = 10
	ok_button . column = 2
	ok_button . row    = delete_form . height - 1
	ok_button . vgl_library = GLOBAL("CURRENT_LIBRARY")
	ok_button . caption = GET_USER_MESSAGE ( "STB_GRID_CLICK_MESS14", 1 )
	ok_button . send_last_key = "DO"

	delete_form . add_prompt (ok_button)

	CREATE OBJECT "STD_PROMPT_BUTTON" , cancel_button
	cancel_button . height = 1
	cancel_button . width = 10
	cancel_button . column = ok_button . column + ok_button . width + 2
	cancel_button . row    = delete_form . height - 1
	cancel_button . vgl_library = GLOBAL("CURRENT_LIBRARY")
	cancel_button . caption = GET_USER_MESSAGE ( "STB_GRID_CLICK_MESS15", 1 )
	cancel_button . send_last_key = "EXIT"
	delete_form . add_prompt (cancel_button)

	delete_form . start_prompt ()
	delete_form . wait_prompt ()
	delete_form . end_prompt ()

    IF ( delete_form . get_lastkey () = "DO" ) THEN

        IF ( single_prompt . value = TRUE ) THEN
        
            delete_mode = DELETE_CURRENT
            
        ELSEIF ( key_prompt . value = TRUE ) THEN
        
            delete_mode = DELETE_KEY
            pull_number = num_of_pulls . value
            
        ELSEIF ( many_prompt . value = TRUE ) THEN
        
            delete_mode = DELETE_ALL
            
        ENDIF
        
    ELSE
        ret_ok = FALSE
    ENDIF
    
    RETURN( ret_ok )

ENDROUTINE


{******************************************************************************}

ROUTINE toggle_insert_value ( self )

{
*
*
*
*******************************************************************************}

DECLARE insert_form, prompt_val

	insert_form = self . parent_prompt

	prompt_val = NOT self . value


	IF (self = insert_form . prompt_objects[1]) THEN

		{ single pull selected }
		insert_form . prompt_objects [2] . set_text (prompt_val)
		insert_form . prompt_objects [3] . set_enabled ( FALSE )
	ELSE
		{ many pulls selected }
		insert_form . prompt_objects [1] . set_text (prompt_val)
		insert_form . prompt_objects [3] . set_enabled ( TRUE )

	ENDIF

ENDROUTINE


{******************************************************************************}

ROUTINE toggle_delete_value ( self )

{
*
*
*
*******************************************************************************}

DECLARE delete_form, prompt_val

	delete_form = self . parent_prompt

	prompt_val = NOT self . value

	IF (self = delete_form . prompt_objects[1]) THEN

		{ single pull selected }
		delete_form . prompt_objects [2] . set_text (prompt_val)
		delete_form . prompt_objects [3] . set_enabled ( FALSE )
		delete_form . prompt_objects [4] . set_text (prompt_val)

	ELSEIF (self = delete_form . prompt_objects[2]) THEN

		{ key pull selected }
		delete_form . prompt_objects [1] . set_text (prompt_val)
		delete_form . prompt_objects [3] . set_enabled ( TRUE )
		delete_form . prompt_objects [4] . set_text (prompt_val)
	ELSE
		{ all pulls selected }
		delete_form . prompt_objects [1] . set_text (prompt_val)
		delete_form . prompt_objects [3] . set_enabled ( FALSE )
		delete_form . prompt_objects [2] . set_text (prompt_val)
	ENDIF

ENDROUTINE


{******************************************************************************}

ROUTINE grid_delete_pull (       self               ,
                           VALUE doing_many_deletes ,
                           VALUE delete_mode        ,
                           VALUE delete_pull        )
{
*
* Parameters : self , Stb Matrix Object
*
********************************************************************************}

	DECLARE count, pull_record

	IF ( delete_mode = DELETE_CURRENT ) THEN

		self . delete_current_pull( )

	ELSEIF ( delete_mode = DELETE_KEY ) THEN

		self . current_pull = delete_pull
		
		self . delete_current_pull( )
		
	ELSEIF ( delete_mode = DELETE_ALL ) THEN

		count = self . get_current_cell_pull_count ( )
		
		WHILE ( count > 0 ) DO

			pull_record = self . get_current_cell_pull( count )

			IF NOT ( pull_record . deleted ) THEN

				self . current_pull = count

				self . delete_current_pull( )

			ENDIF

			count = count - 1

		ENDWHILE
		
	ENDIF

ENDROUTINE

