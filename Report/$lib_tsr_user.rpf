{******************************************************************************
*
* Module Name   : $LIB_TSR_USER
*
* Purpose       : Result List screen user customisation report
*
* Document Ref. : SE/T/TVGL-WORK-RESENTO/1/5
*
* Specification :
*
* Portability   : All VGSM 3.0 compliant systems
*
* Re-entrant    : Yes
*
*******************************************************************************}

SET COMPILE_OPTION DECLARE

JOIN LIBRARY $LIB_RE_GLOBALS

JOIN LIBRARY $lib_utils

{******************************************************************************}

GLOBAL
ROUTINE lib_tsr_user_define_columns ( size_array       ,
                      title_array      ,
                      field_name_array ,
                      fixed_columns    )

{*******************************************************************************
*
*   Routine to define columns to be used in TSR, DSR, ASR.
*   All screen definitions must contain TEXT and STATUS fields.
*
*       The SIZE_ARRAY array determines the size of each column.
*       This is a single dimension array.
*
*       The TITLE_ARRAY array allows the definition of column
*       headers. This is a multi-dimensional array the first element
*       being used for the first the line, the second element the
*       second line etc. In this case only the first line is displayed.
*
*       The FIELD_NAME_ARRAY gives the name of the table and field to
*       select the column data from. The first element is the table
*       name, the second element is the field name. Tables allowed
*       are SAMPLE, TEST and RESULT.
*
*       FIXED_COLUMNS is the number of left hand columns that are
*       always on screen.
*
*******************************************************************************}

        size_array [ 1 ] = 13
        size_array [ 2 ] = 25
        size_array [ 4 ] = 20
        size_array [ 5 ] = 10

    IF global ( "TERMTYPE" ) = "GUI" THEN
        size_array  [ 3 ]    = 4
            size_array  [ 6 ]    = 6
        title_array [ 3, 1 ] = "Type"
        title_array [ 6, 1 ] = "Status"

        {
        size_array       [ 7 ]    = 8
        title_array      [ 7, 1 ] = "Off Spec"
        field_name_array [ 7, 1 ] = "RESULT"
        field_name_array [ 7, 2 ] = "out_of_range"
        }

    ELSE
        size_array  [ 3 ]    = 1
            size_array  [ 6 ]    = 1
        title_array [ 3, 1 ] = "T"
        title_array [ 6, 1 ] = "S"
    ENDIF

    title_array [ 1, 1 ] = "Analysis"
    title_array [ 2, 1 ] = "Component Name"
    title_array [ 4, 1 ] = "Value"
    title_array [ 5, 1 ] = "Units"
    title_array [ 7, 1 ] = "Off Spec"

        field_name_array [ 1, 1 ] = "TEST"
        field_name_array [ 1, 2 ] = "ANALYSIS"

        field_name_array [ 2, 1 ] = "RESULT"
        field_name_array [ 2, 2 ] = "NAME"

        field_name_array [ 3, 1 ] = "RESULT"
        field_name_array [ 3, 2 ] = "RESULT_TYPE"

        field_name_array [ 4, 1 ] = "RESULT"
        field_name_array [ 4, 2 ] = "TEXT"

        field_name_array [ 5, 1 ] = "RESULT"
        field_name_array [ 5, 2 ] = "UNITS"

        field_name_array [ 6, 1 ] = "RESULT"
        field_name_array [ 6, 2 ] = "STATUS"

    fixed_columns = 3

ENDROUTINE

{******************************************************************************}

GLOBAL
ROUTINE lib_tsr_user_screen_setup ( tsr_grid ,
                    tsr_form )

{*******************************************************************************
*
*   Routine to modify the standard TSR Grid and Form objects
*
*******************************************************************************}

{   Use the following settings for full screen borderless TSR ie like 2.6

        tsr_form . row    = 5
        tsr_form . column = 1
        tsr_form . border = FALSE
        tsr_form . height = GLOBAL ( "SCREEN_HEIGHT" ) - 4
        tsr_form . width  = GLOBAL ( "SCREEN_WIDTH" )

        tsr_grid . width      = tsr_form . width
        tsr_grid . height     = tsr_form . height - 3
        tsr_grid . browse_row = tsr_form . height
}

ENDROUTINE



{******************************************************************************}
                                                                 
GLOBAL
ROUTINE lib_tsr_user_pre_results_entry ( VALUE sample_id_numeric ,
                     VALUE re_mode           )

{*******************************************************************************
*
*   Routine called from TSR,DSR,ASR after the user has entered the sample
*   but before the forms are created or the database searched.
*
*                     
*   re_mode will contain one of the following contant values
*
*   RE_MODIFY     TSR
*   RE_AUTHORISE  ASR
*   RE_DISPLAY    DSR
*
*   Return FALSE to stop the user going into results entry
*
*   This routine is called within a read transaction.
*                    
*
*******************************************************************************}
        
    RETURN ( TRUE )                                  

ENDROUTINE

{******************************************************************************}

GLOBAL
ROUTINE lib_tsr_user_post_results_entry ( VALUE sample_id_numeric ,
                      VALUE re_mode           )

{*******************************************************************************
*
*   Routine called from TSR,DSR,ASR after the user has left the results
*   entry screen.
*
*   re_mode will contain one of the following contant values
*
*   RE_MODIFY     TSR
*   RE_AUTHORISE  ASR
*   RE_DISPLAY    DSR
*
*   This routine is called within a read transaction.
*
*******************************************************************************}
                                                              
ENDROUTINE

{******************************************************************************}
                                                                 
GLOBAL
ROUTINE lib_ttr_user_pre_results_entry ( VALUE test_name         ,
                     VALUE sample_id_numeric ,
                     VALUE re_mode           )

{*******************************************************************************
*
*   Routine called from TTR, DTR, ATR after the user has entered the sample
*   but before the forms are created or the database searched.
*
*                     
*   re_mode will contain one of the following contant values
*
*   RE_MODIFY     TTR
*   RE_AUTHORISE  ATR
*   RE_DISPLAY    DTR
*
*   Return FALSE to stop the user going into results entry
*
*   This routine is called within a read transaction.
*

*******************************************************************************}

    RETURN ( TRUE )                                  

ENDROUTINE

{******************************************************************************}

GLOBAL
ROUTINE lib_ttr_user_post_results_entry ( VALUE test_name         ,
                      VALUE sample_id_numeric ,
                      VALUE re_mode           )

{*******************************************************************************
*
*   Routine called from TTR, DTR, ATR after the user has left the results
*   entry screen.
*
*   re_mode will contain one of the following contant values
*
*   RE_MODIFY      TTR
*   RE_AUTHORISE   ATR
*   RE_DISPLAY     DTR
*
*   Return FALSE to stop the user going into results entry
*
*   This routine is called within a read transaction.
*
*******************************************************************************}
                     
ENDROUTINE

{******************************************************************************}
                                                                 
GLOBAL
ROUTINE lib_stt_user_pre_results_entry ( VALUE test_number       ,
                     VALUE sample_id_numeric ,
                     VALUE re_mode           )

{*******************************************************************************
*
*   Routine called from STT after the user has entered the sample
*   but before the forms are created or the database searched.
*                       
*                     
*   re_mode will contain the following contant value
*
*   RE_DISPLAY   
*                      
*   Return FALSE to stop the user going into results entry
*
*   This routine is called within a read transaction.
*
*******************************************************************************}

    RETURN ( TRUE ) 

ENDROUTINE

{******************************************************************************}

GLOBAL
ROUTINE lib_stt_user_post_results_entry ( VALUE test_number       ,
                      VALUE sample_id_numeric ,
                      VALUE re_mode           )

{*******************************************************************************
*
*   Routine called from STT after the user has left the results
*   entry screen.
*
*   re_mode will contain the following contant value
*
*   RE_DISPLAY   
*
*   This routine is called within a read transaction.
*
*******************************************************************************}

ENDROUTINE

{******************************************************************************}


{******************************************************************************}

GLOBAL

ROUTINE lib_tsr_user_specified_auth_routine ( library_name, routine_name )

{
* Used to override the standard SM authorise result routine.  Specify an
* alternative library and routine, and ensure user_specified is TRUE.                    
*
*******************************************************************************}

    DECLARE user_specified

    user_specified = FALSE

{
    library_name = "***"
    routine_name = "***"

    user_specified = TRUE
}

    RETURN ( user_specified )

ENDROUTINE { user_specify_auth_routine }


{******************************************************************************}

GLOBAL

ROUTINE lib_tsr_user_specified_reject_routine ( library_name, routine_name )

{
*   Used to override the standard SM reject result routine.
*   Specify an alternative library and routine,
*   and ensure user_specified is TRUE.
*
*******************************************************************************}

    DECLARE user_specified

    user_specified = FALSE

{
    library_name = "***"
    routine_name = "***"

    user_specified = TRUE
}

    RETURN ( user_specified )


ENDROUTINE { user_specify_reject_routine }

{******************************************************************************}

GLOBAL
ROUTINE lib_tsr_user_job_list_columns ( size_array       ,
                                        title_array      ,
                                        field_name_array ,
                                        fixed_columns    )

{*******************************************************************************
*
*   Routine to define columns to be used in Job list result entry.
*   All screen definitions must contain TEXT and STATUS fields.
*
*       The SIZE_ARRAY array determines the size of each column.
*       This is a single dimension array.
*
*       The TITLE_ARRAY array allows the definition of column
*       headers. This is a multi-dimensional array the first element
*       being used for the first the line, the second element the
*       second line etc. In this case only the first line is displayed.
*
*       The FIELD_NAME_ARRAY gives the name of the table and field to
*       select the column data from. The first element is the table
*       name, the second element is the field name. Tables allowed
*       are SAMPLE, TEST and RESULT.
*
*       FIXED_COLUMNS is the number of left hand columns that are
*       always on screen.
*
*******************************************************************************}

    IF GLOBAL ( "SAMP_BROWSE" ) = "T" THEN
        size_array [ 1 ] = 30
            field_name_array [ 1, 1 ] = "SAMPLE"
            field_name_array [ 1, 2 ] = "ID_TEXT"

    ELSE
        size_array [ 1 ] = 10
            field_name_array [ 1, 1 ] = "SAMPLE"
            field_name_array [ 1, 2 ] = "ID_NUMERIC"
    ENDIF

        size_array [ 2 ] = 13
        size_array [ 3 ] = 25
    size_array [ 4 ] = 4
        size_array [ 5 ] = 20
        size_array [ 6 ] = 10
    size_array [ 7 ] = 6

    title_array [ 1, 1 ] = "Sample"
    title_array [ 2, 1 ] = "Analysis"
    title_array [ 3, 1 ] = "Component Name"
    title_array [ 4, 1 ] = "Type"
    title_array [ 5, 1 ] = "Value"
    title_array [ 6, 1 ] = "Units"
    title_array [ 7, 1 ] = "Status"


        field_name_array [ 2, 1 ] = "TEST"
        field_name_array [ 2, 2 ] = "ANALYSIS"

        field_name_array [ 3, 1 ] = "RESULT"
        field_name_array [ 3, 2 ] = "NAME"

        field_name_array [ 4, 1 ] = "RESULT"
        field_name_array [ 4, 2 ] = "RESULT_TYPE"

        field_name_array [ 5, 1 ] = "RESULT"
        field_name_array [ 5, 2 ] = "TEXT"

        field_name_array [ 6, 1 ] = "RESULT"
        field_name_array [ 6, 2 ] = "UNITS"

        field_name_array [ 7, 1 ] = "RESULT"
        field_name_array [ 7, 2 ] = "STATUS"

    fixed_columns = 3

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE lib_tsr_user_custom_buttons (       toolbar        ,
                                            tsr_form_object,
                                            tsr_grid_object,
                                      VALUE re_mode        ,
                                      VALUE toolbox_mode   )

{
*
*   Allows addition of buttons to the Result Entry form toolbar
*
*   TOOLBAR is the toolbat object
*
*   TSR_FORM_OBJECT is the Result Entry form object
*
*   TSR_GRID_OBJECT is the Result Entry grdo object
*
*   RE_MODE is the Result Entry mode e.g. RE_MODIFY
*       see $LIB_RE_GLOBALS for a full list
*
*   TOOLBOX_MODE boolean value, TRUE if using toolbar
*                               FALSE if using buttons
*
*******************************************************************************}

    IF  (re_mode = RE_MODIFY) THEN
        toolbar.add_a_button(toolbox_mode ,
                             tsr_form_object ,
                             tsr_grid_object ,
                             RE_ICON_INCIDENTS , {icon to use }
                             "RESULT_ENTRY_BUTTON_ADD_ATTACH" , {message caption in the message file }
                             "lib_tsr_toolbox_attach" , {routine to call }
                             FALSE ,
                             FALSE ,
                             "$lib_tsr_user"){library containing the routine }
    ELSEIF (re_mode = RE_DISPLAY)
        toolbar.add_a_button(toolbox_mode ,
                             tsr_form_object ,
                             tsr_grid_object ,
                             RE_ICON_INCIDENTS , {icon to use }
                             "RESULT_ENTRY_BUTTON_ADD_ATTACH" , {message caption in the message file }
                             "lib_tsr_toolbox_attach_disp" , {routine to call }
                             FALSE ,
                             FALSE ,
                             "$lib_tsr_user"){library containing the routine }
    ENDIF
    
    {

    IF ( toolbox_mode = RE_MODIFY ) THEN

        toolbar . add_a_button ( toolbox_mode                    ,
                                 tsr_form_object                 ,
                                 tsr_grid_object                 ,
                                 ICON_SAD_FACE                   ,   icon to use
                                 "RESULT_ENTRY_BUTTON_INVALID"   ,   message caption in the message file
                                 "lib_tsr_toolbox_invalidate"    ,   routine to call
                                 FALSE                           ,
                                 FALSE                           ,
                                 "$lib_tsr_user"                 )   library containing the routine

        toolbar . add_a_button ( toolbox_mode                    ,
                                 tsr_form_object                 ,
                                 tsr_grid_object                 ,
                                 ICON_SAD_FACE                   ,   icon to use
                                 "RESULT_ENTRY_BUTTON_INTERFERE" ,   message caption in the message file
                                 "lib_tsr_toolbox_interfere"     ,   routine to call
                                 FALSE                           ,
                                 FALSE                           ,
                                 "$lib_tsr_user"                 )   library containing the routine

    ENDIF

    }

ENDROUTINE

{******************************************************************************}
{ Example button routines                                                      }
{******************************************************************************}

{

ROUTINE lib_tsr_toolbox_invalidate ( self )

    DECLARE fill_text
    fill_text = "Invalid"
    lib_tsr_toolbox_text ( self, fill_text )

ENDROUTINE

}
{------------------------------------------------------------------------------}
{

ROUTINE lib_tsr_toolbox_interfere ( self )

    DECLARE fill_text
    fill_text = "Interference"
    lib_tsr_toolbox_text ( self, fill_text )

ENDROUTINE

}
{------------------------------------------------------------------------------}
{

ROUTINE lib_tsr_toolbox_text ( self, res_text )

    DECLARE result_object, grid, reselected, res_type

    CONSTANT INVAL_RES_TYPE = "T"

    grid          = self . user_info
    result_object = grid . result_array [ grid . current_row ]
    res_type      = SELECT result . result_type IN OBJECT result_object

    IF NOT result_object . result_entered () THEN

        IF result_object . upgradelock ( reselected ) THEN

            IF res_type <> INVAL_RES_TYPE THEN

                ASSIGN result.result_type IN OBJECT result_object = INVAL_RES_TYPE
                object_set_current_table ( result_object, "RESULT" )
                result_object = lib_re_result_create_result_from_result ( result_object.test_object )

            ENDIF

            result_object . result_val = 0.0
            result_object . result_unit = " "
            result_object . result_str = res_text

            grid . result_array [ grid . current_row ] = result_object
            result_object . store_result ( grid )

            result_object . downgradelock ()
            grid . redisplay_row ( grid . current_row )

        ENDIF

    ENDIF

ENDROUTINE

}
{******************************************************************************}
{ End of example button routines                                               }
{******************************************************************************}

GLOBAL
ROUTINE lib_tsr_user_subsample_columns ( size_array       ,
                                         title_array      ,
                                         field_name_array ,
                                         fixed_columns    )

{*******************************************************************************
*
*   Routine to define columns to be used in list result entry when a sample 
*   has been selected that has been split into sub samples.
*
*   All screen definitions must contain TEXT and STATUS fields.
*
*       The SIZE_ARRAY array determines the size of each column.
*       This is a single dimension array.
*
*       The TITLE_ARRAY array allows the definition of column
*       headers. This is a multi-dimensional array the first element
*       being used for the first the line, the second element the
*       second line etc. In this case only the first line is displayed.
*
*       The FIELD_NAME_ARRAY gives the name of the table and field to
*       select the column data from. The first element is the table
*       name, the second element is the field name. Tables allowed
*       are SAMPLE, TEST and RESULT.
*
*       FIXED_COLUMNS is the number of left hand columns that are
*       always on screen.
*
*******************************************************************************}

    IF GLOBAL ( "SAMP_BROWSE" ) = "T" THEN
        size_array [ 1 ] = 30
            field_name_array [ 1, 1 ] = "SAMPLE"
            field_name_array [ 1, 2 ] = "ID_TEXT"

    ELSE
        size_array [ 1 ] = 10
            field_name_array [ 1, 1 ] = "SAMPLE"
            field_name_array [ 1, 2 ] = "ID_NUMERIC"
    ENDIF

        size_array [ 2 ] = 13
        size_array [ 3 ] = 25
    size_array [ 4 ] = 4
        size_array [ 5 ] = 20
        size_array [ 6 ] = 10
    size_array [ 7 ] = 6

    title_array [ 1, 1 ] = "Sample"
    title_array [ 2, 1 ] = "Analysis"
    title_array [ 3, 1 ] = "Component Name"
    title_array [ 4, 1 ] = "Type"
    title_array [ 5, 1 ] = "Value"
    title_array [ 6, 1 ] = "Units"
    title_array [ 7, 1 ] = "Status"


        field_name_array [ 2, 1 ] = "TEST"
        field_name_array [ 2, 2 ] = "ANALYSIS"

        field_name_array [ 3, 1 ] = "RESULT"
        field_name_array [ 3, 2 ] = "NAME"

        field_name_array [ 4, 1 ] = "RESULT"
        field_name_array [ 4, 2 ] = "RESULT_TYPE"

        field_name_array [ 5, 1 ] = "RESULT"
        field_name_array [ 5, 2 ] = "TEXT"

        field_name_array [ 6, 1 ] = "RESULT"
        field_name_array [ 6, 2 ] = "UNITS"

        field_name_array [ 7, 1 ] = "RESULT"
        field_name_array [ 7, 2 ] = "STATUS"

    fixed_columns = 3

ENDROUTINE

{******************************************************************************}
{******************************************************************************}
{******************************************************************************}

ROUTINE lib_tsr_toolbox_attach_disp ( self )
    DECLARE result_object, grid
    grid = self . user_info
    result_object = grid . result_array [ grid . current_row ]
    IF result_object . result_entered ()
        MENUPROC 35242 using result_object.test_number, result_object.name
    ENDIF
ENDROUTINE

ROUTINE lib_tsr_toolbox_attach ( self )
    DECLARE result_object, grid
    grid = self . user_info
    result_object = grid . result_array [ grid . current_row ]
    IF result_object . result_entered () THEN
        MENUPROC 35231 using result_object.test_number, result_object.name
    ENDIF
ENDROUTINE