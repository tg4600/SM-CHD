{******************************************************************************
*
* Module Name   : $TESTSTAT
*
* Purpose       : SMP report for user defined routines which are called when a
*                 test changes status
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY TRIGGER_ROUTINES
JOIN STANDARD_LIBRARY STD_DATABASE

SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILE_OPTION DECLARE
ENABLE WINDOWS

DECLARE Sample, IU, NextID, SQL

ROUTINE set_status_a

ENDROUTINE


ROUTINE set_status_i

ENDROUTINE


ROUTINE set_status_c
    SET DATE FORMAT "DZ-MZ-YYYY H24:MI:SS"
    ASSIGN test.date_exp = NOW
    RESTORE DATE FORMAT
    Sample      = SELECT test.Sample
    insert_iu("UPDATE", "SampleDateResReq", sample, "")
ENDROUTINE


ROUTINE set_status_p
DECLARE Analysis, Version, Duration, DateResExp, SampStat, Location, DaysToStart
    Analysis    = SELECT test.Analysis
    Version     = SELECT max_active_anal_ver.max_version WHERE identity = Analysis
    Duration    = SELECT versioned_analysis.expected_time WHERE identity = Analysis and analysis_version = Version
    Sample      = SELECT test.Sample
    SampStat    = SELECT sample.status WHERE id_numeric = sample
    Location    = SELECT sample.location_id
    IF (Location = EMPTY) OR (STRIP(Location) = "") THEN
        Location   = SELECT PERSONNEL . LOCATION_ID WHERE IDENTITY = GLOBAL("OPERATOR")
    ENDIF
    DateResExp = NOW + INTERVAL(Duration)
    IF sampstat = "U" THEN
        DaysToStart = SELECT location_details.days_to_start WHERE location_id = Location
        IF (NUMERIC(DaysToStart)>0) OR (DaysToStart <> EMPTY) THEN
            DateResExp = DateResExp + INTERVAL(DaysToStart)
        ELSE
            DaysToStart = "0"
        ENDIF
    ENDIF
    SET DATE FORMAT "DZ-MZ-YYYY H24:MI:SS"
        ASSIGN test.date_exp = DateResExp
        ASSIGN test.date_exp = DateResExp
    RESTORE DATE FORMAT
    insert_iu("UPDATE", "SampleDateResReq", sample, "")
ENDROUTINE


ROUTINE set_status_r
DECLARE test, test_n
    SET DATE FORMAT "DZ-MZ-YYYY H24:MI:SS"
        ASSIGN test.date_exp = NOW
    RESTORE DATE FORMAT
    Sample      = SELECT test.Sample
    insert_iu("UPDATE", "SampleDateResReq", sample, "")

    test_n = SELECT test.test_number
    push_file_descriptor ("TEST", test)
        RejectTest(test_n)
    pop_file_descriptor ( test )

ENDROUTINE


ROUTINE set_status_u

ENDROUTINE


ROUTINE set_status_v
DECLARE Analysis, Version, Duration, Sample, DateResExp, SampStat, Location, DaysToStart{, IU, NextId, SQL}

    SET DATE FORMAT "DZ-MZ-YYYY H24:MI:SS"
        Analysis    = SELECT test.Analysis
        Version     = SELECT max_active_anal_ver.max_version WHERE identity = Analysis
        Duration    = SELECT versioned_analysis.expected_time WHERE identity = Analysis and analysis_version = Version
        Sample      = SELECT test.Sample
        SampStat    = SELECT sample.status WHERE id_numeric = sample
        Location    = SELECT sample.location_id
        IF (Location = EMPTY) OR (STRIP(Location) = "") THEN
            Location   = SELECT PERSONNEL . LOCATION_ID WHERE IDENTITY = GLOBAL("OPERATOR")
        ENDIF
        DateResExp = NOW + INTERVAL(Duration)
        IF sampstat = "U" THEN
            DaysToStart = SELECT location_details.days_to_start WHERE location_id = Location
            IF (NUMERIC(DaysToStart)>0) OR (DaysToStart <> EMPTY) THEN
                DateResExp = DateResExp + INTERVAL(DaysToStart)
            ELSE
                DaysToStart = "0"
            ENDIF
        ENDIF
        ASSIGN test.date_exp = DateResExp
        insert_iu("UPDATE", "SampleDateResReq", sample, "")
    RESTORE DATE FORMAT
ENDROUTINE


ROUTINE set_status_w

ENDROUTINE


ROUTINE set_status_x
    SET DATE FORMAT "DZ-MZ-YYYY H24:MI:SS"
        ASSIGN test.date_exp = NOW
    RESTORE DATE FORMAT
    Sample      = SELECT test.Sample
    insert_iu("UPDATE", "SampleDateResReq", sample, "")
ENDROUTINE


ROUTINE set_status_s

ENDROUTINE

{*************************************************************************
* Purpose      : Writes to predefined log,
*                using WriteLog in $lib_utils
* Parameters   : Msg - what to write in log
* Return Value : N/A
**************************************************************************}
ROUTINE WriteToLog(VALUE Msg)

    WriteLog(Msg, global("current_library"))

ENDROUTINE
