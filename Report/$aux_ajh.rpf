{Compared 20140122 /DKTBG}
{******************************************************************************
*
* Module Name   : $AUX_AJH
*
* Purpose       : Template created using $AUXSETUP.
*                 Authorise Job
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}

JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $AUX_LIB
JOIN LIBRARY JOB_VALIDATION
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_ARRAY

SET NAME "DISPLAY/"
ENABLE WINDOWS
SET NOTPROTECTED
{SET COMPILE_OPTION DECLARE}

CONSTANT DISPLAY_JOB_MENUNUMBER = 259

DECLARE data
data = ""

Array prompt_text
Array table_names
Array change_stat ARRAY_SIZE (3) = " "

Array display_details ARRAY_SIZE ( 0 , 6 )
Array prompt_details ARRAY_SIZE ( 0 , 6 )


{***********************************************************************}
{                   USER INPUT BEGINS HERE                              }
{***********************************************************************}

{SECTION A - SCREEN SETUP}
{specify the header text for the command window}
{ie header_txt =  "Change Sample Status"}

   header_txt = GET_USER_MESSAGE("AUX_AJH_HEAD_1" ,1)

{specify footer text for the command window }

   footer_txt = GET_USER_MESSAGE("AUX_AJH_FOOT_1" ,1)

{specify the text string to be displayed upon        }
{successful completion of the command                }
{ie success_txt = "Sample Status Changed"
            }
   success_txt = GET_USER_MESSAGE("AUX_AJH_SUCC_1" ,1)

{specify the text string to be displayed upon        }
{abortion from the command                           }
{ie abort_txt =   "Change Sample Status Aborted"
            }
   abort_txt = GET_USER_MESSAGE("AUX_AJH_ABORT" ,1)

{specify the sample statuses allowable within the    }
{browse list for this command if sample identity     }
{is prompted for.                                    }

  samp_stat_allowed = "ACHUVWSX"
  job_stat_allowed  = "C"
  test_stat_allowed = "ACXSUPWV"


{SECTION B - INITIAL PROMPTS }


{Specify the tables that the initial prompts browse  }
{upon .                                              }

   table_names [ 1 ]    = "JOB_HEADER"



{  table_names [ 2 ]    = "TEST"}


{Specify the initial prompt fields and the associated}
{prompt text strings                                 }


  prompt_text [ 1 ]    = GET_USER_MESSAGE("AUX_AJH_PROM" ,1)

 {prompt_text [ 2 ]    = "Enter Test Name"}


{SECTION C - DISPLAY INFORMATION}

{The user may require a header for the display area }
{Any descriptive text may be used here              }

    mess_area_one = ""


{Specify the fields which require displaying with the}
{appropriate descriptive text string                 }

{Display fields from prompt_table[1] : }

  display_details [ 1, MESSAGE_POSITION    ]   = GET_USER_MESSAGE("AUX_AJH_DISPLAY_1" ,1)
  display_details [ 1, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 1, TABLE_NAME_POSITION ]   = "JOB_HEADER"
  display_details [ 1, FIELD_NAME_POSITION ]   = "JOB_STATUS"

{**AS1794 HBe 1-8-2007: Include Product Description}
  display_details [ 2, MESSAGE_POSITION    ]   = "Product description"
  display_details [ 2, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 2, TABLE_NAME_POSITION ]   = "JOB_HEADER"
  display_details [ 2, FIELD_NAME_POSITION ]   = "PRODUCT_DESCRIPTION"
{**AE1794}


{  display_details [ 2, MESSAGE_POSITION    ]   = ""
  display_details [ 2, TYPE_POSITION       ]   = ""
  display_details [ 2, TABLE_NAME_POSITION ]   = ""
  display_details [ 2, FIELD_NAME_POSITION ]   = ""

  display_details [ 3, MESSAGE_POSITION    ]   = ""
  display_details [ 3, TYPE_POSITION       ]   = ""
  display_details [ 3, TABLE_NAME_POSITION ]   = ""
  display_details [ 3, FIELD_NAME_POSITION ]   = ""}


{Display fields from prompt_table[2] : }

 {display_details [ 1, MESSAGE_POSITION    ]   = ""
  display_details [ 1, TYPE_POSITION       ]   = ""
  display_details [ 1, TABLE_NAME_POSITION ]   = ""
  display_details [ 1, FIELD_NAME_POSITION ]   = ""

  display_details [ 2, MESSAGE_POSITION    ]   = ""
  display_details [ 2, TYPE_POSITION       ]   = ""
  display_details [ 2, TABLE_NAME_POSITION ]   = ""
  display_details [ 2, FIELD_NAME_POSITION ]   = ""

  display_details [ 3, MESSAGE_POSITION    ]   = ""
  display_details [ 3, TYPE_POSITION       ]   = ""
  display_details [ 3, TABLE_NAME_POSITION ]   = ""
  display_details [ 3, FIELD_NAME_POSITION ]   = ""}


  {SECTION D - FIELD ASSIGNMENT                }

{  This section is divided into three areas; }
{                                            }
{         (1) Interactive Update             }
{         (2) Non-interactive Update         }
{         (3) Status Change Update           }

{----------------------------------------------------}
{  1.   I N T E R A C T I V E   U P D A T E          }
{----------------------------------------------------}

{Specify the fields which require Updating and also  }
{require a user input.Define the text string         }
{associated with the input along with the browse type}


  {Update fields associated with prompt_table[1]}
  {Interactive_browse may be filled with either }
  {the browse table_name.field or a number to   }
  {define the size of the prompted field ie "10"}
  {or if no browse required " ".                }

{The user may require a header for the prompt area. }
{ Any descriptive text may be used here.            }

  mess_area_two = ""

  prompt_details [ 1, MESSAGE_POSITION   ] = "Job verification"
  prompt_details [ 1, TYPE_POSITION      ] = "ROUTINE"
  prompt_details [ 1, LIBRARY_POSITION   ] = GLOBAL ("CURRENT_LIBRARY")
  prompt_details [ 1, ROUTINE_POSITION   ] = "VALIDATION_AUX"

  prompt_details [ 2, MESSAGE_POSITION   ] = "Select MPS Status"
  prompt_details [ 2, TYPE_POSITION      ] = "FORMAT"
  prompt_details [ 2, TABLE_NAME_POSITION] = "JOB_HEADER"
  prompt_details [ 2, FIELD_NAME_POSITION] = "MPS_STATUS"

  prompt_details [ 3, MESSAGE_POSITION   ] = "Job comments"
  prompt_details [ 3, TYPE_POSITION      ] = "FORMAT"
  prompt_details [ 3, TABLE_NAME_POSITION] = "JOB_HEADER"
  prompt_details [ 3, FIELD_NAME_POSITION] = "AUTHORISATION_NOTES"

{**ME 1215 HBe}
{-----------------------------------------------------}
{   2.   S T A T U S    C H A N G E   U P D A T E     }
{-----------------------------------------------------}


{  Non interactive update of the status field        }
{  is defined within the array change_stat[n]        }
{  where n = the array element that defines the      }
{  table associated with the status in the array     }
{  prompt_table[n].                                  }
{  To update sample.status to "V" the user would     }
{  define change_stat[1] = "V" where prompt_table[1] }
{   = "SAMPLE"                                       }
{  If the status change should be back to the old    }
{  status change_stat[n] = "OLD_STATUS".             }

  change_stat[1] = "A"

{*************************************************}
{             END  OF  USER  INPUT                }
{*************************************************}

aux_generator (  header_txt ,
                 footer_txt ,
                 mess_area_one ,
                 mess_area_two  ,
                 samp_stat_allowed ,
                 job_stat_allowed ,
                 test_stat_allowed ,
                 prompt_text       ,
                 table_names       ,
                 change_stat                  ,
                 global ( "current_library" ) ,
                 Success_txt ,
                 Abort_txt   ,
                 TRUE      ,
                 display_details ,
                 prompt_details  ,
                 "Read Transaction"  ,
                 "Write Transaction")

{**************************************************************************}
{                            Action Routine                                }
{**************************************************************************}

ROUTINE action (VALUE first_id , VALUE second_id )
{fm("ROUTINE action (":first_id:", ":second_id:")")}

SET COMPILE_OPTION DECLARE

SET GLOBAL "JOBAUTHNOTE" TO ( SELECT job_header . authorisation_notes )

{*MS1732 HBe 2-1-2007}
{**MS 1683 HBe 27-1-2006: MPS status with icon MPS-STATUS_TEMP should not record any Date First Authorised}
DECLARE final_status, new_auth_status, set_date_first_auth, mps_status
DECLARE date_first_auth, new_auth_date, first_authoriser

   set_date_first_auth = TRUE

   new_auth_status = SELECT job_header.mps_status

   PUSH_FILE_DESCRIPTOR ( "MPS_STATUS", mps_status )
      final_status = SELECT mps_status.final_status
                    WHERE  identity = new_auth_status
   POP_FILE_DESCRIPTOR  ( mps_status )

   IF NOT final_status
      THEN set_date_first_auth = FALSE
   ENDIF
{**ME1732}

{**AS1354 HBe 2-10-2001}

date_first_auth = select job_header.date_first_authorised

IF ((date_first_auth = EMPTY) OR (BLANK(date_first_auth))) THEN
   IF set_date_first_auth
   THEN
      new_auth_date = NOW
      ASSIGN job_header.date_first_authorised = new_auth_date
   ELSE
      FLASH_MESSAGE("Reminder: Not recording Date First Authorised for Temporary MPS Status: " : new_auth_status , TRUE)
   ENDIF
ELSE
   FLASH_MESSAGE("Date first authorised maintained at ":STRIP(date_first_auth), TRUE)
ENDIF

{**AE1354}
{**ME 1683}

{**AS1732 HBe 28-12-2006}
first_authoriser = SELECT job_header.first_authoriser
IF ((first_authoriser = EMPTY) OR (BLANK(first_authoriser))) THEN
   ASSIGN job_header.first_authoriser = GLOBAL("OPERATOR")
ENDIF

{first_prod_ord_status = SELECT job_header.first_prod_ord_status
IF ((first_prod_ord_status = EMPTY) OR (BLANK(first_prod_ord_status))) THEN
   ASSIGN job_header.first_prod_ord_status = prod_ord_status_id
ENDIF
flash_message(prod_ord_status_id, TRUE)}
{**AE1732}

RETURN ( TRUE )

ENDROUTINE {action}

{**************************************************************************}
{                            Select Routine                                }
{**************************************************************************}

ROUTINE select_key_text

    { Return the text for the select button }
    return ( GET_USER_MESSAGE ( "AUX_AJH_DISPLAY", 1 ))

ENDROUTINE

ROUTINE select_key ( VALUE line     , display_id      ,
                     VALUE first_id , VALUE second_id )

    MENUPROC DISPLAY_JOB_MENUNUMBER, chr(34):first_id:chr(34) : chr(34):"$EXIT":chr(34)

ENDROUTINE

{**************************************************************************}
{                           Validation Routine                             }
{**************************************************************************}

ROUTINE validation ( display_id )

{**MS1732}
    IF check_mps_status(display_id) THEN
        {  To be replaced by VALIDATION_AUX routine
        IF check_production_order(display_id) THEN
            IF check_traces_status(display_id, trace_array) THEN }
                RETURN ( TRUE )
           { ENDIF
        ENDIF }
    ENDIF

    RETURN ( FALSE )
ENDROUTINE
{**ME1732}


{**AS1617 HBe 14-4-2005}



{**************************************************************************}
{                                                                          }
{                      CUSTOM ROUTINES FOUND BELOW                         }
{                                                                          }
{**************************************************************************}




{**************************************************************************}
{                      CONFIRM_TRACE_AUTHORISATION                         }
{**************************************************************************}

ROUTINE confirm_trace_authorisation (VALUE child_job, VALUE status_type, VALUE status_value, do_authorisation)

JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_VGL_TOOLS

DECLARE lk, authorisation_confirmation
DECLARE abort_button, accept_button
DECLARE stack, row

    row = 1
    stack = vgl_tools_get_call_stack_entry (row)
    WHILE (NOT(BLANK(stack))) AND (row <= 100)
        stack = vgl_tools_get_call_stack_entry (row)
        IF (INDEX(stack, "JOB_VALIDATION") > 0) THEN
            RETURN (TRUE)
        ENDIF
        row = row + 1
    ENDWHILE


CREATE OBJECT PROMPT_CLASS_FORM, authorisation_confirmation

{setup defaults}


authorisation_confirmation. header      = "Problem with job for an ingoing ingredient"
authorisation_confirmation. footer      = "Escape to cancel"
authorisation_confirmation. row         =  7
authorisation_confirmation. column      =  4
authorisation_confirmation. width       = 60
authorisation_confirmation. height      = 8
authorisation_confirmation. return_behaviour    = FORM_RETURN_STAY
authorisation_confirmation. button_style    = FORM_BUTTON_NONE


PROMPT OBJECT abort_button
   CLASS "STD_PROMPT_BUTTON"
   ON LINE 6
   FROM 10 TO 20
   WITH ( caption = "Abort", send_lastkey = "EXIT", tooltip = "Click here to Return to the Authorisation Screen")

PROMPT OBJECT accept_button
   CLASS "STD_PROMPT_BUTTON"
   ON LINE 6
   FROM 40 TO 50
   WITH ( caption = "Proceed", send_lastkey = "DO", tooltip = "Click here to Authorise the job")

authorisation_confirmation . add_prompt (abort_button)
authorisation_confirmation . add_prompt (accept_button)

authorisation_confirmation . add_display ("The underlying job ":STRIP(child_job):" has ":
                        STRIP(status_type) : " set to value " : STRIP(status_value) : ".",
                        8, 2, prompt_rendition_bold )

authorisation_confirmation . add_display ("Do you want to abort or to proceed with the authorisation?",
                        8, 3, prompt_rendition_bold )


authorisation_confirmation . start_prompt ()
authorisation_confirmation . wait_prompt ()
authorisation_confirmation . end_prompt ()


lk = authorisation_confirmation . get_lastkey ()

IF lk = "EXIT" THEN
   do_authorisation = FALSE
ELSEIF lk = "ENTER" THEN
   do_authorisation = TRUE
ELSEIF lk = "DO" THEN
   do_authorisation = TRUE
ELSE
   do_authorisation = FALSE
   FLASH_MESSAGE("Error! Lastkey not Enter, Do or Exit but = ":strip(lk),TRUE)
ENDIF

ENDROUTINE

{**************************************************************************}
{                           CHECK_BATCH_TREE                               }
{**************************************************************************}



ROUTINE  check_batch_tree ( VALUE l_batch_name, VALUE l_prod_id, VALUE levels, trace_level, next_block, trace_array )

{**AS1692}
JOIN LIBRARY TOOLBOX
{**AE1692}
   JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
   JOIN STANDARD_LIBRARY STD_BLOCK

   DECLARE  sel_arr, com_arr, the_block, rc, subs, sub, s_batch_name, s_prod_id
   ARRAY    sel_arr
   ARRAY    com_arr


   trace_level = trace_level + 1

{**AS1692 HBe 10-3-2006: A record in batch_trace with same material- and batch number in master and child created an indefinite loop. (Batch : 2650363)}
   IF trace_level > 20 THEN
      FLASH_MESSAGE("Traced 20 levels back, there is a problem with the BATCH_TRACE data from SAP. Ingoing materials may not have been checked fully", TRUE)
      RETURN (TRUE)
   ENDIF
{**AE1692}


   IF (trace_level > 1) AND (trace_level <= levels) THEN
      IF NOT get_child_status( l_prod_id, l_batch_name, trace_array, trace_level ) THEN
         RETURN (FALSE)
      ENDIF
   ENDIF

   next_block = next_block + 1
   the_block = "Trace Block " : strip(next_block)
   rc = block_row_initialise( the_block, "batch_trace_view" )
   IF rc <> EMPTY THEN
      flash_message("Error in initialise top job block:":rc,TRUE)
      RETURN (false)
   ENDIF

   sel_arr[1,1] = ARRAY_SELECT_EQ
   sel_arr[1,2] = "BATCH_NAME_MASTER"
   sel_arr[1,3] = l_batch_name

   sel_arr[2,1] = ARRAY_SELECT_EQ
   sel_arr[2,2] = "PRODUCT_NAME_MASTER"
   sel_arr[2,3] = l_prod_id

   rc = block_row_select ( the_block, sel_arr, FALSE )
   IF NOT rc THEN
      flash_message("Error in block select",TRUE)
      RETURN (false)
   ENDIF

{  Step through tree one by one               }
   subs = block_row_size ( the_block )
   sub = 0
   WHILE sub < subs DO

      sub = sub + 1
      rc = block_row_find_number ( the_block, sub )

      s_batch_name = block_row_field_select ( the_block, "BATCH_NAME_CHILD" )
      s_prod_id    = block_row_field_select ( the_block, "PRODUCT_NAME_CHILD" )

{**AS1692 HBe 10-3-2005: Strip off leading 0's}
      STRIP_LEADING_0 ( s_batch_name )
{**AE1692}
{**MS1692 HBe 10-3-2006: IF statement checking levels was added. A record in batch_trace with same material- and batch number in master and child created an indefinite loop. (Batch : 2650363)}
      IF trace_level < levels THEN
         IF NOT check_batch_tree ( s_batch_name, s_prod_id, levels, trace_level, next_block, trace_array ) THEN
            RETURN(false)
         ENDIF
      ENDIF
{**ME1692}
   ENDWHILE

   rc = block_row_release ( the_block )

   trace_level = trace_level - 1

   array_sort(trace_array, ARRAY_SORT_ASCENDING)

   RETURN(true)

ENDROUTINE


{**************************************************************************}
{                           GET_CHILD_STATUS                               }
{**************************************************************************}
ROUTINE get_child_status (VALUE child_product, VALUE child_batch, trace_array, trace_level)

   DECLARE do_authorisation, child_job, the_table, the_field, child_mps_status, child_job_status

   child_job = STRIP(child_product):"/":STRIP(child_batch)

   do_authorisation = TRUE

   the_table = "JOB_HEADER"
   the_field = "JOB_NAME"

   PUSH_FILE_DESCRIPTOR ( the_table, the_field )
   child_mps_status = SELECT job_header.mps_status
                      WHERE job_name = STRIP(child_product):"/":STRIP(child_batch)
   child_job_status = SELECT job_header.job_status
   POP_FILE_DESCRIPTOR  ( the_field )

   IF child_job_status = EMPTY THEN
      the_table = "C_JOB_HEADER"
      the_field = "JOB_NAME"

      PUSH_FILE_DESCRIPTOR ( the_table, the_field )
         child_mps_status = SELECT c_job_header.mps_status
                            WHERE job_name = STRIP(child_product):"/":STRIP(child_batch)
         child_job_status = SELECT c_job_header.job_status
      POP_FILE_DESCRIPTOR  ( the_field )
   ENDIF

   IF (child_job_status = "A") AND (child_mps_status <> EMPTY) AND (child_mps_status <> "INT") AND (child_mps_status <> "EXT")
                               AND (child_mps_status <> "AGRD") AND (child_mps_status <> "DISP")
   THEN
      confirm_trace_authorisation (child_job, "MPS Status", child_mps_status, do_authorisation)
      trace_array[size_of_array(trace_array) + 1, 1] = "Level ":STRIP(trace_level):": ":child_job:", MPS Status: ":STRIP(child_mps_status)
      IF NOT do_authorisation THEN
         RETURN(FALSE)
      ENDIF
   ENDIF

{**M1695 HBe 5-4-2006: Do not prompt for confirmation of authorisation, if the child job i cancelled}
   IF (child_job_status <> "A") AND (child_job_status <> "X")  AND (child_job_status <> EMPTY) THEN
      confirm_trace_authorisation (child_job, "Job Status", child_job_status, do_authorisation)
      trace_array[size_of_array(trace_array) + 1, 1] = "Level ":STRIP(trace_level):": ":child_job:", Job Status: ":STRIP(child_job_status)
      IF NOT do_authorisation THEN
         RETURN(FALSE)
      ENDIF
   ENDIF

   RETURN (TRUE)

ENDROUTINE
{**AE1617}


{**AS1732 HBe 6/12-2006}

{**************************************************************************}
{                          CHECK_PRODUCTION_ORDER                          }
{**************************************************************************}

ROUTINE CHECK_PRODUCTION_ORDER ( display_id )

DECLARE prod_ord_status_id
DECLARE prod_order, insp_type, the_group_id, the_workcenter, old_po_status, update_po_status, plant_lookup, group_check
DECLARE insp_type_lookup, insp_type_check, status_id, status_text, prod_ord_status_text
DECLARE prod_ord_status_icon, do_group_id, do_insp_type
DECLARE app_status, app_status_lookup, do_app_status {Approval status}
DECLARE the_job
DECLARE user_auth {User Authority}
DECLARE min_user_level {Minimum authority needed for manual override}
DECLARE user_ok   {User authorised for manual override?}
DECLARE mes_check_required, msg

msg = EMPTY

IF LENGTH(STRIP(SELECT job_header . inspection_type)) > 0 THEN
    IF LENGTH(STRIP(SELECT job_header . inspection_lot)) = 0 THEN
        msg = "No inspection lot associated."
    ENDIF
    IF (SELECT job_header . shelflife_exp_date = EMPTY) THEN
        IF msg = EMPTY THEN
            msg ="No Shelflife Exp Date on job."
        ELSE
            msg = msg:ASCII(10):"No Shelflife Exp Date on job."
        ENDIF
    ENDIF
ENDIF


the_job            = STRIP(SELECT job_header.job_name)
app_status         = STRIP(SELECT job_header.mps_status)
prod_order         = SELECT job_header.process_order
insp_type          = SELECT job_header.inspection_type
the_group_id       = SELECT job_header.group_id
the_workcenter     = SELECT job_header.work_center {CIA/DKTBG 20090713: to distinguish between workcenters}
old_po_status      = SELECT job_header.first_prod_ord_status
update_po_status   = FALSE
do_group_id        = TRUE
do_insp_type       = TRUE
do_app_status      = TRUE
mes_check_required = TRUE
user_auth          = SELECT personnel.authority WHERE identity = OPERATOR
min_user_level     = 7  {Lab managers and super users can override approval checks}
user_ok            = FALSE
IF (msg <> EMPTY) AND (the_group_id <> "4400") THEN
    msg = msg:ASCII(10):ASCII(10):"The authorisation will not be transferred to SAP.":ASCII(10):"Do you want to CANCEL authorization of the job?"
    IF confirm_with_message(msg) THEN
        RETURN(FALSE)
    ENDIF
ENDIF


IF ((app_status = EMPTY) OR BLANK(app_status)) THEN app_status = "NONE"
ENDIF

IF ((prod_order = EMPTY) OR BLANK(prod_order)) THEN prod_order = "NONE"
ELSE
   prod_order       = SUBSTITUTE(JUSTIFY(PAD(prod_order, " ", 10),"RIGHT"), " ", "0")
ENDIF

IF ((insp_type = EMPTY) OR BLANK(insp_type)) THEN insp_type = "NONE"
ENDIF

IF ((the_group_id = EMPTY) OR BLANK(the_group_id)) THEN the_group_id = "NONE"
ENDIF

IF ((the_workcenter = EMPTY) OR BLANK(the_workcenter)) THEN the_workcenter = "NONE"
ENDIF  {CIA/DKTBG 20090713: to distinguish between workcenters}


IF ((old_po_status = EMPTY) OR BLANK(old_po_status)) THEN
   update_po_status = TRUE
ENDIF

IF NUMTEXT ( user_auth ) THEN
   user_auth = NUMERIC ( user_auth )
ELSE
   user_auth = 0
ENDIF

IF user_auth >= min_user_level THEN
   user_ok = TRUE
ENDIF

{Checking Approval Status to see, if process order check had been ensabled for this status}
IF app_status <> "NONE" THEN
   PUSH_FILE_DESCRIPTOR ( "MPS_STATUS", app_status_lookup )
      do_app_status = SELECT mps_status.mes_check_reqd
                      WHERE  identity = app_status
   POP_FILE_DESCRIPTOR  ( app_status_lookup )
ELSE
   do_app_status = FALSE
ENDIF


{Checking phrase NOCHK-GRP to see, if process order check had been disabled for this plant}
PUSH_FILE_DESCRIPTOR ( "PHRASE", plant_lookup )
   group_check = SELECT phrase.phrase_id
                 WHERE  phrase_type = "NOCHK-GRP"
                 AND    ( phrase_id = the_group_id
                     OR   phrase_id = the_workcenter ) {CIA/DKTBG 20090713: to distinguish between workcenters}
   IF ((group_check <> EMPTY) AND (NOT BLANK(group_check))) THEN do_group_id = FALSE
   ENDIF
POP_FILE_DESCRIPTOR  ( plant_lookup )


{Checking phrase NOCHK-INTY to see, if process order check had been disabled for this inspection type}
PUSH_FILE_DESCRIPTOR ( "PHRASE", insp_type_lookup )
   insp_type_check = SELECT phrase.phrase_id
                 WHERE  phrase_type = "NOCHK-INTY"
                 AND    phrase_id = insp_type
   IF ((insp_type_check <> EMPTY) AND (NOT BLANK(insp_type_check))) THEN do_insp_type = FALSE
   ENDIF
POP_FILE_DESCRIPTOR  ( insp_type_lookup )

{Combining the three checks to see, if the job needs to be checked in the MES system at all}
mes_check_required = ((do_app_status) AND (do_group_id) AND (do_insp_type))


{If no check is required, simply update the first_prod_order_status on the job header and return TRUE}
IF NOT mes_check_required THEN
   IF update_po_status THEN
      IF (NOT do_insp_type) THEN
         ASSIGN job_header.first_prod_ord_status = "INR"
      ELSEIF (NOT do_group_id) THEN
         ASSIGN job_header.first_prod_ord_status = "GNR"
      ELSEIF (NOT do_app_status) THEN
         ASSIGN job_header.first_prod_ord_status = "ANR"
      ELSE
         ASSIGN job_header.first_prod_ord_status = "ERR" {This situation is not expected to be encountered}
      ENDIF
   ENDIF
   RETURN(TRUE)
ENDIF


{If no process order was found on the job header manual override is required}
IF (prod_order = "NONE")  THEN
   IF VERIFY_MISSING_ORDER_ON_JOB (the_job, user_ok) THEN
      IF update_po_status THEN
        ASSIGN job_header.first_prod_ord_status = "NPO" {No Process Order}
      ENDIF
      RETURN(TRUE)
   ELSE
      RETURN(FALSE)
   ENDIF
ENDIF


{If a process order was found, then its status is looked up in CHEOPS}
PUSH_FILE_DESCRIPTOR ( "CHEOPS_PRODUCTION_ORD", status_id )
   prod_ord_status_id = SELECT cheops_po.production_order_status
                        WHERE  production_order = prod_order
POP_FILE_DESCRIPTOR  ( status_id )

{If the process order was not found in MES system (CHEOPS), a manual override is required}
IF ((prod_ord_status_id = EMPTY) OR BLANK(prod_ord_status_id)) THEN  {Order status confirmation is always required at this stage.}
   IF VERIFY_MISSING_ORDER_STATUS(prod_order, insp_type, user_ok)
   THEN
      IF update_po_status THEN
         ASSIGN job_header.first_prod_ord_status = "NPS"
      ENDIF
      RETURN(TRUE)
   ELSE
      FLASH_MESSAGE("Cancelling authorisation due to missing process order status in the MES system!", TRUE)
      RETURN(FALSE)
   ENDIF
ENDIF



{A status was found in CHEOPS - Check if it is red or green. If it's not found in LIMS, set status INT_STOP and set a suitable text message.}
PUSH_FILE_DESCRIPTOR ( "PHRASE", status_text ) {Checking phrase MES_STATUS to see, if the production order status is green or red.}
   prod_ord_status_text = SELECT phrase.phrase_text
                          WHERE  phrase_type = "MES_STATUS"
                          AND    phrase_id = prod_ord_status_id
   prod_ord_status_text = STRIP(prod_ord_status_text)
   prod_ord_status_icon = SELECT phrase.icon
POP_FILE_DESCRIPTOR  ( status_text )

IF (prod_ord_status_text = EMPTY) OR BLANK(prod_ord_status_text) THEN {If the status is not found, it is considered red}
   prod_ord_status_text = "Undefined Production Order Status"
   prod_ord_status_icon = "INT_STOP"
ENDIF

IF prod_ord_status_icon = "INT_GREEN_PIN" THEN
   IF update_po_status THEN
      ASSIGN job_header.first_prod_ord_status = prod_ord_status_id
   ENDIF
   RETURN(TRUE)
ELSE {If the status is not green, then user verification is required}
   IF VERIFY_ORDER_NOT_GREEN(prod_order, insp_type, prod_ord_status_id, prod_ord_status_text, prod_ord_status_icon, user_ok)
   THEN
      IF update_po_status THEN
         ASSIGN job_header.first_prod_ord_status = prod_ord_status_id
      ENDIF
      RETURN(TRUE)
   ELSE
      FLASH_MESSAGE("Cancelling authorisation due to red process order status!", TRUE)
      RETURN(FALSE)
   ENDIF
ENDIF

FLASH_MESSAGE("Unexpected condition encountered - can not authorise the job. Please contact the system administrator immediately", TRUE)
RETURN(FALSE)

{**AE1732}



ENDROUTINE

{**************************************************************************}
{                            CHECK_TRACES_STATUS                           }
{**************************************************************************}

GLOBAL ROUTINE check_traces_status ( display_id, trace_array )

DECLARE levels, trace_level, next_block, l_batch_name, l_prod_id
levels = 5 {Specified the number of levels back to check for MPS status}
trace_level = 0
next_block  = 0

l_prod_id        = select job_header.product_name
l_batch_name     = select job_header.batch_name

IF NOT check_batch_tree ( l_batch_name, l_prod_id, levels, trace_level, next_block, trace_array ) THEN
   RETURN(false)
ENDIF

RETURN (TRUE)

{**AE1617}
ENDROUTINE

{**************************************************************************}
{                              CHECK_MPS_STATUS                            }
{**************************************************************************}

ROUTINE check_mps_status ( display_id )

{**AS1456 HBe 12-3-2003}
{**MS1487 HBe 20-8-03 Check for status AGRD on MLP header}
{**AS1522}
DECLARE the_job, mlp_ver, file_descriptor
DECLARE mps_status, mlp_id, allow_agree
{**AE1522}
mps_status = STRIP(select job_header.mps_status)
IF mps_status = "" THEN
{**ME1487}
   FLASH_MESSAGE("No MPS status assigned, this MUST be supplied.", TRUE)
   RETURN(FALSE)
{**MS1487}
ELSEIF mps_status = "AGRD"  THEN
   mlp_id = STRIP(SELECT job_header.product_name)
{**MS1522 HBe 19-1-04: Use login product version, alternatively latest MLP version if no samples are found}
   the_job = SELECT job_header.job_name
   mlp_ver = SELECT MIN sample.product_version
             WHERE job_name = the_job
             AND product_version > "0"
   IF ((mlp_ver = EMPTY) OR BLANK(mlp_ver)) THEN
      FLASH_MESSAGE("No Product Version Found on Any Sample, checking AGRD permission on Latest Approved MLP Version", TRUE)
      PUSH_FILE_DESCRIPTOR ("MLP_HEADER", file_descriptor)
         mlp_ver = SELECT MAX mlp_header.product_version
                   WHERE identity = mlp_id
                   AND approval_status = "A"
                   AND removeflag <> TRUE
      POP_FILE_DESCRIPTOR (file_descriptor)
   ENDIF

   allow_agree = SELECT mlp_header.allow_agree
                 WHERE  identity = mlp_id
                 AND    product_version = mlp_ver
{**ME1522}

   IF allow_agree THEN
      RETURN ( TRUE )
   ELSE
      FLASH_MESSAGE("MPS Status AGRD, not allowed for this product. Please check the MLP", TRUE)
      RETURN(FALSE)
   ENDIF
ELSEIF INDEX(";RED;YELLOW;GREEN;", mps_status) > 0
    IF STRIP(SELECT job_header . inspection_lot) <> "" THEN
        the_job = SELECT job_header.job_name
        fm("MPS Status '":STRIP(mps_status):"' is not allowed, for '":STRIP(the_job):"'":ASCII(10):
           "This status is not allowed in SAP")
        RETURN(FALSE)
    ELSE
        RETURN(TRUE)
    ENDIF
ELSE
      RETURN(TRUE)
ENDIF
{**ME1487}
{**AE1456}

FLASH_MESSAGE("An error occoured, please contact the system administrator immediately!", TRUE)
RETURN (FALSE)

ENDROUTINE

{**************************************************************************}
{                       VERIFY_MISSING_ORDER_ON_JOB                        }
{**************************************************************************}


ROUTINE VERIFY_MISSING_ORDER_ON_JOB(VALUE the_job, VALUE user_ok)


JOIN STANDARD_LIBRARY STD_PROMPT
DECLARE lk, authorisation_confirmation, initials_entered, initials, abort_button, accept_button

initials_entered = EMPTY
lk = EMPTY

REPEAT

   CREATE OBJECT PROMPT_CLASS_FORM, authorisation_confirmation

   {setup defaults}


   authorisation_confirmation. header       = "No Production order was found on job " : the_job : "."
   authorisation_confirmation. footer       = "Escape to cancel"
   authorisation_confirmation. row      =  7
   authorisation_confirmation. column       =  4
   authorisation_confirmation. width        = 75
   authorisation_confirmation. height       = 12
   authorisation_confirmation. return_behaviour     = FORM_RETURN_STAY
   authorisation_confirmation. button_style     = FORM_BUTTON_NONE
   authorisation_confirmation. icon             = "INT_STOP"


   PROMPT OBJECT abort_button
      CLASS "STD_PROMPT_BUTTON"
      ON LINE 8
      FROM 32 TO 42
      WITH ( caption = "Cancel", send_lastkey = "EXIT", tooltip = "Click here to Return to the Authorisation Screen")


   PROMPT OBJECT initials
      CLASS "STD_PROMPT_TEXT"
      ON LINE 11
      FROM 22 TO 32


   PROMPT OBJECT accept_button
      CLASS "STD_PROMPT_BUTTON"
      ON LINE 11
      FROM 42 TO 52
      WITH ( caption = "Proceed", send_lastkey = "DO", tooltip = "Click here to Authorise the job")


   authorisation_confirmation . add_prompt (abort_button)
   IF user_ok THEN
      authorisation_confirmation . add_prompt (accept_button)
      authorisation_confirmation . add_prompt (initials)
   ENDIF

   authorisation_confirmation . add_display ("Problem found. No information about production order on the Job Header. Hit Cancel ",
                           8, 2, prompt_rendition_bold )

   authorisation_confirmation . add_display ("to abort the authorisation and ask a super user to solve the problem on the Job Header. " ,
                           8, 3, prompt_rendition_bold )

   IF user_ok THEN
      authorisation_confirmation . add_display ("You are qualified: You may type your Logon ID and Proceed with the authorisation " ,
                           8, 5, prompt_rendition_bold )

      authorisation_confirmation . add_display ("of job " : the_job : ". Your override action will be recorded for future reference!",
                           8, 6, prompt_rendition_bold )
   ENDIF

   authorisation_confirmation . start_prompt ()
   authorisation_confirmation . wait_prompt ()
   authorisation_confirmation . end_prompt ()

   initials_entered = initials.value
   lk = authorisation_confirmation . get_lastkey ()

UNTIL ((TOUPPER(initials_entered) = TOUPPER(GLOBAL("OPERATOR"))) OR (lk = "EXIT"))

IF lk = "EXIT" THEN
   RETURN(FALSE)
ELSEIF lk = "ENTER" THEN
   RETURN(TRUE)
ELSEIF ((lk = "DO") AND (TOUPPER(initials_entered) = TOUPPER(GLOBAL("OPERATOR")))) THEN
   RETURN(TRUE)
ELSE
   FLASH_MESSAGE("Error! Please contact the SampleManager System Administrator (2) ":strip(lk),TRUE)
   RETURN(FALSE)
ENDIF


RETURN(TRUE)

ENDROUTINE


{**************************************************************************}
{                       VERIFY_MISSING_ORDER_STATUS                        }
{**************************************************************************}


ROUTINE VERIFY_MISSING_ORDER_STATUS(prod_order, insp_type, VALUE user_ok)


JOIN STANDARD_LIBRARY STD_PROMPT
DECLARE lk, authorisation_confirmation, initials_entered, initials, abort_button, accept_button

initials_entered = EMPTY
lk = EMPTY

REPEAT

   CREATE OBJECT PROMPT_CLASS_FORM, authorisation_confirmation

   {setup defaults}


   authorisation_confirmation. header       = "CHEOPS Production order " : prod_order : " was not found "
   authorisation_confirmation. footer       = "Escape to cancel"
   authorisation_confirmation. row      =  7
   authorisation_confirmation. column       =  4
   authorisation_confirmation. width        = 75
   authorisation_confirmation. height       = 12
   authorisation_confirmation. return_behaviour     = FORM_RETURN_STAY
   authorisation_confirmation. button_style     = FORM_BUTTON_NONE
   authorisation_confirmation. icon             = "INT_STOP"


   PROMPT OBJECT abort_button
      CLASS "STD_PROMPT_BUTTON"
      ON LINE 8
      FROM 32 TO 42
      WITH ( caption = "Cancel", send_lastkey = "EXIT", tooltip = "Click here to Return to the Authorisation Screen")


   PROMPT OBJECT initials
      CLASS "STD_PROMPT_TEXT"
      ON LINE 11
      FROM 22 TO 32


   PROMPT OBJECT accept_button
      CLASS "STD_PROMPT_BUTTON"
      ON LINE 11
      FROM 42 TO 52
      WITH ( caption = "Proceed", send_lastkey = "DO", tooltip = "Click here to Authorise the job")


   authorisation_confirmation . add_prompt (abort_button)

   IF user_ok THEN
      authorisation_confirmation . add_prompt (accept_button)
      authorisation_confirmation . add_prompt (initials)
   ENDIF

   authorisation_confirmation . add_display ("Problem found. The production order ":STRIP(prod_order):" was not found in CHEOPS. Hit Cancel ",
                           8, 2, prompt_rendition_bold )

   authorisation_confirmation . add_display ("to abort the authorisation and ask a super user to solve the problem in  CHEOPS. " ,
                           8, 3, prompt_rendition_bold )

   IF user_ok THEN
      authorisation_confirmation . add_display ("You are qualified: You may type your Logon ID and Proceed with the authorisation " ,
                           8, 5, prompt_rendition_bold )

      authorisation_confirmation . add_display ("of the job. Your override action will be recorded for future reference!",
                           8, 6, prompt_rendition_bold )
   ENDIF


   authorisation_confirmation . start_prompt ()
   authorisation_confirmation . wait_prompt ()
   authorisation_confirmation . end_prompt ()

   initials_entered = initials.value
   lk = authorisation_confirmation . get_lastkey ()

UNTIL ((TOUPPER(initials_entered) = TOUPPER(GLOBAL("OPERATOR"))) OR (lk = "EXIT"))

IF lk = "EXIT" THEN
   RETURN(FALSE)
ELSEIF lk = "ENTER" THEN
   RETURN(TRUE)
ELSEIF ((lk = "DO") AND (TOUPPER(initials_entered) = TOUPPER(GLOBAL("OPERATOR")))) THEN
   RETURN(TRUE)
ELSE
   FLASH_MESSAGE("Error! Please contact the SampleManager System Administrator (2) ":strip(lk),TRUE)
   RETURN(FALSE)
ENDIF


RETURN(TRUE)

ENDROUTINE




{**************************************************************************}
{                        VERIFY_ORDER_NOT_GREEN                            }
{**************************************************************************}

ROUTINE VERIFY_ORDER_NOT_GREEN(VALUE prod_order, VALUE insp_type, VALUE prod_ord_status_id, VALUE prod_ord_status_text, VALUE prod_ord_status_icon, VALUE user_ok)

JOIN STANDARD_LIBRARY STD_PROMPT
DECLARE lk, authorisation_confirmation, initials_entered
DECLARE abort_button, accept_button, initials

initials_entered = EMPTY
lk = EMPTY

REPEAT

   CREATE OBJECT PROMPT_CLASS_FORM, authorisation_confirmation

   {setup defaults}


   authorisation_confirmation. header       = "CHEOPS Production order " : prod_order : " has status " : prod_ord_status_text
   authorisation_confirmation. footer       = "Escape to cancel"
   authorisation_confirmation. row      =  7
   authorisation_confirmation. column       =  4
   authorisation_confirmation. width        = 75
   authorisation_confirmation. height       = 13
   authorisation_confirmation. return_behaviour     = FORM_RETURN_STAY
   authorisation_confirmation. button_style     = FORM_BUTTON_NONE
   authorisation_confirmation. icon             = prod_ord_status_icon


   PROMPT OBJECT abort_button
      CLASS "STD_PROMPT_BUTTON"
      ON LINE 9
      FROM 32 TO 42
      WITH ( caption = "Cancel", send_lastkey = "EXIT", tooltip = "Click here to Return to the Authorisation Screen")


   PROMPT OBJECT initials
      CLASS "STD_PROMPT_TEXT"
      ON LINE 12
      FROM 22 TO 32


   PROMPT OBJECT accept_button
      CLASS "STD_PROMPT_BUTTON"
      ON LINE 12
      FROM 42 TO 52
      WITH ( caption = "Proceed", send_lastkey = "DO", tooltip = "Click here to Authorise the job")


   authorisation_confirmation . add_prompt (abort_button)
   IF user_ok THEN
      authorisation_confirmation . add_prompt (accept_button)
      authorisation_confirmation . add_prompt (initials)
   ENDIF

   authorisation_confirmation . add_display ("Problem encountered. The production order ":STRIP(prod_order):" in CHEOPS has status ": STRIP(prod_ord_status_text) : ".",
                           8, 2, prompt_rendition_bold )

   authorisation_confirmation . add_display ("Hit Cancel to abort the authorisation. Please create an Incident for 'Production Evaluation'." ,
                           8, 3, prompt_rendition_bold )

   authorisation_confirmation . add_display ("When the process order has been changed in CHEOPS, the job may be authorised." ,
                           8, 4, prompt_rendition_bold )




   IF user_ok THEN
      authorisation_confirmation . add_display ("As a qualified person, you may enter your Logon ID in the box and Proceed with",
                              8, 6, prompt_rendition_bold )
      authorisation_confirmation . add_display ("the authorisation. Your override action will be recorded for future reference!",
                              8, 7, prompt_rendition_bold )
   ENDIF

   authorisation_confirmation . start_prompt ()
   authorisation_confirmation . wait_prompt ()
   authorisation_confirmation . end_prompt ()

   initials_entered = initials.value
   lk = authorisation_confirmation . get_lastkey ()

UNTIL ((TOUPPER(initials_entered) = TOUPPER(GLOBAL("OPERATOR"))) OR (lk = "EXIT"))

IF lk = "EXIT" THEN
   RETURN(FALSE)
ELSEIF lk = "ENTER" THEN
   RETURN(TRUE)
ELSEIF ((lk = "DO") AND (TOUPPER(initials_entered) = TOUPPER(GLOBAL("OPERATOR")))) THEN
   RETURN(TRUE)
ELSE
   FLASH_MESSAGE("Error! Please contact the SampleManager System Administrator ":strip(lk),TRUE)
   RETURN(FALSE)
ENDIF


ENDROUTINE

{**AE1732}

ROUTINE validation_aux (self, form, column, row, prompt_width, window, is_display)

DECLARE the_job, content

    the_job = SELECT job_header.job_name
    WriteToLog("(self, form, column = ":STRIP(column):", row = ":STRIP(row):", prompt_width = ":STRIP(prompt_width):", window, is_display = ":is_display:")")
    IF the_job = EMPTY THEN
        WriteToLog("Job: ":the_job)
        data = ""
    ELSEIF data = "" THEN
        push_file_descriptor("JOB_HEADER", content)
            data = VerifyJob(the_job)
            WriteToLog("Data: ":data)
        pop_file_descriptor(content)
    ENDIF

    IF is_display THEN
        DISPLAY data 
            ON LINE   row 
            FROM      column
            TO        column + prompt_width - 1
            IN WINDOW window
    ELSE
        PROMPT FOR data 
            ON LINE   row 
            FROM      column
            TO        column + prompt_width - 1
            IN WINDOW window
            WITH (display_only = TRUE,
                  tab_stop     = FALSE)
    ENDIF

ENDROUTINE


{*************************************************************************
* Purpose      : Writes to predefined log,
*                using WriteLog in $lib_utils
* Parameters   : Msg - what to write in log
* Return Value : N/A
**************************************************************************}
ROUTINE WriteToLog(VALUE Msg)

    WriteLog(Msg, global("current_library"))

ENDROUTINE

