{==============================================================================}
{                                                                              }
{  TENSOR TECHNOLOGIES                                                         }
{                                                                              }
{  Filename         : $STB_LTE_STUDY                                           }
{  Version          : 1.0                                                      }
{  Document Ref.    :                                                          }
{  Author           : John o' Gorman                                           }
{  Date Created     : 20-5-97                                                  }
{  Responsible      : TTL                                                      }
{  Description      :                                                          }
{                                                                              }
{==============================================================================}

ENABLE WINDOWS
SET NAME "DISPLAY/"

JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_GENERAL
JOIN STANDARD_LIBRARY STD_STRUCTURE

JOIN LIBRARY $LABTABLIB
JOIN LIBRARY $LIB_DB
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $PROMPT_WINDOW
JOIN LIBRARY $STB_HEADER_LIB
JOIN LIBRARY $STB_LIB


DECLARE protocol_identity, protocol_version, study_pull

DECLARE mdl_do_activate
DECLARE mdl_do_approve
DECLARE mdl_do_cancel
DECLARE mdl_do_reactivate
DECLARE mdl_do_finalise
DECLARE global_operation

{******************************************************************************}

ROUTINE table_setup ( operation )
{
* 
*
* Parameters : 
*
*******************************************************************************}

                                        { JOG TTL                            }
                                        { init of module level variables     }

    mdl_do_activate   = FALSE
    mdl_do_approve    = FALSE
    mdl_do_cancel     = FALSE
    mdl_do_reactivate = FALSE
    mdl_do_finalise   = FALSE


    ARRAY prompt_details    ARRAY_SIZE ( 0 , 6 )
    ARRAY fields_to_output  ARRAY_SIZE ( 0 )

    name_of_table           =  "PDS_STUDY           "

    IF operation = "add_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "1" )
    ELSEIF operation = "copy_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "2" )
    ELSEIF operation = "modify_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "3" )
    ELSEIF operation = "display_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "4" )
    ELSEIF operation = "remove_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "5" )
    ELSEIF operation = "restore_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "6" )
    ELSEIF operation = "list_idents" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "7" )
    ELSEIF operation = "print_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "8" )
    ELSEIF operation = "approve_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "9" )
    ELSEIF operation = "activate_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "10" )
    ELSEIF operation = "cancel_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "11" )
    ELSEIF operation = "reactivate_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "12" )
    ELSEIF operation = "finalise_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_STUDY_HEADER", "13" )
    ENDIF

    footer_mess = GET_USER_MESSAGE ( "PDS_STUDY_MOD_FOOTER", "1" )

    display_footer_mess = GET_USER_MESSAGE ( "PDS_STUDY_MOD_FOOTER", "1" )

    DECLARE count

    count = 0


    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_15", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "STATUS"
    prompt_details [  count, TYPE_POSITION ]       = "DISPLAY"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_11", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "CREATED_BY"
    prompt_details [  count, TYPE_POSITION ]       = "DISPLAY"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_12", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "CREATED_ON"
    prompt_details [  count, TYPE_POSITION ]       = "DISPLAY"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_13", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "CREATED_FROM"
    prompt_details [  count, TYPE_POSITION ]       = "DISPLAY"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_14", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "PROTOCOL_VERSION"
    prompt_details [  count, TYPE_POSITION ]       = "DISPLAY"

{**AS1521 HBe 13-1-04: MLP_ID and BATCH_NAME added}       
    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = "MLP Identity"
    prompt_details [  count, FIELD_NAME_POSITION ] = "MLP_ID"
    
    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = "Batch Name"
    prompt_details [  count, FIELD_NAME_POSITION ] = "BATCH_NAME"
{**AE1521}

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_17", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "JOB_NAME"
    prompt_details [  count, TYPE_POSITION ]       = "DISPLAY"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_1", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "GROUP_ID"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_2", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "DESCRIPTION"

{**AS1521 HBe 13-1-04: Study comment included}       
    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = "Study Comment"
    prompt_details [  count, FIELD_NAME_POSITION ] = "STUDY_COMMENT"
{**AE1521}

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_3", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "DEFAULT_CONFIG"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_4", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "JOB_TEMPLATE_ID"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_5", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "SAMPLE_TEMPLATE"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_6", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "REPORT_NAME"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_7", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "LABEL_NAME"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_8", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "LOG_TYPE"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_10", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "TYPE"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_19", 1 )
    prompt_details [  count, TYPE_POSITION       ] = "ROUTINE"
    prompt_details [  count, LIBRARY_POSITION    ] = GLOBAL ( "CURRENT_LIBRARY" ) 
    prompt_details [  count, ROUTINE_POSITION    ] = "BROWSE_INV_PRODUCT_TABLE"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_16", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "USE_PREDICTED"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_18", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "USE_STUDY_NAME"

    displayed_name_of_table    = GET_USER_MESSAGE ( "PDS_STUDY_NAME_OF_TABLE", 1 )


    directory = "SMP$TEXTFILES"
    extn = "PRO"

    input_mess = GET_USER_MESSAGE ( "PDS_STUDY_ID_PROMPT", 1 )

    default_value = EMPTY

    fields_to_output [  1 ]  = 1
    fields_to_output [  2 ]  = 2
    fields_to_output [  3 ]  = 3
    fields_to_output [  4 ]  = 4
    fields_to_output [  5 ]  = 5
    fields_to_output [  6 ]  = 6
    fields_to_output [  7 ]  = 7
    fields_to_output [  8 ]  = 9
    fields_to_output [  9 ]  = 10

    ARRAY   special_actions_report  ARRAY_SIZE ( 0 , 4 )

    special_actions_report [ 1 , CHARACTER_POSITION ] = "*"
    special_actions_report [ 1 , TITLE_POSITION     ] = GET_USER_MESSAGE ( "PDS_STUDY_SA", 1 )

    special_actions_report [ 2 , CHARACTER_POSITION ] = "1"
    special_actions_report [ 2 , TITLE_POSITION     ] = GET_USER_MESSAGE ( "PDS_STUDY_MATRIX", 1 )

    IF operation = "add_ident" THEN
        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$stb_matrix_setup"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "setup_study_matrix"
    ELSEIF operation = "modify_ident" THEN
        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$stb_matrix"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "modify_study_matrix"
    ELSEIF operation = "copy_ident" THEN
        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$stb_matrix"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "modify_study_matrix"
    ELSEIF ( ( operation = "display_ident" )  OR
             ( operation = "approve_ident" )  OR
             ( operation = "activate_ident" ) ) THEN
        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$stb_matrix"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "modify_study_matrix"
    ELSEIF ( operation = "cancel_ident" ) THEN
        mdl_do_cancel = TRUE
        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$stb_matrix"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "modify_study_matrix"
    ELSEIF ( operation = "reactivate_ident" ) THEN
        mdl_do_reactivate = TRUE
        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$stb_matrix"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "modify_study_matrix"
    ELSEIF ( operation = "finalise_ident" ) THEN
        mdl_do_finalise = TRUE
        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$stb_matrix"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "modify_study_matrix"

    ENDIF

    IF operation = "approve_ident" THEN

        mdl_do_approve = TRUE

        special_actions_report [ 3 , CHARACTER_POSITION ] = "2"
        special_actions_report [ 3 , TITLE_POSITION     ] = GET_USER_MESSAGE ( "PDS_STUDY_APPROVE", 1 )
        special_actions_report [ 3 , LIBRARY_POSITION   ] = "$stb_header_lib"
        special_actions_report [ 3 , ROUTINE_POSITION   ] = "study_approve"

    ELSEIF operation = "activate_ident" THEN

        mdl_do_activate = TRUE

        special_actions_report [ 3 , CHARACTER_POSITION ] = "2"
        special_actions_report [ 3 , TITLE_POSITION     ] = GET_USER_MESSAGE ( "PDS_STUDY_ACTIVATE", 1 )
        special_actions_report [ 3 , LIBRARY_POSITION   ] = "$stb_header_lib"
        special_actions_report [ 3 , ROUTINE_POSITION   ] = "study_activate"

    ENDIF

    ARRAY   labtable_messages       ARRAY_SIZE ( 0 )

    labtable_messages [ IDENTITY_MESSAGE ] = GET MESSAGE ( 2545 , 1 )
                                            { "Identity" }
    labtable_messages [ MOD_ON_MESSAGE   ] = GET MESSAGE ( 2546 , 1 )
                                            { "Modified On" }
    labtable_messages [ MOD_BY_MESSAGE   ] = GET MESSAGE ( 2547 , 1 )
                                            { "Modified By" }
    labtable_messages [ READ_MESSAGE     ] = GET MESSAGE ( 2566 , 1 )
                                            { "Labtable Read Transaction" }
    labtable_messages [ WRITE_MESSAGE    ] = GET MESSAGE ( 2567 , 1 )
                                            { "Labtable Write Transaction" }

    help_context = "$LTE_STUDY_EDIT"


 {   ------     THERE ARE NO MORE FIELDS TO BE SETUP  --------    }

ENDROUTINE

{******************************************************************************}

ROUTINE validation_routine
{
* 
*
* Parameters : None
*
*******************************************************************************}

    DECLARE ok
    
    ok = TRUE
   
    IF ( ( SELECT pds_study . log_type = EMPTY ) OR
         ( SELECT pds_study . log_type = ""    ) ) THEN

        flash_message ( GET_USER_MESSAGE ( "PDS_STUDY_VALIDATE", 1 ), TRUE )
        ok = FALSE

    ENDIF

    RETURN ( ok )
    
ENDROUTINE

{******************************************************************************}

ROUTINE do_the_work  ( VALUE operation )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    global_operation = operation
    table_setup ( operation )

    IF operation = "approve_ident" THEN
        operation = "display_ident"
    ELSEIF operation = "activate_ident" THEN
        operation = "display_ident"
    ELSEIF operation = "cancel_ident" THEN
        operation = "display_ident"
    ELSEIF operation = "reactivate_ident" THEN
        operation = "display_ident"
    ELSEIF operation = "finalise_ident" THEN
        operation = "display_ident"
    ENDIF

    smp_lte_perform_option  ( name_of_table              ,
                              displayed_name_of_table    ,
                              prompt_details             ,
                              labtable_messages          ,
                              default_value              ,
                              input_mess                 ,
                              header_mess                ,
                              footer_mess                ,
                              display_footer_mess        ,
                              directory                  ,
                              extn                       ,
                              help_context               ,
                              GLOBAL ("CURRENT_LIBRARY") ,
                              fields_to_output           ,
                              special_actions_report     ,
                              operation                  )

    {wake up background timer }

    IF (WAKE_UP_BACKGROUND) THEN
        {nnn}
    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE add_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "add_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE copy_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "copy_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE new_version_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "new_version" )

ENDROUTINE

{******************************************************************************}

ROUTINE modify_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "modify_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE display_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "display_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE remove_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "remove_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE restore_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "restore_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE list_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "list_idents" )

ENDROUTINE

{******************************************************************************}

ROUTINE print_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "print_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE approve_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "approve_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE activate_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "activate_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE cancel_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "cancel_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE reactivate_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "reactivate_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE finalise_option ( option )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    do_the_work ( "finalise_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE smp_lte_initialise
{
* 
*
* Parameters : None
*
*******************************************************************************}

ENDROUTINE

{******************************************************************************}

ROUTINE create_id_routine
{
* 
*
* Parameters : None
*
*******************************************************************************}

    DECLARE study_id_array, padded_study_id, select_approved_proto

    IF operation = "add_ident" THEN

        ARRAY select_approved_proto
        ARRAY_SELECT_ADD( select_approved_proto, ARRAY_SELECT_EQ, "STATUS", "O" )

        IF vgl_prompt_in_window_criteria ( "PDS_PROTO"            ,
                                           GET_USER_MESSAGE ( "USE_PROTO_ID", 1 )  ,
                                           GET_USER_MESSAGE ( "USE_PROTO_TITLE", 1 ) ,
                                           EMPTY                  ,
                                           select_approved_proto  ,
                                           padded_study_id        ) THEN

            study_id_array = lib_db_padded_to_array( "PDS_PROTO", padded_study_id )

            protocol_identity  = study_id_array[1]
            protocol_version   = study_id_array[2]

        ELSE

            EXIT

        ENDIF

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE read_data_routine ( param1, action )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    IF action = "ADD" THEN

        write_proto_to_study ( protocol_identity, protocol_version )

                                       { define the values from created on }
                                       { , by, from and proto version no.  }

        ASSIGN pds_study . created_on       = NOW
        ASSIGN pds_study . created_by       = OPERATOR
        ASSIGN pds_study . created_from     = protocol_identity
        ASSIGN pds_study . protocol_version = protocol_version

        IF GLOBAL ( "AUTO_APPROVE_STUDY" ) THEN
            do_auto_approval ( "PDS_STUDY" )
        ENDIF

    ELSEIF  action = "COPY" THEN

        reset_study_header ()

        IF GLOBAL ( "AUTO_APPROVE_STUDY" ) THEN
            do_auto_approval ( "PDS_STUDY" )
        ELSE
            do_auto_unapproval ( "PDS_STUDY", FALSE )
        ENDIF

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE update_routine ( param1 )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    DECLARE tab_name

    tab_name = "PDS_STUDY"

    IF variable_is_assigned ( study_pull ) THEN

        study_pull . invoke_all ( "UPDATE" )

    ENDIF

    IF param1 . operation = "MODIFY" THEN
        IF SELECT 'tab_name' . status = "O" THEN
            do_auto_unapproval ( tab_name, TRUE )
        ENDIF
    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE prompt_object_routine ( param1, param2, param3 )
{
* 
*
* Parameters : 
*
*******************************************************************************}

    DECLARE mandatory_array
    ARRAY mandatory_array

    IF param3 = "MODIFY" THEN

        mandatory_array [ 1, 1 ] = ARRAY_SELECT_NE
        mandatory_array [ 1, 2 ] = "STATUS"
        mandatory_array [ 1, 3 ] = "F"

        param1 . mandatory_array = mandatory_array

    ENDIF

    IF mdl_do_activate THEN

        mandatory_array [ 1, 1 ] = ARRAY_SELECT_EQ
        mandatory_array [ 1, 2 ] = "STATUS"
        mandatory_array [ 1, 3 ] = "O"

        param1 . mandatory_array = mandatory_array

    ENDIF

    IF mdl_do_approve THEN

        mandatory_array [ 1, 1 ] = ARRAY_SELECT_EQ
        mandatory_array [ 1, 2 ] = "STATUS"
        mandatory_array [ 1, 3 ] = "S"

        param1 . mandatory_array = mandatory_array

    ENDIF

    IF mdl_do_cancel THEN

        mandatory_array [ 1, 1 ] = ARRAY_SELECT_EQ
        mandatory_array [ 1, 2 ] = "STATUS"
        mandatory_array [ 1, 3 ] = "A"

        param1 . mandatory_array = mandatory_array

    ENDIF

    IF mdl_do_reactivate THEN

        mandatory_array [ 1, 1 ] = ARRAY_SELECT_EQ
        mandatory_array [ 1, 2 ] = "STATUS"
        mandatory_array [ 1, 3 ] = "X"

        param1 . mandatory_array = mandatory_array

    ENDIF

    IF mdl_do_finalise THEN

        mandatory_array [ 1, 1 ] = ARRAY_SELECT_EQ
        mandatory_array [ 1, 2 ] = "STATUS"
        mandatory_array [ 1, 3 ] = "C"

        param1 . mandatory_array = mandatory_array

    ENDIF


ENDROUTINE

{******************************************************************************}

ROUTINE is_cancel_active
{
* 
*
* Parameters : None
*
*******************************************************************************}

    RETURN ( mdl_do_cancel )

ENDROUTINE

{******************************************************************************}

ROUTINE is_reactivate_active
{
* 
*
* Parameters : None
*
*******************************************************************************}

    RETURN ( mdl_do_reactivate )

ENDROUTINE

{******************************************************************************}

ROUTINE is_finalise_active
{
* 
*
* Parameters : None
*
*******************************************************************************}

    RETURN ( mdl_do_finalise )

ENDROUTINE


{******************************************************************************}

ROUTINE browse_inv_product_table ( VALUE column   ,
                                   VALUE row      ,
                                   VALUE cell_width ,
                                         window     ,
                                   VALUE is_display )

{******************************************************************************}

DECLARE temp_product, product_array, display_only

    ARRAY product_array

    temp_product = SELECT pds_study . product_id

    IF ( is_display ) THEN

        DISPLAY temp_product
            ON LINE   row
            FROM      column
            TO        column + cell_width - 1
            IN WINDOW window
    ELSE

            display_only =  NOT( ( SELECT pds_study . status = "O" ) OR
                                 ( SELECT pds_study . status = "S" ) ) OR
                            GLOBAL ( "DISPLAY_MODE" )

            PROMPT FOR temp_product
                  BROWSE ON inventory_view . identity
                  WITH ( display_only = display_only  ,
                         column       = column        ,
                         row          = row           ,
                         window       = window        ,
                         width        = cell_width    )

        ASSIGN pds_study . product_id = temp_product

    ENDIF

ENDROUTINE
