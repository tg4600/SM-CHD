
{******************************************************************************
*
* Module Name   : $LIB_RE_GRAPH
*
* Purpose       : Graph display routines for use with Result Entry
*
* Document Ref. : SE/T/TVGL-WORK-RESENTO/1/5
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    : Yes
*
*******************************************************************************}

SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY std_array
JOIN STANDARD_LIBRARY std_utils

JOIN LIBRARY $LIB_RE_GRAPH_USER
JOIN LIBRARY $PROMPT_GRAPH
JOIN LIBRARY $LIB_UTILS

GLOBAL CONSTANT LIB_RE_GRAPH_CLASS = "LIB_RE_GRAPH_CLASS"

{******************************************************************************}



{***** GLOBAL ROUTINE lib_re_graph_initialise.rpf *****}

GLOBAL ROUTINE lib_re_graph_initialise

{*
*    Routine to set up the graph context class
*
*******************************************************************************}

    IF NOT GLOBAL ( "LIBRARY_INITIALISED" ) THEN

        set_up_std_prompt_graph_class ()

        DEFINE CLASS LIB_RE_GRAPH_CLASS

            PROPERTIES

                "NEED_REBUILD"    ,
                "PRODUCT"         ,
                "PRODUCT_VERSION" ,
                "ANALYSIS"        ,
                "COMPONENT_NAME"  ,
                "RESULT_TYPE"     ,
                "START_DATE"      ,
                "DATA_ARRAY_X"    ,
                "DATA_ARRAY_Y"    ,
                "CONTROL_LINES"

            ACTIONS

                "REBUILD"         ,
                "DRAW_GRAPH"      ,
                "SET_DETAILS"

            END CLASS

        SET GLOBAL "LIBRARY_INITIALISED" TO TRUE

    ENDIF

ENDROUTINE


{***** GLOBAL ROUTINE lib_re_graph_create_graph_form.rpf *****}

GLOBAL ROUTINE lib_re_graph_create_graph_form ( result_context )

{*
*    Routine to set up the graph form for gui display
*
*******************************************************************************}

    DECLARE graph_object

    { Create the form }

    CREATE OBJECT PROMPT_CLASS_FORM , result_context . graph_form

    result_context . graph_form . height = 18
    result_context . graph_form . width  = 80

    result_context . graph_form . row    = 16
    result_context . graph_form . column = GLOBAL ( "GUI_WIDTH" ) -
                                 result_context . graph_form . width - 2

    result_context . graph_form . proportional = TRUE
    result_context . graph_form . button_style = FORM_BUTTON_NONE

    PROMPT OBJECT graph_object
           CLASS  PROMPT_GRAPH_CLASS
           WITH ( column           = 1                                        ,
                  row              = 1                                        ,
              width            = result_context . graph_form . width      ,
              height           = result_context . graph_form . height - 2 ,
              point_character  = "+"                                      ,
              selection_colour = PROMPT_COLOUR_MAGENTA                    ,
              full_screen      = TRUE                                     )

    result_context . graph_form . add_prompt ( graph_object )

ENDROUTINE


{***** GLOBAL ROUTINE lib_re_graph_set_visible.rpf *****}

GLOBAL ROUTINE lib_re_graph_set_visible (       result_context ,
                                       VALUE is_visible     )

{*
*    Set the visibility property of the graph screen
*
*******************************************************************************}

    DECLARE was_visible

    was_visible = result_context . graph_form . visible

        result_context . graph_form . set_visible ( is_visible )

        RETURN ( was_visible )

ENDROUTINE


{***** GLOBAL ROUTINE lib_re_graph_class_action_draw_graph.rpf *****}

GLOBAL ROUTINE lib_re_graph_class_action_draw_graph ( graph_context  ,
                                                   result_object  ,
                                                   result_context )

{*
*    Draw the graph
*
*******************************************************************************}

    DECLARE graph_object   ,
            graph_window_1 ,
            min_y          ,
            max_y          ,
            count          ,
            graph1

    IF ( graph_context . data_array_x [1]  <> EMPTY ) THEN

        graph_object   = result_context . graph_form . prompt_objects [1]
        graph_window_1 = result_context . graph_form . prompt_objects [1] . start_graph ()

        SET GRAPH graph1 , X_ANNOTATION.COLOUR = 4
        SET GRAPH graph1 , Y_ANNOTATION.COLOUR = 4

        SET GRAPH graph1 , X_GRADUATION.start_position = 1
        SET GRAPH graph1 , X_GRADUATION.large          = 1

        SET GRAPH graph1 , X_AXIS.COLOUR = 4
        SET GRAPH graph1 , Y_AXIS.COLOUR = 4

        SET GRAPH graph1 , X_GRADUATION.COLOUR = 4
        SET GRAPH graph1 , Y_GRADUATION.COLOUR = 4

        SET GRAPH graph1 , graph.style = 1
        SET GRAPH graph1 , curve.colour = 2
        SET GRAPH graph1 , CURVE.LINE_STYLE = 1

        SET GRAPH graph1 , points.COLOUR = 2
        SET GRAPH graph1 , points.character = "+"

        SET GRAPH graph1 , X_AXIS.INPUT = graph_context . data_array_x
        SET GRAPH graph1 , Y_AXIS.INPUT = graph_context . data_array_y

        { Set the axis range }

        min_y = graph_context . data_array_y [ 1 ]
        max_y = graph_context . data_array_y [ 1 ]

        count = 2

        WHILE graph_context . data_array_y [ count ] <> EMPTY DO

            IF graph_context . data_array_y [ count ] < min_y THEN
                min_y = graph_context . data_array_y [ count ]
            ENDIF

            IF graph_context . data_array_y [ count ] > max_y THEN
                max_y = graph_context . data_array_y [ count ]
            ENDIF

            count = count + 1

        ENDWHILE

        count = 1

        WHILE count <= size_of_array ( graph_context . control_lines ) DO

            IF (( graph_context . control_lines [ count, 2 ] <> EMPTY )  AND
                ( graph_context . control_lines [ count, 2 ] <  min_y )) THEN
                min_y = graph_context . control_lines [ count, 2 ]
            ENDIF

            IF (( graph_context . control_lines [ count, 3 ] <> EMPTY )  AND
                ( graph_context . control_lines [ count, 3 ] >  max_y )) THEN
                max_y = graph_context . control_lines [ count, 3 ]
            ENDIF

            count = count + 1

        ENDWHILE

        SET GRAPH graph1 , X_AXIS.start_position = 0

        IF min_y <> max_y THEN

            SET GRAPH graph1 , Y_AXIS.start_position =
                        min_y - (( max_y - min_y ) * 0.05 )
            SET GRAPH graph1 , Y_AXIS.end_position =
                        max_y + (( max_y - min_y ) * 0.05 )

        ENDIF

        { Draw the graph }

        DRAW GRAPH graph1 in WINDOW graph_window_1
                      from column 1 to column graph_object . width - 5
        SET GRAPH graph1 , CURVE.LINE_STYLE = 2
        SET GRAPH graph1 , CURVE.COLOUR     = 3

        count = 1

        WHILE count <= size_of_array ( graph_context . control_lines ) DO

            IF ( graph_context.control_lines [ count, 2 ] <> EMPTY ) THEN

            PLOT LINE graph1
                FROM 0 , graph_context . control_lines [ count, 2 ]
                TO   size_of_array ( graph_context . data_array_x ) , graph_context . control_lines [ count, 2 ]

                PLOT LINE graph1
                    FROM 0 , graph_context . control_lines [ count, 3 ]
                    TO   size_of_array ( graph_context . data_array_x ) , graph_context . control_lines [ count, 3 ]

            ENDIF

{2009-02-26 ATø PlantVision AB Start Viser ikke level namnet i grafen hvis værdien > 1000000}

            IF graph_context . control_lines [ count, 2 ]< 1000000 Then

                PLOT TEXT graph1 AT  size_of_array ( graph_context . data_array_x ) - 1, graph_context . control_lines [ count, 2 ]
                     USING graph_context . control_lines [ count, 1 ]

                PLOT TEXT graph1 AT  size_of_array ( graph_context . data_array_x ) - 1, graph_context . control_lines [ count, 3 ]
                     USING graph_context . control_lines [ count, 1 ]

            ENDIF

{2009-02-26 ATø PlantVision AB End}

            count = count + 1

        ENDWHILE

        result_context . graph_form . prompt_objects [1] . end_graph ()

    ELSE

        result_context . graph_form . prompt_objects [1] . start_graph ()
        result_context . graph_form . prompt_objects [1] . repaste ( )

    ENDIF

ENDROUTINE


{***** GLOBAL ROUTINE lib_re_graph_class_action_set_details.rpf *****}

GLOBAL ROUTINE lib_re_graph_class_action_set_details ( graph_context  ,
                                                    result_object  ,
                                                    result_context )

{*
*    Set the selection details for the graph
*
*******************************************************************************}

    graph_context . need_rebuild    = FALSE

    graph_context . product         = SELECT sample . product
                                      IN OBJECT result_object . test_object . sample_object
    graph_context . product_version = SELECT sample . product_version
                                      IN OBJECT result_object . test_object . sample_object
    graph_context . analysis        = SELECT test . analysis
                                      IN OBJECT result_object . test_object
    graph_context . component_name  = SELECT result . name
                                      IN OBJECT result_object
    graph_context . result_type     = SELECT result . result_type
                                      IN OBJECT result_object
    graph_context . start_date      = NOW - INTERVAL ( "365 00:00" )


    {
    graph_context . product         = "DEZ       "
    graph_context . product_version = "        14"
    graph_context . analysis        = "DEZ       "
    graph_context . component_name  = "Numeric"
    graph_context . start_date      = DATE ( " 1-JAN-2004" )
    }

    ARRAY graph_context . data_array_x ARRAYSIZE (0)
    ARRAY graph_context . data_array_y ARRAYSIZE (0)

ENDROUTINE


{***** GLOBAL ROUTINE lib_re_graph_class_action_rebuild.rpf *****}

GLOBAL ROUTINE lib_re_graph_class_action_rebuild ( graph_context  ,
                            result_object  ,
                            result_context )

{*
*    Rebuild the graph display, required whenever the result value has been
*    updated or reselected.
*
*******************************************************************************}

    IF ( NOT lib_re_graph_data_user ( graph_context, result_object, result_context )) THEN

        IF ( result_object . graph_context . result_type = "N" ) OR
           ( result_object . graph_context . result_type = "K" ) OR
           ( result_object . graph_context . result_type = "L" ) THEN

        select_data ( graph_context . product         ,
                      graph_context . product_version ,
                      graph_context . analysis        ,
                      graph_context . component_name  ,
                      graph_context . start_date      ,
                      graph_context . data_array_x    ,
                      graph_context . data_array_y    )

        IF ( size_of_array ( graph_context . data_array_x ) > 0 ) THEN

            select_control_lines ( graph_context . product         ,
                                   graph_context . product_version ,
                                   graph_context . analysis        ,
                                   graph_context . component_name  ,
                                   graph_context . control_lines   )

            ENDIF

        ENDIF

    ELSEIF ( NOT lib_re_graph_control_user ( graph_context, result_object, result_context )) THEN

        IF ( result_object . graph_context . result_type = "N" ) OR
           ( result_object . graph_context . result_type = "K" ) OR
           ( result_object . graph_context . result_type = "L" ) THEN

            IF ( size_of_array ( graph_context . data_array_x ) > 0 ) THEN

                select_control_lines ( graph_context . product         ,
                                       graph_context . product_version ,
                                       graph_context . analysis        ,
                                       graph_context . component_name  ,
                                       graph_context . control_lines   )

            ENDIF

        ENDIF

    ENDIF

    graph_context . need_rebuild = FALSE

ENDROUTINE


{***** GLOBAL ROUTINE lib_re_graph_display_graph.rpf *****}

GLOBAL ROUTINE lib_re_graph_display_graph ( result_object  ,
                         result_context )

{*
*    Routine to display the graph
*
*******************************************************************************}

    IF result_context . graph_on THEN

        IF NOT VARIABLE_IS_ASSIGNED ( result_object .
                                      graph_context ) THEN

            CREATE OBJECT LIB_RE_GRAPH_CLASS ,
                  result_object . graph_context

            result_object . graph_context . set_details ( result_object  ,
                                                          result_context )

            result_object . graph_context . rebuild ( result_object  ,
                                                      result_context )

        ELSEIF result_object . graph_context . need_rebuild THEN

            result_object . graph_context . rebuild ( result_object  ,
                                                      result_context )

        ENDIF

        result_object . graph_context . draw_graph ( result_object  ,
                                                     result_context )

    ENDIF

ENDROUTINE


{***** GLOBAL ROUTINE lib_re_graph_remove_graph.rpf *****}

GLOBAL ROUTINE lib_re_graph_remove_graph ( result_object  ,
                                        result_context )

{*
*    Routine to remove the graph
*
*******************************************************************************}

ENDROUTINE


{***** GLOBAL ROUTINE lib_re_graph_rebuild_graph.rpf *****}

GLOBAL ROUTINE lib_re_graph_rebuild_graph ( result_object  ,
                         result_context )

{*
*    Routine to mark the graph for rebuild
*
*******************************************************************************}

    IF VARIABLE_IS_ASSIGNED ( result_object . graph_context ) THEN

        result_object . graph_context . need_rebuild = TRUE

    ENDIF

ENDROUTINE


{***** ROUTINE select_data.rpf *****}

ROUTINE select_data ( VALUE product_id      ,
                      VALUE product_version ,
                      VALUE analysis_id     ,
                      VALUE component       ,
                      VALUE start_date      ,
                            data_array_x    ,
                            data_array_y    )


{
*
*    Select data for the graph
*
*******************************************************************************}

    DECLARE dynamic_sql           ,
            samp_test_result_push ,
            orgn                  ,
            count

    ARRAY data_array_x ARRAYSIZE (0)
    ARRAY data_array_y ARRAYSIZE (0)

    PUSH_FILE_DESCRIPTOR ( "SAMP_TEST_RESULT", samp_test_result_push )

    CREATE OBJECT "STD_DYNAMIC_SQL" , dynamic_sql

    dynamic_sql . add_to_sql_statement ( "select login_date, result_value " )
    dynamic_sql . add_to_sql_statement ( "from samp_test_result " )

    dynamic_sql . add_to_sql_statement ( "where login_date >= " )
    dynamic_sql . add_where_field  ( "SAMPLE"     ,
                     "LOGIN_DATE" ,
                     start_date   )

    dynamic_sql . add_to_sql_statement ( " and product = " )
    dynamic_sql . add_where_field  ( "SAMPLE"   ,
                     "PRODUCT"  ,
                     product_id )

    {

    IF NUMERIC ( product_version ) > 0 THEN
        dynamic_sql . add_to_sql_statement ( " and product_version = " )
        dynamic_sql . add_where_field  ( "SAMPLE"          ,
                         "PRODUCT_VERSION" ,
                         product_version   )
    ENDIF

    }

    dynamic_sql . add_to_sql_statement ( " and analysis = " )
    dynamic_sql . add_where_field  ( "TEST"      ,
                     "ANALYSIS"  ,
                     analysis_id )

    dynamic_sql . add_to_sql_statement ( " and component_name = " )
    dynamic_sql . add_where_field  ( "RESULT"   ,
                     "NAME"     ,
                     component  )

    dynamic_sql . add_to_sql_statement ( " order by login_date" )

    dynamic_sql . add_select_field  ( "SAMPLE"      ,
                          "LOGIN_DATE"  )
    dynamic_sql . add_select_field  ( "RESULT" ,
                          "VALUE"  )

    dynamic_sql . execute ( )

    orgn  = dynamic_sql . select ( 1 )
    count = 0

    WHILE orgn <> EMPTY DO

        count = count + 1

        data_array_x [ count ] = count
        data_array_y [ count ] = dynamic_sql . select ( 2 )

        dynamic_sql . next ()

        orgn = dynamic_sql . select ( 1 )

    ENDWHILE

    POP_FILE_DESCRIPTOR ( samp_test_result_push )

ENDROUTINE


{***** ROUTINE select_control_lines.rpf *****}

ROUTINE select_control_lines ( VALUE product         ,
                               VALUE product_version ,
                               VALUE analysis_id     ,
                               VALUE component       ,
                                     control_lines   )

{
*
*    Select product limit data
*
*******************************************************************************}

    DECLARE dynamic_sql   ,
            mlp_view_push ,
            orgn          ,
            count

    ARRAY control_lines ARRAYSIZE ( 0, 3 )

    PUSH_FILE_DESCRIPTOR ( "MLP_VIEW", mlp_view_push )

    CREATE OBJECT "STD_DYNAMIC_SQL" , dynamic_sql

    dynamic_sql . add_to_sql_statement ( "select level_id, min_limit, max_limit " )
    dynamic_sql . add_to_sql_statement ( " from mlp_view ")

    dynamic_sql . add_to_sql_statement ( " where product_id = " )
    dynamic_sql . add_where_field  ( "MLP_HEADER" ,
                     "[IDENTITY]"   ,
                     product      )

    dynamic_sql . add_to_sql_statement ( " and product_version = " )
    dynamic_sql . add_where_field  ( "MLP_HEADER"      ,
                     "PRODUCT_VERSION" ,
                     product_version   )

    dynamic_sql . add_to_sql_statement ( " and analysis_id = " )
    dynamic_sql . add_where_field  ( "VERSIONED_ANALYSIS" ,
                     "[IDENTITY]"           ,
                     analysis_id          )

    dynamic_sql . add_to_sql_statement ( " and component_name = " )
    dynamic_sql . add_where_field  ( "VERSIONED_COMPONENT" ,
                     "NAME"                ,
                     component             )

    dynamic_sql . add_select_field  ( "MLP_LEVEL"  ,
                          "LEVEL_ID"   )
    dynamic_sql . add_select_field  ( "MLP_VALUES" ,
                          "MIN_LIMIT"  )
    dynamic_sql . add_select_field  ( "MLP_VALUES" ,
                          "MAX_LIMIT"  )

    dynamic_sql . execute ( )

    orgn  = dynamic_sql . select ( 1 )
    count = 0

    WHILE orgn <> EMPTY DO

        count = count + 1

        control_lines [ count, 1 ] = dynamic_sql . select ( 1 )
        control_lines [ count, 2 ] = dynamic_sql . select ( 2 )
        control_lines [ count, 3 ] = dynamic_sql . select ( 3 )

        IF NUMTEXT ( control_lines [ count, 2 ]) THEN
            control_lines [ count, 2 ] = NUMERIC (control_lines [ count, 2 ])
        ELSE
            control_lines [ count, 2 ] = 0
        ENDIF

        IF NUMTEXT ( control_lines [ count, 3 ]) THEN
            control_lines [ count, 3 ] = NUMERIC (control_lines [ count, 3 ])
        ELSE
            control_lines [ count, 3 ] = 0
        ENDIF

        dynamic_sql . next ()

        orgn = dynamic_sql . select ( 1 )

    ENDWHILE

    POP_FILE_DESCRIPTOR ( mlp_view_push )

ENDROUTINE

