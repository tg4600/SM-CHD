{******************************************************************************
*
* Module Name   : $NOTE_LIB
*
* Purpose       : SMP library containing routines used by the note utility
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification : 
*
* Portability   : Not Checked
*
* Re-entrant    : 
*
*******************************************************************************}

{-----------------------------------------------------------------------------}
{ Routine Listing     :                                                       }
{                                                                             }
{         NAME                                   PURPOSE                      }
{                                                                             }
{      working                displays a window with working displayed and    }
{                             blinking.                                       }
{                             var required  : column , line   If 0,0 is passed}
{                             then window is pasted in the middle of the      }
{                             screen                                          }
{                                                                             }
{      unpaste_working        unpastes the working window                     }
{                             vars required : none to pass                    }
{                                                                             }
{-----------------------------------------------------------------------------}

JOIN LIBRARY $BROWSE
JOIN LIBRARY $NOTE_CNF
JOIN LIBRARY $LIB_UTILS

{------------------------------------------------------------------------------}
{ GLOBAL ROUTINE working                                       GLT 23/10/90    }
{------------------------------------------------------------------------------}

GLOBAL ROUTINE working (VALUE mess,VALUE col,VALUE lin)

ENABLE WINDOWS
nos = 0

mess_len = LENGTH(mess)

CREATE TEXT WINDOW working_window
HEIGHT 1 WIDTH (mess_len+4)
BORDER
HELP CONTEXT = "$NOTE_LIB_WORKING"

	DISPLAY " " ON LINE 1 FROM 1 TO 1 BLINKING INVERSE
        IN WINDOW working_window
	DISPLAY " " ON LINE 1 FROM 2 TO 2 BLINKING
        IN WINDOW working_window
        DISPLAY mess ON LINE 1 FROM 3 TO (mess_len+3) BOLD INVERSE
        IN WINDOW working_window
	DISPLAY " " ON LINE 1 FROM (mess_len+3) TO (mess_len+3)
        BLINKING IN WINDOW working_window
	DISPLAY " " ON LINE 1 FROM (mess_len+4) TO (mess_len+4)
        BLINKING INVERSE IN WINDOW working_window

IF (col = 0) AND (lin = 0) THEN
   mess_len = mess_len+6
   col = (80-mess_len)/2
   lin = 12
ENDIF

PASTE TEXT WINDOW working_window AT col,lin

ENDROUTINE

{------------------------------------------------------------------------------}
{ GLOBAL ROUTINE unpaste_working                               GLT 23/10/90    }
{------------------------------------------------------------------------------}

GLOBAL ROUTINE unpaste_working

UNPASTE TEXT WINDOW working_window

ENDROUTINE

{------------------------------------------------------------------------------}
{ GLOBAL ROUTINE print_label                                   DJL  27/4/92    }
{------------------------------------------------------------------------------}

GLOBAL ROUTINE print_label(VALUE curr_book)

    SET NAME "DEFER/"
{#DJL}
   {SET NAME "PRINTER/PRINTER"}

{#DJL}
{
    curr_book = SELECT NOTEBOOK_MANAGEMENT.BOOK_REF
                WHERE BOOK_REF = curr_book
                ORDER ON BOOK_REF
    IF curr_book <> EMPTY THEN

        operid = SELECT NOTEBOOK_MANAGEMENT.OPERATOR_ID

        IF operid = EMPTY THEN
            operid = " "
        ENDIF

        locat  = SELECT NOTEBOOK_MANAGEMENT.LOCATION

        IF locat = EMPTY THEN
            locat = " "
        ENDIF

     tab_1=GET_USER_MESSAGE("NOTE_LIB_TAB_1" ,1)           
     tab_2=GET_USER_MESSAGE("NOTE_LIB_TAB_2" ,1)           
     tab_3=GET_USER_MESSAGE("NOTE_LIB_TAB_3" ,1)              

LITERAL

                         ______________________________________
                         |                                    |
                         |$tab_1___________$curr_book____     |
                         |                                    |
                         |                                    |
                         |                                    |
                         |$tab_2___________$operid____        |
                         |$tab_3___________$locat_____        |
                         |                                    |
                         |                                    |
                         ______________________________________

$ENDLITERAL

    ENDIF
}
    FLUSH_LITERAL

ENDROUTINE

{------------------------------------------------------------------------------}
{ GLOBAL ROUTINE looseleaf_print                               DJL  27/4/92    }
{------------------------------------------------------------------------------}

GLOBAL ROUTINE looseleaf_print
(VALUE looseleaf_book, VALUE no_of_pages,VALUE end_page)

{SET NAME "PRINTER/PRINTER"         }
SET NAME "DEFER/"
SET FORMAT "99999"

IF end_page <> " "
  count = (end_page - no_of_pages) + 1
  stop  = end_page
ELSE
  count = 1
  stop = no_of_pages
ENDIF

WHILE count <= stop


     tab_4=GET_USER_MESSAGE("NOTE_LIB_TAB_4" ,1)   
        
LITERAL
$looseleaf_book                                            $tab_4_________$count
$ENDLITERAL

NEW PAGE

count = count + 1

ENDWHILE

FLUSH_LITERAL

ENDROUTINE

{============================================================================}
{****************************************************************************}
GLOBAL ROUTINE reformat (VALUE tag)

    DECLARE new_tag, pos, inc_no, tail_len

    pos = INDEX(tag, "/")
    IF pos > 1 THEN
        tag_len = LENGTH(tag)
        tail_len = (LENGTH(tag) - pos) + 1
        new_tag = STRIP(LEFTSTRING (tag, (pos - 1)))
        inc_no  = STRIP(RIGHTSTRING(tag, tail_len))
        new_tag = PAD ((PAD(new_tag, " ", 10) : inc_no), " ", 15)

        RETURN(new_tag)
    ELSE
        RETURN(tag)
    ENDIF

ENDROUTINE  { reformat }
{============================================================================}
{**************************************************************************}

ROUTINE first_find

    valid_word  = SELECT notekey.key_word
                   WHERE key_word > " "
                   ORDER ON key_word

    browse_entry(valid_word, " ")

ENDROUTINE  { first_find }

{**************************************************************************}

ROUTINE second_find

    dup1 = SELECT notekey.key_word

    REPEAT
        NEXT notekey
        dup2 = SELECT notekey.key_word
    UNTIL (dup1 <> dup2) OR (dup2 = EMPTY)

    browse_entry(dup2, " ")

ENDROUTINE  { second_find }

{**************************************************************************}
GLOBAL ROUTINE print_the_note (the_note, the_file)

DECLARE subject, item, author, the_date, heading

todays_date = SUBSTRING (TODAY, 1, 11)

print_id = GLOBAL ( "TEXT_ID" )

subject  = SELECT notes.subject
           WHERE notekey = the_note
item     = SELECT notes.subject_item
author   = SELECT notes.note_author
the_date = SELECT notes.date_entered
heading  = SELECT notes.header_text

SET NAME "DEFER/"

      tab_5=GET_USER_MESSAGE("NOTE_LIB_TAB_5" ,1)       
      tab_6=GET_USER_MESSAGE("NOTE_LIB_TAB_6" ,1)           
      tab_7=GET_USER_MESSAGE("NOTE_LIB_TAB_7" ,1)            
      tab_8=GET_USER_MESSAGE("NOTE_LIB_TAB_8" ,1)            
      tab_9=GET_USER_MESSAGE("NOTE_LIB_TAB_9" ,1)            
      tab_10=GET_USER_MESSAGE("NOTE_LIB_TAB_10" ,1)              

LITERAL
 
$tab_5______________________________________________________________________

    $tab_6________________$subject______________________________
    $tab_7________________$item_________________________________
    $tab_8________________$heading_________________________________________________

    $tab_9________________$author_______________________________
    $tab_10_______________$the_date___________

  ------------------------------------------------------------------------
$ENDLITERAL

INCLUDE the_file
FLUSH_LITERAL


ENDROUTINE  {  print_the_note  }

{**************************************************************************}
GLOBAL ROUTINE special_prompt (VALUE the_subject, the_tables)

    DECLARE count, the_value

    count = 1
    the_value = 0

    WHILE count < no_of_tables DO
        IF the_tables[count, 1] = the_subject THEN
            the_value = count
        ENDIF

        count = count + 1
    ENDWHILE

    RETURN (the_value)

ENDROUTINE
{**************************************************************************}
GLOBAL ROUTINE do_special_prompt (the_subject, the_num, VALUE x, VALUE y,
                                  the_window, the_tables)

    DECLARE the_table, the_field, thing

    thing = ""
    the_table = the_tables[the_num, 1]
    the_field = the_tables[the_num, 2]

    IF (the_table = "TEST") THEN
        thing = double_browse("TEST", "SAMPLE", "ANALYSIS")
    ELSEIF (the_table = "RESULT") THEN
       { ** There's no practical way of doing this ** }
       { thing = double_browse("RESULT", "ANALYSIS", "COMPONENT") }
        thing = ""
    ELSE
        PROMPT FOR thing ON LINE y FROM x IN WINDOW the_window
                BROWSE ON 'the_table'.'the_field'
    ENDIF

    RETURN(thing)

ENDROUTINE
{**************************************************************************}
ROUTINE double_browse(VALUE the_table, VALUE table_one, VALUE table_two)

    DECLARE key_1, key_2, in1, in2, count, do_exit, the_item, item_key, what_key

    CREATE TEXT WINDOW special_browse
        HEIGHT 2
        WIDTH 55
        BORDER
        HELP CONTEXT = "$NOTE_LIB_BROWSE"

    in1 = ""
    in2 = ""
    count = 1
    do_exit = FALSE

    key_1    = special_prompt(table_one, the_tables)
    key_2    = special_prompt(table_two, the_tables)
    item_key = special_prompt(the_table, the_tables)

    key_1       = the_tables[key_1,   2]
    key_2       = the_tables[key_2,   2]
    item_key    = the_tables[item_key,2]

    DISPLAY table_one : " : " FROM 2 ON LINE 1 IN WINDOW special_browse
    DISPLAY table_two : " : " FROM 2 ON LINE 2 IN WINDOW special_browse

    PASTE TEXT WINDOW special_browse AT (x - 10), (y + 10)

    REPEAT
        IF count = 1 THEN
            PROMPT FOR in1 USING table_one : " : " FROM 2 ON LINE 1 BOLD
                    IN WINDOW special_browse
                    BROWSE ON sample
            in1 = STRING(in1)
            DISPLAY table_one : " : " : in1 FROM 2 ON LINE 1
                    IN WINDOW special_browse
            count = 2
        ELSE
            PROMPT FOR in2 USING table_two : " : " FROM 2 ON LINE 2 BOLD
                    IN WINDOW special_browse
                    BROWSE ON sampletests.'in1'
            in2 = STRING(in2)
{
            DISPLAY table_two : " : " : in2 FROM 2 ON LINE 2
                    IN WINDOW special_browse
}
            count = 3
        ENDIF

        what_key = LASTKEY
        IF (what_key = "UP") THEN
            count = 1
        ELSEIF (what_key = "DOWN") THEN
            count = 2
        ELSEIF (what_key = "DO") THEN
            IF (in1 <> "") AND (in2 <> "") THEN
                do_exit = TRUE
            ENDIF
        ELSEIF (what_key = "EXIT") AND (count = 3) THEN
            in2 = ""
            what_key = "UP" 
            count = 1
        ENDIF
    UNTIL (what_key = "EXIT") OR do_exit

    UNPASTE TEXT WINDOW special_browse

    IF do_exit THEN
        the_tables[1, 3] = table_one : " : " : in1
        the_tables[2, 3] = table_two : " : " : in2
        IF the_table = "TEST" THEN
            the_item = SELECT test.test_number
                       WHERE (sample_id = in1)
                       AND (analysis_id = in2)
            IF the_item = EMPTY THEN
                the_item = "SAMPL & ANAL"
            ELSE
                the_item = STRING(the_item)
            ENDIF
            RETURN(the_item)
        ELSE  {  "RESULT" table  }
            RETURN("DYLAN")
        ENDIF
    ENDIF


    RETURN("")

ENDROUTINE  {  double_browse  }
{**************************************************************************}
