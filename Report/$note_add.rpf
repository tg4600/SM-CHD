{******************************************************************************
*
* Module Name   : $NOTE_ADD
*
* Purpose       : SMP report to perform note additions
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}


mainroutine(dummy)

{======================================================================}

ROUTINE mainroutine(OPTION)

    SET NAME "DISPLAY/"
    ENABLE WINDOWS
    SET NOTPROTECTED

    JOIN LIBRARY $LIB_UTILS
    JOIN LIBRARY $NOTE_LIB
    JOIN LIBRARY $NOTE_CNF
    JOIN LIBRARY $BROWSE

    DECLARE count
    DECLARE key

    create_windows()

    initialise()
    REPEAT

       count = 1
       REPEAT
	  IF count = 1 THEN
 	     PROMPT FOR subject USING GET_USER_MESSAGE("NOTE_ADD_PROM_1" ,1)
        		ON LINE 3 FROM 5 TO 40 IN WINDOW main_box BOLD
        		BROWSE ON PHRASE_id.note_type

	     subject = TOUPPER (subject)
	     DISPLAY GET_USER_MESSAGE("NOTE_ADD_PROM_1" ,1):subject
                ON LINE 3 FROM 5 IN WINDOW main_box

 	  ELSEIF count = 2 THEN
             prompt_no = special_prompt(subject, the_tables)
             IF prompt_no > 0 THEN
                DISPLAY GET_USER_MESSAGE("NOTE_ADD_PROM_2",1) ON LINE 4 FROM 5
                    IN WINDOW main_box BOLD
                subitem = do_special_prompt(subject, prompt_no, 26, 4, main_box,
                                        the_tables)
                subitem = STRIP(STRING(subitem))
             ELSE
                PROMPT FOR subitem USING GET_USER_MESSAGE("NOTE_ADD_PROM_2", 1)
                    ON LINE 4 FROM 5 TO 41 IN WINDOW main_box BOLD
                    FORMAT TEXT10

                subitem = TOUPPER(subitem)
                IF LASTKEY = "FIND" THEN
                   BROWSE("first_find","next_find","$note_add",15,subitem)
                ENDIF
             ENDIF
             IF subitem = EMPTY THEN
                subitem = ""
             ENDIF
             DISPLAY GET_USER_MESSAGE("NOTE_ADD_PROM_2" ,1)   :subitem
                        ON LINE 4 FROM 5 TO 41 IN WINDOW main_box
             IF subitem <> "" THEN
                display_number()
             ENDIF
          ELSE
	     PROMPT FOR header_txt USING GET_USER_MESSAGE("NOTE_ADD_HEAD_1" ,1)
                   ON LINE 7 FROM 5 IN WINDOW main_box BOLD
                   FORMAT TEXT20
	     IF (STRIP (header_txt) = "") AND (LASTKEY <> "EXIT") THEN
	        flash_message(GET_USER_MESSAGE("NOTE_ADD_DISPLAY_1" ,1),TRUE)
             ENDIF
	  ENDIF

          key = LASTKEY
          IF INDEX("DOWN-RETURN",key) <> 0 THEN
             count = count + 1
             IF count > 3 THEN
                count = 3
             ENDIF
          ENDIF

          IF STRIP(subject) = "" THEN
             count = 1
          ENDIF

       UNTIL (key= "EXIT") OR ((key = "DO") AND (subitem <> "")
		AND (header_txt <> ""))

       IF key = "EXIT" THEN
           UNPASTE TEXT WINDOW main_box
           RETURN
       ENDIF

       IF file_writing () THEN
          FILE SEND vms_file, "EDIT/TPU "
          FILE OPEN vms_file, status
          IF status = EMPTY THEN
              FILE READ vms_file, text_line[1], status
              FILE READ vms_file, text_line[2], status
              FILE READ vms_file, text_line[3], status
              FILE READ vms_file, text_line[4], status

              IF text_line[1] = EMPTY THEN
                 text_line[1] = ""
              ENDIF
              IF text_line[2] = EMPTY THEN
                 text_line[2] = ""
              ENDIF
              IF text_line[3] = EMPTY THEN
                 text_line[3] = ""
              ENDIF
              IF text_line[4] = EMPTY THEN
                 text_line[4] = ""
              ENDIF
           ENDIF
           FILE CLOSE vms_file

           UNPASTE TEXT WINDOW small_note
           file_reading()
           key_words()
           IF action <> "EXIT" THEN
              issue_assigns()
              output_message(GET_USER_MESSAGE("NOTE_ADD_DISPLAY_2" ,1)   )
           ENDIF

           UNPASTE TEXT WINDOW small_keywords
           UNPASTE TEXT WINDOW extra_note

           initialise()

        ENDIF

        UNPASTE TEXT WINDOW small_note

    UNTIL (LASTKEY = "EXIT") AND (subject = "")

    UNPASTE TEXT WINDOW main_box

ENDROUTINE{mainroutine}

{======================================================================}
{***************************DISPLAY_NUMBER*****************************}
ROUTINE display_number

    DECLARE note_no

    note_no = SELECT notes.note_number
              WHERE (subject = subject)
              AND (subject_item = subitem)
              ORDER ON note_number

    note_num = 0
    WHILE note_no <> EMPTY DO
        IF note_no > note_num THEN
            note_num = note_no
        ENDIF

        NEXT notes
        note_no = SELECT notes.note_number
    ENDWHILE

    note_num = STRIP(STRING(note_num + 1))
    DISPLAY GET_USER_MESSAGE("NOTE_ADD_DISPLAY_3" ,1):note_num ON LINE 6 FROM 5
            IN WINDOW main_box

ENDROUTINE
{======================================================================}
{***************************INITIALISE*********************************}
ROUTINE initialise

    ARRAY the_tables ARRAYSIZE (100, 3)
    structure_assigns(the_tables)

    read_comp         = FALSE
    file_used         = FALSE
    key = " "

    display_top_line(GET_USER_MESSAGE("NOTE_ADD_DISPLAY_4" ,1), main_box, 42)
    DISPLAY " " ON LINE 1 FROM  1 TO  1 IN WINDOW main_box INVERSE BOLD
    DISPLAY " " ON LINE 1 FROM 42 TO 42 IN WINDOW main_box INVERSE BOLD
    display_bottom_line( GET_USER_MESSAGE("NOTE_ADD_DISPLAY_5" ,1)
                          , main_box,42,9,FALSE)

    PASTE TEXT WINDOW main_box AT 20,8

    subject     = ""
    subitem     = ""
    header_txt  = ""

    DISPLAY GET_USER_MESSAGE("NOTE_ADD_PROM_1" ,1)ON LINE 3 FROM 5
            IN WINDOW main_box

    DISPLAY GET_USER_MESSAGE("NOTE_ADD_PROM_2" ,1)ON LINE 4 FROM 5
            IN WINDOW main_box

    DISPLAY GET_USER_MESSAGE("NOTE_ADD_DISPLAY_3" ,1)ON LINE 6 FROM 5
            IN WINDOW main_box

    DISPLAY GET_USER_MESSAGE("NOTE_ADD_HEAD_1" ,1)   ON LINE 7 FROM 5
            IN WINDOW main_box

    CLEAR LINE 3 FROM 25 IN WINDOW main_box
    CLEAR LINE 4 FROM 25 IN WINDOW main_box
    CLEAR LINE 6 FROM 25 IN WINDOW main_box
    CLEAR LINE 7 FROM 25 IN WINDOW main_box

ENDROUTINE {initialise}

{=======================================================================}
{***************************CREATE_WINDOWS******************************}
ROUTINE create_windows

    CREATE TEXT WINDOW main_box
        HEIGHT 9
        WIDTH 42
        BORDER
        HELP CONTEXT = "$NOTE_ADD_MAIN"

    CREATE TEXT WINDOW small_keywords
        HEIGHT 7
        WIDTH 45
        BORDER
        HELP CONTEXT = "$NOTE_ADD_KEYWORDS"

    CREATE TEXT WINDOW extra_note
        HEIGHT 5
        WIDTH 50
        BORDER
        HELP CONTEXT = "$NOTE_ADD_EXTRA_NOTE"

    CREATE TEXT WINDOW small_note
        HEIGHT 6
        WIDTH 45
        BORDER
        HELP CONTEXT = "$NOTE_ADD_SMALL_NOTE"


ENDROUTINE  { create_windows }

{=========================================================================}
{**************************ISSUE ASSIGNS*****************************}

ROUTINE issue_assigns

    START READ TRANSACTION "Update NOTES"
    RESERVE ENTRY NOTES, notekey, success

    IF success <> EMPTY THEN
	flash_message(success,FALSE)
    ENDIF

    IF success = EMPTY THEN
        ASSIGN NOTES.SUBJECT = subject
        ASSIGN NOTES.SUBJECT_ITEM = subitem
        ASSIGN NOTES.HEADER_TEXT = header_txt
        ASSIGN NOTES.NOTE_NUMBER = note_num
        ASSIGN NOTES.FILE_NAME = vms_file
        ASSIGN notes.line1 = text_line[1]
        ASSIGN notes.line2 = text_line[2]
        ASSIGN notes.line3 = text_line[3]
        ASSIGN notes.line4 = text_line[4]
        ASSIGN notes.file_used = file_used

        ASSIGN notes.date_entered = NOW
        ASSIGN notes.note_author = OPERATOR

        START WRITE TRANSACTION "Updating notes table"
        UPDATE notes
        { Add subject to phrase table }
        RESERVE ENTRY PHRASE, "NOTE_TYPE ": PAD (subject," ",10), success
        IF success = EMPTY THEN
	   ASSIGN phrase.phrase_text = PAD (subject, " ", 10)
           UPDATE phrase
	ENDIF
        COMMIT
    ELSE
        ROLLBACK
    ENDIF

    wordnum = 1

    WHILE (the_key[wordnum] <> EMPTY) AND (the_key[wordnum] <> "")
        newquay = PAD(the_key[wordnum]," ",20):notekey

        START READ TRANSACTION "Read in NOTEKEY record"

        RESERVE ENTRY NOTEKEY,newquay,success

        IF success <> EMPTY THEN
	    flash_message(success,FALSE)
            RETURN
        ENDIF

        IF success = EMPTY THEN
            ASSIGN NOTEKEY.key_word = the_key[wordnum]
            ASSIGN NOTEKEY.note_key = notekey
            wordnum = wordnum + 1

           START WRITE TRANSACTION "Update NOTEKEY record"
             UPDATE notekey
            COMMIT
        ENDIF
    ENDWHILE


ENDROUTINE{issue_assigns}

{=======================================================================}
{*******************************key words*******************************}

ROUTINE key_words

    DECLARE count

    count = 0

    IF  (INDEX("DO-RETURN",LASTKEY) <> 0) OR (read_comp = TRUE)  THEN

        read_comp = FALSE

        ARRAY the_key ARRAYSIZE(1000)

        CLEAR SCREEN IN WINDOW small_keywords
        display_top_line(GET_USER_MESSAGE("NOTE_ADD_DISPLAY_6" ,1), small_keywords, 45)
        display_bottom_line(GET_USER_MESSAGE("NOTE_ADD_DISPLAY_7" ,1), small_keywords,45,7,FALSE)
        PASTE TEXT WINDOW small_keywords AT 17,10

        REPEAT
           word = " "
           PROMPT FOR word USING GET_USER_MESSAGE("NOTE_ADD_PROM_3" ,1)
                        ON LINE 3 FROM 5 IN WINDOW small_keywords BOLD
                        FORMAT TEXT20

           action = LASTKEY

           IF (LASTKEY = "FIND") THEN
              IF browse("FIRST_FIND", "SECOND_FIND", "$NOTE_LIB", 20, word)
                 action = "RETURN"
              ENDIF
           ELSEIF LASTKEY = "REMOVE" THEN
              count = 0
              CLEAR LINE 5 IN WINDOW small_keywords
              CLEAR LINE 6 IN WINDOW small_keywords
           ENDIF

           IF (STRIP(word) <> "")  THEN
              word = TOUPPER(word)
              IF (action = "RETURN") OR (action = "DO") THEN
                 count = add_key(word)
              ENDIF
           ENDIF

        UNTIL INDEX("DO-EXIT",action) <> 0

        IF action ="EXIT" THEN
            FILE DELETE vms_file, dummy_stat
            UNPASTE TEXT WINDOW small_keywords
            UNPASTE TEXT WINDOW extra_note
        ENDIF
    ENDIF

ENDROUTINE {key_words}

{=========================================================================}
{***************************FILE READING**********************************}
ROUTINE file_reading

    DECLARE status, lin

    lin = 1
    IF file_used THEN
        { Long note }
        FILE OPEN vms_file, status

        IF status <> EMPTY THEN
	   flash_message(status,FALSE)
           FILE CLOSE vms_file, status
           RETURN
        ENDIF

        WHILE (lin < 5) AND (status = EMPTY) DO
           FILE READ vms_file, text_line[lin], status
           lin = lin + 1
        ENDWHILE

        FILE CLOSE vms_file, status
    ENDIF

    read_comp = TRUE
    display_top_line(GET_USER_MESSAGE("NOTE_ADD_DISPLAY_8" ,1), extra_note, 50)

    DISPLAY text_line[1] ON LINE 2 FROM 1 TO 78
        IN WINDOW extra_note
    DISPLAY text_line[2] ON LINE 3 FROM 1 TO 78
        IN WINDOW extra_note
    DISPLAY text_line[3] ON LINE 4 FROM 1 TO 78
        IN WINDOW extra_note
    DISPLAY text_line[4] ON LINE 5 FROM 1 TO 78
        IN WINDOW extra_note
    PASTE TEXT WINDOW extra_note AT 15,19

ENDROUTINE{file_reading}

{=========================================================================}
{***************************FILE WRITING**********************************}

ROUTINE file_writing

notekey = PAD (subject," ",10):PAD(subitem," ",10)
notekey = TOUPPER (notekey):"/":note_num

{ Make filename lowercase for Unix }

vms_file = "smp$textfiles:" :
		TOLOWER( STRIP(subject) : STRIP(subitem) : STRIP(note_num) ) :
		".not"

display_top_line(GET_USER_MESSAGE("NOTE_ADD_DISPLAY_9" ,1), small_note, 45)
display_bottom_line(GET_USER_MESSAGE("NOTE_ADD_DISPLAY_10" ,1), small_note,45,6,FALSE)
DISPLAY " " ON LINE 1 FROM  1 TO  1 IN WINDOW small_note BOLD INVERSE
DISPLAY " " ON LINE 1 FROM 45 TO 45 IN WINDOW small_note BOLD INVERSE

DISPLAY "1 : " ON LINE 2 FROM 1 TO 78 IN WINDOW small_note
DISPLAY "2 : " ON LINE 3 FROM 1 TO 78 IN WINDOW small_note
DISPLAY "3 : " ON LINE 4 FROM 1 TO 78 IN WINDOW small_note
DISPLAY "4 : " ON LINE 5 FROM 1 TO 78 IN WINDOW small_note
PASTE TEXT WINDOW small_note AT 30,10

pointer = 1

ARRAY text_line
text_line[1] = " "
text_line[2] = " "
text_line[3] = " "
text_line[4] = " "

IF (the_tables[1, 3] <> "") AND (the_tables[1, 3] <> EMPTY) THEN
    text_line[1] = the_tables[1, 3]
    text_line[2] = the_tables[2, 3]
    DISPLAY text_line[2] ON LINE 3 FROM 5 IN WINDOW small_note
ENDIF

REPEAT
   PROMPT FOR text_line[pointer] ON LINE (pointer + 1) FROM 5 TO 78
			         IN WINDOW small_note
   new_key = LASTKEY

   IF INDEX("DOWN-RETURN",new_key) <> 0 THEN
      pointer = pointer +1
      IF pointer > 4
         pointer = 4
      ENDIF
   ELSEIF  new_key = "UP"
      pointer =  pointer-1
      IF pointer < 1 THEN
         pointer = 1
      ENDIF
   ELSEIF new_key = "NEXT SCREEN" THEN
      { Writing a long note }
      FILE CREATE vms_file,success
      FILE WRITE vms_file, text_line[1],success
      FILE WRITE vms_file, text_line[2],success
      FILE WRITE vms_file, text_line[3],success
      FILE WRITE vms_file, text_line[4],success
      FILE CLOSE vms_file, success

      file_used = TRUE
      RETURN(TRUE)
   ENDIF
UNTIL (INDEX("DO-EXIT",new_key) <> 0)

IF new_key = "EXIT" THEN
    RETURN(FALSE)
ENDIF

{ Writing a short note }
FILE CREATE vms_file,success
FILE WRITE vms_file, text_line[1],success
FILE WRITE vms_file, text_line[2],success
FILE WRITE vms_file, text_line[3],success
FILE WRITE vms_file, text_line[4],success
FILE CLOSE vms_file,success

file_used = FALSE

RETURN(FALSE)

ENDROUTINE{file_writing}

{======================================================================}
{*****************************FIRST FIND*******************************}
ROUTINE first_find

   browse_entry(SELECT notes.subject_item WHERE subject = subject, " ")

ENDROUTINE{first_find}

{=======================================================================}
{******************************NEXT FIND********************************}
ROUTINE next_find

DECLARE dup1

  dup1 = SELECT notes.subject_item

  REPEAT
     NEXT notes
  UNTIL (dup1 <> SELECT notes.subject_item)

  NEXT notes
  browse_entry (SELECT notes.subject_item, " ")

ENDROUTINE {next_find}

{========================================================================}
{*****************************FIRST_FIND_ONE*****************************}
ROUTINE first_find_one

   subject = SELECT PHRASE.PHRASE_ID WHERE PHRASE_TYPE = "SUBJECTS"
   browse_entry(SELECT PHRASE.PHRASE_ID,SELECT PHRASE.PHRASE_TEXT)

ENDROUTINE{first_find_one}

{=======================================================================}
{**************************NEXT_FIND_ONE********************************}
ROUTINE next_find_one

   NEXT PHRASE
   browse_entry(SELECT PHRASE.PHRASE_ID,SELECT PHRASE.PHRASE_TEXT)

ENDROUTINE{next_find_one}

{============================================================================}
{****************************************************************************}

ROUTINE add_key(new_key)

    IF count < 5 THEN
        IF NOT (key_present(new_key)) THEN
            count = count + 1
            the_key[count] = new_key
            key_display(count)
        ENDIF
    ELSE
        flash_message(GET_USER_MESSAGE("NOTE_ADD_DISPLAY_11" ,1)   , FALSE)
    ENDIF

    RETURN(count)

ENDROUTINE  { add_key }

{============================================================================}
{****************************************************************************}

ROUTINE key_present (new_key)

    DECLARE check, check_count
    check = FALSE
    check_count = 1

    WHILE check_count <= count DO
        IF the_key[check_count] = new_key THEN
            check = TRUE
        ENDIF
        check_count = check_count + 1
    ENDWHILE

    RETURN(check)

ENDROUTINE  { key_present  }

{============================================================================}
{****************************************************************************}

ROUTINE key_display (count_key)

    counter = 1
    key_x   = 5
    key_y   = 5

    WHILE counter <= count_key DO
        IF key_x + LENGTH(the_key[counter]) + 2 <= 42 THEN
            DISPLAY the_key[counter] ON LINE key_y FROM key_x
                    IN WINDOW small_keywords
            key_x = key_x + LENGTH(the_key[counter]) + 2
        ELSE
            key_x = 5
            key_y = key_y + 1
            DISPLAY the_key[counter] ON LINE key_y FROM key_x
                    IN WINDOW small_keywords
            key_x = key_x + LENGTH(the_key[counter]) + 2
        ENDIF

        counter = counter + 1
    ENDWHILE

ENDROUTINE  { key_display }

{============================================================================}
{****************************************************************************}

{=============================PROGRAM END===================================}
