{******************************************************************************
*
* Module Name   : sqcwin_hard
*
* Purpose       : Routines for formatting and outputting sqc hadcopy reports
*                 
*
*******************************************************************************}

SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_UTILS
JOIN LIBRARY $LIB_UTILS

JOIN LIBRARY $SQCWIN_GLBL
JOIN LIBRARY $SQCWIN_LIB
JOIN LIBRARY $SQCWIN_CLASS
JOIN LIBRARY $SQCWIN_CALC

JOIN STANDARD_LIBRARY std_class
JOIN STANDARD_LIBRARY std_array

ENABLE WINDOWS
SET NOTPROTECTED
SET NAME "DEFER/"


DECLARE sqc_chart, t_line_a, t_line_b

define_sqc_chart ()
CREATE OBJECT "SQC_CHART", sqc_chart
sqc_chart . edit_mode     = "MODIFY"
sqc_chart . chart_id      = "TREND_1"
get_sqc_chart ( sqc_chart )

sqc_hard ( sqc_chart )

{******************************************************************************}

GLOBAL ROUTINE sqc_hard ( sqc_chart )

{ 
* Main routine
* 
* 
*
* Parameters   : sqc_chart
* Return Value : n/a
*
*******************************************************************************}

   header_info   ( sqc_chart )
   subgroup_info ( sqc_chart )

   FLUSH_LITERAL

ENDROUTINE

{******************************************************************************}

ROUTINE header_info ( sqc_chart )

{ 
* Routine to print header information to hardcopy
* 
* 
*
* Parameters   : sqc_chart
* Return Value : n/a
*
*******************************************************************************}

DECLARE rec_id, chart_id, spare_line_text, chart_type, spec_type,
    trend_chart_a, trend_chart_b, start_date, end_date, analysis_id,
    component_name, units, max_point_sum, min_point_sum, group_id_type,
    sub_size

DECLARE limits_calc_type, shewhart_type, mlp_limit, ncts, lcta, gita

DECLARE col_width, num_criteria

DECLARE st_title, st_chart, st_date, vr_date, st_shewhart, vr_shewhart,
    st_lim, vr_lim, vr_ltype,  ltype, st_min_pt, st_max_pt,
    st_t_mean, target_sigm,
    min_control, max_control, st_up_mlp, st_lr_mlp, st_sta_date,
    st_end_date, st_analysis, st_component, target_mean, st_unit,
    st_groups, vr_groups, st_subg_size


    col_width = 22

    rec_id = sqc_chart . sqc_header . get_by_number (1)

    chart_id        = SELECT sqcwin_header . identifier           IN OBJECT rec_id
    spare_line_text = SELECT sqcwin_header . spare_line_text      IN OBJECT rec_id
    chart_type      = SELECT sqcwin_header . chart_type           IN OBJECT rec_id
    spec_type       = SELECT sqcwin_header . spec_type            IN OBJECT rec_id
    trend_chart_a   = SELECT sqcwin_header . trend_chart_a        IN OBJECT rec_id
    trend_chart_b   = SELECT sqcwin_header . trend_chart_b        IN OBJECT rec_id
    start_date      = SELECT sqcwin_header . start_date           IN OBJECT rec_id
    end_date        = SELECT sqcwin_header . end_date             IN OBJECT rec_id
    analysis_id     = SELECT sqcwin_header . analysis_id          IN OBJECT rec_id
    component_name  = SELECT sqcwin_header . component_name       IN OBJECT rec_id
    units           = SELECT sqcwin_header . units                IN OBJECT rec_id
    max_point_sum   = SELECT sqcwin_header . max_point_sum        IN OBJECT rec_id
    min_point_sum   = SELECT sqcwin_header . min_point_sum        IN OBJECT rec_id
    group_id_type   = SELECT sqcwin_header . group_id_type        IN OBJECT rec_id
    sub_size        = SELECT sqcwin_header . subgroup_size_wanted IN OBJECT rec_id

    num_criteria = SELECT sqcwin_criteria . order_number
         WHERE chart_id = chart_id
         ORDER ON order_number DESCENDING

    IF ( num_criteria = EMPTY ) THEN

        num_criteria = 1

    ENDIF

    ARRAY limits_calc_type ARRAYSIZE(2)
    limits_calc_type[1] = SELECT sqcwin_header . limits_calc_type_a IN OBJECT rec_id
    limits_calc_type[2] = SELECT sqcwin_header . limits_calc_type_b IN OBJECT rec_id

    IF limits_calc_type[1]<=2 THEN

        target_mean = SELECT sqcwin_header.target_mean  IN OBJECT rec_id
        target_sigm = SELECT sqcwin_header.target_sigma IN OBJECT rec_id

    ENDIF

    ARRAY shewhart_type ARRAYSIZE(4)
    shewhart_type[1] = GET_USER_MESSAGE("SQCWIN_MAIN_NCT_11" , 1)
    shewhart_type[2] = GET_USER_MESSAGE("SQCWIN_MAIN_NCT_12" , 1)
    shewhart_type[3] = GET_USER_MESSAGE("SQCWIN_MAIN_NCT_13" , 1)
    shewhart_type[4] = GET_USER_MESSAGE("SQCWIN_MAIN_NCT_14" , 1)

    ARRAY mlp_limit ARRAYSIZE (3)
    mlp_limit[1] = GET_USER_MESSAGE("SQCWIN_MAIN_LCT_9" , 1)
    mlp_limit[2] = GET_USER_MESSAGE("SQCWIN_MAIN_LCT_7" , 1)
    mlp_limit[3] = GET_USER_MESSAGE("SQCWIN_MAIN_LCT_8" , 1)

    ARRAY ncts ARRAYSIZE (4,2)
    ncts[1,1] = "-----"
    ncts[1,2] = "-----"
    ncts[2,1] = GET_USER_MESSAGE("SQCWIN_MAIN_NCT_6" , 1)
    ncts[2,2] = GET_USER_MESSAGE("SQCWIN_MAIN_NCT_7" , 1)
    ncts[3,1] = GET_USER_MESSAGE("SQCWIN_MAIN_NCT_6" , 1)
    ncts[3,2] = GET_USER_MESSAGE("SQCWIN_MAIN_NCT_8" , 1)
    ncts[4,1] = GET_USER_MESSAGE("SQCWIN_MAIN_NCT_9" , 1)
    ncts[4,2] = GET_USER_MESSAGE("SQCWIN_MAIN_NCT_10", 1)

    ARRAY lcta ARRAYSIZE (4)
    lcta[1] = GET_USER_MESSAGE("SQCWIN_MAIN_LCT_5", 1)
    lcta[2] = GET_USER_MESSAGE("SQCWIN_MAIN_LCT_6", 1)
    lcta[3] = GET_USER_MESSAGE("SQCWIN_MAIN_LCT_7", 1)
    lcta[4] = GET_USER_MESSAGE("SQCWIN_MAIN_LCT_8", 1)

    ARRAY gita ARRAYSIZE (3)
    gita[1]=GET_USER_MESSAGE("SQCWIN_MAIN_LCT_11" , 1)
    gita[2]=GET_USER_MESSAGE("SQCWIN_MAIN_LCT_12" , 1)
    gita[3]=GET_USER_MESSAGE("SQCWIN_MAIN_LCT_13" , 1)


    st_title = centre_text( USER_TITLE, PAGE_WIDTH )
    st_chart = GET_USER_MESSAGE("SQCWIN_HARD_T_1" , 1)
    st_date  = GET_USER_MESSAGE("SQCWIN_HARD_T_2" , 1)
    vr_date  = NOW

    output_hdr( st_title )
    output_hdr( " " )
    output_hdr( PAD( st_chart, " ", col_width) : chart_id )
    output_hdr( PAD( st_date , " ", col_width) : vr_date )

    IF spare_line_text <> "" THEN

        output_hdr( spare_line_text )

    ENDIF

    IF chart_type > 0 THEN

        st_shewhart = GET_USER_MESSAGE("SQCWIN_HARD_T_3" ,1)
        vr_shewhart = shewhart_type[chart_type]

        output_hdr( PAD(st_shewhart, " ", col_width) : vr_shewhart )

        IF spec_type > 1 THEN

            st_lim = GET_USER_MESSAGE("SQCWIN_HARD_T_4" ,1)
            vr_lim = mlp_limit[spec_type]

            output_hdr(PAD(st_lim, " ", col_width): vr_lim )

        ENDIF

        vr_ltype = lcta[ limits_calc_type[1] ]
        st_lim   = GET_USER_MESSAGE("SQCWIN_HARD_T_5" ,1)
        ltype    = ncts[chart_type, 1]

        output_hdr( PAD(st_lim, " ", 12             ) :
                    PAD(ltype , " ", col_width - 14 ) : ": " :
                    vr_ltype                        )

        IF ( trend_chart_a <> "" ) THEN

            st_lim   = GET_USER_MESSAGE("SQCWIN_HARD_T_6" ,1)

            output_hdr( PAD(st_lim, " ", 12             ) :
                        PAD(ltype , " ", col_width - 14 ) : ": " :
                        trend_chart_a                   )

        ENDIF

        vr_ltype = lcta[ limits_calc_type[2] ]
        st_lim   = GET_USER_MESSAGE("SQCWIN_HARD_T_5" ,1)
        ltype    = ncts[chart_type, 2]

        output_hdr( PAD(st_lim, " ", 12             ) :
                    PAD(ltype , " ", col_width - 14 ) : ": " :
                    vr_ltype                        )


        IF ( trend_chart_b <> "" ) THEN

            st_lim   = GET_USER_MESSAGE("SQCWIN_HARD_T_6" ,1)

            output_hdr( PAD(st_lim, " ", 12             ) :
                        PAD(ltype , " ", col_width - 14 ) : ": " :
                        trend_chart_b                   )

        ENDIF

        IF ( limits_calc_type[1] = 2 ) THEN

          st_t_mean = GET_USER_MESSAGE("SQCWIN_HARD_T_7" , 1)
          output_hdr( PAD(st_t_mean, " ", col_width) : target_mean )
          output_hdr( PAD(st_t_mean, " ", col_width) : target_sigm )

        ENDIF

        IF ( limits_calc_type[1] = 4 ) OR
           ( limits_calc_type[2] = 4 ) THEN

            min_control = ""
            max_control = ""
            st_up_mlp = GET_USER_MESSAGE("SQCWIN_HARD_T_9" , 1)
            st_lr_mlp = GET_USER_MESSAGE("SQCWIN_HARD_T_10", 1)
            output_hdr( PAD(st_up_mlp, " ", col_width) : max_control )
            output_hdr( PAD(st_lr_mlp, " ", col_width) : min_control )

        ENDIF

        IF ( num_criteria > 1 ) THEN

            IF (start_date <= end_date) THEN

                st_sta_date = GET_USER_MESSAGE("SQCWIN_HARD_T_11" ,1)
                st_end_date = GET_USER_MESSAGE("SQCWIN_HARD_T_12" ,1)
                output_hdr( PAD(st_sta_date, " ", col_width) : start_date )
                output_hdr( PAD(st_end_date, " ", col_width) : end_date   )

            ENDIF

            IF ( analysis_id <> "" ) THEN

                st_analysis = GET_USER_MESSAGE("SQCWIN_HARD_T_13" ,1)
                output_hdr( PAD( st_analysis, " ", col_width) : analysis_id )

            ENDIF

            IF ( component_name <> "" ) THEN

                st_component = GET_USER_MESSAGE("SQCWIN_HARD_T_14" ,1)
                output_hdr( PAD( st_component, " ", col_width) : component_name )

            ENDIF

            IF ( units <> "" ) THEN

                st_unit = GET_USER_MESSAGE("SQCWIN_HARD_T_15" ,1)
                output_hdr( PAD( st_unit, " ", col_width) : units )

            ENDIF

        ENDIF                                       

        IF ( max_point_sum > 0 ) THEN

            st_min_pt = GET_USER_MESSAGE("SQCWIN_HARD_T_16" , 1)
            st_max_pt = GET_USER_MESSAGE("SQCWIN_HARD_T_17" , 1)
            output_hdr( PAD( st_min_pt, " ", col_width) : min_point_sum )
            output_hdr( PAD( st_max_pt, " ", col_width) : max_point_sum )

        ENDIF

        IF ( chart_type < 4 ) THEN

            st_groups = GET_USER_MESSAGE("SQCWIN_HARD_T_18" ,1)
            vr_groups = gita[ group_id_type ]
            output_hdr( PAD( st_groups, " ", col_width) : vr_groups )


            IF ( group_id_type = 1 ) THEN

               st_subg_size = GET_USER_MESSAGE("SQCWIN_HARD_T_19" ,1)
               output_hdr( PAD( st_subg_size, " ", col_width) :
                           STRIP(sub_size) )

            ENDIF

        ENDIF

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE subgroup_info ( sqc_chart )

{ 
* Routine to print subgroup information to hardcopy
* 
* 
*
* Parameters   : sqc_chart
* Return Value : n/a
*
*******************************************************************************}

DECLARE rec_id, chart_type

DECLARE subg_rec, s_no, s_date, sub_size, x_bar, range, sigma, 
        bad_point_a, bad_point_b

DECLARE rec_count, op_line

DECLARE plot_it, real_format

    ARRAY plot_it

    rec_id     = sqc_chart . sqc_header . get_by_number (1)
    chart_type = SELECT sqcwin_header . chart_type IN OBJECT rec_id
    sqc_chart . sqc_point . add_index("subgroup_number")

    ARRAY real_format ARRAYSIZE (3)

    real_format[1] = set_real_format ( sqc_chart, "x_bar" )
    real_format[2] = set_real_format ( sqc_chart, "range" )
    real_format[3] = set_real_format ( sqc_chart, "sigma" )

    subgroup_title_line ( chart_type, real_format )

    rec_count = 1
    subg_rec = sqc_chart . sqc_subgroup . get_by_number(rec_count)
    WHILE ( subg_rec <> EMPTY ) DO

        s_no        = SELECT sqcwin_subgroup . subgroup_number IN OBJECT subg_rec
        s_date      = SELECT sqcwin_subgroup . subgroup_date   IN OBJECT subg_rec
        sub_size    = SELECT sqcwin_subgroup . subgroup_size   IN OBJECT subg_rec
        SET FORMAT real_format[1]
        x_bar       = SELECT sqcwin_subgroup . x_bar           IN OBJECT subg_rec
        SET FORMAT real_format[2]
        range       = SELECT sqcwin_subgroup . range           IN OBJECT subg_rec
        SET FORMAT real_format[3]
        sigma       = SELECT sqcwin_subgroup . sigma           IN OBJECT subg_rec
        plot_it[1]  = SELECT sqcwin_subgroup . a_plot          IN OBJECT subg_rec
        plot_it[2]  = SELECT sqcwin_subgroup . b_plot          IN OBJECT subg_rec
        bad_point_a = SELECT sqcwin_subgroup . a_bad           IN OBJECT subg_rec
        bad_point_b = SELECT sqcwin_subgroup . b_bad           IN OBJECT subg_rec

        op_line = s_no 

        IF ( chart_type = 4 ) THEN

           op_line = op_line : " " : s_date 

        ELSE

           op_line = op_line : " " : LEFTSTRING(s_date, 11)

        ENDIF

        IF SHOW_SIZE_IN_HARDCOPY THEN

            op_line = op_line : " " : PAD(STRIP(sub_size), " ", 4)

        ENDIF

        IF plot_it[1] THEN

            op_line = op_line : "  " : xbar

            IF bad_point_a THEN

                op_line = op_line : " " : "bad"

            ELSE

                op_line = op_line : " " : "   "

            ENDIF

        ELSE

            op_line = op_line : "" : "                    "

        ENDIF

        IF plot_it[2] THEN

            IF ( chart_type = 3 ) THEN

                op_line = op_line : "  " : sigma

            ELSE

                op_line = op_line : "  " : range

            ENDIF

            IF bad_point_b THEN

                op_line = op_line : " " : "bad"

            ELSE

                op_line = op_line : " " : "   "

            ENDIF

        ELSE

            op_line = op_line : "" : "                    "

        ENDIF

        IF ( chart_type < 4 ) THEN

            IF ( chart_type = 2 ) THEN

                op_line = op_line : "  " : sigma

            ELSE

                op_line = op_line : "  " : range

            ENDIF

        ENDIF

        output_hdr( op_line )

        rec_count = rec_count + 1
        subg_rec = sqc_chart . sqc_subgroup . get_by_number(rec_count)

    ENDWHILE

    output_hdr ( " " )
    output_hdr ( GET_USER_MESSAGE ( "SQCWIN_HARD_DIS_10", 1 ) )

    get_window_info ( sqc_chart, "A " )
    get_window_info ( sqc_chart, "B " )


ENDROUTINE

{******************************************************************************}

ROUTINE get_window_info ( sqc_chart, VALUE window_type )

{ 
* Routine to get window informatoin
* 
* 
*
* Parameters   : sqc_chart, window_type
* Return Value : n/a
*
*******************************************************************************}

DECLARE win_id , win_count

   win_count = 1

   win_id = sqc_chart . sqc_window . get_by_number (win_count)

   WHILE ( win_id <> EMPTY ) DO

       win_count = win_count + 1
       win_id = sqc_chart . sqc_window . get_by_number (win_count)

   ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE subgroup_title_line ( chart_type, real_format )

{ 
* Routine to print title line for subgroup information
* 
* 
*
* Parameters   : chart_type, real_format
* Return Value : n/a
*
*******************************************************************************}

DECLARE x_bar_line, range_line, sigma_line

    x_bar_line = PAD ( "-", "-", LENGTH(real_format[1]) )
    range_line = PAD ( "-", "-", LENGTH(real_format[2]) )
    sigma_line = PAD ( "-", "-", LENGTH(real_format[3]) )

    IF ( chart_type = 4 ) THEN

        t_line_a = GET_USER_MESSAGE( "SQCWIN_HARD_DIS_2" ,1 )
        t_line_b ="     !L17HO!L"

    ELSE

        t_line_a = GET_USER_MESSAGE( "SQCWIN_HARD_DIP"   ,1 )
        t_line_b = "     !L11HO!L"

    ENDIF

    IF ( chart_type < 4 ) THEN

        IF SHOW_SIZE_IN_HARDCOPY THEN

            t_line_a = t_line_a : GET_USER_MESSAGE( "SQCWIN_HARD_DIS_3" ,1 )
            t_line_b = t_line_b : " !L4HO!L"

        ENDIF

        t_line_a = t_line_a : PAD( GET_USER_MESSAGE( "SQCWIN_HARD_DIS_4" ,1 ) ,
                                   " "                                     ,
                                   LENGTH(x_bar_line) ) : "      "
        t_line_b = t_line_b : "  ": x_bar_line : "    "

    ELSE

        t_line_a = t_line_a : GET_USER_MESSAGE( "SQCWIN_HARD_DIS_5" ,1 )
        t_line_b = t_line_b : " !L4HO!L"

    ENDIF

    IF ( chart_type = 2 ) THEN

        t_line_a = t_line_a : PAD( GET_USER_MESSAGE( "SQCWIN_HARD_DIS_6" ,1 ) ,
                                   " "                                     ,
                                   LENGTH(range_line) ) : "      "
        t_line_b = t_line_b : "  " : range_line : "    "

        t_line_a = t_line_a : PAD( GET_USER_MESSAGE( "SQCWIN_HARD_DIS_7" ,1 ) ,
                                   " "                                     ,
                                   LENGTH(sigma_line) ) : "  "
        t_line_b = t_line_b : "  " : sigma_line

    ELSEIF ( chart_type = 3 ) THEN

        t_line_a = t_line_a : PAD( GET_USER_MESSAGE( "SQCWIN_HARD_DIS_7" ,1 ) ,
                                   " "                                     ,
                                   LENGTH(sigma_line) ) : "  "
        t_line_b = t_line_b : "  " : sigma_line : "    "

        t_line_a = t_line_a : PAD( GET_USER_MESSAGE( "SQCWIN_HARD_DIS_6" ,1 ) ,
                                   " "                                     ,
                                   LENGTH(range_line) ) : "      "
        t_line_b = t_line_b : "  " : range_line

    ELSEIF ( chart_type = 4 ) THEN

        t_line_a = t_line_a : GET_USER_MESSAGE( "SQCWIN_HARD_DIS_8" ,1 )
        t_line_b = t_line_b : "    !L2HO!L"

    ENDIF

    t_line_a = t_line_a : " " :GET_USER_MESSAGE( "SQCWIN_HARD_DIS_9" ,1 )
    t_line_b = t_line_b : "  !L7HO!L"

    output_hdr( " " )
    output_hdr( t_line_a )
    output_hdr( t_line_b )

    ON NEW PAGE

        output_hdr( t_line_a )
        output_hdr( t_line_b )

    ENDON

ENDROUTINE

{******************************************************************************}

ROUTINE set_real_format ( sqc_chart, VALUE param )

{ 
* Routine to set the format of subgroup parameters.
* 
* 
*
* Parameters   : sqc_chart, param
* Return Value : new_format
*
*******************************************************************************}

DECLARE rec_count, subg_rec, max_len_1, max_len_2, the_val, new_format,
        pnt, len_1, len_2

    rec_count = 1
    subg_rec = sqc_chart . sqc_subgroup . get_by_number(rec_count)
    max_len_1 = 1
    max_len_2 = 1

    WHILE ( subg_rec <> EMPTY ) DO

        the_val  = SELECT sqcwin_subgroup . 'param' IN OBJECT subg_rec

        pnt      = INDEX(the_val, ".")
        len_1    = LENGTH ( STRIP ( LEFTSTRING ( the_val, pnt - 1 ) ) )
        len_2    = LENGTH ( STRIP ( SUBSTRING  ( the_val, pnt + 1, 10 ) ) )

        IF ( len_1 > max_len_1 ) THEN

          max_len_1 = len_1

        ENDIF

        IF ( len_2 > max_len_2 ) THEN

          max_len_2 = len_2

        ENDIF

        rec_count = rec_count + 1
        subg_rec = sqc_chart . sqc_subgroup . get_by_number(rec_count)

    ENDWHILE

    new_format = PAD("9", "9", max_len_1 ) : "." : PAD("9", "9", max_len_2 )

    RETURN ( new_format )

ENDROUTINE

{******************************************************************************}

GLOBAL ROUTINE output_hdr( VALUE the_text )

{ 
* Routine to sent input parameter to LITERAL output
* 
* 
*
* Parameters   : the_text
* Return Value : n/a
*
*******************************************************************************}

    LITERAL
$the_text_______________________________________________________________________
$ENDLITERAL

ENDROUTINE

{******************************************************************************}

GLOBAL ROUTINE create_chart_report ( sqc_chart )

{ 
* Routine to create a chart report
* 
* 
*
* Parameters   : sqc_chart
* Return Value : n/a
*
*******************************************************************************}

DECLARE report_container

    ARRAY report_container ARRAYSIZE ( 0 )

    IF ( sqc_chart . sqc_print_type = PRINT_TYPE_NONE ) THEN
    
	    get_chart_report_header ( sqc_chart, report_container )

	    IF ( ( sqc_chart . selected_chart <> PROC_CAP ) AND
		 ( sqc_chart . selected_chart <> CUSUM    ) ) THEN

		get_chart_report_body   ( sqc_chart, report_container )
		get_chart_report_trends ( sqc_chart, report_container, "trend_a" )
		get_chart_report_trends ( sqc_chart, report_container, "trend_b" )

	    ELSEIF ( sqc_chart . selected_chart = CUSUM ) THEN

		get_chart_report_body_non_shewhart ( sqc_chart, report_container )

	    ELSEIF ( sqc_chart . selected_chart = PROC_CAP ) THEN

		get_proc_cap_footer ( sqc_chart, report_container )
		get_chart_report_body_non_shewhart ( sqc_chart, report_container )

	    ENDIF
    
    ELSEIF ( sqc_chart . sqc_print_type <> PRINT_TYPE_CHART )
    
    	    IF ( sqc_chart . sqc_print_type = PRINT_TYPE_ABOVE ) THEN
    	    
    	    	send_graphs ( report_container, sqc_chart , 1 , CHART_HEIGHT, PAGE_WIDTH - 4 )
    	    
    	    ENDIF
    
            get_chart_report_header ( sqc_chart, report_container )
            
    	    IF ( sqc_chart . sqc_print_type = PRINT_TYPE_INSERT ) THEN
    	    
	        send_graphs ( report_container, 
	                      sqc_chart, 
	                      size_of_array ( report_container ) + 1, 
	                      CHART_HEIGHT, 
	                      PAGE_WIDTH - 4 )
    	    
    	    ENDIF
    	    
    
    	    IF ( ( sqc_chart . selected_chart <> PROC_CAP ) AND
    		 ( sqc_chart . selected_chart <> CUSUM    ) ) THEN
    
    		get_chart_report_body   ( sqc_chart, report_container )
    		get_chart_report_trends ( sqc_chart, report_container, "trend_a" )
    		get_chart_report_trends ( sqc_chart, report_container, "trend_b" )
    
    	    ELSEIF ( sqc_chart . selected_chart = CUSUM ) THEN
    
    		get_chart_report_body_non_shewhart ( sqc_chart, report_container )
    
    	    ELSEIF ( sqc_chart . selected_chart = PROC_CAP ) THEN
    
    		get_proc_cap_footer ( sqc_chart, report_container )
    		get_chart_report_body_non_shewhart ( sqc_chart, report_container )
    
    	    ENDIF
    	    
    	    IF ( sqc_chart . sqc_print_type = PRINT_TYPE_BELOW ) THEN
	        
	        pad_report_container ( report_container , PAGE_LENGTH - FOOTER_LENGTH, CHART_HEIGHT )
	        
	        send_graphs ( report_container, 
	                      sqc_chart, 
	                      size_of_array ( report_container) + 1, 
	                      CHART_HEIGHT, 
	                      PAGE_WIDTH - 4 )
	        	    
    	    ENDIF
    	    
    	    
    	    IF ( sqc_chart . sqc_print_type = PRINT_TYPE_SEP ) THEN
    	    
    	    
    	        pad_report_container ( report_container , PAGE_LENGTH - FOOTER_LENGTH, 0 )
    	        	    
	        send_graphs ( report_container, 
	                      sqc_chart, 
	                      size_of_array ( report_container ) + 1, 
	                      CHART_HEIGHT, 
	                      PAGE_WIDTH - 4 )
	    	        	    
    	    ENDIF
    
    ELSE
    
    	send_graphs ( report_container, sqc_chart , 1 , CHART_HEIGHT, PAGE_WIDTH - 4 )
    
    ENDIF

    output_report ( report_container )
    
ENDROUTINE

{******************************************************************************}

ROUTINE pad_report_container (       report_container , 
                               VALUE page_height      , 
                               VALUE chart_hght       )

{ 
* Pad the report container with blank lines, so items can be placed on the
* next page. If chart_hght is greater than the lines, moved it to the next page.
* 
*
* Parameters   : report_container, page_height, chart_hght
* Return Value : n/a
*
*******************************************************************************}

DECLARE lines_to_fill, fill_count

    IF ( size_of_array ( report_container ) > page_height ) THEN

        lines_to_fill = size_of_array ( report_container )

    { Graph needs to be placed on a new page, so find out 
      how many blank lines we need so the graph is pushed
      onto the next page. }

        WHILE ( lines_to_fill > page_height ) DO

	    lines_to_fill = lines_to_fill - page_length

        ENDWHILE

    ELSE

        lines_to_fill  = size_of_array ( report_container )

    ENDIF
    
    fill_count = 0
    
    lines_to_fill = page_height - lines_to_fill

    IF ( lines_to_fill < chart_hght ) OR ( chart_hght = 0 ) THEN
    
        WHILE ( fill_count < lines_to_fill ) DO
            fill_count = fill_count + 1
            report_container[ size_of_array ( report_container ) + 1 ] = ""
        ENDWHILE	
    
    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE get_chart_report_header ( sqc_chart, report_container )

{ 
* Routine to get header information depending on chart type
* 
* 
*
* Parameters   : sqc_chart, report_container
* Return Value : n/a
*
*******************************************************************************}

DECLARE header_fields, counter, chart_type_ndx, sqc_chart_type,
        spec_type_array, lims_type_array, lims_no, output, rep_index,
        spec_no, line_label, chart_id_text, cusum_mean, chart_desc

    ARRAY header_fields   ARRAYSIZE ( 0, 2 )
    ARRAY spec_type_array
    ARRAY lims_type_array

    spec_type_array [ 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_USE_SPECIFIED_LIMITS", 1 )
    spec_type_array [ 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_DISABLE_LIMITS", 1 )
    spec_type_array [ 3 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_USE_MLP_LIMITS", 1 )

    lims_type_array [ 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_CALCULATED_FROM_DATA", 1 )
    lims_type_array [ 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_CALCULATED_FROM_TARGETS", 1 )
    lims_type_array [ 3 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_USE_SPECIFIED_LIMITS", 1 )
    lims_type_array [ 4 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_USE_MLP_LIMITS", 1 )

    sqc_chart.sqc_header.set_first()

    chart_desc = SELECT sqcwin_header.description 
                 IN OBJECT sqc_chart.sqc_header.current

    chart_id_text = JUSTIFY( PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_CONTROL_CHART", 1 ),
                                 " ",
                                 "20" ) ,
                             "LEFT"):" : ":
                             STRIP(sqc_chart.chart_id):
                             "(":STRIP(sqc_chart.selected_chart):")"

    chart_desc = JUSTIFY( PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_CHART_DESCRIPTION", 1 ),
                                " ",
                                "20" ),
                          "LEFT"):" : ":
                          STRIP(chart_desc)

    rep_index                     = size_of_array(report_container) + 1
    report_container[rep_index  ] = "!L" : STRIP(STRING(PAGE_WIDTH)) : "HO" : "!L" 
    report_container[rep_index+1] = centre_text(USER_TITLE,PAGE_WIDTH)
    report_container[rep_index+2] = "!L" : STRIP(STRING(PAGE_WIDTH)) : "HO" : "!L" 
    report_container[rep_index+3] = chart_id_text
    report_container[rep_index+4] = chart_desc

    chart_type_ndx = PAD ( sqc_chart . chart_id      , " ", "20" ) :
                     PAD ( sqc_chart . selected_chart, " ", "10" )

    sqc_chart_type = sqc_chart . sqc_chart_type

    sqc_chart_type . set_by_index ( "KEY0", chart_type_ndx )

    IF ( sqc_chart . selected_chart = IND_MR ) THEN

        define_ind_mr_header ( header_fields )

    ELSEIF ( sqc_chart . selected_chart = MEAN_RANGE ) THEN

        define_mean_range_header ( header_fields )

    ELSEIF ( sqc_chart . selected_chart = MEAN_STD ) THEN

        define_mean_std_header ( header_fields )

    ELSEIF ( sqc_chart . selected_chart = CUSUM ) THEN

        define_cusum_header ( header_fields )

    ELSEIF ( sqc_chart . selected_chart = PROC_CAP ) THEN

        define_proc_cap_header ( header_fields )

    ENDIF

    counter = 1

    WHILE ( counter <= size_of_array ( header_fields ) ) DO

        rep_index = size_of_array ( report_container ) + 1

        line_label =
           JUSTIFY ( PAD ( header_fields [ counter, 1 ], " ", "20" ), "LEFT" ) :
           " : "

        IF ( header_fields [ counter, 2 ] = "spec_type" ) THEN

            spec_no = object_select_field ( sqc_chart_type . current,
                                            "sqcwin_chart_type",
                                            header_fields [ counter, 2 ] )

            report_container [ rep_index ] = line_label :
                                     STRIP ( spec_type_array [ spec_no ] )

        ELSEIF ( ( header_fields [ counter, 2 ] = "limits_calc_type_a" ) OR
                 ( header_fields [ counter, 2 ] = "limits_calc_type_b" ) )

            lims_no = object_select_field ( sqc_chart_type . current,
                                            "sqcwin_chart_type",
                                            header_fields [ counter, 2 ] )

            report_container [ rep_index ] = line_label :
                                     STRIP ( lims_type_array [ lims_no ] )

        ELSE

            output = object_select_field ( sqc_chart_type . current,
                                            "sqcwin_chart_type",
                                            header_fields [ counter, 2 ] )

            IF ( ( sqc_chart . selected_chart   = CUSUM          ) AND
                 ( header_fields [ counter, 2 ] = "target_cusum" ) AND
                 ( ( STRIP ( output ) = "M" ) OR ( STRIP ( output ) = "m" ) ) ) THEN

                 CALL_ROUTINE "get_mean_sqc_point"
                        USING sqc_chart
                   IN LIBRARY "$sqcwin_calc"
                    RETURNING cusum_mean

                output = STRIP ( cusum_mean ) : " ( M )"

            ENDIF

            report_container [ rep_index ] = line_label :
                                     STRIP ( output )

        ENDIF

        counter = counter + 1

    ENDWHILE

    counter = 1

    WHILE ( counter <= size_of_array ( sqc_chart . selection_criteria ) ) DO

        rep_index = size_of_array ( report_container ) + 1

        IF ( ( sqc_chart . selection_criteria [ counter, 2 ] <>
                                             PAD ( "-", "-", 50 )  ) AND
             ( sqc_chart . selection_criteria [ counter, 1 ] < 7 ) ) THEN

            report_container [ rep_index ] =
                PAD ( sqc_chart . selection_criteria [ counter, 2 ], " ", "20" ) :
                " : " :
                JUSTIFY ( PAD ( sqc_chart . selection_criteria [ counter, 3 ],
                                " ",
                                "20" ), "LEFT" )

        ENDIF

        counter = counter + 1

    ENDWHILE

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] =
          PAD ( "Date", " ", "20" ) : " : " : STRIP ( NOW )

ENDROUTINE

{******************************************************************************}

ROUTINE get_chart_report_body ( sqc_chart, report_container )

{ 
* Routine to get body of chart report
* 
* 
*
* Parameters   : sqc_chart, report_container
* Return Value : n/a
*
*******************************************************************************}

DECLARE field_array, count, rep_index, graph_objs, first,
        last, win_obj1, win_obj2

    ARRAY field_array
    ARRAY graph_objs

    IF ( sqc_chart . selected_chart = IND_MR ) THEN

        define_indmr_fields ( field_array )

    ELSEIF ( sqc_chart . selected_chart = MEAN_RANGE ) THEN

        define_meanrange_fields ( field_array )

    ELSEIF ( sqc_chart . selected_chart = MEAN_STD ) THEN

        define_meanstd_fields ( field_array )

    ELSEIF ( sqc_chart . selected_chart = CUSUM ) THEN

        define_cusum_fields ( field_array )

    ELSEIF ( sqc_chart . selected_chart = PROC_CAP ) THEN

        define_proccap_fields ( field_array )

    ENDIF

    graph_objs [ 1 ] = sqc_chart . graph_object_array [ sqc_chart . graph_obj_a_ndx ]
    graph_objs [ 2 ] = sqc_chart . graph_object_array [ sqc_chart . graph_obj_b_ndx ]

    count = 1

    WHILE ( count <= size_of_array ( graph_objs [ 1 ] . win_obj_array ) ) DO

        rep_index = size_of_array ( report_container ) + 1
        report_container [ rep_index ] = " "

        rep_index = size_of_array ( report_container ) + 1
        report_container [ rep_index ] = " "
        
        first = graph_objs [ 1 ] . win_obj_array [ count ] . first_point
        last  = graph_objs [ 1 ] . win_obj_array [ count ] .  last_point

        output_window ( sqc_chart, first, last, report_container, field_array )

        win_obj1 = graph_objs [ 1 ] . win_obj_array [ count ]
        win_obj2 = graph_objs [ 2 ] . win_obj_array [ count ]

        output_stats  ( win_obj1, win_obj2, report_container )

        count = count + 1

    ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE output_window (       sqc_chart        ,
                        VALUE first            ,
                        VALUE last             ,
                              report_container ,
                              field_array      )

{ 
* Routine to output shewhart windows
* 
* 
*
* Parameters   : sqc_chart, fist, last, report_container, field_array
* Return Value : n/a
*
*******************************************************************************}

DECLARE count, body_title, rep_index, sqc_subgrp, output_line,
        subgroup_ndx, field_counter, trend, bad, out_value, dash_len, title_count

    body_title = ""

    count = 1
    title_count = 0

    WHILE ( count <= size_of_array ( field_array ) ) DO

        IF ( field_array [ count, 2 ] <> "BAD" ) AND
           ( field_array [ count, 2 ] <> "TREND" ) THEN

	    title_count = title_count + 1
            body_title = body_title : "!LVE!L" {"| "} :
                         PAD ( field_array [count,2]," ",field_array [count,3]):
                         " "
        ELSE

            IF ( count MOD 2 ) = 1 THEN
                body_title = body_title : " "
            ELSE
                body_title = body_title : "  "
            ENDIF

        ENDIF

        count = count + 1

    ENDWHILE

    body_title = body_title : "!LVE!L"
    dash_len = STRINGLENGTH ( body_title )
    dash_len = dash_len - ( ( title_count + 1 ) * 5 )
    dash_len = dash_len - 2


    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = "!LUL" : STRIP(STRING(dash_len)) : "HO" : "UR!L"
    
    
    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = body_title
    
    
    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = "!LLL" : STRIP(STRING(dash_len)) : "HO" : "LR!L"

    count = first

    SET DATE FORMAT "DD-Mon-YYYY"

    WHILE ( count <= last ) DO

        subgroup_ndx = PAD ( sqc_chart . chart_id      , " ", "20" ) :
                       PAD ( sqc_chart . selected_chart, " ", "10" ) :
             JUSTIFY ( PAD ( STRIP ( count )           , " ",  "4" ), "RIGHT" )

        sqc_subgrp = sqc_chart . sqc_subgroup
        sqc_subgrp . set_by_index ( "KEY0", subgroup_ndx )

        field_counter = 1
        output_line   = ""

        WHILE ( field_counter <= size_of_array ( field_array ) ) DO

            IF ( field_array [ field_counter, 2 ] = "TREND" ) THEN

                 trend = object_select_field ( sqc_subgrp . current,
                                               "sqcwin_subgroup",
                                               field_array [field_counter,1])

                 IF ( trend <> 0 ) THEN
                     output_line = output_line : "T"
                 ELSE
                     output_line = output_line : " "
                 ENDIF

            ELSEIF ( field_array [ field_counter, 2 ] = "BAD" ) THEN

                 bad = object_select_field ( sqc_subgrp . current,
                                             "sqcwin_subgroup",
                                             field_array [field_counter,1])

                 IF ( bad = TRUE ) THEN
                     output_line = output_line : "B"
                 ELSE
                     output_line = output_line : " "
                 ENDIF

                 output_line = output_line : " "

            ELSE

                out_value = object_select_field ( sqc_subgrp . current,
                                                  "sqcwin_subgroup",
                                              field_array [field_counter,1])

                out_value = PAD ( STRIP ( out_value ), " ",
                               field_array [ field_counter, 3 ] )

                output_line = output_line : "!LVE!L" : out_value : " "

            ENDIF

            field_counter = field_counter + 1

        ENDWHILE

        rep_index = size_of_array ( report_container ) + 1
        report_container [ rep_index ] = output_line : "!LVE!L"

        count = count + 1

    ENDWHILE

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = "!LLL" : STRIP(STRING(dash_len)) : "HO" : "LR!L"

    RESTORE DATE FORMAT

ENDROUTINE

{******************************************************************************}

ROUTINE output_stats ( win_obj1, win_obj2, report_container )

{ 
* Routine to output statistics
* 
* 
*
* Parameters   : win_obj1, win_obj2, report_container
* Return Value : n/a
*
*******************************************************************************}

DECLARE rep_index, mean_txt, us_txt, ls_txt, ucl_txt, lcl_txt, usd_txt,
        lsd_txt, uwl_txt, lwl_txt

    us_txt   = GET_USER_MESSAGE ( "SQCWIN_HARD_UPPER_SPEC", 1 )

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = PAD ( us_txt         , " ", "20" ) :
                                     PAD ( win_obj1 . us  , " ", "10" ) :
                                     PAD ( win_obj2 . us  , " ", "10" )

    ucl_txt  = GET_USER_MESSAGE ( "SQCWIN_HARD_UPPER_CONTROL", 1 )

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = PAD ( ucl_txt        , " ", "20" ) :
                                     PAD ( win_obj1 . ucl , " ", "10" ) :
                                     PAD ( win_obj2 . ucl , " ", "10" )

    uwl_txt  = GET_USER_MESSAGE ( "SQCWIN_HARD_UPPER_WARNING", 1 )

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = PAD ( uwl_txt        , " ", "20" ) :
                                     PAD ( win_obj1 . uwl , " ", "10" ) :
                                     PAD ( win_obj2 . uwl , " ", "10" )

    usd_txt  = GET_USER_MESSAGE ( "SQCWIN_HARD_UPPER_ST_DEV", 1 )

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = PAD ( usd_txt        , " ", "20" ) :
                                     PAD ( win_obj1 . usd , " ", "10" ) :
                                     PAD ( win_obj2 . usd , " ", "10" )

    mean_txt = GET_USER_MESSAGE ( "SQCWIN_HARD_MEAN", 1 )

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = PAD ( mean_txt       , " ", "20" ) :
                                     PAD ( win_obj1 . mean, " ", "10" ) :
                                     PAD ( win_obj2 . mean, " ", "10" )

    lsd_txt  = GET_USER_MESSAGE ( "SQCWIN_HARD_LOWER_ST_DEV", 1 )

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = PAD ( lsd_txt        , " ", "20" ) :
                                     PAD ( win_obj1 . lsd , " ", "10" ) :
                                     PAD ( win_obj2 . lsd , " ", "10" )

    lwl_txt  = GET_USER_MESSAGE ( "SQCWIN_HARD_LOWER_WARNING", 1 )

    IF ( win_obj2 . lwl < 0 ) THEN 
    
    	win_obj2 . lwl = 0 
    	
    ENDIF

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = PAD ( lwl_txt        , " ", "20" ) :
                                     PAD ( win_obj1 . lwl , " ", "10" ) :
                                     PAD ( win_obj2 . lwl , " ", "10" )

    lcl_txt  = GET_USER_MESSAGE ( "SQCWIN_HARD_LOWER_CONTROL", 1 )

    IF ( win_obj2 . lcl < 0 ) THEN 
    
    	win_obj2 . lcl = 0 
    	
    ENDIF

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = PAD ( lcl_txt        , " ", "20" ) :
                                     PAD ( win_obj1 . lcl , " ", "10" ) :
                                     PAD ( win_obj2 . lcl , " ", "10" )

    ls_txt   = GET_USER_MESSAGE ( "SQCWIN_HARD_LOWER_SPEC", 1 )

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = PAD ( ls_txt         , " ", "20" ) :
                                     PAD ( win_obj1 . ls  , " ", "10" ) :
                                     PAD ( win_obj2 . ls  , " ", "10" )

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = PAD ( " ", " ", "20" )

ENDROUTINE

{******************************************************************************}

ROUTINE get_chart_report_body_non_shewhart ( sqc_chart, report_container )

{ 
* Routine to get report body for non shewhart charts
* 
* 
*
* Parameters   : sqc_chart, report_container
* Return Value : n/a
*
*******************************************************************************}

DECLARE field_array, count, body_title, rep_index, sqc_subgrp, output_line,
        subgroup_ndx, field_counter, out_value, dash_len, first, last

    ARRAY field_array

    body_title = ""

    IF ( sqc_chart . selected_chart = CUSUM ) THEN

        define_cusum_fields ( field_array )

    ELSEIF ( sqc_chart . selected_chart = PROC_CAP ) THEN

        define_proc_cap_fields ( field_array )

    ENDIF

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = " "

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = " "


    count = 1

    WHILE ( count <= size_of_array ( field_array ) ) DO

        IF ( field_array [ count, 2 ] <> "BAD" ) AND
           ( field_array [ count, 2 ] <> "TREND" ) THEN

            body_title = body_title : "!LVE!L" :
                         PAD ( field_array [count,2]," ",field_array [count,3]):
                         " "
        ELSE

            body_title = body_title : "    "

        ENDIF

        count = count + 1

    ENDWHILE

    body_title = body_title : "!LVE!L"                

    dash_len = STRINGLENGTH ( body_title )
    dash_len = dash_len - ( size_of_array( field_array ) * 5 )
    dash_len = dash_len - 2

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = "!LUL" : STRIP(STRING(dash_len)) : "HO" : "UR!L" 

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = body_title

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = "!LLL" : STRIP(STRING(dash_len)) : "HO" : "LR!L" 

    get_default_subgrp_bounds ( sqc_chart, sqc_chart . selected_chart, first, last )

    count = first

    IF count = 0 THEN

	count = 1

    ENDIF
    subgroup_ndx = PAD ( sqc_chart . chart_id      , " ", "20" ) :
                   PAD ( sqc_chart . selected_chart, " ", "10" ) :
         JUSTIFY ( PAD ( STRIP ( count )           , " ",  "4" ), "RIGHT" )

    sqc_subgrp = sqc_chart . sqc_subgroup
    sqc_subgrp . set_by_index ( "KEY0", subgroup_ndx )

    SET DATE FORMAT "DD-Mon-YYYY"

    WHILE ( sqc_subgrp . current <> EMPTY ) DO

        field_counter = 1
        output_line = ""

        WHILE ( field_counter <= size_of_array ( field_array ) ) DO

            IF ( field_array [ field_counter, 2 ] = "BAD" ) THEN

                out_value = object_select_field ( sqc_subgrp . current,
                                                  "sqcwin_subgroup",
                                                  field_array [field_counter,1])

                IF ( out_value ) THEN
                    out_value = "B "
                ELSE
                    out_value = "  "
                ENDIF

                output_line = output_line : " " : out_value : " "

            ELSE

                out_value = object_select_field ( sqc_subgrp . current,
                                                  "sqcwin_subgroup",
                                                  field_array [field_counter,1])

                out_value = PAD ( STRIP ( out_value ), " ",
                                  field_array [ field_counter, 3 ] )

                output_line = output_line : "!LVE!L" : out_value : " "

            ENDIF

                field_counter = field_counter + 1

        ENDWHILE

        rep_index = size_of_array ( report_container ) + 1
        report_container [ rep_index ] = output_line : "!LVE!L"

        count = count + 1
        subgroup_ndx = PAD ( sqc_chart . chart_id      , " ", "20" ) :
                       PAD ( sqc_chart . selected_chart, " ", "10" ) :
             JUSTIFY ( PAD ( STRIP ( count )           , " ",  "4" ), "RIGHT" )
        sqc_subgrp . set_by_index ( "KEY0", subgroup_ndx )

    ENDWHILE

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = "!LLL" : STRIP(STRING(dash_len)) : "HO" : "LR!L" 

    RESTORE DATE FORMAT

ENDROUTINE

{******************************************************************************}

ROUTINE get_proc_cap_footer ( sqc_chart, report_container )

{ 
* Routine to get footer for process capability chart report
* 
* 
*
* Parameters   : sqc_chart, report_container
* Return Value : n/a
*
*******************************************************************************}

DECLARE rep_index, graph_obj, count, txt, uppersig, lowersig, graph_obj_size

    ARRAY txt ARRAYSIZE ( 0 )

    rep_index = size_of_array ( report_container ) + 1
    report_container [ rep_index ] = " "

    graph_obj_size = size_of_array( sqc_chart . graph_object_array )

    count = 1

    WHILE ( count <= graph_obj_size ) DO

        IF ( sqc_chart . graph_object_array [ count ] . graph_type =
                         PROC_CAP_GR ) THEN

            graph_obj = sqc_chart . graph_object_array [ count ]

        ENDIF

        count = count + 1

    ENDWHILE

    txt[1]  = PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_FROM", 1 )       ," ", "15" ) : " : " : graph_obj . first_subgroup
    txt[2]  = PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_TO", 1 )         ," ", "15" ) : " : " : graph_obj . last_subgroup
    txt[3]  = PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_SKEWNESS", 1 )   ," ", "15" ) : " : " : graph_obj . skewness
    txt[4]  = PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_KURTOSIS", 1 )   ," ", "15" ) : " : " : graph_obj . kurtosis
    txt[5]  = PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_CAP_RATIO", 1 )  ," ", "15" ) : " : " : graph_obj . cap_ratio
    txt[6]  = PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_CAP_INDEX", 1 )  ," ", "15" ) : " : " : graph_obj . cap_index
    txt[7]  = PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_CPK_INDEX", 1 )  ," ", "15" ) : " : " : graph_obj . cpk_index
    txt[8]  = PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_STD", 1 )        ," ", "15" ) : " : " : graph_obj . sigma
    txt[9]  = PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_UPPER_SPEC", 1 ) ," ", "15" ) : " : " : graph_obj . spec_max
    txt[10] = PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_LOWER_SPEC", 1 ) ," ", "15" ) : " : " : graph_obj . spec_min

    lowersig = graph_obj . mean - ( graph_obj . sigma * 3 )
    txt[11] = PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_XBMIN3STD", 1 ), " ", "15" ) : " : " : lowersig

    uppersig = graph_obj . mean + ( graph_obj . sigma * 3 )
    txt[12] = PAD ( GET_USER_MESSAGE ( "SQCWIN_HARD_XBPLUS3STD", 1 ), " ", "15" ) : " : " : uppersig

    count = 1

    WHILE ( count <= size_of_array ( txt ) ) DO

        rep_index = size_of_array ( report_container ) + 1
        report_container [ rep_index ] = txt [ count ]

        count = count + 1

    ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE get_chart_report_trends (       sqc_chart        ,
                                        report_container ,
                                  VALUE field_name       )

{ 
* Routine to collect trends required for a report
* 
* 
*
* Parameters   : sqc_chart, report_container, field_name
* Return Value : n/a
*
*******************************************************************************}

    DECLARE subgroup_ndx, count, rep_index, trend_type,
            trend_para, trend_title, sqc_subgrp, trend_str, first_line,
            output, trend_msg, trend_para_type, point_num, trend_1, trend_2

    IF ( sqc_chart . selected_chart = MEAN_STD ) THEN

        IF ( field_name = "trend_a" ) THEN

            trend_title = GET_USER_MESSAGE ( "SQCWIN_HARD_TREND_T1", 1 )

        ELSE

            trend_title = GET_USER_MESSAGE ( "SQCWIN_HARD_TREND_T2", 1 )

        ENDIF

    ELSEIF ( sqc_chart . selected_chart = MEAN_RANGE ) THEN

        IF ( field_name = "trend_a" ) THEN

            trend_title = GET_USER_MESSAGE ( "SQCWIN_HARD_TREND_T3", 1 )

        ELSE

            trend_title = GET_USER_MESSAGE ( "SQCWIN_HARD_TREND_T4", 1 )

        ENDIF

    ELSEIF ( sqc_chart . selected_chart = IND_MR     ) THEN

        IF ( field_name = "trend_a" ) THEN

            trend_title = GET_USER_MESSAGE ( "SQCWIN_HARD_TREND_T5", 1 )

        ELSE

            trend_title = GET_USER_MESSAGE ( "SQCWIN_HARD_TREND_T6", 1 )

        ENDIF

    ENDIF

    count = 1
    subgroup_ndx = PAD ( sqc_chart . chart_id      , " ", "20" ) :
                   PAD ( sqc_chart . selected_chart, " ", "10" ) :
         JUSTIFY ( PAD ( STRIP ( count )           , " ",  "4" ), "RIGHT" )

    sqc_subgrp = sqc_chart . sqc_subgroup
    sqc_subgrp . set_by_index ( "KEY0", subgroup_ndx )

    output = ""

    first_line = TRUE

    WHILE ( sqc_subgrp . current <> EMPTY ) DO

        point_num  = object_select_field ( sqc_subgrp . current,
                                           "sqcwin_subgroup"      ,
                                           "subgroup_number"   )

        trend_type = object_select_field ( sqc_subgrp . current,
                                           "sqcwin_subgroup"      ,
                                           field_name          )

        IF ( trend_type <> 0 ) THEN

            IF ( first_line ) THEN

                rep_index = size_of_array ( report_container ) + 1
                report_container [ rep_index ] = PAD ( " ", " ", "80" )

                rep_index = size_of_array ( report_container ) + 1
                report_container [ rep_index ] = trend_title

                rep_index = size_of_array ( report_container ) + 1
                report_container [ rep_index ] = PAD ( " ", " ", "80" )

                first_line = FALSE

            ENDIF

            trend_para = object_select_field ( sqc_subgrp . current,
                                               "sqcwin_subgroup"      ,
                                               field_name : "_p"   )

            trend_1    = object_select_field ( sqc_subgrp . current,
                                               "sqcwin_subgroup"      ,
                                               field_name : "_1"   )

            trend_2    = object_select_field ( sqc_subgrp . current,
                                               "sqcwin_subgroup"      ,
                                               field_name : "_2"   )

            trend_str = "TREND_NUMBER_" : STRIP ( STRING ( trend_type ) )

            trend_msg = GET CONSTANT ( trend_str )

            IF ( trend_para = 1 ) THEN
                trend_para_type = "out of"
                output = JUSTIFY ( PAD ( STRIP ( point_num ), " ", "5" ), "RIGHT" ) : " " :
                         JUSTIFY ( PAD ( STRIP ( TRUNC ( trend_1 ) )  , " ", "2" ), "RIGHT" ) : " " :
                         trend_para_type   : " " :
                         JUSTIFY ( PAD ( STRIP ( trend_2 )  , " ", "2" ), "RIGHT" ) : " " :
                         trend_msg
            ELSE
                trend_para_type = "consecutive points"
                output = JUSTIFY ( PAD ( STRIP ( point_num ), " ", "5" ), "RIGHT" ) : " " :
                         JUSTIFY ( PAD ( STRIP ( TRUNC ( trend_1 ) )  , " ", "2" ), "RIGHT" ) : " " :
                         trend_para_type   : " " : trend_msg
            ENDIF


            rep_index = size_of_array ( report_container ) + 1
            report_container [ rep_index ] = output

        ENDIF

        count = count + 1
        subgroup_ndx = PAD ( sqc_chart . chart_id      , " ", "20" ) :
                       PAD ( sqc_chart . selected_chart, " ", "10" ) :
             JUSTIFY ( PAD ( STRIP ( count )           , " ",  "4" ), "RIGHT" )


        sqc_subgrp . set_by_index ( "KEY0", subgroup_ndx )

    ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE output_report ( report_container )

{ 
* Routine to output report to LITERAL
* 
* 
*
* Parameters   : report_container
* Return Value : n/a
*
*******************************************************************************}

DECLARE counter, end_of_page, page_number

    end_of_page = PAGE_LENGTH - FOOTER_LENGTH
    counter = 1
    page_number = 1


    
    WHILE ( counter <= size_of_array ( report_container ) ) DO

        send_line ( report_container [ counter ] )

        IF ( counter >= end_of_page ) THEN

            send_line ( " " )
            send_line ( " " )
            send_line ( GET_USER_MESSAGE ( "SQCWIN_HARD_PAGE_NO", 1 ) : 
                        STRIP ( page_number ) )
            NEW PAGE
            end_of_page = end_of_page + PAGE_LENGTH - FOOTER_LENGTH
            page_number = page_number + 1

        ENDIF

        counter = counter + 1

    ENDWHILE

    WHILE ( counter <= end_of_page )

        send_line ( " " )
        counter = counter + 1

    ENDWHILE

    send_line ( " " )
    send_line ( " " )
    send_line ( GET_USER_MESSAGE ( "SQCWIN_HARD_PAGE_NO", 1 ) : 
                STRIP ( page_number ) )
    send_line ( " " )
    NEW PAGE
    
    

    FLUSH_LITERAL

ENDROUTINE

{******************************************************************************}

ROUTINE send_line ( VALUE output_line )

{ 
* Routine to place a line in the report.
* 
* 
*
* Parameters   : output_line
* Return Value : n/a
*
*******************************************************************************}

    IF ( ( INDEX ( output_line, "!G" ) > 0 ) OR 
         ( INDEX ( output_line, "!L" ) > 0 )) THEN
        
LITERAL
$output_line___________________________________________________________________________________________________________________________________________________________________________________________
$ENDLITERAL
        
    
    ELSE
    
LITERAL
$output_line____________________________________________________________________
$ENDLITERAL

    ENDIF

ENDROUTINE
{******************************************************************************}

ROUTINE send_graphs ( rep_array, sqc_chart, 
                      VALUE start_at, VALUE chheight, VALUE chwidth )

{ 
* Routine to place a graphs in the report.
* 
* 
*
* Parameters   : rep_array - array which holds lines of the report
*                sqc_chart - chart object
*                start_at - line to insert graph on.
*                chheight - graph height
*                chwidth - graph width
* Return Value : n/a
*
*******************************************************************************}

DECLARE graph_count, graph_file, file_line, array_count, pad_string, 
        pad_length, graph_width

    graph_count = 1
    array_count = 0
    pad_length = 0

    array_count = start_at

    IF ( rep_array[ array_count ] = EMPTY ) THEN

        rep_array[ array_count ] = "" 


    ELSE

        pad_length = STRINGLENGTH ( rep_array[ array_count ] )

    ENDIF

    rep_array[ array_count ] = rep_array[ array_count ] :
                                "!LUL  " :STRIP(STRING(chwidth)) : 
                                "HO" : PAD(""," ",chwidth - 9) : "UR!L"

    array_count = array_count + 1  

    IF ( sqc_chart . graph_file_array [ graph_count ] <> EMPTY ) THEN

        IF ( LENGTH ( rep_array[ array_count ] ) = 0 ) OR
                ( rep_array[ array_count ] = EMPTY ) THEN

            rep_array[ array_count ] = "" 

        ENDIF 


        rep_array[ array_count ] = PAD( rep_array[ array_count ], " " , pad_length )
        rep_array[ array_count ] = rep_array[ array_count ] : "!LVE!L"

	graph_width = chwidth / size_of_array ( sqc_chart . graph_file_array )
	
        WHILE graph_count <= size_of_array ( sqc_chart . graph_file_array ) DO
            	
            graph_file = sqc_chart . graph_file_array [ graph_count ]

            rep_array[ array_count ] = rep_array[ array_count ] :
                                       "!G" :
                                       graph_file :
                                       "," :
                                       STRIP(STRING( graph_width + 2 )) : 
                                       "," : STRIP(STRING(chheight + 2)) : "!G"
                                       
            rep_array[ array_count ] = rep_array[ array_count ] : PAD("", " ", graph_width)
         
	    graph_count = graph_count + 1

        ENDWHILE
        
        rep_array[ array_count ] = rep_array[ array_count ] : "!LVE!L"
        
        array_count = array_count + 1

        file_line = 0
        pad_string = PAD(""," ",chwidth)

        WHILE ( file_line < chheight ) DO

            IF ( LENGTH ( rep_array[ array_count ] ) = 0 ) OR
                ( rep_array[ array_count ] = EMPTY ) THEN

                rep_array[ array_count ] = "" 

            ENDIF  

            file_line = file_line + 1

            rep_array[ array_count ] = PAD( rep_array[ array_count ], " ", pad_length )
            rep_array [ array_count ] = rep_array[ array_count ] :
                                        "!LVE!L" : pad_string : "!LVE!L"  

            array_count = array_count + 1

        ENDWHILE

    ENDIF


    IF ( LENGTH ( rep_array[ array_count ] ) = 0 ) OR
        ( rep_array[ array_count ] = EMPTY ) THEN

        rep_array[ array_count ] = "" 

        ENDIF 

    rep_array[ array_count ] = PAD( rep_array[ array_count ], " ", pad_length )
    rep_array[ array_count ] = rep_array[ array_count ] : 
                               "!LLL" : STRIP(STRING(chwidth)) : "HO" : 
                               PAD(""," ",chwidth - 9) : "LR!L"
    
    array_count = array_count + 1 
     

ENDROUTINE

{******************************************************************************}

ROUTINE define_ind_mr_header ( header_array )

{ 
* Routine to define the header for an Independant and Monving Range chart
* 
* 
*
* Parameters   : header_array
* Return Value : n/a
*
*******************************************************************************}

    header_array [ 1, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_INDEP_H1", 1 )
    header_array [ 1, 2 ] = "spec_type"

    header_array [ 2, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_INDEP_H2", 1 )
    header_array [ 2, 2 ] = "limits_calc_type_a"

    header_array [ 3, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_INDEP_H3", 1 )
    header_array [ 3, 2 ] = "trend_chart_a"

    header_array [ 4, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_INDEP_H4", 1 )
    header_array [ 4, 2 ] = "limits_calc_type_b"

    header_array [ 5, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_INDEP_H5", 1 )
    header_array [ 5, 2 ] = "trend_chart_b"

    header_array [ 6, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_INDEP_H6", 1 )
    header_array [ 6, 2 ] = "subgroup_chosen_by"

ENDROUTINE

{******************************************************************************}

ROUTINE define_mean_range_header ( header_array )

{ 
* Routine to define the header for a Mean and Range chart.
* 
* 
*
* Parameters   : header_array
* Return Value : n/a
*
*******************************************************************************}

    header_array [ 1, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_RANGE_H1", 1 )
    header_array [ 1, 2 ] = "spec_type"

    header_array [ 2, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_RANGE_H2", 1 )
    header_array [ 2, 2 ] = "limits_calc_type_a"

    header_array [ 3, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_RANGE_H3", 1 )
    header_array [ 3, 2 ] = "trend_chart_a"

    header_array [ 4, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_RANGE_H4", 1 )
    header_array [ 4, 2 ] = "limits_calc_type_b"

    header_array [ 5, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_RANGE_H5", 1 )
    header_array [ 5, 2 ] = "trend_chart_b"

    header_array [ 6, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_RANGE_H6", 1 )
    header_array [ 6, 2 ] = "subgroup_chosen_by"

    header_array [ 7, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_RANGE_H7", 1 )
    header_array [ 7, 2 ] = "subgroup_size_wanted"

ENDROUTINE

{******************************************************************************}

ROUTINE define_mean_std_header ( header_array )

{ 
* Routine to define the header for a Mean and Standard Deviation chart.
* 
* 
*
* Parameters   : header_array
* Return Value : n/a
*
*******************************************************************************}

  header_array [ 1, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_STDDEV_H1", 1 )
  header_array [ 1, 2 ] = "spec_type"

  header_array [ 2, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_STDDEV_H2", 1 )
  header_array [ 2, 2 ] = "limits_calc_type_a"

  header_array [ 3, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_STDDEV_H3", 1 )
  header_array [ 3, 2 ] = "trend_chart_a"

  header_array [ 4, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_STDDEV_H4", 1 )
  header_array [ 4, 2 ] = "limits_calc_type_b"

  header_array [ 5, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_STDDEV_H5", 1 )
  header_array [ 5, 2 ] = "trend_chart_b"

  header_array [ 6, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_STDDEV_H6", 1 )
  header_array [ 6, 2 ] = "subgroup_chosen_by"

  header_array [ 7, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_STDDEV_H7", 1 )
  header_array [ 7, 2 ] = "subgroup_size_wanted"

ENDROUTINE

{******************************************************************************}

ROUTINE define_proc_cap_header ( header_array )

{ 
* Routine to define the header for a Process Capability chart.
* 
* 
*
* Parameters   : header_array
* Return Value : n/a
*
*******************************************************************************}

  header_array [ 1, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_CAP_H1", 1 )
  header_array [ 1, 2 ] = "number_of_cells"

  header_array [ 2, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_CAP_H2", 1 )
  header_array [ 2, 2 ] = "spec_type"

ENDROUTINE

{******************************************************************************}

ROUTINE define_cusum_header ( header_array )

{ 
* Routine to define the header for a CUSUM chart.
* 
* 
*
* Parameters   : header_array
* Return Value : n/a
*
*******************************************************************************}

  header_array [ 1, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_CU_H1", 1 )
  header_array [ 1, 2 ] = "target_cusum"

  header_array [ 2, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_CU_H2", 1 )
  header_array [ 2, 2 ] = "subgroup_size_wanted"

  header_array [ 3, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_CU_H3", 1 )
  header_array [ 3, 2 ] = "y_min_chart_a"

  header_array [ 4, 1 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_CU_H4", 1 )
  header_array [ 4, 2 ] = "y_min_chart_b"

ENDROUTINE

{******************************************************************************}

ROUTINE define_indmr_fields ( field_array )

{ 
* Routine to define the fields for an Independant and Moving Range chart.
* 
* 
*
* Parameters   : field_array
* Return Value : n/a
*
*******************************************************************************}

  DECLARE array_count

  array_count = 1

  field_array [ array_count, 1 ] = "subgroup_number"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_NO", 1 )
  field_array [ array_count, 3 ] = "4"

  array_count = array_count + 1

  field_array [array_count, 1 ] = "subgroup_date"
  field_array [array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_DATE", 1 )
  field_array [array_count, 3 ] = "11"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "x_bar"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_VALUE", 1 )
  field_array [ array_count, 3 ] = "10"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "trend_a"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_TREND", 1 )
  field_array [ array_count, 3 ] = "1"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "a_bad"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_BAD", 1 )
  field_array [ array_count, 3 ] = "1"

  array_count = array_count + 1

  field_array [array_count, 1 ] = "range"
  field_array [array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_MR", 1 )
  field_array [array_count, 3 ] = "10"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "trend_b"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_TREND", 1 )
  field_array [ array_count, 3 ] = "1"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "b_bad"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_BAD", 1 )
  field_array [ array_count, 3 ] = "1"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "comments"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_COMMENTS", 1 )
  field_array [ array_count, 3 ] = "22"

ENDROUTINE

{******************************************************************************}

ROUTINE define_meanrange_fields ( field_array )

{ 
* Routine to define the fields for a Mean and Range chart.
* 
* 
*
* Parameters   : field_array
* Return Value : n/a
*
*******************************************************************************}

  DECLARE array_count

  array_count = 1

  field_array [ array_count, 1 ] = "subgroup_number"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_NO", 1 )
  field_array [ array_count, 3 ] = "4"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "subgroup_date"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_DATE", 1 )
  field_array [ array_count, 3 ] = "11"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "x_bar"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_XBAR", 1 )
  field_array [ array_count, 3 ] = "10"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "trend_a"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_TREND", 1 )
  field_array [ array_count, 3 ] = "1"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "a_bad"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_BAD", 1 )
  field_array [ array_count, 3 ] = "1"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "range"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_RANGE", 1 )
  field_array [ array_count, 3 ] = "10"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "trend_b"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_TREND", 1 )
  field_array [ array_count, 3 ] = "1"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "b_bad"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_BAD", 1 )
  field_array [ array_count, 3 ] = "1"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "sigma"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_STD", 1 )
  field_array [ array_count, 3 ] = "10"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "comments"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_COMMENTS", 1 )
  field_array [ array_count, 3 ] = "5"

ENDROUTINE

{******************************************************************************}

ROUTINE define_meanstd_fields ( field_array )

{ 
* Routine to define the fields for a Mean and Standard Deviation chart.
* 
* 
*
* Parameters   : field_array
* Return Value : n/a
*
*******************************************************************************}

  DECLARE array_count

  array_count = 1

  field_array [ array_count, 1 ] = "subgroup_number"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_NO", 1 )
  field_array [ array_count, 3 ] = "4"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "subgroup_date"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_DATE", 1 )
  field_array [ array_count, 3 ] = "11"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "x_bar"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_XBAR", 1 )
  field_array [ array_count, 3 ] = "10"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "trend_a"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_TREND", 1 )
  field_array [ array_count, 3 ] = "1"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "a_bad"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_BAD", 1 )
  field_array [ array_count, 3 ] = "1"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "sigma"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_STD", 1 )
  field_array [ array_count, 3 ] = "11"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "trend_b"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_TREND", 1 )
  field_array [ array_count, 3 ] = "1"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "b_bad"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_BAD", 1 )
  field_array [ array_count, 3 ] = "1"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "range"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_RANGE", 1 )
  field_array [ array_count, 3 ] = "8"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "comments"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_COMMENTS", 1 )
  field_array [ array_count, 3 ] = "11"

ENDROUTINE

{******************************************************************************}

ROUTINE define_cusum_fields ( field_array )

{ 
* Routine to define the fields for a CUSUM chart.
* 
* 
*
* Parameters   : field_array
* Return Value : n/a
*
*******************************************************************************}

  DECLARE array_count

  array_count = 1

  field_array [ array_count, 1 ] = "subgroup_number"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_NO", 1 )
  field_array [ array_count, 3 ] = "4"

  array_count = array_count + 1

  field_array [array_count, 1 ] = "subgroup_date"
  field_array [array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_DATE", 1 )
  field_array [array_count, 3 ] = "11"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "x_bar"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_VALUE", 1 )
  field_array [ array_count, 3 ] = "11"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "c_bad"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_BAD", 1 )
  field_array [ array_count, 3 ] = "3"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "cusum"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_CUSUM", 1 )
  field_array [ array_count, 3 ] = "10"

ENDROUTINE

{******************************************************************************}

ROUTINE define_proccap_fields ( field_array )

{ 
* Routine to define the fields for a Process Capability chart.
* 
* 
*
* Parameters   : field_array
* Return Value : n/a
*
*******************************************************************************}

  DECLARE array_count

  array_count = 1

  field_array [ array_count, 1 ] = "subgroup_number"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_NO", 1 )
  field_array [ array_count, 3 ] = "4"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "subgroup_date"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_DATE", 1 )
  field_array [ array_count, 3 ] = "11"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "x_bar"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_VALUE", 1 )
  field_array [ array_count, 3 ] = "10"

  array_count = array_count + 1

  field_array [ array_count, 1 ] = "a_bad"
  field_array [ array_count, 2 ] = GET_USER_MESSAGE ( "SQCWIN_HARD_BAD", 1 )
  field_array [ array_count, 3 ] = "1"

ENDROUTINE
