{Compared 20140123 /DKTBG}
{******************************************************************************
*
* Module Name   : $WORKSHEET.RPF
*
* Purpose       : Analysis Worksheet
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}
{**AS 2003R1}
{
MODIFICATION HISTORY

Vers Date
------ ----------- ---------------- -----------------------------------
1.1    22-MAR-2000 Ken Jacobs       Customisation in 3.1-0 transferred to here
                                    In routine build_new_standard
                                    Batch name of standard, included in the id_text
                                    of a standard.
2003R1 30-SEP-2003 Henrik Behrndt   Changes migrated to SM2003R1
}
{**AE2003R1}

SET COMPILE_OPTION 26_MODE

JOIN STANDARD_LIBRARY STD_LOGIN
JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_WINDOW
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN LIBRARY $WKSBROWSE
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $LIB_STAN

SET NOTPROTECTED
SET NAME "DEFER/"
SET CREATE FALSE
ENABLE WINDOWS
SET FORMAT "99999999"

{ Internal Constants }
CONSTANT ok_insert_standards = true
CONSTANT  st2 = "01 02 03 04 05 06 07 08 09 10 11 12 "
CONSTANT  wks_directory  = "smp$worksheets:"

CONSTANT anal_works_idv  = "TESTWKS   "
CONSTANT udw_works_idv   = "UDWKS     "
CONSTANT tprep_works_idv = "TESTPREP  "
CONSTANT pprep_works_idv = "SMPREPWKS "
CONSTANT smp_works_idv   = "SMPWKS    "

CONSTANT anal_idv   = "TEST_WORKSHEET"
CONSTANT smp_idv    = "SAMPLE_WORKSHEET"
CONSTANT tprep_idv  = "TEST_PREP_WORKSHEET"
CONSTANT udw_idv    = "DEFINED_WORKSHEET"
CONSTANT pprep_idv  = "SAMPLE_PREP_WORKSHEET"
CONSTANT anal_ext   = ".wsa"
CONSTANT udw_ext    = ".udw"
CONSTANT smp_ext    = ".wss"
CONSTANT pprep_ext  = ".wsp"
CONSTANT tprep_ext  = ".wst"

{ Sample, test data elements }

   { read at initial stage }

       CONSTANT test_num = 1
       CONSTANT sample_id = 2
       CONSTANT id_text = 3
       CONSTANT sample_type = 4
       CONSTANT replicate_no = 16
       CONSTANT comp_list = 17

   { calculated at initial stage }

       CONSTANT worksheet_string = 5


{ Standard elements - can be ignored until standard stage }

       CONSTANT new_entry = 6
       CONSTANT standard_string = 7
       CONSTANT standard_id = 8
       CONSTANT usage = 9

{ Sorting elements - can be discarded after sorting stage }

       CONSTANT test_job_name = 10
       CONSTANT test_priority = 11
       CONSTANT date_res_req = 12
       CONSTANT login_date = 13
       CONSTANT next_test = 14
       CONSTANT prev_test = 15
       CONSTANT samp_priority = 18

       CONSTANT link_no = 1
       CONSTANT param1  = 2
       CONSTANT param2  = 3
       CONSTANT param3  = 4

 { complete constants }

       CONSTANT completed = 4
       CONSTANT modifiable = 5
       CONSTANT next_comp = 6
       CONSTANT prev_comp = 7
       CONSTANT analysis_id = 8
       CONSTANT rep_no = 9
       CONSTANT complete_string = 10

{ Message Constants }
{ IPF 22/4/92 }

       CONSTANT NID = "WKS_NID_MESS"
       CONSTANT NIDT = "SAMPLE"
       CONSTANT NIDF = "ID_NUMERIC"

       CONSTANT TID = "WKS_TID_MESS"
       CONSTANT TIDT = "SAMPLE"
       CONSTANT TIDF = "ID_TEXT"

       CONSTANT PRI = "WKS_PRI_MESS"
       CONSTANT PRIT = "SAMPLE"
       CONSTANT PRIF = "PRIORITY"

       CONSTANT DLO = "WKS_DLO_MESS"
       CONSTANT DLOT = "SAMPLE"
       CONSTANT DLOF = "LOGIN_DATE"

       CONSTANT DRQ = "WKS_DRQ_MESS"
       CONSTANT DRQT = "SAMPLE"
       CONSTANT DRQF = "DATERESREQ"

       CONSTANT JOB = "WKS_JOB_MESS"
       CONSTANT JOBT = "SAMPLE"
       CONSTANT JOBF = "JOB_NAME"

       CONSTANT CUS = "WKS_CUS_MESS"
       CONSTANT CUST = "SAMPLE"
       CONSTANT CUSF = "CUSTOMER_ID"

       CONSTANT SPT = "WKS_SPT_MESS"
       CONSTANT SPTT = "SAMPLE"
       CONSTANT SPTF = "SAMPLING_POINT"

       CONSTANT PRJ = "WKS_PRJ_MESS"
       CONSTANT PRJT = "SAMPLE"
       CONSTANT PRJF = "PROJECT_ID"

       CONSTANT PRD = "WKS_PRD_MESS"
       CONSTANT PRDT = "SAMPLE"
       CONSTANT PRDF = "PRODUCT_NAME"

       CONSTANT BCH = "WKS_BCH_MESS"
       CONSTANT BCHT = "SAMPLE"
       CONSTANT BCHF = "BATCH_NAME"

       CONSTANT TYP = "WKS_TYP_MESS"
       CONSTANT TYPT = "SAMPLE"
       CONSTANT TYPF = "SAMPLE_TYPE"

       CONSTANT LOC = "WKS_LOC_MESS"
       CONSTANT LOCT = "SAMPLE"
       CONSTANT LOCF = "LOCATION_ID"

       CONSTANT TPR = "WKS_TPR_MESS"
       CONSTANT TPRT = "TEST"
       CONSTANT TPRF = "TEST_PRIORITY"

       CONSTANT DSA = "WKS_DSA_MESS"
       CONSTANT DSAT = "SAMPLE"
       CONSTANT DSAF = "SAMPLED_DATE"

       CONSTANT DRC = "WKS_DRC_MESS"
       CONSTANT DRCT = "SAMPLE"
       CONSTANT DRCF = "RECD_DATE"

       CONSTANT DES = "WKS_DES_MESS"
       CONSTANT DEST = "SAMPLE"
       CONSTANT DESF = "DESCRIPTION"

       CONSTANT NAM = "WKS_NAM_MESS"
       CONSTANT NAMT = "SAMPLE"
       CONSTANT NAMF = "SAMPLE_NAME"

 option = " "
 complete_smp_worksheet (option )
{**
 analysis_worksheet(option)
**}

 EXIT

{-----------------------------------------------------------------------------}

ROUTINE initialise_variables
{WriteToLog(" - ") }

       CREATE OBJECT "STD_OBJECT_DATABASE" , standards_db

       standards_db . initialise ( "STANDARD_VERSIONS" )

       ARRAY test_array        {  ARRAY_SIZE (0,18) - code relies on
                                             referencing element 0 }
       ARRAY remove_array        ARRAY_SIZE ( 0 )
       ARRAY single_insert_array
       ARRAY block_array         ARRAY_SIZE ( 0 )

 { sort array params }

       selected_standard = FALSE

       worksheet_count =  0   { no of tests on worksheet }
       wks_list_count  =  0   { no of tests on worksheet }
       number_to_save  =  0
       remove_count    =  0


       ARRAY sort_array
       sort_count = 0
       any_status = FALSE  { for regenerate sample_worksheet }
       no_jobs = 0
       ARRAY read_jobs

       ARRAY find_key

       find_key [1,1] = "*"
       find_key [1,2] = GET_USER_MESSAGE("WKS_FIND_OPTIONS ",1)
       find_key [1,3] = "$WORKSHEET_FIND_KEY"

       find_key [2,1] = "1"
       find_key [2,2] = find_key[2,1]:" ":
            GET_USER_MESSAGE("WKS_SEARCH_AGAIN   ",1)
       find_key [2,3] = find_key[2,1]

       find_key [3,1] = "2"
       find_key [3,2] = find_key[3,1]:" ":
            GET_USER_MESSAGE("WKS_INSERT_INSTEAD ",1)
       find_key [3,3] = find_key[3,1]

         ARRAY msort_array

         msort_array[1,1] = GET_USER_MESSAGE("WKS_ASC_TESTP",1)
         msort_array[1,2] = "P"
         msort_array[2,1] = GET_USER_MESSAGE("WKS_DESC_TESTP",1)
         msort_array[2,2] = "D"
         msort_array[3,1] = GET_USER_MESSAGE("WKS_JOB_NAME",1)
         msort_array[3,2] = "J"
         msort_array[4,1] = GET_USER_MESSAGE("WKS_DATERESREQ",1)
         msort_array[4,2] = "R"
         msort_array[5,1] = GET_USER_MESSAGE("WKS_TIMEINSYS",1)
         msort_array[5,2] = "L"
         msort_array[6,1] = GET_USER_MESSAGE("WKS_APDRR",1)
         msort_array[6,2] = "Q"
         msort_array[7,1] = GET_USER_MESSAGE("WKS_DPDRR",1)
         msort_array[7,2] = "E"
         msort_array[8,1] = GET_USER_MESSAGE("WKS_APTIS",1)
         msort_array[8,2] = "S"
         msort_array[9,1] = GET_USER_MESSAGE("WKS_DPTIS",1)
         msort_array[9,2] = "M"
         msort_array[10,1] = GET_USER_MESSAGE("WKS_ASPR",1)
         msort_array[10,2] = "A"
         msort_array[11,1] = GET_USER_MESSAGE("WKS_DSPR",1)
         msort_array[11,2] = "B"
         msort_array[12,1] = GET_USER_MESSAGE("WKS_ASPTP",1)
         msort_array[12,2] = "C"
         msort_array[13,1] = GET_USER_MESSAGE("WKS_DSPTP",1)
         msort_array[13,2] = "F"


         ARRAY sort_array1

         sort_array1[1,1] = GET_USER_MESSAGE("WKS_ASPR",1)
         sort_array1[1,2] = "A"
         sort_array1[2,1] = GET_USER_MESSAGE("WKS_DSPR",1)
         sort_array1[2,2] = "B"
         sort_array1[3,1] = GET_USER_MESSAGE("WKS_JOB_NAME",1)
         sort_array1[3,2] = "J"
         sort_array1[4,1] = GET_USER_MESSAGE("WKS_DATERESREQ",1)
         sort_array1[4,2] = "R"
         sort_array1[5,1] = GET_USER_MESSAGE("WKS_TIMEINSYS",1)
         sort_array1[5,2] = "L"


ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE initialise_variables_for_worksheet
{WriteToLog(" - ") }

        initialise_variables()

        CREATE TEXT WINDOW create_box
                HEIGHT 6
                WIDTH 70
                BORDER
        HELP CONTEXT = "$WORKSHEET_CREATE"

        CREATE TEXT WINDOW job_box
        HEIGHT 5
        WIDTH 51
        BORDER
        HELP CONTEXT = "$WORKSHEET_JOB"

        display_top_line (GET_USER_MESSAGE("WKS_JOB_BOX_HEAD  ",1),job_box,51)
        display_bottom_line (GET_USER_MESSAGE("WKS_JOB_BOX_FOOT  ",1)
        ,job_box,51,5,false)
        DISPLAY GET_USER_MESSAGE("WKS_JOB_BOX_MESS  ",1)
         IN WINDOW job_box ON LINE 3 FROM 2

    CREATE TEXT WINDOW header_box
        HEIGHT 1
        WIDTH 80
        HELP CONTEXT = "$WORKSHEET_HEADER1"

    CREATE TEXT WINDOW create_box1
        HEIGHT 3
        WIDTH 75
        BORDER
        HELP CONTEXT = "$WORKSHEET_BOX1"

    IF wks_type = "P" THEN
        DISPLAY centre_text(GET_USER_MESSAGE("WKS_PCOMPILE_MESS",1),75)
            IN WINDOW create_box1 ON LINE 2 FROM 1
    ELSE
        DISPLAY centre_text(GET_USER_MESSAGE("WKS_COMPILE_MESS ",1),75)
            IN WINDOW create_box1 ON LINE 2 FROM 1
    ENDIF

    CREATE TEXT WINDOW flash_box
        HEIGHT 1
        WIDTH 80
        HELP CONTEXT = "$WORKSHEET_FLASH"

    CREATE TEXT WINDOW input_box
        HEIGHT 5
        WIDTH 44
        BORDER
        HELP CONTEXT = "$WORKSHEET_INPUT"

    CREATE TEXT WINDOW samps_sel_box
        HEIGHT 4
        WIDTH 24
        BORDER
        HELP CONTEXT = "$WORKSHEET_SAMPS"

    display_top_line(GET_USER_MESSAGE("WKS_SAMPS_SELECTED  ",1)
        ,samps_sel_box,24)
    DISPLAY GET_USER_MESSAGE("WKS_SELECTED_TEST   ",1)
        IN WINDOW samps_sel_box ON LINE 3 FROM 2
    DISPLAY GET_USER_MESSAGE("WKS_SELECTED_SAMPLE ",1)
        IN WINDOW samps_sel_box ON LINE 4 FROM 2


ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_file_error ( status )
{WriteToLog(" - ") }

    DECLARE message

    message_fetch ( "WKS_FILE_ERROR", message )

    message_add_parameter ( message , status )

    message = message_get_text ( message , 1 )

        flash_message ( message , true )

ENDROUTINE

{-----------------------------------------------------------------------------}
{ ANALYSIS_WORKSHEET
    This is the main entry routine for generating analysis worksheets     }
{-----------------------------------------------------------------------------}

 GLOBAL ROUTINE analysis_worksheet( option)
{WriteToLog(" - ") }

     SET FORMAT ("99999999")
     wks_extension = anal_ext
     wks_type = "A"
     status_required = "V"
     do_generation ( anal_works_idv )

ENDROUTINE

{-----------------------------------------------------------------------------}
{ TEST_PREP_WORKSHEET
    This is the main entry routine for generating test preparation
        worksheets                                                            }
{-----------------------------------------------------------------------------}

 GLOBAL ROUTINE test_prep_worksheet( option)
{WriteToLog(" - ") }

     SET FORMAT ("99999999")
     wks_extension = tprep_ext
     wks_type = "T"
     status_required = "W"
     do_generation ( tprep_works_idv )

 ENDROUTINE

{-----------------------------------------------------------------------------}
{ SAMP_PREP_WORKSHEET
    This is the main entry routine for generating sample preparation
        worksheets                                                            }
{-----------------------------------------------------------------------------}

 GLOBAL ROUTINE samp_prep_worksheet( option)
{WriteToLog(" - ") }

     SET FORMAT ("99999999")
     wks_extension = pprep_ext
     wks_type = "P"
     status_required = "W"
     do_generation ( pprep_works_idv )

 ENDROUTINE

{-----------------------------------------------------------------------------}
GLOBAL ROUTINE complete_a_worksheet ( VALUE  worksheet_id,
                      VALUE  ext_type    )
{WriteToLog(" - ") }

      SET FORMAT ("99999999")
      wks_extension = ext_type
      mode_required = "C"
      IF     ext_type = ".wsa" THEN
             wks_type = "A"
             doption  = "C"
             idv_name = anal_works_idv

      ELSEIF ext_type = ".udw" THEN
             wks_type = "A"
             doption  = "C"
             idv_name = udw_works_idv

      ELSEIF ext_type = ".wss" THEN
             wks_type = "S"
             doption  = "C"
             idv_name = smp_works_idv

      ELSEIF ext_type = ".wsp" THEN
             wks_type = "P"
             doption  = "P"
             idv_name = pprep_works_idv

      ELSEIF ext_type = ".wst" THEN
             wks_type = "T"
             doption  = "T"
             idv_name = tprep_works_idv

      ENDIF
      initialise_variables_for_worksheet()

      { Make filename lowercase for Unix }

      wks_file = TOLOWER ( STRIP ( worksheet_id )) : STRIP ( ext_type )

      wks_file = lib_utils_logical_containing_file ( wks_directory , wks_file ) : "\" : wks_file

      IF valid_worksheet_file() THEN
         IF perform_option(doption,wks_file) THEN
            FILE DELETE wks_file, status
            flash_message ( "WKS_COMP_WKS" , false )
            have_completed = true
            { #SUSAND 19/5/92 Bug 1284. Commit changes }
            COMMIT
         ELSE
            flash_message ( "WKS_NO_COMP_WKS" , false )
            have_completed = false
         ENDIF
      ENDIF
      RETURN(have_completed)

ENDROUTINE

{-----------------------------------------------------------------------------}


 GLOBAL ROUTINE complete_worksheet (option )
{WriteToLog(" - ") }

      DECLARE status , form

      SET FORMAT ("99999999")
      wks_extension = anal_ext
      wks_type = "A"
      initialise_variables_for_worksheet()

      start_worksheet_id_prompt ( form , "C" , anal_works_idv )

      WHILE get_worksheet_id ( form , "C" , anal_works_idv ,
                   wks_type , anal_ext , wks_file ) DO

            IF perform_option("C",wks_file) THEN
               FILE DELETE wks_file, status
               flash_message ( "WKS_COMP_WKS" , false )
            ELSE
               flash_message ( "WKS_NO_COMP_WKS" , false )
            ENDIF

        COMMIT

      ENDWHILE

      end_worksheet_id_prompt ( form )

 ENDROUTINE

{-----------------------------------------------------------------------------}

 GLOBAL ROUTINE complete_udw_worksheet (option )
{WriteToLog(" - ") }

      DECLARE status , form

      SET FORMAT ("99999999")
      wks_type = "A"
      initialise_variables_for_worksheet()

      start_worksheet_id_prompt ( form , "C" , udw_works_idv )

      WHILE get_worksheet_id ( form , "C" , udw_works_idv ,
                   wks_type , udw_ext , wks_file ) DO
            IF perform_option("C",wks_file) THEN
               FILE DELETE wks_file, status
               flash_message ( "WKS_COMP_WKS" , false )
            ELSE
               flash_message ( "WKS_NO_COMP_WKS" , false )
            ENDIF

        COMMIT

      ENDWHILE

      end_worksheet_id_prompt ( form )

 ENDROUTINE

{-----------------------------------------------------------------------------}

 GLOBAL ROUTINE complete_tprep_worksheet (option )
{WriteToLog(" - ") }

      DECLARE status , form

      SET FORMAT ("99999999")
      wks_type = "T"
      initialise_variables_for_worksheet()

      start_worksheet_id_prompt ( form , "C" , tprep_works_idv )

      WHILE get_worksheet_id ( form , "C" , tprep_works_idv ,
                   wks_type , tprep_ext , wks_file ) DO
            IF perform_option("T",wks_file) THEN
               FILE DELETE wks_file, status
               flash_message ( "WKS_COMP_WKS" , false )
            ELSE
               flash_message ( "WKS_NO_COMP_WKS" , false )
            ENDIF

        COMMIT

      ENDWHILE

      end_worksheet_id_prompt ( form )

 ENDROUTINE

{-----------------------------------------------------------------------------}

 GLOBAL ROUTINE complete_pprep_worksheet (option )
{WriteToLog(" - ") }

      DECLARE status , form
      SET FORMAT ("99999999")
      wks_type = "P"
      initialise_variables_for_worksheet()

      start_worksheet_id_prompt ( form , "C" , pprep_works_idv )

      WHILE get_worksheet_id ( form , "C" , pprep_works_idv ,
                   wks_type , pprep_ext , wks_file ) DO

            IF perform_option("P",wks_file) THEN
               FILE DELETE wks_file, status
               flash_message ( "WKS_COMP_WKS" , false)
            ELSE
               flash_message ( "WKS_NO_COMP_WKS" , false)
            ENDIF

            COMMIT

      ENDWHILE

      end_worksheet_id_prompt ( form )

 ENDROUTINE

{-----------------------------------------------------------------------------}

 GLOBAL ROUTINE complete_smp_worksheet (option )
{WriteToLog(" - ") }

      DECLARE status , form
      SET FORMAT ("99999999")
      wks_type = "S"
      initialise_variables_for_worksheet()

      start_worksheet_id_prompt ( form , "C" , smp_works_idv )

      WHILE get_worksheet_id ( form , "C" , smp_works_idv ,
                   wks_type , smp_ext , wks_file ) DO

            IF perform_option("C",wks_file) THEN
               clear_sample(worksheet_id)
               FILE DELETE wks_file, status
               flash_message ( "WKS_COMP_WKS" , false)
            ELSE
               flash_message ( "WKS_NO_COMP_WKS" , false)
            ENDIF

        COMMIT

      ENDWHILE

      end_worksheet_id_prompt ( form )

 ENDROUTINE

{-----------------------------------------------------------------------------}

 GLOBAL ROUTINE regen_smp_worksheet (option )
{WriteToLog(" - ") }

      DECLARE status , form

      SET FORMAT ("99999999")
      wks_extension = smp_ext
      wks_type = "S"
      status_required = "V"
      initialise_variables_for_worksheet()

      start_worksheet_id_prompt ( form , "R" , smp_works_idv )

      any_status = true

      WHILE get_worksheet_id ( form , "R" , smp_works_idv ,
                   wks_type , smp_ext , wks_file ) DO
            IF perform_option("R",wks_file) THEN
               flash_message ( "WKS_REG_WKS" , false)
            ELSE
               flash_message ( "WKS_NO_REG_WKS" , false)
            ENDIF

        COMMIT

      ENDWHILE

      end_worksheet_id_prompt ( form )

 ENDROUTINE

{-----------------------------------------------------------------------------}

 GLOBAL ROUTINE cancel_worksheet (option )
{WriteToLog(" - ") }

      DECLARE status , form

      SET FORMAT ("99999999")
      wks_type = "A"
      initialise_variables_for_worksheet()

      start_worksheet_id_prompt ( form , "D" , anal_works_idv )

      WHILE get_worksheet_id ( form , "D" , anal_works_idv ,
                   wks_type , anal_ext , wks_file ) DO

            IF perform_option("D",wks_file) THEN
               FILE DELETE wks_file, status
               flash_message ( "WKS_CANC_WKS" , false)
            ELSE
               flash_message ( "WKS_NO_CANC_WKS" , false)
            ENDIF

        COMMIT

      ENDWHILE

      end_worksheet_id_prompt ( form )

 ENDROUTINE

{-----------------------------------------------------------------------------}

 GLOBAL ROUTINE create_mc_rsf (option)
{WriteToLog(" - ") }

   SET FORMAT ("99999999")
   IF create_new_wks() THEN
     option = " "
     worksheet_name = " "
     analysis_worksheet(option)
     IF NOT blank(worksheet_name) THEN
        CALL_ROUTINE "analysis_rsf" USING worksheet_name IN LIBRARY "$MCRSF_WSA"
     ENDIF
   ELSE
      wks_extension = anal_ext
      wks_type = "A"
      initialise_variables_for_worksheet()

      start_worksheet_id_prompt ( form , "M" , anal_works_idv )

      WHILE get_worksheet_id ( form , "M" , anal_works_idv ,
                   wks_type , anal_ext , wks_file ) DO
           CALL_ROUTINE "analysis_rsf" USING worksheet_id IN LIBRARY "$MCRSF_WSA"
      ENDWHILE

      end_worksheet_id_prompt ( form )

   ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

 GLOBAL ROUTINE defined_mc_rsf (option)
{WriteToLog(" - ") }

   SET FORMAT ("99999999")
      wks_extension = udw_ext
      wks_type = "A"
      initialise_variables_for_worksheet()

      start_worksheet_id_prompt ( form , "M" , udw_works_idv )

      WHILE get_worksheet_id ( form , "M" , udw_works_idv,
                   wks_type , udw_ext , wks_file ) DO
           CALL_ROUTINE "defined_rsf" USING worksheet_id IN LIBRARY "$MCRSF_WSA"
      ENDWHILE

      end_worksheet_id_prompt ( form )

 ENDROUTINE

{-----------------------------------------------------------------------------}


ROUTINE do_generation ( VALUE idv_required )
{WriteToLog(" - ") }

    DECLARE worksheet_form

    SET CREATE FALSE

    IF global ( "TERMTYPE" ) = "GUI" THEN

        worksheet_create_form ( worksheet_form )

        worksheet_process_form ( worksheet_form , idv_required )

    ELSE

        IF generating_routines_for_worksheet() THEN

                IF process_routines_for_worksheet(idv_required) THEN

                    saving_routines_for_worksheet(number_to_save)
                ENDIF
            ENDIF
    ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE create_new_wks
{WriteToLog(" - ") }

         CREATE TEXT WINDOW rsf_box
                HEIGHT 3
                WIDTH 46
                BORDER
        HELP CONTEXT = "$WORKSHEET_RSF"


         do_wks = false
         DISPLAY GET_USER_MESSAGE("WKS_NEW_WKS_FOR_RSF ",1) IN WINDOW rsf_box
                                             ON LINE 2 FROM 2

         PASTE TEXT WINDOW rsf_box ON LINE 12 FROM 17

         PROMPT FOR do_wks IN WINDOW rsf_box ON LINE 2 FROM 42
                                                BROWSE ON BOOLEAN
         IF LASTKEY = "EXIT" THEN
            EXIT
         ENDIF

         RETURN(do_wks)

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE start_worksheet_id_prompt (       form          ,
                     VALUE mode_required ,
                                     VALUE idv_name      )
{WriteToLog(" - ") }

    DECLARE title_text , id_message , prompt_obj , return_val ,
        help_context

        IF mode_required = "C" THEN

                title_text = GET_USER_MESSAGE ( "WKS_COMP_WKS_HEAD", 1 )

        ELSEIF mode_required = "D" THEN

                title_text = GET_USER_MESSAGE ( "WKS_CANC_WKS_HEAD", 1 )

        ELSEIF mode_required = "M" THEN

                title_text = GET_USER_MESSAGE ( "WKS_RSF_WKS_HEAD" , 1 )

        ELSEIF mode_required = "R" THEN

                title_text = GET_USER_MESSAGE ( "WKS_REG_WKS_HEAD" , 1 )

        ENDIF

        id_message = GET_USER_MESSAGE ( "WKS_GET_WKS_ID" , 1 )

    IF idv_name = smp_works_idv THEN
            form_width = length ( id_message ) + 35
    ELSE
            form_width = length ( id_message ) + 25
    ENDIF

        PROMPT OBJECT form
                CLASS PROMPT_CLASS_FORM
                WITH ( header = title_text ,
                       footer = GET_USER_MESSAGE("WKS_WKS_ACT_FOOT",1),
                       height = 1          ,
                       width  = form_width ,
                       row    = 12         ,
                       column = 12         )

        PROMPT OBJECT prompt_obj
                FORMAT TEXT
                WITH ( row    = 1                           ,
                       column = 1                           ,
                       width  = stringlength ( id_message ) ,
                       value  = id_message                  ,
                       bold   = TRUE                        )

        form . add_display ( prompt_obj )

    IF idv_name = smp_works_idv THEN

            PROMPT OBJECT prompt_obj
                    BROWSE ON sample_worksheet
                    WITH ( row            = 1                         ,
                           column         = length ( id_message ) + 2 ,
                           user_info      = idv_name                  )

    ELSE

            PROMPT OBJECT prompt_obj
                    BROWSE ON TEXT_20
                    WITH ( row            = 1                         ,
                           column         = length ( id_message ) + 2 ,
                           browse_routine = "worksheet_browse_on_wks" ,
                           user_info      = idv_name                  ,
                   status_text    = id_message                ,
                       uppercase      = TRUE                      )

    ENDIF

        form . add_prompt ( prompt_obj )

    form . user_info = prompt_obj

        form . start_prompt ( )

        worksheet_param_active = GLOBAL ("PARAM_ACTIVE")

ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE get_worksheet_id (       form          ,
                VALUE mode_required ,
                VALUE idv_name      ,
                VALUE wks_type      ,
                            VALUE wks_ext       ,
                                  wks_file      )
{WriteToLog(" - ") }

    DECLARE return_val

    return_val = FALSE

    IF GLOBAL ("PARAM_ACTIVE") THEN

        PROMPT FOR worksheet_id ON LINE 3 FROM 22

            IF LASTKEY = "EXIT" THEN

                RETURN(false)
            ENDIF

            IF wks_type = "S" THEN

            worksheet_id = JUSTIFY ( PAD ( STRIP ( worksheet_id ),
                                       " "           ,
                               10                    ),
                         "RIGHT"                      )
            ENDIF

        wks_file = TOLOWER ( STRIP ( worksheet_id )) : STRIP ( wks_ext )

        wks_file = lib_utils_logical_containing_file ( wks_directory , wks_file ) : "\" : wks_file

            IF blank ( worksheet_id ) THEN

            return_val = FALSE
        ELSE
            form . user_info . set_text ( worksheet_id )
            return_val = valid_worksheet_file ( )
            ENDIF

    ELSEIF worksheet_param_active THEN

        return_val = FALSE

    ELSE

        form . wait_prompt ( )

        worksheet_id = form . user_info . text

            IF wks_type = "S" THEN

            worksheet_id = JUSTIFY ( PAD ( STRIP ( worksheet_id ),
                                       " "           ,
                               10                    ),
                         "RIGHT"                      )
            ENDIF

        IF form . get_lastkey ( ) = "DO" THEN

            { Make filename lowercase for Unix }

            wks_file = TOLOWER ( STRIP ( worksheet_id )) : STRIP ( wks_ext )

            wks_file = lib_utils_logical_containing_file ( wks_directory , wks_file ) : "\" : wks_file

                IF blank ( worksheet_id ) THEN
                return_val = FALSE
            ELSE
                return_val = valid_worksheet_file ( )
                ENDIF

        ENDIF

    ENDIF

        RETURN ( return_val )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE end_worksheet_id_prompt ( form )
{WriteToLog(" - ") }

    form . end_prompt ( )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_browse_on_wks ( self )
{WriteToLog(" - ") }

    IF ( browse_on_worksheet ( self . user_info ,
                               self . text      ) )

        self . repaste ( )
    ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE valid_worksheet_file
{WriteToLog(" - ") }

         IF FILE EXISTS (wks_file) THEN
            START READ TRANSACTION "worksheets"
            IF mode_required <> "M" THEN
               find_idv = SELECT worksheet.identity
                          FOR UPDATE
                          WHERE ( worksheet_type = idv_name   )
                          AND   ( identity = worksheet_id )
               IF find_idv = locked THEN
                  lock_flag_on()
                  ON CONTROL_C
                     RETURN(false)
                  ENDON
                  REPEAT
                    ROLLBACK
                    find_idv = SELECT worksheet.identity
                               FOR UPDATE
                               WHERE ( worksheet_type = idv_name   )
                               AND   ( identity = worksheet_id )
                    IF find_idv = locked THEN
                       SLEEP FOR ("0 00:00:01")
                    ENDIF
                  UNTIL (find_idv <> locked)
                  lock_flag_off()
               ENDIF
               IF find_idv <> empty THEN
                  RETURN(true)
               ELSE
                  flash_message(GET_USER_MESSAGE("WKS_RECORD_NOT_FOUND ",1)
                :worksheet_id,true)
                  RETURN(false)
               ENDIF
            ELSE
               RETURN(true)
            ENDIF
         ELSE
            flash_message(GET_USER_MESSAGE("WKS_FILE_NOT_FOUND   ",1):wks_file,
              true)
            RETURN(false)
         ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE  generating_routines_for_worksheet
{WriteToLog(" - ") }

     success = false
     initialise_variables_for_worksheet()
     IF get_worksheet_generation_parameters(id_for_search, sort_mode, wks_job)
    THEN
        PASTE TEXT WINDOW create_box1 ON LINE 12 FROM 3
        PASTE TEXT WINDOW samps_sel_box ON LINE 15 FROM 50
        IF wks_type = "A" THEN
           select_tests_for_worksheet(test_array,worksheet_count,id_for_search,
                      wks_job,true)

        ELSEIF wks_type = "T" THEN
           select_test_prep_worksheet(test_array,worksheet_count,id_for_search,
                      wks_job,true)

        ELSEIF wks_type = "P" THEN
           select_sample_prep_worksheet(test_array,worksheet_count,
                                        id_for_search, wks_job, true )
        ENDIF

        UNPASTE TEXT WINDOW create_box1
        UNPASTE TEXT WINDOW samps_sel_box
        max_tests = worksheet_count
        IF (worksheet_count <= 0 ) THEN
           IF wks_type = "A" THEN
              flash_message ( "WKS_NO_TESTS" , false)

           ELSEIF wks_type = "T" THEN
              flash_message ( "WKS_NO_TESTS_PREP" , false)

           ELSEIF wks_type = "P" THEN
              flash_message ( "WKS_NO_SAMPS" , false)

           ENDIF
        ELSE
       success = true
        ENDIF
     ENDIF
     RETURN(success)
 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE process_routines_for_worksheet(VALUE idv_name)
{WriteToLog(" - ") }


     set_up_screens()
     REPEAT
        IF modify_list() THEN
           display_tests(test_array, wks_list_count)
           REPEAT
              number_to_save = get_number_to_save()
              IF number_to_save > 0 THEN
{ IPF 22/4/92 }
                 IF now_creating_worksheet(idv_name) THEN
                    RETURN(true)
                 ELSE
            RETURN(false)
         ENDIF
              ENDIF
           UNTIL number_to_save = 0
        ELSE
           RETURN(false)
        ENDIF
     UNTIL false

 ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE now_creating_worksheet(idv_name)
{WriteToLog(" - ") }

{ IPF 22/4/9 }

           worksheet_name = generate_worksheet_name(id_for_search)
           IF wks_type = "A" THEN
              IF (GLOBAL("WSHTSTAN") AND ok_insert_standards) THEN
                 IF insert_standards(test_array,number_to_save) THEN
                    create_idv_entry(worksheet_name, unique_number,idv_name)
            RETURN(true)
            ELSE
            RETURN(false)
                ENDIF
         ELSE
                create_idv_entry(worksheet_name, unique_number,idv_name)
            RETURN(true)
             ENDIF
       ELSE
             create_idv_entry(worksheet_name, unique_number,idv_name)
         RETURN(true)
       ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE saving_routines_for_worksheet(number_to_save)
{WriteToLog(" - ") }

   IF save_worksheet (worksheet_name, unique_number, wks_operator,
                      id_for_search, test_array ) THEN
      show_final_message(worksheet_name)
      COMMIT
   ELSE
      flash_message ( "WKS_NO_GEN_WORK" , false )
   ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}
{ Prompt for the job to use when selecting tests                              }
{-----------------------------------------------------------------------------}

GLOBAL ROUTINE prompt_for_job (job_selected)
{WriteToLog(" - ") }

         PASTE TEXT WINDOW job_box ON LINE 18 FROM 20
         job_selected = " "
         valid_entry = false
         WHILE NOT valid_entry DO

            PROMPT FOR job_selected IN WINDOW job_box ON LINE 3 FROM
               24 BROWSE ON job_header

            IF LASTKEY = "EXIT" THEN
               RETURN(false)
            ELSEIF  (INDEX("DORETURNUPDOWN",LASTKEY) > 0) THEN
               IF job_already_used(job_selected) THEN
                  flash_message ( "WKS_JOB_IS_ALREADY_USED" , true )
               ELSEIF confirm() THEN
                  valid_entry = true
               ENDIF
            ENDIF

         ENDWHILE
         IF job_selected = " " THEN
        no_job = true
            initialise_variables()
         ELSE
        no_job = false
         ENDIF
         UNPASTE TEXT WINDOW job_box
         RETURN(true)

 ENDROUTINE
{-----------------------------------------------------------------------------}


 ROUTINE get_worksheet_generation_parameters(id_for_search, sort_mode,
                        wks_job)
{WriteToLog(" - ") }



         IF wks_type = "A" THEN
            display_top_line(GET_USER_MESSAGE("WKS_GEN_ANAL_HEAD  ",1)
                 ,create_box,70)
            DISPLAY GET_USER_MESSAGE("WKS_GEN_ANAL_ID",1)
         IN WINDOW create_box ON LINE 3 FROM 2 BOLD
            search_table = "analysis"
         ELSEIF wks_type = "T" THEN
            display_top_line(GET_USER_MESSAGE("WKS_GEN_PREP_HEAD  ",1)
                     ,create_box,70)
            DISPLAY GET_USER_MESSAGE("WKS_GEN_PREP_ID    ",1)
        IN WINDOW create_box ON LINE 3 FROM 2 BOLD

            search_table = "preparation"
         ELSEIF wks_type = "P" THEN
            display_top_line(GET_USER_MESSAGE("WKS_GEN_SPREP_HEAD ",1)
                 ,create_box,70)
            DISPLAY GET_USER_MESSAGE("WKS_GEN_PREP_ID    ",1)
        IN WINDOW create_box ON LINE 3 FROM 2 BOLD

            search_table = "preparation"
         ENDIF

         DISPLAY GET_USER_MESSAGE("WKS_THE_SORT_MODE  ",1)
        IN WINDOW create_box ON LINE 4 FROM 2 BOLD

         display_bottom_line(GET_USER_MESSAGE("WKS_CR_BOX_FOOT    ",1)
        ,create_box,70,6,false)


         PASTE TEXT WINDOW create_box ON LINE 16 FROM 3

         REPEAT
            id_for_search = " "
            PROMPT FOR id_for_search IN WINDOW create_box ON LINE 3
                        FROM 22 BROWSE ON 'search_table'
            IF LASTKEY = "EXIT" THEN
               RETURN(false)
            ENDIF

         UNTIL id_for_search <> " "
         IF (GLOBAL( "WSHTSORT") = " ")|(GLOBAL("WSHTSORT") = empty) THEN
            sort_mode = "P"
         ELSE
            sort_mode = GLOBAL("WSHTSORT")
         ENDIF

         REPEAT

            IF wks_type = "P" THEN
               PROMPT for sort_mode IN WINDOW create_box ON LINE 4 FROM 22
                          CHOOSE OUTOF sort_array1
            ELSE

               PROMPT for sort_mode IN WINDOW create_box ON LINE 4 FROM 22
                          CHOOSE OUTOF msort_array
            ENDIF
            IF LASTKEY = "EXIT" THEN
               RETURN(false)
            ENDIF

         UNTIL (LASTKEY = "DO")|(LASTKEY = "RETURN")

         is_ok = prompt_for_job(wks_job)
         UNPASTE TEXT WINDOW create_box
         RETURN ( is_ok )

 ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE job_already_used ( VALUE job_for_search )
{WriteToLog(" - ") }

  DECLARE count,found

     found = false
     IF job_for_search <> " " THEN
        count = 1
        WHILE (count <= no_jobs) AND (NOT found) DO
             IF read_jobs[no_jobs] = job_for_search THEN
            found = true
             ELSE
                count = count + 1
             ENDIF
        ENDWHILE
        IF NOT found THEN
           no_jobs = no_jobs + 1
       read_jobs[no_jobs] = job_for_search
        ENDIF
     ELSEIF no_jobs > 0 THEN
    flash_message ( "WKS_DESTROY_LIST" , true)
     ENDIF
     RETURN(found)

ENDROUTINE
{-----------------------------------------------------------------------------}
ROUTINE update_counter
{WriteToLog(" - ") }

        worksheet_count = worksheet_count + 1
        wks_list_count = wks_list_count + 1

    IF GLOBAL ( "TERMTYPE" ) <> "GUI" THEN

            DISPLAY worksheet_count
            IN WINDOW samps_sel_box
            ON LINE 3 FROM 14

            DISPLAY sampid
            IN WINDOW samps_sel_box
            ON LINE 4 FROM 14
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

{ PT - 28/2/92. Routine to store test information into next record in test list
  Pass a flag indicating if test record has been selected as well as sample,
  and do the sort flag }

ROUTINE store_test_information( VALUE store_test,
                                VALUE do_sort)
{WriteToLog(" - ") }

   update_counter()

   test_array[ worksheet_count, sample_id]     = SELECT sample.id_numeric
   test_array[ worksheet_count, id_text]       = SELECT sample.id_text
   test_array[ worksheet_count, test_job_name] = SELECT sample.job_name
   test_array[ worksheet_count, dateresreq]    = SELECT sample.dateresreq
   test_array[ worksheet_count, login_date]    = SELECT sample.login_date
   test_array[ worksheet_count, samp_priority] = SELECT sample.priority
   test_array[ worksheet_count, sample_type]   = SELECT sample.sample_type
   IF (test_array[ worksheet_count, sample_type] = " ") OR
      (test_array[ worksheet_count, sample_type] = EMPTY) THEN
      test_array[ worksheet_count, sample_type] = "SAMPLE"
   ENDIF

   IF store_test THEN
      test_array[ worksheet_count, test_num]      = SELECT test.test_number
      test_array[ worksheet_count, test_priority] = SELECT test.test_priority
      test_array[ worksheet_count, comp_list]     = SELECT test.component_list
      test_array[ worksheet_count, replicate_no]  = PAD(STRIP(SELECT test.test_count)," ",2)
   ENDIF

   test_array[ worksheet_count, worksheet_string] = PAD( build_string_for_worksheet( wks_type), " ", 77)
   test_array[ worksheet_count, standard_string]  = build_standard_string( worksheet_count)
   test_array[ worksheet_count, standard_id ] =  " "
   test_array[ worksheet_count, usage] = 0
   test_array[ worksheet_count, new_entry] = false
   test_array[ worksheet_count, next_test] = 0
   test_array[ worksheet_count, prev_test] = worksheet_count - 1

   IF worksheet_count > 1 THEN
      test_array[ worksheet_count - 1, next_test] = worksheet_count
   ENDIF

   IF do_sort THEN
      save_sort()
   ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_check_key
{WriteToLog(" - ") }

    IF GLOBAL ( "TERMTYPE" ) = "GUI" THEN

        return_val = FALSE
    ELSE
        return_val = ( keypressed = "EXIT" )
    ENDIF

    return ( return_val )

ENDROUTINE

{-----------------------------------------------------------------------------}
{**AS 2003R1}
{**AS1264 JDy 9/8/2000  Check if Valid Group Id }
 ROUTINE Check_Group_Id ( VALUE the_group, VALUE groups, group_arr )
{WriteToLog(" - ") }

    grp_no = 0
    group_found = FALSE
    WHILE (grp_no < groups) AND (NOT group_found) DO
       grp_no = grp_no+1
       IF    group_arr[grp_no] = the_group
       THEN  group_found = TRUE
       ENDIF
    ENDWHILE
    RETURN ( group_found )
 ENDROUTINE
{**AE1264 JDy 9/8/2000  Check if Valid Group Id }
{**AE 2003R1}

 ROUTINE select_tests_for_worksheet( test_array          ,
                                     worksheet_count     ,
                                     VALUE id_for_search ,
                     VALUE job_for_search,
                     VALUE do_sort       )

{WriteToLog(" - ") }
                     
{**AS2003R1}
{**  1264 JDy 9/8/2000  Only include Tests that the user has access to according to
        Operator Group Setup        }
{**AE2003R1}
   START READ TRANSACTION "worksheets"
{**AS 2003R1}
{**AS1264 JDy 9/8/2000  Get Operator Groups }
   ARRAY oper_groups
   groups = 0
   grp_id = SELECT grouplink.group_id
         WHERE operator_id = OPERATOR
   WHILE (grp_id <> EMPTY) DO
      groups = groups+1
      oper_groups[groups] = grp_id
      NEXT grouplink
      grp_id = SELECT grouplink.group_id
   ENDWHILE
{**AE1264 JDy 9/8/2000  Get Operator Groups }
{**AE2003R1}

{ PT - 28/2/92 Change selection criteria depending on whether have a job name
    or not, in an attempt to speed things up a little }

   IF (no_job) THEN

      testid = SELECT test.test_number
                WHERE (analysis  = id_for_search)
                  AND (status    = "V")
                  AND (worksheet = 0)

      interrupt = false
      WHILE (test_id <> empty) AND (NOT interrupt) DO

         sampid = SELECT sample. id_numeric
                   WHERE (id_numeric = SELECT test.sample)

         IF (sampid <> EMPTY) AND
            (SELECT sample.status   = "V") AND

{**AS 2003R1}
{**AS1264 JDy 9/8/2000  Get Operator Groups }
        (check_group_id(SELECT sample.group_id, groups, oper_groups)) AND
{**AE1264 JDy 9/8/2000  Get Operator Groups }
{**AE2003R1}

            (SELECT sample.standard = FALSE) THEN
            store_test_information( TRUE, do_sort)
         ENDIF

         IF worksheet_check_key ( ) THEN
            interrupt = TRUE { force an exit from the search loop }
         ELSE
            NEXT test
            test_id = SELECT test.test_number
         ENDIF

      ENDWHILE

{ Otherwise do search on job name }

   ELSE

      sampid = SELECT sample. id_numeric
                WHERE (job_name      = job_for_search)
                  AND (status        = "V")
                  AND (standard      = FALSE)

      interrupt = false
      WHILE (sampid <> empty) AND (NOT interrupt) DO

{**AS 2003R1}
{**AS1264 JDy 9/8/2000  Check Sample Group }
         testid = EMPTY
     IF   (check_group_id(SELECT sample.group_id, groups, oper_groups)) THEN
{**AE1264 JDy 9/8/2000  }
{**AE 2003R1}
         testid = SELECT test. test_number
                   WHERE (sample    = sampid)
                     AND (analysis  = id_for_search)
                     AND (status    = "V")
                     AND (worksheet = 0)
{**AS 2003R1}
{**AS1264 JDy 9/8/2000  }
     ENDIF
{**AE1264 JDy 9/8/2000  }
{**AE 2003R1}
         WHILE (testid <> empty) AND (NOT interrupt) DO

            store_test_information( TRUE, do_sort)
            IF keypressed = "EXIT" THEN
               interrupt = TRUE { force an exit from the search loop }
            ELSE
               NEXT test
               testid = SELECT test. test_number
            ENDIF
         ENDWHILE
         IF keypressed = "EXIT" THEN
            interrupt = TRUE { force an exit from the search loop }
         ELSE
            NEXT sample
            sampid = SELECT sample. id_numeric
         ENDIF
      ENDWHILE
   ENDIF

{ Make sure sorted correctly }

   IF (worksheet_count > 0) AND do_sort THEN
      reorder_list_from_sort()
   ENDIF

ENDROUTINE


{-----------------------------------------------------------------------------}

 ROUTINE select_test_prep_worksheet( test_array          ,
                                     worksheet_count     ,
                                     VALUE id_for_search ,
                     VALUE job_for_search,
                     VALUE do_sort       )
{WriteToLog(" - ") }

   START READ TRANSACTION "worksheets"

{ PT - 28/2/92 Change selection criteria depending on whether have a job name
    or not, in an attempt to speed things up a little }

   IF (no_job) THEN

      test_id = SELECT test.test_number
                 WHERE (preparation = id_for_search)
                   AND (status      = "W")
                   AND (worksheet   = 0)

      interrupt = false
      WHILE (test_id <> empty) AND (NOT interrupt) DO

         sampid = SELECT sample. id_numeric
                   WHERE (id_numeric = SELECT test.sample)

         IF (sampid <> EMPTY) AND
            (SELECT sample.status   = "V") AND
            {(SELECT sample.on_wks   = FALSE) AND IPF bug 763 22/4/92 }
            (SELECT sample.standard = FALSE) THEN
            store_test_information( TRUE, do_sort)
         ENDIF
         IF keypressed = "EXIT" THEN
            interrupt = TRUE { force an exit from the search loop }
         ELSE
            NEXT test
            test_id = SELECT test.test_number
         ENDIF
      ENDWHILE


{ Otherwise do search on job name }

   ELSE

      sampid = SELECT sample. id_numeric
                WHERE (job_name      = job_for_search)
                  AND (status        = "V")
                  AND (standard      = FALSE)
                  AND (on_wks        = FALSE)

      interrupt = false
      WHILE (sampid <> empty) AND (NOT interrupt) DO

         testid = SELECT test. test_number
                   WHERE (sample      = sampid)
                     AND (preparation = id_for_search)
                     AND (status      = "W")
                     AND (worksheet   = 0)

         WHILE (testid <> empty) AND (NOT interrupt) DO

            store_test_information( TRUE, do_sort)
            IF keypressed = "EXIT" THEN
               interrupt = TRUE { force an exit from the search loop }
            ELSE
               NEXT test
               testid = SELECT test. test_number
            ENDIF
         ENDWHILE
         IF keypressed = "EXIT" THEN
            interrupt = TRUE { force an exit from the search loop }
         ELSE
            NEXT sample
            sampid = SELECT sample. id_numeric
         ENDIF
      ENDWHILE
   ENDIF

{ Make sure sorted correctly }

   IF (worksheet_count > 0) AND do_sort THEN
      reorder_list_from_sort()
   ENDIF

ENDROUTINE


{-----------------------------------------------------------------------------}

 ROUTINE select_sample_prep_worksheet( test_array          ,
                                       worksheet_count     ,
                                       VALUE id_for_search ,
                       VALUE job_for_search,
                       VALUE do_sort       )
{WriteToLog(" - ") }

      START READ TRANSACTION "worksheets"

      IF no_job THEN
         sampid = SELECT sample.id_numeric
                  WHERE (preparation = id_for_search)
                    AND (status   = "W")
                    AND (standard = FALSE)
                    AND (on_wks   = FALSE)
      ELSE
         sampid = SELECT sample.id_numeric
                  WHERE (job_name = job_for_search)
                    AND (preparation = id_for_search)
                    AND (status = "W")
                    AND (standard = FALSE)
                    AND (on_wks   = FALSE)
      ENDIF

      interrupt = false

      WHILE (sampid <> empty) AND (NOT interrupt) DO

         store_test_information( FALSE, do_sort)
         IF keypressed = "EXIT" THEN
            interrupt = true { force an exit from the search loop }
         ELSE
            NEXT sample
            sampid = SELECT sample.id_numeric
         ENDIF

      ENDWHILE

      IF (worksheet_count > 0) AND do_sort THEN
         reorder_list_from_sort()
      ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

GLOBAL ROUTINE build_string_for_udworksheet ( VALUE noanal,
                          VALUE analyid )
{WriteToLog(" - ") }

       IF noanal THEN
           the_string_line = build_string_for_worksheet("U")
       ELSE
           the_string_line = build_string_for_worksheet("A")
       ENDIF
{ Include the sample id for search_for_sample routine }
       RETURN(PAD(the_string_line," ",80):SELECT sample.id_numeric)


ENDROUTINE


{-----------------------------------------------------------------------------}
{ read in cnf value for wshtstring }

GLOBAL ROUTINE build_string_for_worksheet ( VALUE wks_type )
{WriteToLog(" - ") }

     DECLARE config_counter

         config_string = GLOBAL ( "WSHTSTRING" )
         IF (config_string = " ")|(config_string = empty)|
               (config_string = ERROR) THEN
             config_string = "NID+TID+PRI+DLO+DRQ "
         ENDIF
         return_config = " "
         config_counter = 1
         done_rep = false
         strip_string = STRIP(config_string):"+"
         WHILE config_counter <= LENGTH(STRIP(config_string)) DO
               plus_pos = INDEX(strip_string,"+")
               IF plus_pos > 0 THEN
                  element_check = SUBSTRING(strip_string,
                                      1,plus_pos-1)
               ELSE
                  element_check = STRIP(strip_string)
                  plus_pos = LENGTH(element_check)
               ENDIF

               IF element_check = "NID" THEN
                     IF wks_type = "P" THEN
                        return_config = return_config :
                         JUSTIFY(PAD(SELECT sample.id_numeric," ",10),"RIGHT")
                          :"    "
                        done_rep = true
                     ELSEIF wks_type = "U" THEN
                        IF NOT done_rep THEN
                            return_config = return_config :
                                 JUSTIFY(PAD(SELECT sample.id_numeric," ",10)
                    ,"RIGHT"):" ":PAD(STRIP(analyid):
                              "/":PAD(STRIP(SELECT test.test_count)," ",2)
                    ," ",13):" "
                            done_rep = true
                        ELSE
                            return_config = return_config :
                              JUSTIFY(PAD(SELECT sample.id_numeric," ",10)
                    ,"RIGHT"):" "
                        ENDIF

                     ELSE
                        IF NOT done_rep THEN
                            return_config = return_config :
                                 JUSTIFY(PAD(SELECT sample.id_numeric," ",10)
                    ,"RIGHT") :
                              "/":PAD(STRIP(SELECT test.test_count)," ",2):" "
                            done_rep = true
                        ELSE
                            return_config = return_config :
                              JUSTIFY(PAD(SELECT sample.id_numeric," ",11)
                    ,"RIGHT")
                        ENDIF
                    ENDIF

               ELSEIF element_check = "TID" THEN
                     IF wks_type = "P" THEN
                        return_config = return_config :
                                   PAD(SELECT sample.id_text," ",31)
                        done_rep = true
                     ELSEIF wks_type = "U" THEN
                        IF NOT done_rep THEN
                            return_config = return_config :
                                 PAD(SELECT sample.id_text," ",31)
                    :" ":PAD(STRIP(analyid):
                              "/":PAD(STRIP(SELECT test.test_count)," ",2)
                    ," ",13):" "
                            done_rep = true
                        ELSE
                            return_config = return_config :
                                   PAD(SELECT sample.id_text," ",31)
                        ENDIF
                     ELSE
                        IF NOT done_rep THEN
                           return_config = return_config :
                                PAD(SELECT sample.id_text," ",30):
                                "/":PAD(STRIP(SELECT test.test_count)," ",2):" "
                           done_rep = true
                        ELSE
                           return_config = return_config :
                                   PAD(SELECT sample.id_text," ",31)
                        ENDIF
                     ENDIF

               ELSEIF element_check = "PRI" THEN
                     return_config = return_config :
                      JUSTIFY(PAD(STRIP(SELECT sample.priority)," ",2),"RIGHT")
                    :" "

               ELSEIF element_check = "DLO" THEN
                  return_config = return_config :
                       LEFTSTRING(SELECT sample.login_date,11):" "

               ELSEIF element_check = "DRQ" THEN
                  return_config = return_config :
                       LEFTSTRING(SELECT sample.dateresreq,11):" "

               ELSEIF element_check = "JOB" THEN
                  jobby = SELECT sample.job_name
                  REPEAT
                        temp_job = jobby
                        jobby = jobby # " "
                  UNTIL temp_job = jobby
                  return_config = return_config :
                       PAD(jobby," ",20)

               ELSEIF element_check = "CUS" THEN
                  return_config = return_config :
                                   PAD(SELECT sample.customer_id," ",11)

               ELSEIF element_check = "SPT" THEN
                  return_config = return_config :
                                   PAD(SELECT sample.sampling_point," ",11)

               ELSEIF element_check = "PRJ" THEN
                  return_config = return_config :
                                   PAD(SELECT sample.project_id," ",11)

               ELSEIF element_check = "PRD" THEN
                  return_config = return_config :
                                   PAD(SELECT sample.product_name," ",11)

               ELSEIF element_check = "BCH" THEN
                  return_config = return_config :
                                   PAD(SELECT sample.batch_name," ",11)

               ELSEIF element_check = "TYP" THEN
                  return_config = return_config :
                                   PAD(SELECT sample.sample_type," ",11)

               ELSEIF element_check = "LOC" THEN
                  return_config = return_config :
                                   PAD(SELECT sample.location_id," ",11)

               ELSEIF element_check = "TPR" THEN
                  IF wks_type <> "P" THEN
                     return_config = return_config :
                          JUSTIFY(PAD(STRIP(SELECT test.test_priority)," ",2),
                                                                 "RIGHT"):" "
                  ENDIF
               ELSEIF element_check = "DSA" THEN
                  return_config = return_config :
                       LEFTSTRING(SELECT sample.sampled_date,11):" "

               ELSEIF element_check = "DRC" THEN
                  return_config = return_config :
                       LEFTSTRING(SELECT sample.recd_date,11):" "


               ELSEIF element_check = "NAM" THEN
                  return_config = return_config :
                       LEFTSTRING(SELECT sample.sample_name,20):" "


               ELSEIF element_check = "DES" THEN
                  return_config = return_config :
                       LEFTSTRING(SELECT sample.description,30):" "

               ENDIF

               strip_string = strip_string # element_check # "+"
               IF LENGTH(return_config) > 77 THEN
                  RETURN ( PAD(return_config," ",80):SELECT sample.id_numeric )
               ENDIF
               config_counter = config_counter + plus_pos

         ENDWHILE


         RETURN ( PAD(return_config," ",80):SELECT sample.id_numeric )

 ENDROUTINE


{-----------------------------------------------------------------------------}
GLOBAL ROUTINE build_header_for_udworksheet ( VALUE do_anal )
{WriteToLog(" - ") }

       RETURN(construct_the_header(do_anal))

ENDROUTINE

{-----------------------------------------------------------------------------}
 GLOBAL ROUTINE build_header_for_worksheet

       RETURN(construct_the_header(false))
{WriteToLog(" - ") }

 ENDROUTINE


{-----------------------------------------------------------------------------}

ROUTINE construct_the_header ( VALUE do_anal)
{WriteToLog(" - ") }

     DECLARE header_counter

         header_string = GLOBAL ("WSHTSTRING")
         IF (header_string = empty) OR (header_string = " ") THEN
             header_string = "NID+TID+PRI+DLO+DRQ"
         ENDIF
         return_header = " "
         header_counter = 1
         strip_string = STRIP(header_string):"+"
         WHILE header_counter <= LENGTH(STRIP(header_string)) DO
               plus_pos = INDEX(strip_string,"+")
               IF plus_pos > 0 THEN
                  element_check = SUBSTRING(strip_string,
                                 1,plus_pos-1)
               ELSE
                  element_check = STRIP(strip_string)
                  plus_pos = LENGTH(element_check)
               ENDIF

               IF GET CONSTANT(element_check) <> error THEN
                  IF ((element_check = "NID") AND (do_anal)) OR
                     ((element_check = "TID") AND (do_anal)) THEN
                     return_header = return_header :
            GET_USER_MESSAGE (GET CONSTANT(element_check) ,1) :
                        GET_USER_MESSAGE("WKS_ANAL_TABLE_NAME",1)
                     do_anal = false
                  ELSE
                     return_header = return_header :
            GET_USER_MESSAGE (GET CONSTANT(element_check), 1):" "
                  ENDIF
               ENDIF
               IF LENGTH(return_header) > 77 THEN
                  RETURN(return_header)
               ENDIF
               header_counter = header_counter + plus_pos
               strip_string = strip_string # element_check # "+"

         ENDWHILE


         RETURN ( return_header )

ENDROUTINE

{-----------------------------------------------------------------------------}


  ROUTINE find_first_element ( current_element )
{WriteToLog(" - ") }

      DECLARE element_count

      element_count = current_element
      WHILE test_array[element_count,prev_test] <> 0 DO
            element_count = test_array[element_count,prev_test]
      ENDWHILE
      RETURN(element_count)

  ENDROUTINE

{-----------------------------------------------------------------------------}




{-----------------------------------------------------------------------------}
{ processing routines }
{-----------------------------------------------------------------------------}



 ROUTINE set_up_screens
{WriteToLog(" - ") }

         CREATE TEXT WINDOW title_box
                HEIGHT 1
                WIDTH 80
        HELP CONTEXT = "$WORKSHEET_TITLE"

         CREATE TEXT WINDOW screen_box
                HEIGHT 15
                WIDTH 78
                BORDER
        HELP CONTEXT = "$WORKSHEET_SCREEN"

         CREATE TEXT WINDOW block_box
                HEIGHT 1
                WIDTH 29
                BORDER
        HELP CONTEXT = "$WORKSHEET_BLOCK"


         DISPLAY GET_USER_MESSAGE("WKS_BLOCK_MODE      ",1)
        IN WINDOW block_box ON LINE 1 FROM 1 BOLD

         CREATE TEXT WINDOW header_box
                HEIGHT 1
                WIDTH 80
        HELP CONTEXT = "$WORKSHEET_HEADER"


         IF wks_type = "A" THEN
            display_the_header(GET_USER_MESSAGE("WKS_HEAD_GEN_ANAL ",1))
            DISPLAY GET_USER_MESSAGE("WKS_CHOSEN_ANAL ",1):id_for_search
                        IN WINDOW title_box ON LINE 1 FROM 2
         ELSE
            display_the_header(GET_USER_MESSAGE("WKS_HEAD_GEN_PREP ",1))
            DISPLAY GET_USER_MESSAGE("WKS_CHOSEN_PREP ",1):id_for_search
                        IN WINDOW title_box ON LINE 1 FROM 2
         ENDIF

         show_no_in_list()

         DISPLAY build_header_for_worksheet()
                IN WINDOW screen_box ON LINE 1 FROM 1 TO 78 INVERSE

         PASTE TEXT WINDOW title_box ON LINE 5 FROM 1
         PASTE TEXT WINDOW screen_box ON LINE 7 FROM 2

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE display_tests ( test_array, wks_list_count)
{WriteToLog(" - ") }

     DECLARE endis, discount, list_element

     PASTE TEXT WINDOW title_box ON LINE 5 FROM 1
     PASTE TEXT WINDOW screen_box ON LINE 7 FROM 2

     IF wks_list_count > 13 THEN
        endis = 13
     ElSE
        endis = wks_list_count
     ENDIF

     list_element = first_in_list

     discount = 1
     WHILE discount <= endis DO

           display_line(list_element, discount+1, false, false)
           list_element = test_array[list_element,next_test]
           discount = discount + 1

     ENDWHILE

 ENDROUTINE

{-----------------------------------------------------------------------------}
{ Read in more tests from another job                                         }
{-----------------------------------------------------------------------------}

ROUTINE re_read_worksheet
{WriteToLog(" - ") }

    IF NOT no_job THEN
           IF prompt_for_job(wks_job) THEN
              PASTE TEXT WINDOW create_box1 ON LINE 12 FROM 3
              PASTE TEXT WINDOW samps_sel_box ON LINE 15 FROM 50
              prev_count = worksheet_count
              IF wks_type = "A" THEN
                 select_tests_for_worksheet(test_array,worksheet_count,
                        id_for_search,wks_job, false)

              ELSEIF wks_type = "T" THEN
                 select_test_prep_worksheet(test_array,worksheet_count,
                        id_for_search,wks_job, false)

              ELSEIF wks_type = "P" THEN
                 select_sample_prep_worksheet(test_array,worksheet_count,
                                              id_for_search, wks_job, false)
              ENDIF
              IF prev_count = worksheet_count THEN
                 IF wks_type = "A" THEN
                    flash_message ( "WKS_NO_TESTS" , false)

                 ELSEIF wks_type = "T" THEN
                    flash_message( "WKS_NO_TESTS_PREP" , false)

                 ELSEIF wks_type = "P" THEN
                    flash_message( "WKS_NO_SAMPS" , false)
                 ENDIF
              ELSE
                 show_no_in_list()
                 first_in_list = find_first_element(field_num)
                 display_tests(test_array, wks_list_count)
              ENDIF
           ENDIF
        ELSE
           flash_message ( "WKS_DONE_ALREADY" , true)
        ENDIF

ENDROUTINE
{-----------------------------------------------------------------------------}
ROUTINE display_line ( VALUE field_num,
               VALUE lineno   ,
               VALUE do_invert,
               VALUE do_bold  )
{WriteToLog(" - ") }

    DISPLAY test_array[field_num,worksheet_string] IN WINDOW screen_box
                   ON LINE lineno FROM 1 TO 78
           INVERSE = do_invert
           BOLD = do_bold

ENDROUTINE
{-----------------------------------------------------------------------------}

 ROUTINE modify_list
{WriteToLog(" - ") }

 DECLARE rdloop

      display_bottom_line(GET_USER_MESSAGE("WKS_MANIP_FOOT ",1)
        ,screen_box,78,15,false)

      field_num = first_in_list
      display_the_header(GET_USER_MESSAGE("WKS_WORKS_GEN_SCR ",1))
      display_tests(test_array, wks_list_count)
      lineno = 2

      REPEAT

         display_line(field_num, lineno, true, false)

     PROMPT FOR_KEY req_key IN WINDOW screen_box

         IF req_key = "UP" THEN
            display_line(field_num, lineno, false,false )
            key_up()

         ELSEIF (req_key = "DOWN")|(req_key = "RETURN") THEN
            display_line(field_num, lineno, false,false )
            key_down()

         ELSEIF req_key = "REMOVE" THEN
            IF wks_list_count > 1 THEN
               remove_entry()
            ENDIF
         ELSEIF req_key = "INSERT HERE" THEN
            If remove_count > 0 THEN
               display_line(field_num, lineno, false,false )
               insert_all_entry()

            ENDIF
         ELSEIF req_key = "SELECT" THEN
            block_remove_mode()

         ELSEIF req_key = "FIND" THEN
            CHOOSE which_one OUTOF find_key ON LINE 12 FROM 20
            IF which_one = "2" THEN
               display_line(field_num, lineno, false,false )
               single_insert_mode()

            ELSEIF which_one = "1"
               re_read_worksheet()
               UNPASTE TEXT WINDOW create_box1
               UNPASTE TEXT WINDOW samps_sel_box
               UNPASTE TEXT WINDOW job_box
            ENDIF

         ELSEIF req_key = "DO" THEN
            first_in_list = find_first_element(field_num)
            RETURN(true)

         ELSEIF req_key = "EXIT" THEN
            RETURN(false)

         ELSEIF req_key = "NEXT SCREEN" THEN
            temp_line = lineno
            last_on_page = field_num
            WHILE (temp_line < 14)&(test_array[last_on_page,next_test] <> 0)
                   DO
                 last_on_page = test_array[last_on_page,next_test]
                 temp_line = temp_line + 1
            ENDWHILE
            rdloop = 1
            WHILE (rdloop < 14)&(test_array[field_num,next_test] <> 0) DO
                field_num = test_array[field_num,next_test]
                IF test_array[last_on_page,next_test] <> 0 THEN
                  last_on_page = test_array[last_on_page,next_test]
                ELSE
                  IF lineno < 14 THEN
                     lineno = lineno + 1
                  ENDIF
                ENDIF
                rdloop = rdloop + 1
            ENDWHILE

            redraw_from_specified( last_on_page, temp_line)

          ELSEIF req_key = "PREVIOUS SCREEN" THEN

            temp_line = lineno
            first_on_page = field_num
            WHILE (temp_line > 2)&(test_array[first_on_page,prev_test] <> 0)
                   DO
                 first_on_page = test_array[first_on_page,prev_test]
                 temp_line = temp_line - 1
            ENDWHILE
            rdloop = 1
            WHILE (rdloop < 14)&(test_array[field_num,prev_test] <> 0) DO
                field_num = test_array[field_num,prev_test]
                IF test_array[first_on_page,prev_test] <> 0 THEN
                  first_on_page = test_array[first_on_page,prev_test]
                ELSE
                   IF lineno > 2 THEN
                      lineno = lineno - 1
                   ENDIF
                ENDIF
                rdloop = rdloop + 1
            ENDWHILE
            redraw_from_specified( first_on_page, temp_line)


         ENDIF

      UNTIL false


 ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE key_up
{WriteToLog(" - ") }

      If test_array[field_num,prev_test] <> 0 THEN
         field_num = test_array[field_num,prev_test]
         IF lineno > 2 THEN
            lineno = lineno - 1
         ELSE
            SCROLL IN WINDOW screen_box FROM LINE 2 TO LINE 14
                      DIRECTION "DOWN"
         ENDIF
      ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE key_down
{WriteToLog(" - ") }

        IF test_array[field_num,next_test] <> 0 THEN
           field_num = test_array[field_num,next_test]
           IF lineno < 14 THEN
              lineno = lineno + 1
           ELSE
              SCROLL IN WINDOW screen_box FROM LINE 2 TO LINE 14
                  DIRECTION "UP"
           ENDIF
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE redraw_from_specified ( given_item, given_line )
{WriteToLog(" - ") }

  DECLARE redraw_line, redraw_item

        display_line(given_item, given_line, false,false )

        redraw_line = given_line - 1
        redraw_item = test_array[given_item,prev_test]
        WHILE (redraw_line >=2) & ( redraw_item <> 0) DO
          display_line(redraw_item, redraw_line, false,false )
          redraw_line = redraw_line - 1
          redraw_item = test_array[redraw_item,prev_test]
        ENDWHILE

        redraw_line = given_line + 1
        redraw_item = test_array[given_item, next_test]
        WHILE (redraw_line <= 14)& (redraw_item <> 0) DO
          display_line(redraw_item, redraw_line, false,false )
          redraw_line = redraw_line + 1
          redraw_item = test_array[redraw_item,next_test]
        ENDWHILE

 ENDROUTINE

{-----------------------------------------------------------------------------}

  ROUTINE insert_all_entry
{WriteToLog(" - ") }

     DECLARE insert_count, all_count

     insert_place = field_num
     IF test_array[insert_place,prev_test] = 0 THEN
        last_in_list = 0
     ELSE
        last_in_list = test_array[insert_place,prev_test]
     ENDIF

     all_count = remove_count

     WHILE all_count > 0 DO


           IF test_array[insert_place,prev_test] = 0 THEN

              test_array[insert_place,prev_test] = remove_array[all_count]
              test_array[remove_array[all_count],next_test] = insert_place
              test_array[remove_array[all_count],prev_test] = 0
              insert_place = remove_array[all_count]

           ELSE

                test_array[insert_place, prev_test] = remove_array[all_count]
                test_array[remove_array[all_count],next_test] = insert_place
                insert_place = remove_array[all_count]

          ENDIF

          SCROLL IN WINDOW screen_box FROM LINE lineno TO LINE 14
                        DIRECTION "DOWN"

          wks_list_count = wks_list_count + 1
          display_line(insert_place, lineno, false,false )
          show_no_in_list()

          all_count = all_count - 1

     ENDWHILE

     IF last_in_list <> 0 THEN
        test_array[ insert_place , prev_test] = last_in_list
        test_array[ last_in_list , next_test] = insert_place

     ELSE

        test_array [insert_place, prev_test] = 0

     ENDIF

     field_num = insert_place

     { clear removed entries }

     remove_count = 0
     ARRAY remove_array         ARRAY_SIZE ( 0 )
     ARRAY single_insert_array

  ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE show_no_in_list
{WriteToLog(" - ") }

     DISPLAY GET_USER_MESSAGE("WKS_NO_IN_LIST ",1):STRIP(wks_list_count)
                        IN WINDOW title_box ON LINE 1 FROM 50 To 80

ENDROUTINE

{-----------------------------------------------------------------------------}

  ROUTINE insert_entry (insert_number)
{WriteToLog(" - ") }

     DECLARE insert_count

          insert_place = field_num

          IF test_array[insert_place,next_test] = 0 THEN

             test_array[insert_place,next_test] = remove_array[insert_number]
             test_array[remove_array[insert_number],prev_test] = insert_place
             test_array[remove_array[insert_number],next_test] = 0
             IF lineno < 14 THEN
                lineno = lineno + 1
             ENDIF
             field_num = remove_array[insert_number]


          ELSEIF test_array[insert_place,prev_test] = 0 THEN
             test_array[insert_place,prev_test] = remove_array[insert_number]
             test_array[remove_array[insert_number],next_test] =
                                       insert_place
             test_array[remove_array[insert_number],prev_test] = 0
             field_num = remove_array[insert_number]
             SCROLL IN WINDOW screen_box FROM LINE lineno TO LINE 14
                      DIRECTION "DOWN"

          ELSE
            test_array[ test_array[insert_place, prev_test], next_test] =
                                      remove_array[insert_number]

            test_array[remove_array[insert_number],prev_test] =
                             test_array[insert_place,prev_test]

            test_array[remove_array[insert_number],next_test] =
                                  insert_place
            test_array[insert_place,prev_test] = remove_array[insert_number]
            field_num = test_array[insert_place,prev_test]
            SCROLL IN WINDOW screen_box FROM LINE lineno TO LINE 14
                      DIRECTION "DOWN"

          ENDIF

          wks_list_count = wks_list_count + 1

          display_line(field_num, lineno, false,false )
          show_no_in_list()

          remove_count = remove_count - 1
          IF remove_count > 0 THEN
             start_rem = insert_number
             WHILE start_rem <= remove_count DO
                   remove_array[start_rem] = remove_array[start_rem+1]
                   single_insert_array[start_rem] =
                                single_insert_array[start_rem+1]
                   start_rem = start_rem + 1
             ENDWHILE
          ENDIF
          remove_array[remove_count+1]        = empty
          single_insert_array[remove_count+1] = empty
  ENDROUTINE

{-----------------------------------------------------------------------------}

  ROUTINE check_next_on_screen
{WriteToLog(" - ") }

  DECLARE check_count

     check_count = 1
     WHILE (check_count <= (15-lineno)) DO
           test_check = test_array[test_check,next_test]
           IF test_check = 0 THEN
              RETURN(0)
           ENDIF
           check_count = check_count + 1
     ENDWHILE
     RETURN(test_check)

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE check_first_on_screen ( VALUE lineno )
{WriteToLog(" - ") }

  DECLARE check_count

     check_count = 1
     WHILE (check_count <= (lineno - 1)) DO
           test_check = test_array[test_check,prev_test]
           IF test_check = 0 THEN
              RETURN(0)
           ENDIF
           check_count = check_count + 1
     ENDWHILE
     RETURN(test_check)


 ENDROUTINE
{-----------------------------------------------------------------------------}

 ROUTINE remove_entry
{WriteToLog(" - ") }

     DECLARE removed_count

     remove_place = field_num
     test_check = remove_place
     last_on_screen = check_next_on_screen()
     test_check = remove_place
     first_on_screen = check_first_on_screen(lineno)

     IF last_on_screen <> 0 THEN
         SCROLL IN WINDOW screen_box FROM LINE lineno TO LINE 14
                  DIRECTION "UP"

        display_line(last_on_screen, 14, false,false )
        field_num = test_array[remove_place,next_test]

     ELSEIF  first_on_screen <> 0 THEN

         SCROLL IN WINDOW screen_box FROM LINE 2 TO LINE lineno
                  DIRECTION "DOWN"
         display_line(first_on_screen, 2, false,false )
         field_num = test_array[remove_place,prev_test]

     ELSE

         SCROLL IN WINDOW screen_box FROM LINE lineno TO LINE 14
                  DIRECTION "UP"
         IF test_array[field_num,next_test] = 0 THEN
                IF lineno > 2 THEN
                   lineno = lineno - 1
                ENDIF
                field_num = test_array[remove_place,prev_test]
         ELSE
            field_num = test_array[remove_place,next_test]
         ENDIF
     ENDIF


     wks_list_count = wks_list_count - 1
     remove_count = remove_count + 1

     IF test_array[remove_place,next_test] = 0 THEN

        test_array[test_array[remove_place,prev_test],next_test] = 0

     ELSEIF test_array[remove_place,prev_test] = 0 THEN

        test_array[test_array[remove_place,next_test],prev_test] = 0
        first_in_list = test_array[remove_place,next_test]

     ELSE

        test_array[test_array[remove_place,next_test],prev_test] =
             test_array[remove_place,prev_test]
        test_array[test_array[remove_place,prev_test],next_test] =
             test_array[remove_place,next_test]

     ENDIF

     remove_array[ remove_count ] = remove_place
     test_array[remove_place,next_test ] = 0
     test_array[remove_place,prev_test ] = 0
{ IPF 22/4/92 }
     IF wks_type = "P" THEN
        single_insert_array[ remove_count] =
                   " ":test_array[remove_place,sample_id]:" ":
                                  test_array[remove_place,id_text]
     ELSE
        single_insert_array[ remove_count] =
                   " ":test_array[remove_place,sample_id]:"/":
                         test_array[remove_place,replicate_no]:" ":
                                  test_array[remove_place,id_text]
     ENDIF

     show_no_in_list()

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE block_remove_mode
{WriteToLog(" - ") }

  DECLARE scount

      ARRAY block_array ARRAY_SIZE ( 0 )
      PASTE TEXT WINDOW block_box ON LINE 23 FROM 2
      block_count = 0
      start_remove = false
      start_num = field_num

      REPEAT

         display_line(field_num, lineno, true,false )

     PROMPT FOR_KEY req_key IN WINDOW screen_box

         IF req_key = "UP" THEN
            block_up_routine()

         ELSEIF (req_key = "DOWN")|(req_key = "RETURN") THEN
            block_down_routine()

         ELSEIF req_key = "NEXT SCREEN" THEN
            scount = 1
            WHILE (scount <= 14)&(test_array[field_num,next_test] <> 0) DO
                  block_down_routine()
                  scount = scount +1
            ENDWHILE

         ELSEIF req_key = "PREVIOUS SCREEN" THEN
            scount = 1
            WHILE (scount <= 14)&(test_array[field_num,prev_test] <> 0) DO
                  block_up_routine()
                  scount = scount +1
            ENDWHILE

         ELSEIF req_key = "REMOVE" THEN
            If block_count > 0 THEN
               place_block_into_removed()
            ENDIF
            UNPASTE TEXT WINDOW block_box
            RETURN

         ELSEIF (req_key = "SELECT") OR (req_key = "EXIT") THEN

            DISPLAY GET_USER_MESSAGE("WKS_STOP_BLOCK_MODE ",1)
         IN WINDOW block_box ON LINE 1 FROM 1 BOLD
            temp_line = lineno
            first_on_page = field_num
            WHILE (temp_line > 2)&(test_array[first_on_page,prev_test] <> 0)
                   DO
                 first_on_page = test_array[first_on_page,prev_test]
                 temp_line = temp_line - 1
            ENDWHILE
            redraw_from_specified( first_on_page, temp_line)
            UNPASTE TEXT WINDOW block_box
            DISPLAY GET_USER_MESSAGE("WKS_BLOCK_MODE      ",1)
        IN WINDOW block_box ON LINE 1 FROM 1 BOLD
            RETURN

         ENDIF

      UNTIL false


 ENDROUTINE

{-----------------------------------------------------------------------------}

  ROUTINE block_down_routine
{WriteToLog(" - ") }

            IF test_array[field_num,next_test] <> 0 THEN
               IF in_block_list(test_array[field_num,next_test]) THEN
                  block_count = block_count - 1
                  display_line(field_num, lineno, false,false )

               ELSE
                 include_in_list()
                 display_line(field_num, lineno, true,true )

               ENDIF
               IF block_count = 1 THEN
                  start_remove = false
               ENDIF
               key_down()
            ENDIF

  ENDROUTINE

{-----------------------------------------------------------------------------}

  ROUTINE block_up_routine
{WriteToLog(" - ") }

            IF test_array[field_num,prev_test] <> 0 THEN
               IF in_block_list(test_array[field_num,prev_test]) THEN
                  block_count = block_count - 1
                  display_line(field_num, lineno, false,false )

               ELSE

                  include_in_list()
                  display_line(field_num, lineno, true,true )
               ENDIF
               IF block_count = 1 THEN
                  start_remove = true
               ENDIF
               key_up()
            ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE single_insert_mode
{WriteToLog(" - ") }

    DECLARE box_height, dispcount, sing_count, linenum


       IF set_up_single_insert() THEN
           can_exit = false
           PASTE TEXT WINDOW single_insert_box ON LINE 9 FROM 2
           sing_count = 1
           linenum = 2
           REPEAT

               DISPLAY single_insert_array[sing_count] IN WINDOW
                   single_insert_box ON LINE linenum FROM 2 TO 49 INVERSE

               PROMPT FOR_KEY sing_key IN WINDOW single_insert_box

               IF sing_key = "UP" THEN
                  DISPLAY single_insert_array[sing_count] IN WINDOW
                    single_insert_box ON LINE linenum FROM 2 TO 49
                  sing_key_up()

               ELSEIF (sing_key = "DOWN")|(sing_key = "RETURN") THEN
                  DISPLAY single_insert_array[sing_count] IN WINDOW
                    single_insert_box ON LINE linenum FROM 2 TO 49
                  sing_key_down()

               ELSEIF sing_key = "DO" THEN
                  UNPASTE TEXT WINDOW single_insert_box
                  insert_entry (sing_count)
                  can_exit = true

               ELSEIF sing_key = "EXIT" THEN
                  UNPASTE TEXT WINDOW single_insert_box
                  can_exit = true

               ELSEIF sing_key = "NEXT SCREEN" THEN
                  sing_next_screen()

               ELSEIF sing_key = "PREVIOUS SCREEN" THEN
                  sing_prev_screen()

               ENDIF


           UNTIL can_exit
       ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE sing_key_up
{WriteToLog(" - ") }

      If sing_count > 1 THEN
         sing_count = sing_count - 1
         IF linenum > 2 THEN
            linenum = linenum - 1
         ELSE
            SCROLL IN WINDOW single_insert_box FROM LINE 2 TO LINE
                box_height - 1 DIRECTION "DOWN"
         ENDIF
      ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE sing_key_down
{WriteToLog(" - ") }

        IF sing_count < remove_count THEN
           sing_count = sing_count + 1
           IF linenum < box_height - 1 THEN
              linenum = linenum + 1
           ELSE
            SCROLL IN WINDOW single_insert_box FROM LINE 2 TO LINE
                box_height - 1 DIRECTION "UP"
           ENDIF
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE sing_next_screen
{WriteToLog(" - ") }

        temp_line = linenum
        last_on_page = sing_count
        WHILE (temp_line < (box_height-1)) AND
                 (single_insert_array[last_on_page+1] <> empty)
                   DO
                 last_on_page = last_on_page+1
                 temp_line = temp_line + 1
        ENDWHILE
        rdloop = 1
        WHILE (rdloop < (box_height-1)) AND
                    (single_insert_array[sing_count+1] <> empty) DO
                sing_count = sing_count+1
                IF single_insert_array[last_on_page+1] <> empty THEN
                  last_on_page = last_on_page + 1
                ELSE
                  IF linenum < (box_height-1) THEN
                     linenum = linenum + 1
                  ENDIF
                ENDIF
                rdloop = rdloop + 1
        ENDWHILE
        sing_redraw_from_specified( last_on_page, temp_line)


ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE sing_prev_screen
{WriteToLog(" - ") }

        temp_line = linenum
        first_on_page = sing_count
            WHILE (temp_line > 2)&
                 (single_insert_array[first_on_page-1] <> empty)
                   DO
                 first_on_page = first_on_page-1
                 temp_line = temp_line - 1
            ENDWHILE
            rdloop = 1
            WHILE (rdloop < (box_height - 1)) AND
                       (single_insert_array[sing_count-1] <> empty) DO
                sing_count = sing_count - 1
                IF single_insert_array[first_on_page-1] <> empty THEN
                  first_on_page = first_on_page-1
                ELSE
                   IF linenum > 2 THEN
                      linenum = linenum - 1
                   ENDIF
                ENDIF
                rdloop = rdloop + 1
            ENDWHILE
            sing_redraw_from_specified( first_on_page, temp_line)

ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE sing_redraw_from_specified ( given_item, given_line )
{WriteToLog(" - ") }

  DECLARE redraw_line, redraw_item

        DISPLAY single_insert_array[given_item] IN WINDOW
                   single_insert_box ON LINE given_line FROM 2 TO 49

        redraw_line = given_line - 1
        redraw_item = given_item-1
        WHILE (redraw_line >=2) AND
                    ( redraw_item <> 0) DO
          DISPLAY single_insert_array[redraw_item] IN WINDOW
                   single_insert_box ON LINE redraw_line FROM 2 TO 49
          redraw_line = redraw_line - 1
          redraw_item = redraw_item-1
        ENDWHILE

        redraw_line = given_line + 1
        redraw_item = given_item + 1
        WHILE (redraw_line <= (box_height-1)) AND
                     (single_insert_array[redraw_item] <> empty ) DO
          DISPLAY single_insert_array[redraw_item] IN WINDOW
                   single_insert_box ON LINE redraw_line FROM 2 TO 49
          redraw_line = redraw_line + 1
          redraw_item = redraw_item+1
        ENDWHILE


 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE set_up_single_insert
{WriteToLog(" - ") }

  IF remove_count > 0 THEN
       IF remove_count > 10 THEN
          box_height = 12
       ELSE
          box_height = remove_count+2
       ENDIF

         CREATE TEXT WINDOW single_insert_box
                  HEIGHT box_height
                  WIDTH 50
                  BORDER
          HELP CONTEXT = "$WORKSHEET_SINGLE"

         display_top_line(GET_USER_MESSAGE("WKS_REMOVED_TESTS ",1)
              ,single_insert_box,50)
         display_bottom_line(GET_USER_MESSAGE("WKS_REM_TEST_FOOT ",1)
        ,single_insert_box,50,box_height,false)

         dispcount = 1
         WHILE dispcount <= box_height-2 DO

               DISPLAY single_insert_array[dispcount] IN WINDOW
                      single_insert_box ON LINE dispcount+1 FROM 2 TO 49
               dispcount = dispcount + 1

        ENDWHILE
        RETURN(true)
  ELSE
    flash_message ( "WKS_NONE_REMOVED" , false)
    RETURN(false)
  ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE include_in_list
{WriteToLog(" - ") }

         block_count = block_count + 1
         block_array[ block_count] = field_num

 ENDROUTINE


{-----------------------------------------------------------------------------}

 ROUTINE in_block_list ( VALUE list_param)
{WriteToLog(" - ") }

         DECLARE check_count

         check_count = 1
         WHILE check_count <= block_count DO
               IF block_array[check_count] = list_param THEN
                  RETURN(true)
               ENDIF
               check_count = check_count + 1
         ENDWHILE
         RETURN(false)

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE place_block_into_removed
{WriteToLog(" - ") }

    DECLARE place_count,swap_count, rearrange_count


    If NOT start_remove THEN

       test_check = field_num
       last_on_screen = check_next_on_screen()
       test_check = field_num
       first_on_screen = check_first_on_screen(lineno)

       place_count = 1
       WHILE place_count <= block_count DO

             remove_count = remove_count + 1
             remove_array[ remove_count] = block_array[ place_count]
{ IPF 22/4/92}
             IF wks_type = "P" THEN
                 single_insert_array[ remove_count] =
                     " ":test_array[block_array[place_count],sample_id]:" ":
                                  test_array[block_array[place_count],id_text]

         ELSE
                 single_insert_array[ remove_count] =
                     " ":test_array[block_array[place_count],sample_id]:"/":
                         test_array[block_array[place_count],replicate_no]:" ":
                                  test_array[block_array[place_count],id_text]
             ENDIF

             place_count = place_count + 1

             IF  first_on_screen <> 0 THEN

                SCROLL IN WINDOW screen_box FROM LINE 2 TO LINE lineno
                    DIRECTION "DOWN"
                IF in_block_list(first_on_screen) THEN
                   display_line(first_on_screen, 2, true,true )
                ELSE
                   display_line(first_on_screen, 2, false, false )
                ENDIF

                first_on_screen = test_array[first_on_screen,prev_test]

             ELSEIF last_on_screen <> 0 THEN

                IF lineno > 2 THEN
                   lineno = lineno - 1
                ENDIF
                SCROLL IN WINDOW screen_box FROM LINE lineno TO LINE 14
                      DIRECTION "UP"

                IF in_block_list(last_on_screen) THEN
                   display_line(last_on_screen, 14, true, true )
                ELSE
                   display_line(last_on_screen, 14, false, false )
                ENDIF
                last_on_screen = test_array[last_on_screen,next_test]

            ELSE

                IF lineno > 2 THEN
                   lineno = lineno - 1
                ENDIF
                SCROLL IN WINDOW screen_box FROM LINE lineno TO LINE 14
                   DIRECTION "UP"

            ENDIF
       ENDWHILE

       IF test_array[field_num,prev_test] <> 0 THEN
          test_array[field_num,prev_test] = test_array[start_num,prev_test]
       ELSE
          test_array[field_num,prev_test] = 0
       ENDIF
       IF test_array[test_array[start_num,next_test],next_test] <> 0 THEN
       test_array[test_array[start_num,prev_test],next_test] =
                                                            field_num
       ELSE
          test_array[test_array[start_num,next_test],next_test] = 0
       ENDIF



ELSE

       place_count = block_count
       test_check = field_num
       last_on_screen = check_next_on_screen()
       test_check = field_num
       first_on_screen = check_first_on_screen(lineno)

       WHILE place_count > 0 DO

             remove_count = remove_count + 1
             remove_array[ remove_count] = block_array[ place_count]
{ IPF 22/4/92}
             IF wks_type = "P" THEN
                 single_insert_array[ remove_count] =
                     " ":test_array[block_array[place_count],sample_id]:" ":
                                  test_array[block_array[place_count],id_text]

         ELSE
                 single_insert_array[ remove_count] =
                     " ":test_array[block_array[place_count],sample_id]:"/":
                         test_array[block_array[place_count],replicate_no]:" ":
                                  test_array[block_array[place_count],id_text]
             ENDIF

             place_count = place_count - 1



           IF last_on_screen <> 0 THEN

                SCROLL IN WINDOW screen_box FROM LINE lineno+1 TO LINE 14
                      DIRECTION "UP"

                IF in_block_list(last_on_screen) THEN
                   display_line(last_on_screen, 14, true, true )
                ELSE
                   display_line(last_on_screen, 14, false, false )
                ENDIF

                last_on_screen = test_array[last_on_screen,next_test]

            ELSEIF  first_on_screen <> 0 THEN

                IF lineno < 14 THEN
                   lineno = lineno + 1
                ENDIF
                SCROLL IN WINDOW screen_box FROM LINE 2 TO LINE lineno
                    DIRECTION "DOWN"

                IF in_block_list(first_on_screen) THEN
                   display_line(first_on_screen, 2, true, true )
                ELSE
                   display_line(first_on_screen, 2, false, false )
                ENDIF
                first_on_screen = test_array[first_on_screen,prev_test]

            ELSE

                SCROLL IN WINDOW screen_box FROM LINE lineno+1 TO LINE 14
                   DIRECTION "UP"
            ENDIF

       ENDWHILE
       IF test_array[field_num,next_test] <> 0 THEN
          test_array[field_num,next_test] = test_array[start_num,next_test]
       ELSE
          test_array[field_num,next_test] = 0
       ENDIF
       IF test_array[test_array[start_num,next_test],prev_test] <> 0 THEN
          test_array[test_array[start_num,next_test],prev_test] =
                                                             field_num
       ELSE
          test_array[test_array[start_num,next_test],prev_test] = 0
       ENDIF

ENDIF

    wks_list_count = wks_list_count - block_count
    show_no_in_list()


 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE redraw_from_specified_inc ( given_item, given_line )
{WriteToLog(" - ") }

  DECLARE redraw_line, redraw_item

          IF given_line <= lineno THEN
               display_line(given_item, given_line, true,true )
          ELSE
               display_line(given_item, given_line, false, false)
          ENDIF
        redraw_line = given_line - 1
        redraw_item = test_array[given_item,prev_test]
        WHILE (redraw_line >=2) & ( redraw_item <> 0) DO
          IF redraw_line <= lineno THEN
             display_line(redraw_item, redraw_line, true,true )
          ELSE
             display_line(redraw_item, redraw_line, false, false )
          ENDIF
          redraw_line = redraw_line - 1
          redraw_item = test_array[redraw_item,prev_test]
        ENDWHILE

        redraw_line = given_line + 1
        redraw_item = test_array[given_item, next_test]
        WHILE (redraw_line <= 14)& (redraw_item <> 0) DO
          IF redraw_line <= lineno THEN
             display_line(redraw_item, redraw_line, true,true )
          ELSE
             display_line(redraw_item, redraw_line, false, false )
          ENDIF
          redraw_line = redraw_line + 1
          redraw_item = test_array[redraw_item,next_test]
        ENDWHILE

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE get_number_to_save
{WriteToLog(" - ") }


      display_bottom_line(GET_USER_MESSAGE("WKS_INC_SAMP_IN_WKS ",1)
              ,screen_box,78,15,false)

      IF number_to_save = 0 THEN
         field_num = first_in_list
         number_to_save = 1
         lineno = 2
      ENDIF

      REPEAT

         display_line(field_num, lineno, true,true )

         PROMPT FOR_KEY req_key IN WINDOW screen_box

         IF req_key = "UP" THEN
            display_line(field_num, lineno, false, false )
            IF test_array[field_num,prev_test] <> 0 THEN
               number_to_save = number_to_save - 1
               key_up()
            ENDIF

         ELSEIF (req_key = "DOWN")|(req_key = "RETURN") THEN
            IF test_array[field_num,next_test] <> 0 THEN
               number_to_save = number_to_save + 1
               key_down()
            ENDIF

         ELSEIF req_key = "DO" THEN
        IF number_to_save > 0 THEN
               wks_operator = prompt_for_worksheet_operator(idv_name)
               IF wks_operator <> "EXIT" THEN
                  test_array[field_num,next_test] = 0
                  RETURN(number_to_save)
           ENDIF
            ELSE
        flash_message ( "WKS_NO_TESTS_INCLUDED" , true)
        ENDIF

         ELSEIF req_key = "EXIT" THEN
            RETURN(0)

         ELSEIF req_key = "NEXT SCREEN" THEN
            temp_line = lineno
            last_on_page = field_num
            WHILE (temp_line < 14)&(test_array[last_on_page,next_test] <> 0)
                   DO
                 last_on_page = test_array[last_on_page,next_test]
                 temp_line = temp_line + 1
            ENDWHILE
            rdloop = 1
            WHILE (rdloop < 14)&(test_array[field_num,next_test] <> 0) DO
                field_num = test_array[field_num,next_test]
                number_to_save = number_to_save + 1
                IF test_array[last_on_page,next_test] <> 0 THEN
                  last_on_page = test_array[last_on_page,next_test]
                ELSE
                  IF lineno < 14 THEN
                     lineno = lineno + 1
                  ENDIF
                ENDIF
                rdloop = rdloop + 1
            ENDWHILE
            redraw_from_specified_inc( last_on_page, temp_line)

          ELSEIF req_key = "PREVIOUS SCREEN" THEN

            temp_line = lineno
            first_on_page = field_num
            WHILE (temp_line > 2)&(test_array[first_on_page,prev_test] <> 0)
                   DO
                 first_on_page = test_array[first_on_page,prev_test]
                 temp_line = temp_line - 1
            ENDWHILE
            rdloop = 1
            WHILE (rdloop < 14)&(test_array[field_num,prev_test] <> 0) DO
                field_num = test_array[field_num,prev_test]
                number_to_save = number_to_save - 1
                IF test_array[first_on_page,prev_test] <> 0 THEN
                  first_on_page = test_array[first_on_page,prev_test]
                ELSE
                   IF lineno > 2 THEN
                      lineno = lineno - 1
                   ENDIF
                ENDIF
                rdloop = rdloop + 1
            ENDWHILE
            redraw_from_specified_inc( first_on_page, temp_line)


         ENDIF

      UNTIL false


 ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE insert_standards (test_array, number_to_save)
{WriteToLog(" - ") }

        worksheet_count = max_tests
        display_the_header(GET_USER_MESSAGE("WKS_STANDINSERT_SCR ",1))
        create_standard_display()
        display_standards()
        IF do_insert_standards() THEN
           create_standards ( test_array , id_for_search )
       RETURN(true)
    ELSE
       RETURN(false)
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE create_standard_display
{WriteToLog(" - ") }

         CREATE TEXT WINDOW standard_header
                HEIGHT 2
                WIDTH 78
                BORDER
        HELP CONTEXT = "$WORKSHEET_STAND_HEAD"

         CREATE TEXT WINDOW standard_display

                HEIGHT 14
                WIDTH 78
                BORDER
        HELP CONTEXT = "$WORKSHEET_STAND_DISP"

         DISPLAY GET_USER_MESSAGE("WKS_STAND_HEAD1 ",1)
                   IN WINDOW standard_header on LINE 1 FROM 2 BOLD

         DISPLAY GET_USER_MESSAGE("WKS_STAND_HEAD2 ",1)
                   IN WINDOW standard_header on LINE 2 FROM 2 BOLD

         DISPLAY id_for_search IN WINDOW standard_header
                     ON LINE 1 FROM 18 TO 28

         DISPLAY worksheet_name IN WINDOW standard_header
                     ON LINE 1 FROM 44 TO 64

         usvers_position = 75
         type_position  = 18
         id_position    = 44

         DISPLAY
"                                                                          "
   IN WINDOW standard_display ON LINE 1 FROm 2 TO 77 INVERSE

         DISPLAY GET_USER_MESSAGE("WKS_STAN_DISP_HEAD ",1)
         IN WINDOW standard_display ON LINE 1 FROM 15 INVERSE

         DISPLAY GET_USER_MESSAGE("WKS_STAN_DISP_FOOT ",1)
             IN WINDOW standard_display ON LINE 14 FROM 2 TO 77 INVERSE

 ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE build_standard_string (count_num)
{WriteToLog(" - ") }

       RETURN( "               " :
               PAD(test_array[count_num,sample_type]," ",10) :"  ":
               test_array[count_num,comp_list]:
               PAD(test_array[count_num,sample_id]," ",10):"  ":
               test_array[count_num,id_text] )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE display_standards
{WriteToLog(" - ") }

     DECLARE endis, discount

     IF number_to_save > 12 THEN
        endis = 12
     ELSE
        endis = number_to_save
     ENDIF

     list_element = first_in_list

     discount = 1
     WHILE discount <= endis DO

           display_stan_line(list_element, discount+1, false , false)
           list_element = test_array[list_element,next_test]
           discount = discount + 1

     ENDWHILE

     PASTE TEXT WINDOW standard_header ON LINE 6 FROM 2
     PASTE TEXT WINDOW standard_display ON LINE 9 FROM 2

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE display_stan_line ( VALUE field_num ,
                VALUE lineno    ,
                    VALUE do_invert ,
                VALUE do_bold   )
{WriteToLog(" - ") }

        DISPLAY test_array[field_num,standard_string] IN WINDOW
                        standard_display ON LINE lineno FROM 2 TO 77
            INVERSE = do_invert
            BOLD = do_bold


ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE do_insert_standards
{WriteToLog(" - ") }

      field_num = first_in_list
      lineno = 2
      selected_standard = false
      at_end = false
      one_at_end = 0
      current_ver = " "

      REPEAT

         IF at_end THEN
            DISPLAY PAD(" "," ",76) IN WINDOW
                        standard_display ON LINE lineno FROM 2 TO 77 INVERSE

         ELSE
            display_stan_line( field_num, lineno, true, false)
         ENDIF

         PROMPT FOR_KEY req_key IN WINDOW standard_display

         IF req_key = "UP" THEN
            IF at_end THEN
               CLEAR LINE lineno IN WINDOW
                        standard_display FROM 2 TO 77

        ELSE
               display_stan_line( field_num, lineno, false, false)
            ENDIF
            stan_key_up()

         ELSEIF ((req_key = "DOWN")|(req_key = "RETURN")) AND
        NOT at_end  THEN
            display_stan_line( field_num, lineno, false, false)
            stan_key_down()

         ELSEIF req_key = "SELECT" THEN

            display_stan_line( field_num, lineno, true,true)
            IF select_standard() THEN
               selected_standard = true
               current_ver = current_standard_id:version_number
            ELSE
               selected_standard = false
               current_ver = " "
            ENDIF

         ELSEIF (req_key = "REMOVE") AND (NOT at_end) THEN
           IF test_array[field_num,new_entry] THEN
              display_stan_line( field_num, lineno, false, false)
              remove_standard()
           ENDIF
         ElSEIF req_key = "INSERT HERE" THEN
           IF selected_standard THEN
              IF okay_to_insert() THEN
                 IF NOT at_end THEN
                    display_stan_line( field_num, lineno, false, false)
                 ENDIF
                 insert_standard()
                 IF at_end THEN
                    at_end = false
                    one_at_end = 0
                 ENDIF
              ELSE
                selected_standard = false
                current_ver = " "
              ENDIF
           ENDIF
         ELSEIF req_key = "DO" THEN

        IF confirm ( ) THEN

                    START WRITE TRANSACTION "worksheets"

            standards_db . invoke_all ( "UPDATE" )

            COMMIT

            first_in_list = find_first_element(field_num)

            RETURN(true)
                ENDIF

         ELSEIF req_key = "EXIT" THEN

                IF confirm ( ) THEN

            ROLLBACK

            RETURN(false)
                ENDIF

         ELSEIF req_key = "NEXT SCREEN" THEN
            IF NOT at_end THEN
               temp_line = lineno
               last_on_page = field_num
               WHILE (temp_line < 13)&(test_array[last_on_page,next_test] <> 0)
                      DO
                    last_on_page = test_array[last_on_page,next_test]
                    temp_line = temp_line + 1
               ENDWHILE
               rdloop = 1
               WHILE (rdloop < 13)&(test_array[field_num,next_test] <> 0) DO
                   field_num = test_array[field_num,next_test]
                  IF test_array[last_on_page,next_test] <> 0 THEN
                    last_on_page = test_array[last_on_page,next_test]
                  ELSE
                    IF lineno < 14 THEN
                       lineno = lineno + 1
                    ENDIF
                  ENDIF
                  rdloop = rdloop + 1
               ENDWHILE
               redraw_from_specified_stan( last_on_page, temp_line)
            ENDIF

          ELSEIF req_key = "PREVIOUS SCREEN" THEN
            IF at_end THEN
               CLEAR LINE lineno IN WINDOW
                        standard_display FROM 2 TO 77
               stan_key_up()
        ENDIF
            temp_line = lineno
            first_on_page = field_num
            WHILE (temp_line > 2)&(test_array[first_on_page,prev_test] <> 0)
                   DO
                 first_on_page = test_array[first_on_page,prev_test]
                 temp_line = temp_line - 1
            ENDWHILE
            rdloop = 1
            WHILE (rdloop < 13)&(test_array[field_num,prev_test] <> 0) DO
                field_num = test_array[field_num,prev_test]
                IF test_array[first_on_page,prev_test] <> 0 THEN
                  first_on_page = test_array[first_on_page,prev_test]
                ELSE
                   IF lineno > 2 THEN
                      lineno = lineno - 1
                   ENDIF
                ENDIF
                rdloop = rdloop + 1
            ENDWHILE
            redraw_from_specified_stan( first_on_page, temp_line)


         ENDIF

      UNTIL false

ENDROUTINE


{-----------------------------------------------------------------------------}

 ROUTINE redraw_from_specified_stan ( given_item, given_line )
{WriteToLog(" - ") }

  DECLARE redraw_line, redraw_item

        display_stan_line( given_item, given_line, false, false)

        redraw_line = given_line - 1
        redraw_item = test_array[given_item,prev_test]
        WHILE (redraw_line >=2) & ( redraw_item <> 0) DO
          display_stan_line( redraw_item, redraw_line, false, false)
          redraw_line = redraw_line - 1
          redraw_item = test_array[redraw_item,prev_test]
        ENDWHILE

        redraw_line = given_line + 1
        redraw_item = test_array[given_item, next_test]
        WHILE (redraw_line <= 13) & (redraw_item <> 0) DO
          display_stan_line( redraw_item, redraw_line, false, false)
          redraw_line = redraw_line + 1
          redraw_item = test_array[redraw_item,next_test]
        ENDWHILE

 ENDROUTINE

{-----------------------------------------------------------------------------}

  ROUTINE check_next_on_stand_screen
{WriteToLog(" - ") }

  DECLARE check_count

     check_count = 1
     WHILE (check_count <= (14-lineno)) DO
           test_check = test_array[test_check,next_test]
           IF test_check = 0 THEN
              RETURN(0)
           ENDIF
           check_count = check_count + 1
     ENDWHILE
     RETURN(test_check)

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE check_first_on_stand_screen
{WriteToLog(" - ") }

  DECLARE check_count


     check_count = 1
     WHILE (check_count <= (lineno - 2)) DO
           test_check = test_array[test_check,prev_test]
           IF test_check = 0 THEN
              RETURN(0)
           ENDIF
           check_count = check_count + 1
     ENDWHILE
     RETURN(test_check)


 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE remove_standard
{WriteToLog(" - ") }

              standard_key0 = test_array[field_num,standard_id]
              removed_usage = test_array[field_num,usage]


              remove_place = field_num
               test_check = remove_place
              last_on_screen = check_next_on_stand_screen()
              test_check = remove_place
              first_on_screen = check_first_on_screen(lineno)
              remove_place = field_num

              IF last_on_screen <> 0 THEN

                 SCROLL IN WINDOW standard_display FROM LINE lineno TO LINE 13
                       DIRECTION "UP"

                 display_stan_line( last_on_screen, 13, false, false )
                 field_num = test_array[remove_place,next_test]

              ELSEIF  first_on_screen <> 0 THEN

                 SCROLL IN WINDOW standard_display FROM LINE 2 TO LINE lineno
                     DIRECTION "DOWN"

                 display_stan_line( first_on_screen, 2, false, false )
                 field_num = test_array[remove_place,prev_test]

              ELSE

                 SCROLL IN WINDOW standard_display FROM LINE lineno TO LINE 13
                      DIRECTION "UP"
                 IF test_array[remove_place,next_test] <> 0 THEN
                    field_num = test_array[remove_place,next_test]
                 ELSEIF test_array[remove_place,prev_test] <> 0 THEN
                    field_num = test_array[remove_place,prev_test]
                 ENDIF
              ENDIF

              remove()
              check_other_standards(test_array,standard_key0,TRUE)
              selected_standard = true

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE insert_standard
{WriteToLog(" - ") }


         new_stand = worksheet_count + 1

                 build_new_standard ( new_stand , test_array )

                 insert(field_num,new_stand)
                 field_num = new_stand
                 IF test_array[field_num,next_test] <> 0 THEN
                    SCROLL IN WINDOW standard_display FROM LINE lineno TO LINE 13
                       DIRECTION "DOWN"
{
                 ELSE
                    IF lineno < 13 THEN
                       lineno = lineno + 1
                    ELSE
                       SCROLL IN WINDOW standard_display FROM LINE 2 TO LINE 13
                          DIRECTION "UP"
                    ENDIF
}
                 ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE clear_standard_fields
{WriteToLog(" - ") }

      DISPLAY "          " IN WINDOW standard_header ON LINE 2
                                         FROM type_position


      DISPLAY "          " IN WINDOW standard_header ON LINE 2
                                         FROM id_position

      DISPLAY "  " IN WINDOW standard_header ON LINE 1 FROM usvers_position
      DISPLAY "  " IN WINDOW standard_header ON LINE 2 FROM usvers_position

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE select_standard
{WriteToLog(" - ") }

      clear_standard_fields()
      REPEAT

         current_standard_id = " "
         PROMPT FOR current_standard_id IN WINDOW standard_header
                                         ON LINE 2 FROM id_position
                                              BROWSE ON STANDARD

         IF LASTKEY = "EXIT" THEN
            clear_standard_fields()
            RETURN(false)
         ENDIF

      UNTIL current_standard_id <> " "

      REPEAT

         version_number = prompt_for_standard_version ( current_standard_id,
                                                        standard_header,
                                                        usvers_position,
                                                        2 )

         IF version_number = empty then
            clear_standard_fields()
            RETURN(false)
         ENDIF
         version_number = JUSTIFY(PAD(STRIP(version_number)," ",10),"RIGHT")

      UNTIL (version_number <> " ") AND
              (select_new_standard(current_standard_id,version_number,TRUE))

      RETURN(true)

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE select_new_standard ( VALUE ident          ,
                  VALUE version        ,
                  VALUE update_display )
{WriteToLog(" - ") }

    START READ TRANSACTION "NEW_STANDARD"

        IF standards_db . get_by_index ( "KEY0" , ident : version ) = EMPTY THEN

        usage_count = SELECT standard_versions . usage_count
                       FOR UPDATE
                       WHERE (identity = ident  )
                       AND (version = version )

                IF usage_count <> EMPTY THEN

            standards_db . load_from_current ( )

                standards_db . set_by_index ( "KEY0" , ident : version )

        ENDIF
    ELSE

            standards_db . set_by_index ( "KEY0" , ident : version )

        usage_count = SELECT standard_versions . usage_count
                       IN OBJECT standards_db . current

    ENDIF


    START READ TRANSACTION "NEW_STANDARD"

    IF ( usage_count <> empty  ) AND
       ( usage_count <> locked ) THEN

            current_standard_id = SELECT standard_versions.identity
                    IN OBJECT standards_db . current

            version_number = SELECT standard_versions.version
                    IN OBJECT standards_db . current

            standard_type = SELECT standard . standard_type
                   WHERE identity = ident

            IF standard_type = empty THEN

                standard_type = " "
            ENDIF

            IF update_display THEN

                    DISPLAY standard_type
                            IN WINDOW standard_header
                            ON LINE 2 FROM type_position
                            To type_position + 10

                    DISPLAY current_standard_id
                            IN WINDOW standard_header
                            ON LINE 2 FROM id_position
                            To id_position + 10

                    DISPLAY STRIP(version_number)
                            IN WINDOW standard_header
                            ON LINE 2 FROM usvers_position
                            To 77

                    DISPLAY STRIP(usage_count)
                            IN WINDOW standard_header
                            ON LINE 1 FROM usvers_position To 77
            ENDIF

            selected_standard = true

            RETURN(true)
    ELSE
                RETURN(false)
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}
{-----------------------------------------------------------------------------}

ROUTINE stan_key_up
{WriteToLog(" - ") }

   IF at_end THEN
      field_num = one_at_end
      at_end = false
      IF lineno < 13 THEN
         lineno = lineno - 1
      ELSE
         test_check = field_num
         first_on_screen = check_first_on_screen(lineno - 1)
         IF first_on_screen <> 0 THEN
            SCROLL IN WINDOW standard_display FROM LINE 2 TO LINE 13
                         DIRECTION "DOWN"
            display_stan_line( first_on_screen, 2, false, false )
         ELSE
            lineno = lineno - 1
         ENDIF
      ENDIF
   ELSE
      IF test_array[field_num,prev_test] <> 0 THEN
         field_num = test_array[field_num,prev_test]
         IF lineno > 2 THEN
            lineno = lineno - 1
         ELSE
            SCROLL IN WINDOW standard_display FROM LINE 2 TO LINE 13
                      DIRECTION "DOWN"
         ENDIF
      ENDIF
   ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE stan_key_down
{WriteToLog(" - ") }

        IF test_array[field_num,next_test] <> 0 THEN
           field_num = test_array[field_num,next_test]
        ELSE
           at_end = true
           one_at_end = field_num
        ENDIF
        IF lineno < 13 THEN
           lineno = lineno + 1
        ELSE
           SCROLL IN WINDOW standard_display FROM LINE 2 TO LINE 13
                  DIRECTION "UP"
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE okay_to_insert
{WriteToLog(" - ") }

    DECLARE max_use

    max_use = NUMERIC ( SELECT standard_versions . maximum_usage
                 IN OBJECT standards_db . current        )

        IF ( max_use <> 0           ) AND
       ( usage_count >= max_use )  THEN

            flash_message ( "WKS_EXPIRE_STAN_MESS" , TRUE )

                RETURN ( false )
        ELSE
            RETURN ( true )
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE first_displayed
{WriteToLog(" - ") }

       first_one = list_element
       test_check = field_num
       first_on_screen = check_first_on_stand_screen()

       REPEAT

            IF first_one = first_on_screen THEN
               RETURN(first_one)
            ENDIF
            first_one = test_array[first_one,next_test]

       UNTIL false

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE check_other_standards (       test_array     ,
                 VALUE standard_key0  ,
                 VALUE update_display )
{WriteToLog(" - ") }

    DECLARE check_count

         did = LEFTSTRING(standard_key0,10)

         version_key0 = standard_key0#did

         select_new_standard(did,version_key0, update_display)

         usage_count = usage_count - 1

         ASSIGN standard_versions . usage_count
        IN OBJECT standards_db . current = usage_count

     IF update_display THEN

        DISPLAY STRIP(usage_count)
                    IN WINDOW standard_header
            ON LINE 1 FRom usvers_position To 77

     ENDIF

         list_element = find_first_element(field_num)

         IF update_display THEN

              start_templine = first_displayed()

              IF list_element = start_templine THEN
                 on_display = true
              ElSE
                 on_display = false
              ENDIF
         ELSE
              on_display = false
         ENDIF

         templine = 2

         WHILE list_element <> 0 DO
               IF test_array[list_element,standard_id] = standard_key0 THEN
                  IF NUMERIC(test_array[list_element,usage]) >
                                         NUMERIC(removed_usage) THEN
                     test_array[list_element,usage] =
                                     test_array[list_element,usage]- 1
                     test_array[list_element,id_text] =
            get_standard_syntax(current_standard_id,
                                            version_number,
                                            test_array[list_element,usage],
                                            test_array[list_element,
                                sample_type] )
                     test_array[list_element,standard_string] = build_standard_string(list_element)

                     IF on_display AND update_display THEN
                         display_stan_line( list_element, templine, false, false )
                     ENDIF

                  ENDIF
               ENDIF

              IF on_display THEN
                  templine = templine + 1
                  IF templine = 14 THEN
                     on_display = false
                  ENDIF
              ENDIF

              list_element = test_array[list_element, next_test]

          IF update_display THEN

                IF list_element = start_templine THEN
                     on_display = true
                    ENDIF
          ENDIF

         ENDWHILE
 ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE update_standard_version ( standard_db_current, usage_count )
{WriteToLog(" - ") }

    DECLARE expiry_type ,
            expiry_date ,
            max_usage

    expiry_type = SELECT standard_versions.expiry_type   IN OBJECT standard_db_current
    max_usage   = SELECT standard_versions.maximum_usage IN OBJECT standard_db_current

    IF ( expiry_type = "U" ) OR ( expiry_type = "B" ) THEN

        IF usage_count = max_usage THEN

            ASSIGN standard_versions.status
                   IN OBJECT standard_db_current = "B"
            ASSIGN standard_versions.expiry_date
                   IN OBJECT standard_db_current = NOW

        ENDIF

    ENDIF

    ASSIGN standard_versions.usage_count
           IN OBJECT standard_db_current = usage_count

ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE build_new_standard ( new_stand , test_array )
{WriteToLog(" - ") }

{**AS2003R1}
        DECLARE std_batch_name        {v1.1}
        DECLARE standard_and_batch    {v1.1}
{**AE2003R1}
        usage_count = usage_count + 1
        worksheet_count = worksheet_count + 1
        test_array[new_stand,sample_type] = standard_type
        test_array[new_stand,new_entry] = true
        test_array[new_stand,sample_id] = "          "
        test_array[new_stand,standard_id] = SELECT standard_versions.identity
                          IN OBJECT standards_db . current:
                                            SELECT standard_versions.version
                          IN OBJECT standards_db . current
        test_array[new_stand,usage] = usage_count

{**MS2003R1}
        {*********************************************************************
        * v1.1 Read the batch name and include in the information passed to
        * get_standard_syntax, so its included in the id_text
        *********************************************************************}
        std_batch_name = SELECT standard_versions.std_batchname
                         IN OBJECT standards_db . current
        standard_and_batch = STRIP( current_standard_id ) : "-" : STRIP( std_batch_name )

        test_array[new_stand,id_text] =
            get_standard_syntax(standard_and_batch,
                                            version_number,
                                            test_array[new_stand,usage],
                                            standard_type )

{***
        test_array[new_stand,id_text] =
            get_standard_syntax(current_standard_id,
                                            version_number,
                                            test_array[new_stand,usage],
                                            standard_type )
***}

        {*********************************************************************
        *********************************************************************}
{**ME 2003R1}
        test_array[new_stand,standard_string] = build_standard_string(new_stand)

    update_standard_version ( standards_db . current, usage_count )

    IF global ( "TERMTYPE" ) <> "GUI" THEN

            DISPLAY STRIP(usage_count)
                IN WINDOW standard_header
            ON LINE 1 FROM usvers_position TO 77
    ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

  ROUTINE insert (insert_place, insert_stan)
{WriteToLog(" - ") }


       IF at_end THEN {test_array[insert_place,next_test] = 0 THEN}

         test_array[insert_place,next_test] = insert_stan
         test_array[insert_stan,prev_test] = insert_place
         test_array[insert_stan,next_test] = 0

       ELSEIF test_array[insert_place,prev_test] = 0 THEN
         test_array[insert_stan,prev_test] = 0
         test_array[insert_stan,next_test] = insert_place
         test_array[insert_place,prev_test] = insert_stan

       ELSE
         test_array[insert_stan,next_test] = insert_place
         test_array[insert_stan,prev_test] =
                            test_array[insert_place,prev_test]
         test_array[test_array[insert_place,prev_test],next_test] =
                                               insert_stan
         test_array[insert_place,prev_test] = insert_stan

       ENDIF


  ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE remove
{WriteToLog(" - ") }

     IF test_array[remove_place,next_test] = 0 THEN
        IF (first_on_screen = 0 ) AND ( last_on_screen = 0 ) THEN
           IF lineno > 2 THEN
              lineno = lineno - 1
           ENDIF
        ENDIF
        test_array[ test_array[remove_place,prev_test], next_test] = 0

     ELSEIF test_array[remove_place,prev_test] = 0 THEN
        test_array[ test_array[remove_place,next_test], prev_test] = 0

     ELSE
        test_array[ test_array[remove_place,prev_test] , next_test] =
                                       test_array[ remove_place, next_test]
        test_array[ test_array[remove_place,next_test] , prev_test] =
                                       test_array[ remove_place, prev_test]
     ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE create_standards (       test_array ,
               VALUE anal_id    )
WriteToLog("create_standards")

list_element = first_in_list

WHILE list_element <> 0 DO
    IF test_array[list_element,new_entry] THEN
        IF global ( "TERMTYPE" ) <> "GUI" THEN
            display_bottom_line(GET_USER_MESSAGE("WKS_ASS_STAN_TO_WKS ",1),standard_display,78,14,false)
        ENDIF
        IF create_a_standard(test_array[list_element,standard_id], test_array[list_element,id_text],
                             anal_id, sampid, tesnum) THEN
            test_array[list_element,test_num] = tesnum
            WriteToLog("create_a_standard(":test_array[list_element,standard_id]:", ":
                                            test_array[list_element,id_text]:", ":
                                            anal_id:", ":
                                            sampid:", ":
                                            tesnum:")")
        ENDIF
    ENDIF
    list_element = test_array[list_element,next_test]
ENDWHILE

ENDROUTINE

{-----------------------------------------------------------------------------}


{-----------------------------------------------------------------------------}
{ Saving routines }
{-----------------------------------------------------------------------------}
 ROUTINE generate_worksheet_name ( id_for_search )
{WriteToLog(" - ") }


   IF wks_type = "A" THEN
      new_counter = INCREMENT ( "ANALYSIS", id_for_search)
   ELSE
      new_counter = INCREMENT ( "PREPARATION", id_for_search)
   ENDIF
   RETURN ( STRIP(id_for_search):"_":STRIP(new_counter))

 ENDROUTINE

{-----------------------------------------------------------------------------}
{ boolean return from this function }

 ROUTINE create_idv_entry(worksheet_name, unique_number, idv_name)
{WriteToLog(" - ") }

      START READ TRANSACTION "worksheets"
{***      unique_number = increment( "WORKSHEET","WORKSHEET_COUNT") }
      unique_number = increment( "TEST", "TEST_NUMBER")

      full_record_id = idv_name:PAD(worksheet_name," ",20)
      {full_record_id = SUBSTITUTE(idv_name:PAD(worksheet_name," ",20), "+", "")}

      RESERVE ENTRY worksheet, full_record_id, status

      If (status = empty) THEN

         ASSIGN worksheet.link_number = unique_number
         ASSIGN worksheet.status = "V"
         ASSIGN worksheet.date_generated = DATE(now)
         ASSIGN worksheet.generator_operator = operator
         ASSIGN worksheet.assigned_operator = wks_operator
         SET GLOBAL ("AUDITPROMPTSUPPRESS") TO TRUE
         START WRITE TRANSACTION "worksheets"
         UPDATE worksheet
         COMMIT
         RETURN(true)
      ELSE
         RETURN(false)
      ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE save_worksheet(worksheet_name,
                        unique_number,
                        wks_operator,
                        id_for_search,
            test_array    )
{WriteToLog(" - ") }

    DECLARE save_count

         { Make filename lowercase for Unix }

         wks_filename = lib_utils_logical_to_string ( wks_directory ) : "\" : TOLOWER ( STRIP ( worksheet_name ) : wks_extension )

         FILE CREATE wks_filename,success
         IF success = empty THEN
            IF wks_type = "A" THEN
               FILE WRITE wks_filename, "$ANALYSIS",success
            ELSEIF wks_type = "T" THEN
               FILE WRITE wks_filename, "$TESTPREP",success
            ELSEIF wks_type = "P" THEN
               FILE WRITE wks_filename, "$SMPPREP",success
            ELSEIF wks_type = "S" THEN
               FILE WRITE wks_filename, "$SAMPLE",success
            ENDIF
            FILE WRITE wks_filename, id_for_search,success
            FILE WRITE wks_filename, LEFTSTRING(DATE(NOW),11) ,success
            FILE WRITE wks_filename, wks_operator ,success
            save_count = 1
            list_element = first_in_list
            WHILE list_element <> 0 DO
                  IF wks_type = "P" THEN

{ Modified to check test has not been assigned to worksheet through simultaneous
  worksheet generation }

                     IF update_sample(test_array[list_element,sample_id],unique_number,true) THEN
                FILE WRITE wks_filename, test_array[list_element,sample_id], success
                        IF success <> empty THEN
               worksheet_file_error ( success )
                           update_sample(test_array[list_element,sample_id],unique_number,false)
                        ENDIF
                     ENDIF
                  ELSE
                     IF update_test(test_array[list_element,test_num],unique_number,save_count)
                        THEN
                        FILE WRITE wks_filename, test_array[list_element,test_num], success
                        IF success <> empty THEN
               worksheet_file_error ( success )
                           update_test(test_array[list_element,test_num],0,0)
                        ENDIF
                     ENDIF
                  ENDIF
                  list_element = test_array[list_element,next_test]
                  save_count = save_count + 1
            ENDWHILE
            FILE CLOSE wks_filename,success
            IF success <> empty THEN
        worksheet_file_error ( success )
            ENDIF
            RETURN(true)
         ELSE
        worksheet_file_error ( success )
            RETURN(false)
         ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE update_test(VALUE testnumber, VALUE unique_number, VALUE wks_posn )
{WriteToLog(" - ") }

        { #SUSAND Bug 1286 Dont carry on updating test if test number is empty }
    IF testnumber = EMPTY THEN
           RETURN (FALSE)
        ENDIF

        IF select_the_test( testnumber) THEN
           IF (SELECT test.worksheet = 0) OR (unique_number = 0) THEN
              IF SELECT test.status = status_required THEN
                 ASSIGN test.worksheet = unique_number
                 ASSIGN test.worksheet_position = wks_posn
                 SET GLOBAL ("AUDITPROMPTSUPPRESS") TO TRUE
                 START WRITE TRANSACTION "worksheets"
                 UPDATE test
                 RETURN(true)
              ELSE
                 flash_message ( "WKS_T_SIMULTANEOUS_STATUS" , false)
                 RETURN(false)
              ENDIF
{***           ELSEIF (NUMERIC(test_wks_id) <> NUMERIC(unique_number)) THEN }
           ELSEIF (SELECT test.worksheet <> unique_number) THEN
              flash_message ( "WKS_T_SIMULTANEOUS_ASSIGN" , false )
              RETURN(false)
           ELSE    { test is already on current worksheet assign new position }
              ASSIGN test.worksheet_position = wks_posn
              SET GLOBAL ("AUDITPROMPTSUPPRESS") TO TRUE
              START WRITE TRANSACTION "worksheets"
              UPDATE test
              RETURN(true)
           ENDIF
        ELSE
           flash_message ( "WKS_T_SIMULTANEOUS_DELETE" , false )
           RETURN(false)
        ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE update_sample(sampid, VALUE unique_number, VALUE is_on_wks )
{WriteToLog(" - ") }

        IF select_the_sample( sampid) THEN
          IF ((NOT SELECT sample.on_wks) AND (is_on_wks)) OR
               ((SELECT sample.on_wks) AND (NOT is_on_wks )) THEN
             IF SELECT sample.status = "W" THEN
                ASSIGN sample.on_wks = is_on_wks
                ASSIGN sample.link_number = unique_number
                SET GLOBAL ("AUDITPROMPTSUPPRESS") TO TRUE
                START WRITE TRANSACTION "worksheets"
                UPDATE sample
                RETURN(true)
             ELSE
                flash_message ( "WKS_S_SIMULTANEOUS_STATUS" , false )
                RETURN(false)
             ENDIF
          ELSE
            flash_message ( "WKS_S_SIMULTANEOUS_ASSIGN" , false)
            RETURN(false)
          ENDIF
        ELSE
          flash_message ( "WKS_S_SIMULTANEOUS_DELETE " , false )
          RETURN(false)
        ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE prompt_for_worksheet_operator ( VALUE idv_name )
{WriteToLog(" - ") }

         IF GLOBAL ("WSHTOPER") THEN
            RETURN(get_worksheet_operator(idv_name))
         ELSE
            RETURN("BLANK")
         ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE get_worksheet_operator ( idv_name )
{WriteToLog(" - ") }

          CREATE TEXT WINDOW operator_box
                 HEIGHT 4
                 WIDTH 35
                 BORDER
         HELP CONTEXT = "$WORKSHEET_OPERATOR"

          display_top_line(GET_USER_MESSAGE("WKS_OP_ASSIGN      ",1)
               ,operator_box,35)

          DISPLAY GET_USER_MESSAGE("WKS_ENT_OPID       ",1)
        IN WINDOW operator_box ON LINE 3 FROM 2

          PASTE TEXT WINDOW operator_box ON LINE 18 FROM 3
          REPEAT
              theop = " "
              PROMPT for theop IN WINDOW operator_box ON LINE 3 FROM 22
                                              BROWSE ON personnel
              IF LASTKEY = "EXIT" THEN
                 UNPASTE TEXT WINDOW operator_box
                 RETURN("EXIT")
              ELSE
                 IF (GLOBAL ("APPROVAL_CHECK_ENABLED")) THEN
                    IF idv_name = anal_works_idv THEN
                       what_type = "Analysis "
                       CALL_ROUTINE "check_anal_approval"
                          USING theop,id_for_search
                          RETURNING is_ok IN LIBRARY "$LIB_APPR"
                    ELSE
                       what_type = "Preparation "
                       CALL_ROUTINE "check_prep_approval"
                          USING theop,id_for_search
                          RETURNING is_ok IN LIBRARY "$LIB_APPR"
                    ENDIF
                    IF NOT is_ok THEN
                       flash_message ( GET_USER_MESSAGE("WKS_NOT_APPROVED ",1)
                :what_type:id_for_search,false )
                        the_op = " "
                    ENDIF
                 ENDIF
              ENDIF

          UNTIL theop <> " "
          UNPASTE TEXT WINDOW operator_box
          RETURN(theop)

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE show_final_message(worksheet_name)
{WriteToLog(" - ") }

         CREATE TEXT WINDOW final_mess_box
                HEIGHT 1
                WIDTH 60
                BORDER
        HELP CONTEXT = "$WORKSHEET_FINAL"


         IF wks_type = "A" THEN
            DISPLAY GET_USER_MESSAGE("WKS_CREATE_ANAL_WKS ",1)
        IN WINDOW final_mess_box ON LINE 1 FROM 1 BOLD
         ELSE
            DISPLAY GET_USER_MESSAGE("WKS_CREATE_PREP_WKS ",1)
        IN WINDOW final_mess_box ON LINE 1 FROM 1 BOLD
         ENDIF
         DISPLAY worksheet_name IN WINDOW final_mess_box ON LINe 1 FROM 34

         PASTE TEXT WINDOW final_mess_box ON LINE 15 FROM 10
         PAUSE()
         UNPASTE TEXT WINDOW final_mess_box

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE perform_option ( VALUE option , wks_file )
{WriteToLog(" - ") }

         CREATE TEXT WINDOW mess_box
                HEIGHT 5
                WIDTH 24
                BORDER
        HELP CONTEXT = "$WORKSHEET_MESS"

            IF option = "C" THEN
               IF confirm_with_message ( "WKS_COMPLETE_WKS" ) THEN
                  do_mess_head( GET_USER_MESSAGE("WKS_COMPLETE_WKS  ",1) )
                  IF read_test_list() THEN
             IF lock_the_sample() THEN
                       complete_tests ()
                       UNPASTE TEXT WINDOW mess_box
                       RETURN(true)
                    ELSE
                       UNPASTE TEXT WINDOW mess_box
                       RETURN(false)
                    ENDIF
                  ELSE
                     UNPASTE TEXT WINDOW mess_box
                     RETURN(false)
                  ENDIF
               ELSE
                  RETURN(false)
               ENDIF
            ELSEIF option = "D" THEN
               IF confirm_with_message ( "WKS_CANCEL_WKS" ) THEN
                  do_mess_head( GET_USER_MESSAGE("WKS_CANCEL_WKS    ",1) )
                  IF read_test_list() THEN
                     cancel_standards ()
                     UNPASTE TEXT WINDOW mess_box
                     RETURN(true)
                  ELSE
                     UNPASTE TEXT WINDOW mess_box
                     RETURN(false)
                  ENDIF
               ELSE
                 RETURN(false)
               ENDIF

            ELSEIF option = "T" THEN
                IF read_test_list() THEN
                   RETURN ( complete_prep_routine( GET_USER_MESSAGE("WKS_TCOMP_TITLE",1) , FALSE ))
                ELSE
                   RETURN(false)
                ENDIF

            ELSEIF option = "P" THEN
                IF read_samp_list() THEN
                   RETURN ( complete_prep_routine( GET_USER_MESSAGE("WKS_PCOMP_TITLE",1) , TRUE ))
                ELSE
                   RETURN(false)
                ENDIF

            ELSEIF option = "R" THEN
               IF confirm_with_message ( "WKS_REG_D_WKS" ) THEN
                  do_mess_head( GET_USER_MESSAGE("WKS_REG_D_WKS",1))
                  IF read_test_list() THEN
                     IF regenerate_tests() THEN
                        save_regen_worksheet(worksheet_id,
                                             unique_number,
                                             wks_op,
                                             wks_sample_id)
                        UNPASTE TEXT WINDOW mess_box
                        RETURN(true)
                     ELSE
                        flash_message ( "WKS_NO_REG_TESTS" , true)
                        UNPASTE TEXT WINDOW mess_box
                        RETURN(false)
             ENDIF
                  ELSE
                     UNPASTE TEXT WINDOW mess_box
                     RETURN(false)
                  ENDIF
               ELSE
                  RETURN(false)
               ENDIF

            ENDIF
            RETURN(true)

 ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE do_mess_head ( VALUE the_message )
{WriteToLog(" - ") }

    IF global ( "TERMTYPE" ) <> "GUI" THEN

            display_top_line(the_message,mess_box,24)
            PASTE TEXT WINDOW mess_box ON LINE 13 FROM 40
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE read_test_list
{WriteToLog(" - ") }

       test_count = 0

       FILE OPEN wks_file, success

       IF success = EMPTY THEN

          FILE READ wks_file,worksheet_type,success
          FILE READ wks_file,wks_analysis,success
          FILE READ wks_file,wks_date,success
          FILE READ wks_file,wks_op,success

          IF success = EMPTY THEN

             IF ok_worksheet ( wks_type,worksheet_type ) THEN

                REPEAT

                   FILE READ wks_file, wks_test_num, success

                   IF ( wks_test_num <> EMPTY ) AND
              ( wks_test_num <> " " ) THEN

                       valid_test = SELECT test.sample
                                    WHERE test_number = wks_test_num

                       IF ( valid_test <> EMPTY ) THEN

                          valid_samp = SELECT sample.id_numeric
                                       WHERE id_numeric = valid_test

                          IF ( valid_samp <> EMPTY ) THEN

                             test_count = test_count + 1

                             test_array [ test_count,sample_id ] = valid_samp
                             test_array [ test_count,test_num  ] = wks_test_num

                             IF ( wks_type = "T" ) THEN

                                test_array [ test_count, id_text ] =
                                                 SELECT sample.id_text
                                test_array [ test_count, completed ] =
                                               check_stat(SELECT test.status)
                                test_array [ test_count, modifiable ] =
                                          NOT test_array[test_count,completed]
                                test_array [ test_count, analysis_id ] =
                                                   SELECT test.analysis
                                test_array [ test_count, rep_no ] =
                                                   SELECT test.test_count
                                test_array [ test_count, complete_string ] =
                                              build_tcomp_string(test_count)

                                test_array [ test_count, next_comp ] = 0
                                test_array [ test_count, prev_comp ] =
                                                                test_count - 1

                                IF ( test_count > 1 ) THEN
                                   test_array[test_array[test_count,prev_comp],
                                         next_comp] = test_count
                                ENDIF

                             ELSEIF wks_type = "A" THEN
                                test_array[test_count,sample_type] =
                                            ( SELECT sample.standard
                                                          = true  )
                             ELSEIF wks_type = "S" THEN
                                test_array[test_count,sample_type] = false
                             ENDIF
                          ENDIF
                       ENDIF
                   ENDIF

                UNTIL ( success <> EMPTY )

                FILE CLOSE wks_file,success

                IF ( success <> EMPTY ) THEN
                worksheet_file_error ( success )
                ENDIF

                first_in_list = 1

                RETURN ( TRUE )

             ELSE

               flash_message ( GET_USER_MESSAGE("WKS_INVALID_WORKSHEET_TYPE ",1)
                   : wks_type, TRUE )

               FILE CLOSE wks_file,success

               IF ( success <> EMPTY ) THEN
                worksheet_file_error ( success )
               ENDIF

               RETURN ( FALSE )

             ENDIF

          ELSE

             IF ( success <> EMPTY ) THEN
           worksheet_file_error ( success )
             ENDIF

             RETURN ( FALSE )

          ENDIF

       ELSE
       worksheet_file_error ( success )
           RETURN ( FALSE )
       ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}
ROUTINE read_samp_list
{WriteToLog(" - ") }

       FILE OPEN wks_file, success
       test_count = 0
       IF success = empty THEN


          FILE READ wks_file,worksheet_type,success
          FILE READ wks_file,wks_analysis,success
          FILE READ wks_file,wks_date,success
          FILE READ wks_file,wks_op,success

          IF success = empty THEN

             IF ok_worksheet(wks_type,worksheet_type) THEN

                REPEAT
                   file read wks_file, wks_test_num, success
                   IF (wks_test_num <> empty) AND (wks_test_num <> " ") THEN
                       valid_samp = SELECT sample.id_text
                                    WHERE id_numeric = wks_test_num
                                    ORDER ON id_numeric
                       IF valid_samp <> empty THEN
                          test_count = test_count + 1
                          test_array[test_count,sample_id]   = wks_test_num
                          test_array[test_count,id_text] = valid_samp
                          test_array[test_count,completed]   =
                                              check_stat(SELECT sample.status)
                          test_array[test_count,modifiable]  =
                                          NOT test_array[test_count,completed]
                          test_array[test_count,analysis_id] = " "
                          test_array[test_count,rep_no]        = " "
                          test_array[test_count,next_comp]   = 0
                          test_array[test_count,prev_comp]   = test_count - 1
                          test_array[test_count,complete_string] =
                                        build_pcomp_string(test_count)

                          IF test_count > 1 THEN
                             test_array[test_array[test_count,prev_comp],
                                         next_comp] = test_count
                          ENDIF
                       ENDIF
                   ENDIF
                UNTIL success <> empty
                FILE CLOSE wks_file,success
                IF success <> empty THEN
             worksheet_file_error ( success )
                ENDIF
                RETURN(true)

             ELSE

               flash_message(GET_USER_MESSAGE("WKS_INVALID_WORKSHEET_TYPE ",1)
                 :wks_type,true)
               FILE CLOSE wks_file,success
               IF success <> empty THEN
             worksheet_file_error ( success )
               ENDIF
               RETURN(false)
             ENDIF
          ENDIF
       ELSE
      worksheet_file_error ( success )
       ENDIF


ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE ok_worksheet ( VALUE wks_char,
                       VALUE read_type)
{WriteToLog(" - ") }

        IF (wks_char = "A") AND (read_type = "$ANALYSIS") THEN
           RETURN(true)
        ELSEIF (wks_char = "T") AND (read_type = "$TESTPREP") THEN
           RETURN(true)
        ELSEIF (wks_char = "P") AND (read_type = "$SMPPREP") THEN
           RETURN(true)
        ELSEIF (wks_char = "S") AND (read_type = "$SAMPLE") THEN
           RETURN(true)
        ELSE
           RETURN(false)
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE check_stat ( VALUE input_stat)
{WriteToLog(" - ") }

        IF input_stat = "W" THEN
           RETURN(false)
        ELSE
           RETURN(true)
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE complete_tests
{WriteToLog(" - ") }

    DECLARE t_count , status1 , status2

        START READ TRANSACTION "worksheets"
        t_count = 1

        WHILE t_count <= test_count Do

        status1 = test_array [ t_count , sample_id ]
                status2 = GET_USER_MESSAGE ( "WKS_IS_COMP" , 1 )

        IF GLOBAL ( "TERMTYPE" ) = "GUI" THEN

            window_set_status ( status1 : " " : status2 )
                ELSE
            DISPLAY status1
                                IN WINDOW mess_box ON LINE 3 FROM 2
                    DISPLAY centre_text( status2 , 22 )
                IN WINDOW mess_box ON LINE 5 FROM 2 BOLD
        ENDIF

        clear_test ( test_array[t_count,test_num],
                                    test_array[t_count,sample_type], false )
                t_count = t_count + 1
        ENDWHILE

        START WRITE TRANSACTION "worksheets"

        DELETE worksheet

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE cancel_standards
{WriteToLog(" - ") }

        DECLARE t_count , status1 , status2

        START READ TRANSACTION "worksheets"

        t_count = 1

        WHILE t_count <= test_count DO

                status1 = test_array[t_count,sample_id]


                IF test_array[t_count,sample_type]  THEN

                        status2 = GET_USER_MESSAGE("WKS_IS_CANC   ",1)

            IF GLOBAL ( "TERMTYPE" ) = "GUI" THEN

                window_set_status ( status1 : " " : status2 )
                    ELSE
                DISPLAY status1
                                IN WINDOW mess_box ON LINE 3 FROM 2

                        DISPLAY centre_text ( status2 , 22 )
                    IN WINDOW mess_box ON LINE 5 FROM 2 BOLD
                        ENDIF

                    cancel_the_standard( test_array[t_count,sample_id])

                ELSEIF test_array[t_count,sample_id] <> "?" THEN

                        status2 = GET_USER_MESSAGE("WKS_IS_COMP",1)

            IF GLOBAL ( "TERMTYPE" ) = "GUI" THEN

                window_set_status ( status1 : " " : status2 )
                    ELSE
                        DISPLAY status1
                                    IN WINDOW mess_box ON LINE 3 FROM 2

                        DISPLAY centre_text ( status2 , 22 )
                    IN WINDOW mess_box ON LINE 5 FROM 2 BOLD
                        ENDIF

                    clear_test ( test_array[t_count,test_num],false, true )

                ENDIF

                t_count = t_count + 1

        ENDWHILE

        START WRITE TRANSACTION "worksheets"

        DELETE worksheet

ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE cancel_the_standard( VALUE standard_sample )
{WriteToLog(" - ") }

         IF select_the_sample ( standard_sample ) THEN
            START WRITE TRANSACTION "worksheets"
            CHANGE SAMPLE STATUS TO "X"
            SET GLOBAL ("AUDITPROMPTSUPPRESS") TO TRUE
            UPDATE sample
         ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}

 ROUTINE clear_test ( VALUE test_number, VALUE is_stan, VALUE compulsory)
{WriteToLog(" - ") }

     IF select_the_test ( test_number ) THEN
        START WRITE TRANSACTION "worksheets"
        IF compulsory THEN
           ASSIGN test.worksheet = 0
           ASSIGN test.worksheet_position = 0
           SET GLOBAL ("AUDITPROMPTSUPPRESS") TO TRUE
           UPDATE test
        ELSE
           IF SELECT test.status = "V" THEN
              IF NOT is_stan THEN
                 ASSIGN test.worksheet = 0
                 ASSIGN test.worksheet_position = 0
              ELSE
                SET GLOBAL ("AUDITPROMPTSUPPRESS") TO TRUE
                UPDATE test
                cancel_the_standard( test_array[t_count,sample_id])
              ENDIF
           ELSEIF SELECT test.status = "P" THEN
              CHANGE TEST STATUS TO "C"
           ENDIF
           SET GLOBAL ("AUDITPROMPTSUPPRESS") TO TRUE
           UPDATE test
        ENDIF
     ELSE
       flash_message(no_found_test:test_number, false)
     ENDIF

 ENDROUTINE

{-----------------------------------------------------------------------------}
{ sorting routines                                                            }
{-----------------------------------------------------------------------------}

ROUTINE save_sort
{WriteToLog(" - ") }

         sort_count = sort_count + 1
         sort_array[sort_count,link_no] = worksheet_count
         SET FORMAT ("999999.999")
         IF wks_type <> "P" THEN
            sort_array[sort_count,param3]  = NUMERIC(
                      (test_array[worksheet_count,sample_id]):".":
                      RIGHTSTRING("000":
                  (STRIP(test_array[worksheet_count,
                     replicate_no]))
                  ,3)
                                                 )
         ELSE
            sort_array[sort_count,param3]  = 1

         ENDIF
         SET FORMAT ("99999999")

         IF (sort_mode = "P")|(sort_mode = "D") THEN
            sort_array[sort_count,param1] =
                      NUMERIC(test_array[worksheet_count,test_priority])
            sort_array[sort_count,param2] =  " "

         ELSEIF (sort_mode = "R") THEN
            sort_array[sort_count,param1] =
                      convert_date(test_array[worksheet_count,date_res_req])
            sort_array[sort_count,param2] =  " "

         ELSEIF (sort_mode = "L") THEN
            sort_array[sort_count,param1] =
                      convert_date(test_array[worksheet_count,login_date])
            sort_array[sort_count,param2] =  " "

         ELSEIF (sort_mode = "J") THEN
            sort_array[sort_count,param1] =
                      (test_array[worksheet_count,test_job_name])
            sort_array[sort_count,param2] =  " "

         ELSEIF (sort_mode = "Q")|(sort_mode = "E")  THEN
            sort_array[sort_count,param1] =
                      convert_date(test_array[worksheet_count,date_res_req])
            sort_array[sort_count,param2] =
                      NUMERIC(test_array[worksheet_count,test_priority])

         ELSEIF (sort_mode = "S")|(sort_mode = "M") THEN
            sort_array[sort_count,param1] =
                      convert_date(test_array[worksheet_count,login_date])
            sort_array[sort_count,param2] =
                      NUMERIC(test_array[worksheet_count,test_priority])

         ELSEIF (sort_mode = "A")|(sort_mode = "B") THEN
            sort_array[sort_count,param1] =
                      NUMERIC(test_array[worksheet_count,samp_priority])
            sort_array[sort_count,param2] =  " "

         ELSEIF (sort_mode = "C")|(sort_mode = "F") THEN
            sort_array[sort_count,param1] =
                      NUMERIC(test_array[worksheet_count,samp_priority])
            sort_array[sort_count,param2] =
                      NUMERIC(test_array[worksheet_count,test_priority])
         ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE reorder_list_from_sort
{WriteToLog(" - ") }

    DECLARE order_number

    sort_the_array()

    DECLARE temp_test_array

    ARRAY temp_test_array = " "

    last_read = 0
    read_line = 1

    first_in_list = 1

    WHILE sort_array[read_line,link_no] <> empty DO

        order_number = sort_array[read_line,link_no]
        temp_test_array [ read_line ] =
                     test_array [ order_number ]

        temp_test_array[read_line,prev_test] = last_read
        temp_test_array[read_line,next_test] = 0

        IF last_read <> 0 THEN
            temp_test_array[temp_test_array[read_line,
                                            prev_test],
                            next_test] = read_line
        ENDIF

        last_read = last_read + 1
        read_line = read_line + 1

    ENDWHILE

    test_array = temp_test_array
    temp_test_array = 0

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE swap
{WriteToLog(" - ") }

  hold_link_no = sort_array[J,link_no]
  hold_param1  = sort_array[J,param1]
  hold_param2  = sort_array[J,param2]
  hold_samprep = sort_array[J,param3]


  sort_array[J,link_no] = sort_array[I,link_no]
  sort_array[J,param1]  = sort_array[I,param1]
  sort_array[J,param2]  = sort_array[I,param2]
  sort_array[J,param3]  = sort_array[I,param3]

  sort_array[I,link_no] = hold_link_no
  sort_array[I,param1]  = hold_param1
  sort_array[I,param2]  = hold_param2
  sort_array[I,param3]  = hold_samprep

ENDROUTINE

{-----------------------------------------------------------------------------}


ROUTINE sort_the_array
{WriteToLog(" - ") }

   jump = sort_count
   WHILE jump > 1 DO
         jump = jump DIV 2
         REPEAT
            NO_change = true
            J = 1
            WHILE J <= sort_count-jump DO
                  I = J + jump

                  IF (sort_mode = "P")|(sort_mode = "R")|(sort_mode = "L")|
                       (sort_mode = "A") THEN
                     IF NUMERIC(sort_array[J,param1]) >
                                        NUMERIC(sort_array[I,param1]) THEN
                        swap()
                        NO_change = false
                     ELSEIF NUMERIC(sort_array[J,param1]) =
                                        NUMERIC(sort_array[I,param1]) THEN

                        IF NUMERIC(sort_array[J,param3]) >
                                        NUMERIC(sort_array[I,param3]) THEN
                           swap()
                           NO_change = false
                        ENDIF
                     ENDIF

                  ELSEIF (sort_mode = "J") THEN
                     IF (sort_array[J,param1]) > (sort_array[I,param1]) THEN
                        swap()
                        NO_change = false
                     ELSEIF (sort_array[J,param1]) = (sort_array[I,param1]) THEN
                        IF NUMERIC(sort_array[J,param3]) >
                                        NUMERIC(sort_array[I,param3]) THEN
                           swap()
                           NO_change = false
                        ENDIF
                     ENDIF

                  ELSEIF (sort_mode = "D")|(sort_mode = "B") THEN
                     IF NUMERIC(sort_array[J,param1]) <
                                        NUMERIC(sort_array[I,param1]) THEN
                        swap()
                        NO_change = false
                     ELSEIF NUMERIC(sort_array[J,param1]) =
                                        NUMERIC(sort_array[I,param1]) THEN
                        IF NUMERIC(sort_array[J,param3]) >
                                        NUMERIC(sort_array[I,param3]) THEN
                           swap()
                           NO_change = false
                        ENDIF
                     ENDIF

                  ELSEIF (sort_mode = "Q")|(sort_mode = "S")
                            |(sort_mode = "C") THEN
                     IF NUMERIC(sort_array[J,param1]) >
                                        NUMERIC(sort_array[I,param1]) THEN
                         swap()
                         NO_change = false
                     ELSEIF NUMERIC(sort_array[J,param1]) =
                                        NUMERIC(sort_array[I,param1]) THEN
                         IF NUMERIC(sort_array[J,param2]) >
                                        NUMERIC(sort_array[I,param2]) THEN
                            swap()
                            NO_change = false
                         ELSEIF NUMERIC(sort_array[J,param2]) =
                                        NUMERIC(sort_array[I,param2]) THEN
                            IF NUMERIC(sort_array[J,param3]) >
                                        NUMERIC(sort_array[I,param3]) THEN
                               swap()
                               NO_change = false
                            ENDIF

                         ENDIF

                     ENDIF

                   ELSEIF (sort_mode = "E")|(sort_mode = "M") THEN
                     IF NUMERIC(sort_array[J,param1]) >
                                        NUMERIC(sort_array[I,param1]) THEN
                         swap()
                         NO_change = false
                     ELSEIF NUMERIC(sort_array[J,param1]) =
                                        NUMERIC(sort_array[I,param1]) THEN
                         IF NUMERIC(sort_array[J,param2]) <
                                        NUMERIC(sort_array[I,param2]) THEN
                            swap()
                            NO_change = false
                         ELSEIF NUMERIC(sort_array[J,param2]) =
                                        NUMERIC(sort_array[I,param2]) THEN
                            IF NUMERIC(sort_array[J,param3]) >
                                        NUMERIC(sort_array[I,param3]) THEN
                               swap()
                               NO_change = false
                            ENDIF
                         ENDIF
                     ENDIF

                   ELSEIF (sort_mode = "F") THEN
                     IF NUMERIC(sort_array[J,param1]) <
                                        NUMERIC(sort_array[I,param1]) THEN
                         swap()
                         NO_change = false
                     ELSEIF NUMERIC(sort_array[J,param1]) =
                                        NUMERIC(sort_array[I,param1]) THEN
                         IF NUMERIC(sort_array[J,param2]) <
                                        NUMERIC(sort_array[I,param2]) THEN
                            swap()
                            NO_change = false
                         ELSEIF NUMERIC(sort_array[J,param2]) =
                                        NUMERIC(sort_array[I,param2]) THEN
                            IF NUMERIC(sort_array[J,param3]) >
                                        NUMERIC(sort_array[I,param3]) THEN
                               swap()
                               NO_change = false
                            ENDIF
                         ENDIF
                     ENDIF

                   ENDIF
                   J = J + 1
              ENDWHILE
        UNTIL no_change
     ENDWHILE
ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE convert_date ( VALUE converter)
{WriteToLog(" - ") }

IF (DATE(converter) <> error) AND (converter <> " ") THEN
{   converter = LEFTSTRING(converter,11)}

   month_pos = INDEX(converter,"-")
   day_pos = STRIP(LEFTSTRING(converter,(month_pos-1)))
   IF LENGTH(day_pos) = 1 THEN
      day_pos = "0":day_pos
   ENDIF
   month = SUBSTRING(converter,(month_pos+1),3)
   year_pos = SUBSTRING(converter,(month_pos+5),4)
   hrs_pos  = SUBSTRING(converter,month_pos+10,2)
   min_pos  = SUBSTRING(converter,month_pos+13,2)
   sec_pos  = SUBSTRING(converter,month_pos+16,2)

   found_it = false
   num_pos = 1
   REPEAT
     checker = SUBSTRING(GET_USER_MESSAGE("WKS_ST1",1),num_pos,3)
     IF checker = month THEN
        num_mon = SUBSTRING(st2,num_pos,2)
        found_it = true
     ENDIF
     num_pos = num_pos + 3
   UNTIL found_it

   converted = STRIP(year_pos):STRIP(num_mon):STRIP(day_pos):
           STRIP(hrs_pos):STRIP(min_pos):STRIP(sec_pos)

ELSEIF NUMTEXT(converter) THEN
   converted = STRIP(converter)
ELSE
   converted = "0"
ENDIF
RETURN(converted)

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE build_tcomp_string ( list_count )
{WriteToLog(" - ") }

RETURN ( test_array[list_count,sample_id]:" ":
         PAD(test_array[list_count,id_text]," ",30):" ":
         PAD(STRIP(test_array[list_count,analysis_id]):"/":
         STRIP(test_array[list_count,rep_no])," ",13) :" ":
         check_bool(test_array[list_count,completed])
       )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE build_pcomp_string ( list_count )
{WriteToLog(" - ") }

RETURN ( test_array[list_count,sample_id]:" ":
          PAD(test_array[list_count,id_text]," ",44):" ":
         check_bool(test_array[list_count,completed])
       )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE check_bool ( VALUE input_bool )
{WriteToLog(" - ") }

        IF input_bool THEN
           RETURN("Yes")
        ELSE
           RETURN("No ")
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE complete_prep_routine ( VALUE comp_title, VALUE sample_prep )
{WriteToLog(" - ") }

    DECLARE form , return_val

        IF test_count > 0 THEN

            initialise_completion ( form , comp_title , sample_prep )

            IF form . get_lastkey ( ) = "DO" THEN
                return_val = complete_prep_wks ( )
            ELSE
                    return_val = FALSE
            ENDIF
        ELSE
        return_val = TRUE
        ENDIF

    RETURN ( return_val )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE initialise_completion ( form , comp_title , sample_prep )
{WriteToLog(" - ") }

    DECLARE grid

        PROMPT OBJECT form
        CLASS prompt_class_form
        WITH ( row = 8 ,
               column = 10 ,
               height = 12 ,
               width = 62 ,
               header = comp_title ,
               footer = GET_USER_MESSAGE ( "WKS_COMP_FOOT" , 1 ) )

    PROMPT OBJECT grid
        CLASS prompt_class_grid
                WITH ( row = 1 ,
               column = 2 ,
               height = form . height ,
               width = form . width - 2 ,
               title_size_top = 1 ,
               title_rendition_top = PROMPT_RENDITION_BOLD ,
               title_separator_top = GRID_SEPARATOR_BOTH ,
               cell_rows = test_count ,
               display_cell_routine = "complete_prep_display"  ,
               prompt_cell_routine = "complete_prep_prompt"    ,
               mouse_click_routine = "complete_prep_mouse"     ,
               check_move_routine = "complete_prep_check_move" ,
               user_info = test_array                          )

        grid . column_size [ 1 ] = 10
        grid . column_size [ 2 ] = 30
        grid . column_size [ 3 ] = 13

    grid . title_text_top [1,1] = GET_USER_MESSAGE ( "WKS_PREP_HEAD_1" , 1 )
    grid . title_text_top [2,1] = GET_USER_MESSAGE ( "WKS_PREP_HEAD_2" , 1 )
    grid . title_text_top [3,1] = GET_USER_MESSAGE ( "WKS_PREP_HEAD_3" , 1 )

    IF sample_prep THEN

        grid . cell_columns = 3
            grid . column_size [ 3 ] = 4
        grid . title_text_top [ 3 , 1 ] = "Comp"

                form . width = form . width - 14
                form . column = form . column + 7
        grid . width = form . width - 2

        form . help_context = "$CPW_MAIN"
        ELSE
        grid . cell_columns = 4
            grid . column_size [ 4 ] = 4
        grid . title_text_top [4,1] =
                GET_USER_MESSAGE ( "WKS_PREP_HEAD_4" , 1 )
        form . help_context = "$CTW_MAIN"
    ENDIF

    form . add_prompt ( grid )

    form . add_frame ( "" , 1 , 1 , form . height , form . width )

    form . start_prompt ( )
    form . wait_prompt ( )
    form . end_prompt ( )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE complete_prep_display (       self        ,
                    VALUE cell_column ,
                    VALUE cell_row    ,
                          window      ,
                    VALUE column      ,
                    VALUE row         ,
                    VALUE cell_height ,
                    VALUE cell_width  )
{WriteToLog(" - ") }

    DECLARE colour_mode , display_val

    IF cell_column = 1 THEN

        display_val = self . user_info [ cell_row , sample_id ]

    ELSEIF cell_column = 2 THEN

        display_val = self . user_info [ cell_row , id_text ]

    ELSEIF cell_column = self . cell_columns THEN

        display_val = check_bool ( self . user_info [ cell_row  ,
                                  completed ] )

    ELSEIF cell_column = 3 THEN

        display_val = PAD(STRIP(self.user_info[cell_row,analysis_id]):
                "/":
                        STRIP(self.user_info[cell_row,rep_no])," ",13)
    ELSE
        display_val = ""
    ENDIF

    IF self . user_info [ cell_row , completed ] THEN

        colour_mode = PROMPT_COLOUR_RED
    ELSE
        colour_mode = PROMPT_COLOUR_BLACK
    ENDIF

    DISPLAY display_val
        IN WINDOW window
        ON LINE row FROM column
        WITH ( foreground_colour = colour_mode )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE complete_prep_prompt  (       self        ,
                    VALUE cell_column ,
                    VALUE cell_row    ,
                          window      ,
                    VALUE column      ,
                    VALUE row         ,
                    VALUE cell_height ,
                    VALUE cell_width  )
{WriteToLog(" - ") }

        IF global ( "TERMTYPE" ) = "GUI" THEN

        PROMPT IN WINDOW window ON LINE row FROM column
        ELSE
                PROMPT FOR self . user_info [ cell_row  , completed ]
            BROWSE ON BOOLEAN
            IN WINDOW window
            ON LINE row FROM column
            WITH ( display_only = NOT
                self . user_info [ cell_row  , modifiable ] )
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE complete_prep_mouse (       self        ,
                  VALUE cell_column ,
                  VALUE cell_row    )
{WriteToLog(" - ") }

    IF ( cell_row <= 0 ) OR ( cell_row > self . cell_rows ) THEN

        { Do nothing - click was outside of the grid }

    ELSEIF ( self . user_info [ cell_row  , modifiable ] ) THEN

        self . user_info [ cell_row  , completed ] =
            NOT self . user_info [ cell_row  , completed ]

        self . redisplay_row ( cell_row )
        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE complete_prep_check_move (       self        ,
                       VALUE cell_column ,
                       VALUE cell_row    ,
                     new_column  ,
                     new_row     )
{WriteToLog(" - ") }

    new_column = self . cell_columns

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE complete_prep_wks
{WriteToLog(" - ") }

    DECLARE ok

    ok = TRUE
        comp_num = 1
        START READ TRANSACTION "worksheets"

    WHILE ok AND ( comp_num <> 0 ) DO

        ok = complete_prep()
              comp_num = test_array[comp_num,next_comp]
        ENDWHILE

    IF ( ok ) THEN
        START WRITE TRANSACTION "worksheets"
        DELETE worksheet
    ENDIF

    RETURN ( ok )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE complete_prep
{WriteToLog(" - ") }

        ret_status = EMPTY

        IF wks_type = "T" THEN

           IF select_the_test(test_array[comp_num,test_num]) THEN
              START WRITE TRANSACTION "worksheets"
              IF test_array[comp_num,modifiable] THEN
                 IF test_array[comp_num,completed] THEN
                    CHANGE TEST STATUS TO "V", ret_status
                 ENDIF
              ENDIF

              IF ret_status = EMPTY THEN
              ASSIGN test.worksheet = 0
              ASSIGN test.worksheet_position = 0
              SET GLOBAL ("AUDITPROMPTSUPPRESS") TO TRUE
              UPDATE TEST
           ENDIF

           ENDIF

        ELSEIF wks_type = "P" THEN
           IF select_the_sample(test_array[comp_num,sample_id]) THEN
              START WRITE TRANSACTION "worksheets"
              IF test_array[comp_num,modifiable] THEN
                 IF test_array[comp_num,completed] THEN
                    CHANGE SAMPLE STATUS TO "V", ret_status
                 ENDIF
              ENDIF

              IF ret_status = EMPTY THEN
              ASSIGN sample.on_wks = false
              ASSIGN sample.link_number = 0
              SET GLOBAL ("AUDITPROMPTSUPPRESS") TO TRUE
              UPDATE SAMPLE
           ENDIF

        ENDIF

        ENDIF
        
        IF ret_status <> EMPTY THEN
            flash_message ( ret_status, TRUE )
        ENDIF

        RETURN ( ret_status = EMPTY )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE lock_the_sample
{WriteToLog(" - ") }

    DECLARE temp , id, return_status

    id = SELECT sample . id_numeric

    { Cope with the id being empty here }

    IF ( id = EMPTY ) THEN

        IF ( NUMTEXT ( wks_analysis ) ) THEN

            id = SELECT sample . id_numeric
                WHERE id_numeric = wks_analysis

        ENDIF

    ENDIF

    IF ( id = EMPTY ) THEN

        return_status = FALSE
    ELSE
        return_status = TRUE

        temp = SELECT sample . id_numeric
            FOR UPDATE
            WHERE ( id_numeric = id )

        IF ( temp = LOCKED ) THEN

            ON CONTROL_C
                        RETURN ( FALSE )
                    ENDON

                    lock_flag_on ()

                    REPEAT
                        ROLLBACK

                temp = SELECT sample . id_numeric
                    FOR UPDATE
                    WHERE ( id_numeric = id )

                        IF ( temp = LOCKED ) THEN
                                SLEEP FOR ( "0 00:00:01" )
                        ENDIF

                    UNTIL ( temp <> LOCKED )

                    lock_flag_off()

        ENDIF
    ENDIF

    RETURN ( return_status )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE clear_sample (sample)
{WriteToLog(" - ") }

              ASSIGN sample.on_wks = false
              SET GLOBAL ("AUDITPROMPTSUPPRESS") TO TRUE
              START WRITE TRANSACTION "worksheets"
              UPDATE SAMPLE

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE select_the_sample ( VALUE dsample_id )
{WriteToLog(" - ") }

           START READ TRANSACTION "worksheets"
           find_samp = SELECT sample.id_numeric
                       FOR UPDATE
                       WHERE id_numeric = dsample_id

           IF find_samp = locked THEN
              lock_flag_on()
              ON CONTROL_C
                 RETURN(false)
              ENDON
              WHILE find_samp = locked DO
                    ROLLBACK
                    find_samp = SELECT sample.id_numeric
                                FOR UPDATE
                                WHERE id_numeric = dsample_id

                    IF find_samp = locked THEN
                       SLEEP FOR ("0 00:00:01")
                    ENDIF
              ENDWHILE
              lock_flag_off()
           ENDIF

           IF (find_samp <> empty) THEN
              IF find_samp <> locked THEN { a final check just in case
                        the lock has been bypassed }
                 RETURN(true)
              ELSE
                 RETURN(false)
          ENDIF
           ELSE
              RETURN(false)
           ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE select_the_test ( VALUE test_number )
{WriteToLog(" - ") }

           START READ TRANSACTION "worksheets"
           find_test = SELECT test.test_number
                       FOR UPDATE
                       WHERE test_number = test_number

           IF find_test = locked THEN
              lock_flag_on()
              ON CONTROL_C
                 RETURN(false)
              ENDON
              WHILE find_test = locked DO
                    ROLLBACK
                    find_test = SELECT test.test_number
                                FOR UPDATE
                                WHERE test_number = test_number
                    IF find_test = locked THEN
                       SLEEP FOR ("0 00:00:01")
                    ENDIF
              ENDWHILE
              lock_flag_off()
           ENDIF

           IF (find_test <> empty) THEN
              IF find_test <> locked THEN { a final check just in case
                        the lock has been bypassed }
                 RETURN(true)
              ELSE
                 RETURN(false)
          ENDIF
           ELSE
              RETURN(false)
           ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE display_the_header ( VALUE header_string )
{WriteToLog(" - ") }

        DISPLAY centre_text(header_string,80) IN WINDOW header_box
                    ON LINE 1 FROM 1 INVERSE
        PASTE TEXT WINDOW header_box ON LINE 4 FROM 1

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE regenerate_tests
{WriteToLog(" - ") }

    DECLARE any_change, new_tests, tests_deleteed

    { Make sure the tests assigned to the worksheet matches the tests
      assigned to the sample }

        any_change = FALSE
    wks_sample_id = LEFTSTRING ( worksheet_id,10 )
        unique_number = STRING ( SELECT worksheet. link_number )

    new_tests = add_new_tests_to_worksheet ( wks_sample_id )
    tests_deleted = check_deleted_tests ( worksheet_id )

    any_change = new_tests OR tests_deleted

    RETURN ( any_change )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE add_new_tests_to_worksheet ( VALUE sample_num )
{WriteToLog(" - ") }

    { Look to see if any tests have been added to this sample without
      being included on a worksheet, ie worksheet_id = 0 }

    DECLARE found_any
    DECLARE find_tests, analid, repnum

        found_any = FALSE

    find_tests = SELECT test.test_number
            WHERE ( ( sample = sample_num ) AND
                ( status = "V" ) AND
                ( worksheet_id = 0 ) )
            ORDER ON analysis

    WHILE ( find_tests <> EMPTY ) DO

                IF ( NOT found_any ) THEN
            found_any = TRUE
        ENDIF

        analid = SELECT test . analysis_id
        repnum = SELECT test . test_count

                DISPLAY PAD ( STRIP ( analid ) : "/" : STRIP ( repnum )," ",20 )
            ON LINE 3 FROM 2
            IN WINDOW mess_box
                DISPLAY centre_text ( GET_USER_MESSAGE ( "WKS_FOUND_REG",1),24 )
            ON LINE 5 FROM 2
            IN WINDOW mess_box
            BOLD

                test_count = test_count + 1
                test_array[test_count,sample_id] = sample_num
                test_array[test_count,test_num]  = JUSTIFY(PAD(STRIP(find_tests)
                           ," ",10),"RIGHT")
                NEXT test
        find_tests = SELECT test.test_number

    ENDWHILE

        RETURN ( found_any )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE check_deleted_tests ( VALUE worksheet_id )
{WriteToLog(" - ") }

    { Make sure all of the tests in the test array for this worksheet
      are still defined for this sample.  If they are not delete them
      from the worksheet list }

    DECLARE status, find_test
    DECLARE line_to_ignore
    DECLARE deleted_test_found
    DECLARE cur_test_num
    DECLARE wks_filename

        { Make filename lowercase for Unix }

    wks_filename = TOLOWER ( STRIP ( worksheet_id )) : STRIP ( wks_extension )

    wks_filename = lib_utils_logical_containing_file ( wks_directory , wks_filename ) : "\" : wks_filename

    deleted_test_found = FALSE

        FILE OPEN wks_filename, status

    FILE READ wks_filename, line_to_ignore, status
    FILE READ wks_filename, line_to_ignore, status
    FILE READ wks_filename, line_to_ignore, status
    FILE READ wks_filename, line_to_ignore, status

    REPEAT

        FILE READ wks_filename, cur_test_num, status

        IF ( status = EMPTY ) THEN
            find_test = SELECT test . test_number
                    WHERE ( test_number = cur_test_num )

            IF ( find_test = EMPTY ) THEN

                        DISPLAY centre_text (
                    GET_USER_MESSAGE ( "WKS_DELETED_REG",1),24 )
                    ON LINE 5 FROM 2
                    IN WINDOW mess_box
                    BOLD

                deleted_test_found = TRUE

            ENDIF
        ENDIF

    UNTIL ( ( deleted_test_found ) OR ( status <> EMPTY ) )

        FILE CLOSE wks_filename, status

        RETURN ( deleted_test_found )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE save_regen_worksheet ( worksheet_name,
                               unique_number,
                               wks_operator,
                               id_for_search )
{WriteToLog(" - ") }

    { Tests assigned to a worksheet have changed.  Create a new worksheet
      file for the new details }

    DECLARE return_status

        { Make filename lowercase for Unix }

    wks_filename = lib_utils_logical_to_string ( wks_directory ) : "\" :
                   TOLOWER ( STRIP ( worksheet_name )) : wks_extension

        FILE CREATE wks_filename,success

        IF success = empty THEN

            FILE WRITE wks_filename, "$SAMPLE",success
        FILE WRITE wks_filename, id_for_search,success
        FILE WRITE wks_filename, wks_date ,success
        FILE WRITE wks_filename, wks_operator ,success
        save_count = 1
        list_element = 1

        WHILE ( test_array[list_element,test_num] <> EMPTY ) DO

                    IF ( update_test( test_array [ list_element,test_num ],
                           unique_number,
                                               save_count ) ) THEN

                            FILE WRITE wks_filename, test_array[list_element,test_num], success

                            IF ( success <> EMPTY ) THEN
                        worksheet_file_error ( success )
                                update_test ( test_array [ list_element,
                                           test_num   ],
                                  " ",0 )
                            ENDIF
            ENDIF

                    list_element = list_element + 1
                    save_count = save_count + 1
        ENDWHILE

        FILE CLOSE wks_filename,success

        IF ( success <> EMPTY ) THEN
            worksheet_file_error ( success )
                ENDIF

                return_status = TRUE
    ELSE
        worksheet_file_error ( success )
                return_status = FALSE
    ENDIF

    RETURN ( return_status )

 ENDROUTINE

{-----------------------------------------------------------------------------}
{ Routines to call worksheets in Gui Mode                                     }
{-----------------------------------------------------------------------------}

ROUTINE worksheet_create_form ( form )
{WriteToLog(" - ") }

    DECLARE title_text , search_table , prompt_obj , prompt_col_1 ,
        display_col_1 , button_width , button_row , help_context ,
        prompt_obj_2 , grid_col_1 , grid_col_2 , grid_width ,
        id_message , select_message , available_message

    display_col_1 = 2
    prompt_col_1 = 16
    grid_width = 30
    button_width = 10
    button_row = 8

        initialise_variables ( )

        IF wks_type = "A" THEN

                title_text = GET_USER_MESSAGE ( "WKS_GEN_ANAL_HEAD" , 1 )
                search_table = "analysis"
            button_row = 6
        id_message = GET_USER_MESSAGE ( "WKS_ANAL_LABEL" , 1 )
        select_message = GET_USER_MESSAGE ( "WKS_TEST_SEL_BOX" , 1 )
        available_message = GET_USER_MESSAGE ( "WKS_TEST_AVAIL_BOX", 1 )
        help_context = "$GAW_MAIN"

    ELSEIF wks_type = "T" THEN

                title_text = GET_USER_MESSAGE ( "WKS_GEN_PREP_HEAD" , 1 )
            search_table = "preparation"
            button_row = 7
        id_message = GET_USER_MESSAGE ( "WKS_PREP_LABEL" , 1 )
        select_message = GET_USER_MESSAGE ( "WKS_TEST_SEL_BOX" , 1 )
        available_message = GET_USER_MESSAGE ( "WKS_TEST_AVAIL_BOX", 1 )
        help_context = "$GTW_MAIN"

        ELSEIF wks_type = "P" THEN

                title_text = GET_USER_MESSAGE ( "WKS_GEN_SPREP_HEAD" , 1 )
        search_table = "preparation"
            button_row = 7
        id_message = GET_USER_MESSAGE ( "WKS_PREP_LABEL" , 1 )
        select_message = GET_USER_MESSAGE ( "WKS_SAMP_SEL_BOX" , 1 )
        available_message = GET_USER_MESSAGE ( "WKS_SAMP_AVAIL_BOX", 1 )
        help_context = "$GPW_MAIN"

        ENDIF

    PROMPT OBJECT form
        CLASS PROMPT_CLASS_FORM
        WITH ( row    = 4                  ,
               column = 2                              ,
               width  = GLOBAL ( "SCREEN_WIDTH" )      ,
               height = GLOBAL ( "SCREEN_HEIGHT" ) - 4 ,
               button_style = FORM_BUTTON_NONE         ,
               return_behaviour = FORM_RETURN_STAY     ,
               header = title_text                     ,
               help_context = help_context             )

    PROMPT OBJECT prompt_obj
        WITH ( row    = 1 ,
               column = display_col_1  ,
               width  = prompt_col_1 - display_col_1 - 2 ,
               bold   = TRUE ,
               raised = TRUE ,
               value  = id_message )

    form . add_display ( prompt_obj )

    PROMPT OBJECT worksheet_id_prompt
        BROWSE ON 'search_table'
        WITH ( row                = 1            ,
               column             = prompt_col_1 ,
               always_validate    = TRUE         ,
               user_info      = ""           ,
               validation_routine = "worksheet_validate_id_prompt" )

    form . add_prompt ( worksheet_id_prompt )

    PROMPT OBJECT prompt_obj
        WITH ( row    = 2 ,
               column = display_col_1  ,
               width  = prompt_col_1 - display_col_1 - 2 ,
               bold   = TRUE ,
               raised = TRUE ,
               value  = GET_USER_MESSAGE ( "WKS_JOB_LABEL" , 1 ) )

    form . add_display ( prompt_obj )

    PROMPT OBJECT worksheet_job_id_prompt
        BROWSE ON job_header
        WITH ( row    = 2            ,
               column = prompt_col_1 )

    ARRAY worksheet_job_id_prompt . user_info

    form . add_prompt ( worksheet_job_id_prompt )

    PROMPT OBJECT prompt_obj
        WITH ( row    = 3 ,
               column = display_col_1  ,
               width  = prompt_col_1 - display_col_1 - 2 ,
               bold   = TRUE ,
               raised = TRUE ,
               value = GET_USER_MESSAGE("WKS_THE_SORT_MODE",1))

    form . add_display ( prompt_obj )

    IF wks_type = "P" THEN

        PROMPT OBJECT worksheet_sort_order_prompt
                        CHOOSE OUTOF sort_array1
            WITH ( row    = 3  ,
                   column = prompt_col_1 )
    ELSE
        PROMPT OBJECT worksheet_sort_order_prompt
                        CHOOSE OUTOF msort_array
            WITH ( row    = 3  ,
                   column = prompt_col_1 )
        ENDIF

        IF ( ( GLOBAL ( "WSHTSORT" ) = " "   ) OR
         ( GLOBAL ( "WSHTSORT" ) = EMPTY )    ) THEN

            worksheet_sort_order_prompt . value = "P"
        ELSE
            worksheet_sort_order_prompt . value = GLOBAL("WSHTSORT")
        ENDIF

    form . add_prompt ( worksheet_sort_order_prompt )

    PROMPT OBJECT prompt_obj
        CLASS PROMPT_CLASS_BUTTON
        WITH ( caption =
              GET_USER_MESSAGE ( "WKS_BUTTON_SELECT" , 1 ) ,
               row     = 1              ,
               column  = form . width - button_width ,
               width   = button_width   ,
               mouse_click_routine = "worksheet_select_tests" )

        form . add_prompt ( prompt_obj )

    PROMPT OBJECT prompt_obj
        CLASS PROMPT_CLASS_BUTTON
        WITH ( caption =
              GET_USER_MESSAGE ( "WKS_BUTTON_CLEAR" , 1 ) ,
               row     = 3          ,
               column  = form . width - button_width ,
               width   = button_width   ,
               mouse_click_routine = "worksheet_clear_tests" )

        form . add_prompt ( prompt_obj )

    form . add_frame ( select_message , 1 , 1 , 3 , form . width )

    PROMPT OBJECT worksheet_tests_prompt
        CLASS PROMPT_CLASS_GRID
        WITH ( row = 6 ,
               column = 2 ,
               height = 6 ,
               width = grid_width ,
               cell_columns = 1 ,
               cell_rows    = 1 ,
               current_column = 1 ,
               current_row    = 1 ,
               check_move_routine = "worksheet_grid_check_move" ,
               prompt_cell_routine = "worksheet_grid_prompt" ,
               display_cell_routine = "worksheet_grid_display" )

    worksheet_tests_prompt . column_size [ 1 ] = grid_width

    ARRAY worksheet_tests_prompt . user_info = ""

        form . add_prompt ( worksheet_tests_prompt )

    PROMPT OBJECT worksheet_worksheet_prompt
        CLASS PROMPT_CLASS_GRID
        WITH ( row = 6 ,
               column = form . width - grid_width ,
               height = 11 ,
               width = grid_width ,
               cell_columns = 1 ,
               cell_rows = 1 ,
               current_column = 1 ,
               current_row    = 1 ,
               check_move_routine = "worksheet_grid_check_move" ,
               prompt_cell_routine = "worksheet_grid_prompt" ,
               display_cell_routine = "worksheet_grid_display" )

    worksheet_worksheet_prompt . column_size [ 1 ] = grid_width

    ARRAY worksheet_worksheet_prompt . user_info = ""

        form . add_prompt ( worksheet_worksheet_prompt )

    { Movement Buttons }

    PROMPT OBJECT worksheet_add_button
        CLASS PROMPT_CLASS_BUTTON
        WITH ( caption =
              GET_USER_MESSAGE ( "WKS_BUTTON_ADD" , 1 ) ,
               row     = button_row    ,
               column  = grid_width + 5 ,
               width   = form . width - 2 * grid_width - 8 ,
               enabled = FALSE          ,
               mouse_click_routine = "worksheet_add_test" )

        form . add_prompt ( worksheet_add_button )

    PROMPT OBJECT worksheet_add_all_button
        CLASS PROMPT_CLASS_BUTTON
        WITH ( caption =
              GET_USER_MESSAGE ( "WKS_BUTTON_ADD_ALL" , 1 ) ,
               row     = button_row + 2 ,
               column  = grid_width + 5 ,
               width   = form . width - 2 * grid_width - 8 ,
               enabled = FALSE          ,
               mouse_click_routine = "worksheet_add_all_tests" )

        form . add_prompt ( worksheet_add_all_button )

    PROMPT OBJECT worksheet_remove_all_button
        CLASS PROMPT_CLASS_BUTTON
        WITH ( caption =
              GET_USER_MESSAGE ( "WKS_BUTTON_REMOVE_ALL" , 1 ) ,
               row     = button_row + 4 ,
               column  = grid_width + 5 ,
               width   = form . width - 2 * grid_width - 8 ,
               enabled = FALSE          ,
               mouse_click_routine = "worksheet_remove_all_tests" )

        form . add_prompt ( worksheet_remove_all_button )

    PROMPT OBJECT worksheet_remove_button
        CLASS PROMPT_CLASS_BUTTON
        WITH ( caption =
              GET_USER_MESSAGE ( "WKS_BUTTON_REMOVE" , 1 ) ,
               row     = button_row + 6 ,
               column  = grid_width + 5 ,
               width   = form . width - 2 * grid_width - 8 ,
               enabled = FALSE          ,
               mouse_click_routine = "worksheet_remove_test" )

        form . add_prompt ( worksheet_remove_button )

    { Standards }

    IF wks_type = "A" THEN

        PROMPT OBJECT prompt_obj
            CLASS PROMPT_CLASS_BUTTON
            WITH ( caption =
                      GET_USER_MESSAGE ( "WKS_BUTTON_STAN" , 1 ) ,
                   row     = button_row + 9 ,
                   column  = grid_width + 5 ,
                   width   = form . width - 2 * grid_width - 8 ,
                       mouse_click_routine="worksheet_insert_standard")

            form . add_prompt ( prompt_obj )

        form . add_frame ( GET_USER_MESSAGE ( "WKS_STANDARDS_BOX", 1 ),
                   worksheet_tests_prompt . column - 1  ,
                   worksheet_tests_prompt . row +
                    worksheet_tests_prompt . height + 2 ,
                   3                                    ,
                   worksheet_tests_prompt . width + 2   )

        PROMPT OBJECT prompt_obj
            WITH ( row    = 14             ,
                   column = display_col_1  ,
                   width  = prompt_col_1 - display_col_1 - 2 ,
                   bold   = TRUE ,
                   raised = TRUE ,
                   value  =
                  GET_USER_MESSAGE ( "WKS_STANDARD_LABEL" , 1 ))

        form . add_display ( prompt_obj )

        PROMPT OBJECT worksheet_standard_prompt
            BROWSE ON standard
            WITH ( row    = 14           ,
                   column = prompt_col_1 )

        form . add_prompt ( worksheet_standard_prompt )

        PROMPT OBJECT prompt_obj
            WITH ( row    = 15 ,
                   column = display_col_1  ,
                   width  = prompt_col_1 - display_col_1 - 2 ,
                   bold   = TRUE ,
                   raised = TRUE ,
                   value  =
                  GET_USER_MESSAGE ( "WKS_VERSION_LABEL" , 1 ))

        form . add_display ( prompt_obj )

        PROMPT OBJECT worksheet_standard_ver_prompt
            FORMAT TEXT10
            WITH ( row                = 15                           ,
                   column             = prompt_col_1                 ,
                   browse_routine     = "worksheet_std_ver_browse"   ,
                   validation_routine = "worksheet_std_ver_validate" ,
                       always_validate    = TRUE                         )

        form . add_prompt ( worksheet_standard_ver_prompt )

        PROMPT OBJECT prompt_obj
            WITH ( row    = 16 ,
                   column = display_col_1  ,
                   width  = prompt_col_1 - display_col_1 - 2 ,
                   bold   = TRUE ,
                   raised = TRUE ,
                   value  =
                  GET_USER_MESSAGE ( "WKS_USAGE_LABEL" , 1 ))

        form . add_display ( prompt_obj )

        PROMPT OBJECT worksheet_standard_use_prompt
            FORMAT integer
            WITH ( row    = 16                ,
                   column = prompt_col_1      ,
                   value  = 0                 ,
                   lowered = TRUE             )

        form . add_display ( worksheet_standard_use_prompt )
    ELSE
        worksheet_tests_prompt . height = 9
        worksheet_worksheet_prompt . height = 9

        form . height = form . height - 2
    ENDIF

    form . add_frame ( available_message                   ,
               worksheet_tests_prompt . column - 1 ,
               worksheet_tests_prompt . row        ,
               worksheet_tests_prompt . height     ,
               worksheet_tests_prompt . width + 2  )

    form . add_frame ( GET_USER_MESSAGE ( "WKS_WORKSHEET_BOX" , 1 ) ,
               worksheet_worksheet_prompt . column - 1      ,
               worksheet_worksheet_prompt . row             ,
               worksheet_worksheet_prompt . height          ,
               worksheet_worksheet_prompt . width + 2       )

    { And now the end is near }

    PROMPT OBJECT prompt_obj
        WITH ( row    = form . height - 1 ,
               column = display_col_1  ,
               width  = prompt_col_1 - display_col_1 - 2 ,
               bold   = TRUE ,
               raised = TRUE ,
               value  = GET_USER_MESSAGE ( "WKS_OPERATOR_LABEL" , 1 ) )

    form . add_display ( prompt_obj )

    PROMPT OBJECT worksheet_operator_prompt
                BROWSE ON personnel
        WITH ( row    = form . height - 1 ,
               column = prompt_col_1      ,
               value  = GLOBAL("OPERATOR"))

    form . add_prompt ( worksheet_operator_prompt )

    PROMPT OBJECT prompt_obj
        CLASS PROMPT_CLASS_BUTTON
        WITH ( caption =
              GET_USER_MESSAGE ( "WKS_BUTTON_GENERATE" , 1 ) ,
               row     = form . height - 1 ,
               column  = form . width - button_width * 3 - 2  ,
               width   = button_width ,
               send_lastkey = "DO" )

        form . add_prompt ( prompt_obj )

    PROMPT OBJECT prompt_obj
        CLASS PROMPT_CLASS_BUTTON
        WITH ( caption =
              GET_USER_MESSAGE ( "SMP_PROMPT_BUTTON_HELP" , 1 ) ,
               row     = form . height - 1 ,
               column  = form . width - button_width * 2 - 1  ,
               width   = button_width ,
               send_lastkey = "HELP" )

        form . add_prompt ( prompt_obj )

    PROMPT OBJECT prompt_obj
        CLASS PROMPT_CLASS_BUTTON
        WITH ( caption =
              GET_USER_MESSAGE ( "SMP_PROMPT_BUTTON_CANCEL" , 1 ) ,
               row     = form . height - 1 ,
               column  = form . width - button_width ,
               width   = button_width ,
               send_lastkey = "EXIT" )

        form . add_prompt ( prompt_obj )

    form . add_frame ( "" , 1 , form . height - 1 , 1 , form . width )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_grid_display (       self        ,
                     VALUE cell_column ,
                     VALUE cell_row    ,
                           window      ,
                     VALUE column      ,
                     VALUE row         ,
                     VALUE cell_height ,
                     VALUE cell_width  )
{WriteToLog(" - ") }

    DECLARE inverse_mode , colour_mode , display_val

    inverse_mode = FALSE

    IF NOT blank ( self . user_info [ cell_row , standard_id ] ) THEN

        colour_mode = PROMPT_COLOUR_RED
        display_val = self . user_info [ cell_row , id_text ]

    ELSEIF ( NOT blank ( self . user_info [ cell_row , id_text ] ) ) AND
               ( wks_type = "A" )

        colour_mode = PROMPT_COLOUR_BLACK
        display_val = strip ( self . user_info [ cell_row , id_text ] )
                 : "/" :
                     self . user_info [ cell_row , replicate_no ]
    ELSE

        colour_mode = PROMPT_COLOUR_BLACK
        display_val = strip ( self . user_info [ cell_row , id_text ] )

    ENDIF

    IF self . current_row = cell_row THEN
        inverse_mode = TRUE
    ENDIF

    DISPLAY display_val
        IN WINDOW window
        ON LINE row FROM column
        INVERSE = inverse_mode
        WITH ( foreground_colour = colour_mode )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_grid_prompt (       self        ,
                    VALUE cell_column ,
                    VALUE cell_row    ,
                          window      ,
                    VALUE column      ,
                    VALUE row         ,
                    VALUE cell_height ,
                    VALUE cell_width  )
{WriteToLog(" - ") }

    PROMPT IN WINDOW window AT column , row

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_grid_check_move (       self        ,
                        VALUE cell_column ,
                        VALUE cell_row    ,
                                          new_column  ,
                      new_row     )
{WriteToLog(" - ") }

        IF ( cell_row <> new_row ) THEN

        self . current_row = new_row
        self . current_column = new_column

        IF cell_row > 0 THEN

            self . redisplay_row ( cell_row )
        ENDIF

        self . redisplay_row ( new_row )

    ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_process_form ( form , idv_name )
{WriteToLog(" - ") }

    DECLARE saved, do_it, worksheetname, MenuNum

    form . start_prompt ( )

    form . wait_prompt ( )

    WHILE ( form . get_lastkey ( ) = "DO" ) DO

        IF worksheet_worksheet_prompt . cell_rows <= 1 THEN

            flash_message ( "WKS_EMPTY_WORKSHEET" , TRUE )

            saved = FALSE

        ELSEIF blank  ( worksheet_operator_prompt . text ) AND
               GLOBAL ( "WSHTOPER" )                       THEN

            flash_message ( "WKS_OP_REQUIRED" , TRUE )

            saved = FALSE

        ELSE
            saved = worksheet_save_form ( form, idv_name, wsname )
        ENDIF

        IF ( saved ) THEN

            do_it = confirm_with_text ( "Print Report?" )

            IF do_it THEN

                MenuNum = MENUNUMBER("CBW")
                MENUPROC MenuNum USING wsname, "$DO"

            ENDIF

            worksheet_worksheet_prompt . set_position ( 1 , 1 )
            worksheet_worksheet_prompt . cell_rows = 1

            ARRAY worksheet_worksheet_prompt . user_info = ""

            worksheet_worksheet_prompt . end_prompt ( )
            worksheet_worksheet_prompt . start_prompt ( )

            worksheet_remove_button . set_enabled ( FALSE )
            worksheet_remove_all_button . set_enabled ( FALSE )

            CREATE OBJECT "STD_OBJECT_DATABASE" , standards_db
                        standards_db . initialise ( "STANDARD_VERSIONS" )

            ENDIF

        form . wait_prompt ( )

    ENDWHILE

    ROLLBACK

    form . end_prompt ( )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_save_form ( form , idv_name, wsname )
{WriteToLog(" - ") }

    DECLARE created , saved

        worksheet_name = generate_worksheet_name ( worksheet_id_prompt . text )
        wsname = worksheet_name
    wks_operator = worksheet_operator_prompt . text

        first_in_list = 1    { Global }

    worksheet_reorder_worksheet ( )

        create_standards ( worksheet_worksheet_prompt . user_info ,
               worksheet_id_prompt . text             )

    create_idv_entry ( worksheet_name , unique_number , idv_name )

    IF save_worksheet ( worksheet_name                 ,
                unique_number                  ,
                worksheet_operator_prompt . text       ,
                            worksheet_id_prompt . text         ,
                worksheet_worksheet_prompt . user_info ) THEN

        standards_db . invoke_all ( "UPDATE" )

        IF wks_type = "A" THEN

            created = GET_USER_MESSAGE ( "WKS_CREATE_ANAL_WKS" , 1 )
                                      : " " : worksheet_name
        ELSE
            created = GET_USER_MESSAGE ( "WKS_CREATE_PREP_WKS" , 1 )
                                      : " " : worksheet_name
            ENDIF

        flash_message ( created , false )

        COMMIT

        saved = TRUE

    ELSE
            flash_message ( "WKS_NO_GEN_WORK" , false )

        saved = FALSE
    ENDIF

    RETURN ( saved )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_select_tests ( self )
{WriteToLog(" - ") }

    DECLARE count , already_selected

    already_selected = FALSE
    count = 1

    WHILE ( worksheet_job_id_prompt . user_info [ count ] <> EMPTY ) AND
          ( NOT already_selected                                   ) DO

        IF ( worksheet_job_id_prompt . user_info [ count ] =
                                  worksheet_job_id_prompt . text ) OR
           blank ( worksheet_job_id_prompt . user_info [ count ] ) THEN

            already_selected = TRUE

                ENDIF

        count = count + 1

    ENDWHILE

    IF already_selected THEN

        IF BLANK ( worksheet_job_id_prompt . text ) THEN

            flash_message ( "WKS_JOB_BLANK_ALREADY_USED" , FALSE )

        ELSE

            flash_message ( "WKS_JOB_IS_ALREADY_USED" , FALSE )

        ENDIF

    ELSE
        worksheet_job_id_prompt . user_info [ count ] =
                    worksheet_job_id_prompt . text

        IF blank ( worksheet_job_id_prompt . text ) AND
                    ( count = 1 ) THEN

            no_job = TRUE
        ELSE
            no_job = FALSE
        ENDIF

                worksheet_select_the_tests ( )
    ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_select_the_tests
{WriteToLog(" - ") }

    DECLARE count, old_count

    count = worksheet_tests_prompt . cell_rows - 1
    old_count = count

        sort_mode = worksheet_sort_order_prompt . value

    IF wks_type = "A" THEN

            select_tests_for_worksheet( worksheet_tests_prompt . user_info ,
                        count                              ,
                            worksheet_id_prompt . text         ,
                            worksheet_job_id_prompt . text     ,
                            TRUE                           )

        ELSEIF wks_type = "T" THEN

            select_test_prep_worksheet( worksheet_tests_prompt . user_info ,
                        count                              ,
                            worksheet_id_prompt . text         ,
                            worksheet_job_id_prompt . text     ,
                            TRUE                           )

        ELSEIF wks_type = "P" THEN

            select_sample_prep_worksheet
                      ( worksheet_tests_prompt . user_info ,
                        count                              ,
                            worksheet_id_prompt . text         ,
                            worksheet_job_id_prompt . text     ,
                            TRUE                           )
        ENDIF

    worksheet_set_button_state ( )

        worksheet_tests_prompt . cell_rows = count + 1

    IF ( old_count = count ) THEN

        IF ( wks_type = "A" ) THEN

            flash_message ( GET_USER_MESSAGE ( "WKS_NO_TESTS" , 1 ) , TRUE )

        ELSEIF ( wks_type = "T" ) THEN

            flash_message ( GET_USER_MESSAGE ( "WKS_NO_TESTS_PREP" , 1 ) , TRUE )

        ELSE

            flash_message ( GET_USER_MESSAGE ( "WKS_NO_SAMPS" , 1 ) , TRUE )

        ENDIF

    ENDIF

        worksheet_tests_prompt . end_prompt ( )
        worksheet_tests_prompt . start_prompt ( )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_clear_tests ( self )
{WriteToLog(" - ") }

        worksheet_worksheet_prompt . set_position ( 1 , 1 )
        worksheet_tests_prompt . set_position ( 1 , 1 )

        worksheet_worksheet_prompt . cell_rows = 1
        worksheet_tests_prompt . cell_rows = 1

    ARRAY test_array
    ARRAY sort_array
    sort_count = 0

        ARRAY worksheet_worksheet_prompt . user_info = ""
        ARRAY worksheet_tests_prompt . user_info = ""

        worksheet_worksheet_prompt . end_prompt ( )
        worksheet_tests_prompt . end_prompt ( )
        worksheet_worksheet_prompt . start_prompt ( )
        worksheet_tests_prompt . start_prompt ( )

        worksheet_remove_button . set_enabled ( FALSE )
        worksheet_remove_all_button . set_enabled ( FALSE )
        worksheet_add_button . set_enabled ( FALSE )
        worksheet_add_all_button . set_enabled ( FALSE )

        ARRAY worksheet_job_id_prompt . user_info

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_set_button_state
{WriteToLog(" - ") }

    IF worksheet_add_button . enabled THEN

        IF ( worksheet_tests_prompt . user_info [ 1, 2 ] = " " ) THEN

            worksheet_add_all_button . set_enabled ( FALSE )
            worksheet_add_button     . set_enabled ( FALSE )

        ENDIF

    ELSE

        IF ( worksheet_tests_prompt . user_info [ 1, 2 ] <> " " ) THEN

            worksheet_add_all_button . set_enabled ( TRUE )
            worksheet_add_button     . set_enabled ( TRUE )

        ENDIF

        ENDIF

    IF worksheet_remove_button . enabled THEN

        IF (( worksheet_worksheet_prompt . user_info [ 1, 2 ] = " " )  AND
            ( worksheet_worksheet_prompt . user_info [ 1, 3 ] = " " )) THEN

            worksheet_remove_all_button . set_enabled ( FALSE )
            worksheet_remove_button     . set_enabled ( FALSE )

        ENDIF

    ELSE

        IF (( worksheet_worksheet_prompt . user_info [ 1, 2 ] <> " " )  OR
            ( worksheet_worksheet_prompt . user_info [ 1, 3 ] <> " " )) THEN

            worksheet_remove_all_button . set_enabled ( TRUE )
            worksheet_remove_button     . set_enabled ( TRUE )

        ENDIF

        ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_add_test ( self )
{WriteToLog(" - ") }

        worksheet_copy_test ( worksheet_tests_prompt     ,
                  worksheet_worksheet_prompt )

    worksheet_set_button_state ( )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_remove_test ( self )
{WriteToLog(" - ") }

        worksheet_copy_test ( worksheet_worksheet_prompt ,
                              worksheet_tests_prompt     )

    worksheet_set_button_state ( )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_copy_test ( from_grid , to_grid )
{WriteToLog(" - ") }

    DECLARE to_pos , from_pos , standard_val

    from_pos = from_grid . current_row
    to_pos   = to_grid . current_row

    standard_val = from_grid . user_info [ from_pos , standard_id ]
    removed_usage = from_grid . user_info [ from_pos , usage ]

        IF from_grid . user_info [ from_pos , id_text ] <> "" THEN

            IF to_pos = 0 THEN

            to_pos = 1

        ENDIF

        IF blank ( standard_val ) THEN

            array_insert_slice ( to_grid . user_info , 1 , to_pos )

            to_grid . user_info [ to_pos ] =
                    from_grid . user_info [ from_pos ]

                to_grid . insert_row ( to_pos, 1 , GRID_SEPARATOR_NONE )

            to_grid . set_position ( 1 , to_pos + 1 )

                ENDIF

        array_remove_slice ( from_grid . user_info , 1 , from_pos )

            from_grid . remove_row ( from_pos )

        from_grid . redisplay_row ( from_pos )

        IF NOT blank ( standard_val ) THEN

                field_num = 1

            worksheet_reorder_worksheet ( )

                    check_other_standards ( worksheet_worksheet_prompt .
                                 user_info ,
                        standard_val   ,
                        FALSE          )

            from_grid . redisplay_contents ( )

            IF standard_val = worksheet_standard_prompt . text :
                  JUSTIFY ( worksheet_standard_ver_prompt . text ,
                    "RIGHT"                              )
                THEN
                        worksheet_standard_use_prompt .
                        set_text ( usage_count )
            ENDIF
        ENDIF
    ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_add_all_tests ( self )
{WriteToLog(" - ") }

    worksheet_tests_prompt . set_position ( 1 , 1 )

    WHILE ( worksheet_tests_prompt . cell_rows > 1 ) DO

            worksheet_copy_test ( worksheet_tests_prompt     ,
                      worksheet_worksheet_prompt )

    ENDWHILE

    worksheet_set_button_state ( )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_remove_all_tests ( self )
{WriteToLog(" - ") }

    worksheet_worksheet_prompt . set_position ( 1 , 1 )

    WHILE ( worksheet_worksheet_prompt . cell_rows > 1 ) DO

            worksheet_copy_test ( worksheet_worksheet_prompt ,
                                  worksheet_tests_prompt     )

    ENDWHILE

    worksheet_set_button_state ( )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_insert_standard ( self )
{WriteToLog(" - ") }

    DECLARE is_valid , insert_pos , std_ver

    std_ver = JUSTIFY ( worksheet_standard_ver_prompt . text , "RIGHT" )

        is_valid = NOT blank ( worksheet_standard_prompt . text ) AND
                   NOT blank ( worksheet_standard_ver_prompt . text )

    IF is_valid THEN

        current_ver = worksheet_standard_prompt . text : std_ver

        is_valid =
           select_new_standard ( worksheet_standard_prompt . text ,
                         std_ver                          ,
                         FALSE                            )

    ENDIF

    IF is_valid THEN

        is_valid = okay_to_insert ( )

    ENDIF

    IF is_valid THEN

        insert_pos = worksheet_worksheet_prompt . current_row

        array_insert_slice ( worksheet_worksheet_prompt . user_info ,
                     1                                      ,
                     insert_pos                             )

            worksheet_worksheet_prompt . insert_row ( insert_pos          ,
                              1                   ,
                              GRID_SEPARATOR_NONE )

        build_new_standard ( insert_pos                             ,
                     worksheet_worksheet_prompt . user_info )

        worksheet_worksheet_prompt . redisplay_row ( insert_pos )

        worksheet_standard_use_prompt . set_text ( usage_count )

            worksheet_remove_button . set_enabled ( TRUE )
            worksheet_remove_all_button . set_enabled ( TRUE )

    ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_std_ver_browse ( self )
{WriteToLog(" - ") }

    DECLARE stand_id , version

        stand_id = worksheet_standard_prompt . text

    version = self . text

    IF browse_on_standard_version ( stand_id ,
                                version  )

        self . text = version

        self . repaste ( )

        IF find_standard_version ( stand_id ,
                                   version  ,
                                   FALSE    ) THEN

            worksheet_standard_use_prompt . set_text ( SELECT standard_versions . usage_count )

        ENDIF

    ENDIF

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_std_ver_validate ( self )
{WriteToLog(" - ") }

    DECLARE stand_id , version , valid

        stand_id = worksheet_standard_prompt . text
    version  = self . text

    IF BLANK ( version ) THEN

        valid = TRUE

    ELSEIF find_standard_version ( stand_id ,
                               version  ,
                               FALSE    ) THEN      { for_update }

        worksheet_standard_use_prompt . set_text ( SELECT standard_versions . usage_count )

        valid = check_for_expired_standard ( stand_id ,
                                             version  ,
                                             FALSE    , { do expire }
                                             TRUE     ) { called from browse }

    ELSE

        valid = FALSE

    ENDIF

    RETURN ( valid )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_validate_id_prompt ( self )
{WriteToLog(" - ") }

        IF ( self . user_info = self . text ) OR
           ( ( worksheet_tests_prompt . cell_rows = 1     ) AND
             ( worksheet_worksheet_prompt . cell_rows = 1 )     ) THEN

            return_val = TRUE
    ELSE
            return_val = FALSE
    ENDIF

    IF NOT return_val THEN

        IF confirm_with_message ( "WKS_DESTROY_LIST" ) THEN

            worksheet_clear_tests ( self )

            self . user_info = self . text

            return_val = TRUE

        ELSE
            self . text = self . user_info
            self . repaste ( )
        ENDIF

        ELSE

        self . user_info = self . text

        ARRAY worksheet_job_id_prompt . user_info

        ENDIF

        RETURN ( return_val )

ENDROUTINE

{-----------------------------------------------------------------------------}

ROUTINE worksheet_reorder_worksheet
{WriteToLog(" - ") }

    { set order for old worksheet code }

    DECLARE count

    count = 1

    worksheet_worksheet_prompt . user_info [ 1 , prev_test ] = 0

    WHILE ( NOT blank ( worksheet_worksheet_prompt .
                     user_info [ count + 1 , id_text ] ) ) DO

        worksheet_worksheet_prompt . user_info [ count , next_test ] =
                                     count + 1
        count = count + 1
    ENDWHILE

    worksheet_worksheet_prompt . user_info [ count , next_test ] = 0

ENDROUTINE

{*************************************************************************
* Purpose      : Writes to predefined log,
*                using WriteLog in $lib_utils
* Parameters   : Msg - what to write in log
* Return Value : N/A
**************************************************************************}
ROUTINE WriteToLog(VALUE Msg)

    WriteLog(Msg, global("current_library"))

ENDROUTINE
