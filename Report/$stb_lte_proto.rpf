{==============================================================================}
{                                                                              }
{  TENSOR TECHNOLOGIES                                                         }
{                                                                              }
{  Filename         : $stb_lte_proto                                           }
{  Version          : 1.0                                                      }
{  Document Ref.    : FS-02                                                    }
{  Author           : John O' Gorman                                           }
{  Date Created     : May 97                                                   }
{  Responsible      : Tensor Technologies Limited                              }
{  Description      : LTE for Protocols.                                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{                                                                              }
{  Ver.     Date        By          Description                                }
{  ----     ----        --          -----------                                }
{  1.0      01-AUG-97   JOG         LTE for Protocol                           }
{                                                                              }
{==============================================================================}

JOIN STANDARD_LIBRARY std_database
JOIN STANDARD_LIBRARY std_array

JOIN LIBRARY $STB_HEADER_LIB
JOIN LIBRARY $STB_LIB
JOIN LIBRARY $STB_GLBL

{******************************************************************************}

{ --------------- Initialization Statements : DO NOT CHANGE ----------------- }

ENABLE WINDOWS
SET NAME "DISPLAY/"

JOIN LIBRARY $LABTABLIB

JOIN STANDARD_LIBRARY std_general
JOIN STANDARD_LIBRARY std_array_select
JOIN STANDARD_LIBRARY std_array
JOIN STANDARD_LIBRARY std_structure

JOIN LIBRARY $lib_utils

DECLARE global_operation

{******************************************************************************}


{ -------------------------- Table Setup Routine ---------------------------- }

ROUTINE table_setup ( operation )



    ARRAY prompt_details    ARRAY_SIZE ( 0 , 6 )
    ARRAY fields_to_output  ARRAY_SIZE ( 0 )

    name_of_table           =  "PDS_PROTO "


    IF operation = "add_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_PROTO_HEADER", "1" )
    ELSEIF operation = "new_version" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_PROTO_HEADER", "2" )
    ELSEIF operation = "copy_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_PROTO_HEADER", "3" )
    ELSEIF operation = "modify_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_PROTO_HEADER", "4" )
    ELSEIF operation = "display_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_PROTO_HEADER", "5" )
    ELSEIF operation = "remove_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_PROTO_HEADER", "6" )
    ELSEIF operation = "restore_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_PROTO_HEADER", "7" )
    ELSEIF operation = "list_idents" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_PROTO_HEADER", "8" )
    ELSEIF operation = "print_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_PROTO_HEADER", "9" )
    ELSEIF operation = "approve_ident" THEN
        header_mess = GET_USER_MESSAGE ( "PDS_PROTO_HEADER", "10" )
    ENDIF

    footer_mess = GET_USER_MESSAGE ( "PDS_PROTO_MOD_FOOTER", "1" )

    display_footer_mess = GET_USER_MESSAGE ( "PDS_PROTO_MOD_FOOTER", "1" )


    DECLARE count

    count = 0

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_STUDY_15", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "STATUS"
    prompt_details [  count, TYPE_POSITION ]       = "DISPLAY"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_PROTO_1", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "GROUP_ID"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_PROTO_2", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "DESCRIPTION"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_PROTO_3", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "DEFAULT_CONFIG"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_PROTO_4", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "JOB_TEMPLATE_ID"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_PROTO_5", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "SAMPLE_TEMPLATE"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_PROTO_6", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "REPORT_NAME"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_PROTO_7", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "LABEL_NAME"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_PROTO_8", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "LOG_TYPE"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_PROTO_10", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "TYPE"

	count = count + 1
	prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_PROTO_13", 1 )
	prompt_details [  count, TYPE_POSITION       ] = "ROUTINE"
	prompt_details [  count, LIBRARY_POSITION    ] = GLOBAL ( "CURRENT_LIBRARY" )
	prompt_details [  count, ROUTINE_POSITION    ] = "BROWSE_INV_PRODUCT_TABLE"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_PROTO_11", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "USE_PREDICTED"

    count = count + 1
    prompt_details [  count, MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "PDS_PROTO_12", 1 )
    prompt_details [  count, FIELD_NAME_POSITION ] = "USE_STUDY_NAME"

    displayed_name_of_table    = GET_USER_MESSAGE ( "PDS_PROTO_NAME_OF_TABLE", "1" )

    directory = "SMP$TEXTFILES"
    extn = "PRO"

    input_mess = "Enter Protocol ID" 

    default_value = EMPTY


    fields_to_output [  1 ]  = 1
    fields_to_output [  2 ]  = 2
    fields_to_output [  3 ]  = 3
    fields_to_output [  4 ]  = 4
    fields_to_output [  5 ]  = 5
    fields_to_output [  6 ]  = 6
    fields_to_output [  7 ]  = 7
    fields_to_output [  8 ]  = 9
    fields_to_output [  9 ]  = 10
    fields_to_output [ 10 ]  = 12
    fields_to_output [ 11 ]  = 13


    ARRAY   special_actions_report  ARRAY_SIZE ( 0 , 4 )

    DECLARE count

    special_actions_report [ 1 , CHARACTER_POSITION ] = "*"
    special_actions_report [ 1 , TITLE_POSITION     ] = GET_USER_MESSAGE ( "PDS_PROTO_SA", 1 )

    special_actions_report [ 2 , CHARACTER_POSITION ] = "1"
    special_actions_report [ 2 , TITLE_POSITION     ] = GET_USER_MESSAGE ( "PDS_PROTO_MATRIX", 1 )

    IF operation = "add_ident" THEN

        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$stb_matrix_setup"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "setup_protocol_matrix"

    ELSEIF ( operation = "modify_ident" ) THEN

        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$stb_matrix"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "modify_protocol_matrix"

    ELSEIF ( operation = "copy_ident" ) THEN

        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$stb_matrix"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "modify_protocol_matrix"

    ELSEIF ( operation = "new_version" ) THEN

        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$stb_matrix"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "modify_protocol_matrix"

    ELSEIF ( ( operation = "display_ident" ) OR ( operation = "approve_ident" ) )THEN

        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$stb_matrix"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "modify_protocol_matrix"

    ENDIF

    IF operation = "approve_ident" THEN

        special_actions_report [ 3 , CHARACTER_POSITION ] = "2"
        special_actions_report [ 3 , TITLE_POSITION     ] = GET_USER_MESSAGE ( "PDS_PROTO_APPROVE", 1 )
        special_actions_report [ 3 , LIBRARY_POSITION   ] = "$stb_header_lib"
        special_actions_report [ 3 , ROUTINE_POSITION   ] = "protocol_approve"

    ENDIF

    ARRAY   labtable_messages       ARRAY_SIZE ( 0 )

    labtable_messages [ IDENTITY_MESSAGE ] = GET MESSAGE ( 2545 , 1 )
                                            { "Identity" }

    labtable_messages [ IDENTITY_MESSAGE + 1 ] =
                           GET_USER_MESSAGE ( "PDS_PROTO_VERSION", 1 )

    labtable_messages [ MOD_ON_MESSAGE   ] = GET MESSAGE ( 2546 , 1 )
                                            { "Modified On" }
    labtable_messages [ MOD_BY_MESSAGE   ] = GET MESSAGE ( 2547 , 1 )
                                            { "Modified By" }
    labtable_messages [ READ_MESSAGE     ] = GET MESSAGE ( 2566 , 1 )
                                            { "Labtable Read Transaction" }
    labtable_messages [ WRITE_MESSAGE    ] = GET MESSAGE ( 2567 , 1 )
                                            { "Labtable Write Transaction" }

    help_context = "$LTE_PROTO_EDIT"


 {   ------     THERE ARE NO MORE FIELDS TO BE SETUP  --------    }

ENDROUTINE

{******************************************************************************}

ROUTINE validation_routine
{
* 
* Parameters : 
*
*******************************************************************************}

	DECLARE ok
	
	ok = TRUE

    IF ( ( SELECT pds_proto . log_type = EMPTY ) OR
         ( SELECT pds_proto . log_type = ""    ) ) THEN

        flash_message ( GET_USER_MESSAGE ( "PDS_PROTO_VALIDATE", 1 ), TRUE )
        ok = FALSE

    ENDIF
    
    RETURN( ok )
    
ENDROUTINE

{******************************************************************************}

ROUTINE do_the_work  ( VALUE operation )

	global_operation = operation
	table_setup ( operation )

	IF operation = "approve_ident" THEN
		operation = "display_ident"
	ENDIF

	smp_lte_perform_option  ( name_of_table              ,
	                          displayed_name_of_table    ,
	                          prompt_details             ,
	                          labtable_messages          ,
	                          default_value              ,
	                          input_mess                 ,
	                          header_mess                ,
	                          footer_mess                ,
	                          display_footer_mess        ,
	                          directory                  ,
	                          extn                       ,
	                          help_context               ,
	                          GLOBAL ("CURRENT_LIBRARY") ,
	                          fields_to_output           ,
	                          special_actions_report     ,
	                          operation                  )


ENDROUTINE

{******************************************************************************}

ROUTINE add_option ( option )
	do_the_work ( "add_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE copy_option ( option )

	do_the_work ( "copy_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE new_version_option ( option )

	do_the_work ( "new_version" )

ENDROUTINE

{******************************************************************************}

ROUTINE modify_option ( option )

	do_the_work ( "modify_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE display_option ( option )

	do_the_work ( "display_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE remove_option ( option )

	do_the_work ( "remove_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE restore_option ( option )

	do_the_work ( "restore_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE list_option ( option )

	do_the_work ( "list_idents" )

ENDROUTINE

{******************************************************************************}

ROUTINE print_option ( option )

	do_the_work ( "print_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE approve_option ( option )

	do_the_work ( "approve_ident" )

ENDROUTINE

{******************************************************************************}

ROUTINE smp_lte_initialise

ENDROUTINE
{==============================================================================}
{                                                                              }
{  ROUTINE read_data_routine                                                   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  18-5-97      JOG             calls required actions after record has been   }
{                               loaded                                         }
{  18-6-97      JOG             protocol copy added                            }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  param1                 ref                                                  }
{  param2                 ref                  action                          }
{                                                                              }
{==============================================================================}
ROUTINE read_data_routine ( param1, param2 )

{
* 
* Parameters : 
*
*******************************************************************************}

    IF param2 = "ADD" THEN

                                       { assign default job and sample templates }

        ASSIGN pds_proto . job_template_id = STAB_DEFAULT_JOB_TEMPLATE
        ASSIGN pds_proto . sample_template = DEFAULT_SAMP_TEMP

                                       { auto approve protocol depending }
                                       { on global                       }

        IF GLOBAL ( "AUTO_APPROVE_PROTO" ) THEN
            do_auto_approval ( "PDS_PROTO" )
        ENDIF

    ELSEIF param2 = "NEW_VERSION"

                                       { JEP - 6/5/98 Auto approve depends on Global }
                                       { auto_approve_proto                          }


        IF GLOBAL ( "AUTO_APPROVE_PROTO" ) THEN
            do_auto_approval ( "PDS_PROTO" )
        ELSE
            do_auto_unapproval ( "PDS_PROTO", FALSE )
        ENDIF

    ELSEIF param2 = "COPY"

        DECLARE new_header_id, old_header_id, labtabtable

        new_header_id = SELECT pds_proto . identity : SELECT pds_proto . protocol_version

        labtablib_get_labtable ( labtabtable )

        old_header_id = labtabtable . copy_value

        IF GLOBAL ( "AUTO_APPROVE_PROTO" ) THEN
            do_auto_approval ( "PDS_PROTO" )
        ELSE
            do_auto_unapproval ( "PDS_PROTO", FALSE )
        ENDIF

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE update_routine ( labtable )

{
* Called on pressing the DO key to save LTE screen
* Called after the LTE write transaction has been started
*
* Parameters : labtable , the labtable object
*
* Return : TRUE   if updates have been performed
*          FALSE  if updates have NOT been performed
*          EMPTY  the systems checks for updates
*
*******************************************************************************}
    
    IF ( labtable . operation = "MODIFY" ) THEN
    
        IF SELECT 'name_of_table' . status = "O" THEN
        
            do_auto_unapproval ( name_of_table, TRUE )
            
        ENDIF
        
    ENDIF    

ENDROUTINE

{******************************************************************************}

ROUTINE prompt_object_routine (       prompt_object ,
                                VALUE prompt_number ,
                                VALUE operation     )

{
* 
* Parameters : 
*
*******************************************************************************}

	IF ( prompt_number = 1 ) THEN                 { ID prompt }

		IF ( global_operation = "approve_ident" ) THEN

			ARRAY prompt_object . mandatory_array ARRAY_SIZE ( 0 , 4 )

			array_select_add ( prompt_object . 
			                     mandatory_array ,
			                   ARRAY_SELECT_EQ   ,
			                   "STATUS"          ,
			                   "P"               )
		ENDIF
	ENDIF

	IF ( prompt_number = 2 ) THEN                 { ID prompt }

		IF ( global_operation = "approve_ident" ) THEN

			ARRAY prompt_object . mandatory_array ARRAY_SIZE( 0 , 4 )

			array_select_add ( prompt_object.mandatory_array ,
			                   ARRAY_SELECT_EQ               ,
			                   "STATUS"                      ,
			                   "P"                           )

		ENDIF

	ENDIF

ENDROUTINE


{******************************************************************************}

ROUTINE browse_inv_product_table ( VALUE column	  ,
                                   VALUE row	  ,
                                   VALUE cell_width ,
                                         window     ,
                                   VALUE is_display )

{
* 
* Parameters : 
*
*******************************************************************************}

DECLARE temp_product, product_array

	ARRAY product_array

	temp_product = SELECT pds_proto . product_id

	IF ( is_display ) THEN

		DISPLAY temp_product
			ON LINE   row
			FROM      column
			TO        column + cell_width - 1
			IN WINDOW window
	ELSE

		PROMPT FOR temp_product
			BROWSE ON inventory_view . identity
			WITH ( display_only = GLOBAL ( "DISPLAY_MODE" ) ,
			       column       = column                    ,
			       row          = row                       ,
			       window       = window                    ,
			       width        = cell_width                )

		ASSIGN pds_proto . product_id = temp_product

	ENDIF

ENDROUTINE 

