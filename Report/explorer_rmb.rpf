{******************************************************************************
* Module Name   : EXPLORER_RMB
* Purpose       : Custom RMB functions for Explorer folders
*******************************************************************************}

SET NOTPROTECTED
SET NAME"DEFER/"
SET COMPILE_OPTION DECLARE
ENABLE WINDOWS

JOIN STANDARD_LIBRARY STD_ARRAY
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY TOOLBOX


GLOBAL ROUTINE prod_sched_label_rmb ( rmb_object, object , collection )
{*************************************************************************
* Purpose       : Explorer RMB callback routine for setting/adjusting
*                 label count for Login Schedule based on LOGIN_SCHEDULE_VIEW
* Parameters    : rmb_object, object , collection
* Return Value  : None

    rmb_object  EXPLORER_RMB        - E:\Program Files (x86)\Thermo\SampleManager\11.1\Report\$explorer_rmb.rpf
    object      STD_OBJECT_RECORD   - Programmers_Guide.chm
    collection  STD_OBJECT_DATABASE - Programmers_Guide.chm

*************************************************************************}
DECLARE records, table, ArrKey0, Key1, Key2, Key3, Key4, Key5, i, key, status
DECLARE prompt_title, msg_array, display_text, prompt_type, fld_name, do_browse, select_array, prompt_val, last_key_used

ARRAY msg_array
ARRAY select_array
ARRAY records 
ARRAY ArrKey0

    table = rmb_object.table
    GET_TABLE_DETAILS 'table', "KEY0_FIELD", ArrKey0

    Key1 = ArrKey0[1]
    Key2 = ArrKey0[2]
    Key3 = ArrKey0[3]
    Key4 = ArrKey0[4]
    Key5 = ArrKey0[5]
    
    collection.set_first()
    WHILE collection.current <> EMPTY DO
        i = size_of_array(records) + 1
        records[i, 1] = SELECT 'table'.'Key1' IN OBJECT collection.current
        records[i, 2] = SELECT 'table'.'Key2' IN OBJECT collection.current
        records[i, 3] = SELECT 'table'.'Key3' IN OBJECT collection.current
        records[i, 4] = SELECT 'table'.'Key4' IN OBJECT collection.current
        records[i, 5] = SELECT 'table'.'Key5' IN OBJECT collection.current
        collection.set_next()
    ENDWHILE

    IF size_of_array(records) > 0 THEN
    
        prompt_title = "Set label count ..."
        msg_array[1] = "Set label count to N for selected records"
        msg_array[2] = "   N: set to fixed number"
        msg_array[3] = "+N: increase with N"
        msg_array[4] = "- N: decrease with N"
        display_text = "Define N:"
        prompt_type  = "TEXT10"
        fld_name     = ""
        do_browse    = FALSE
        prompt_val   = ""

        key = prompt_user_msg (prompt_title, msg_array, display_text,
                         prompt_type , fld_name, do_browse, 
                         select_array, prompt_val, last_key_used)

        IF key AND NUMTEXT(prompt_val) THEN
            i = 1
            WHILE i <= size_of_array(records)
                status = SELECT prod_sched.product_name FOR UPDATE
                         WHERE product_name     = records[i, 1]
                           AND product_version  = records[i, 2]
                           AND inspection_type  = records[i, 3]
                           AND sampling_point   = records[i, 4]
                           AND group_id         = records[i, 5]
                IF status = records[i, 1] THEN
                    START WRITE TRANSACTION "Set label count"
                    IF INDEX("+-", LEFTSTRING(STRIP(prompt_val), 1)) > 0 THEN
                        ASSIGN prod_sched.label_count = SELECT prod_sched.label_count + NUMERIC(prompt_val)
                    ELSE
                        ASSIGN prod_sched.label_count = NUMERIC(prompt_val)
                    ENDIF
                    UPDATE prod_sched
                    COMMIT
                ELSE
                    ROLLBACK
                ENDIF
                i = i + 1
            ENDWHILE
        ENDIF
    ENDIF
    
ENDROUTINE

{*************************************************************************
* Purpose      : Writes to predefined log,
*                using WriteLog in $lib_utils
* Parameters   : Msg - what to write in log
* Return Value : N/A
**************************************************************************}
ROUTINE WriteToLog(VALUE Msg)

    WriteLog(Msg, global("current_library"))

ENDROUTINE

{*************************************************************************}

