{******************************************************************************
*
* Module Name   : $SAMP_JOB.RPF
*
* Purpose       :
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}

JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_LOGIN
JOIN STANDARD_LIBRARY STD_WINDOW
JOIN STANDARD_LIBRARY STD_CLIENT
JOIN STANDARD_LIBRARY STD_PROMPT

JOIN LIBRARY $lib_utils
JOIN LIBRARY $line_editor
JOIN LIBRARY $lib_grid
JOIN LIBRARY $lib_samp
JOIN LIBRARY $lib_temp
JOIN LIBRARY $lib_job
JOIN LIBRARY $lib_workflow
JOIN LIBRARY $test_assn
JOIN LIBRARY $samp_egc
JOIN LIBRARY $samp_conf
JOIN LIBRARY $samp_user

JOIN LIBRARY $BROWSE_FIELD
JOIN LIBRARY $CRITERIA_FIELD
JOIN LIBRARY $CRITERIA_CACHE
JOIN LIBRARY $INSTALL_WINDOW
JOIN LIBRARY $MRU_LIST_FIELD

JOIN LIBRARY $PROMPT_JOB
JOIN LIBRARY $PROMPT_IMPRINT

JOIN STANDARD_LIBRARY std_class
JOIN STANDARD_LIBRARY std_prompt
JOIN STANDARD_LIBRARY std_message

SET COMPILE_OPTION DECLARE

SET NOTPROTECTED
ENABLE WINDOWS
SET NAME "DISPLAY"

{*********************************************************************************}

CONSTANT TEMPLATE_POS       = 2
CONSTANT TEXT_PROMPT_LENGTH = 31

{*********************************************************************************}

GLOBAL CONSTANT SAMP_JOB_DISPLAY_CLASS           = "STD_SAMP_JOB_DISPLAY"
GLOBAL CONSTANT SAMP_JOB_FORM_INFO_CLASS         = "STD_SAMP_JOB_FORM_INFO"
GLOBAL CONSTANT SAMP_JOB_NEW_FORM_INFO_CLASS     = "STD_SAMP_JOB_NEW_FORM_INFO"
GLOBAL CONSTANT SAMP_JOB_SCREEN_INFO_CLASS       = "STD_SAMP_JOB_SCREEN_INFO"

GLOBAL CONSTANT SAMP_JOB_JOB_LOGIN_CLASS         = "STD_SAMP_JOB_JOB_LOGIN"
GLOBAL CONSTANT SAMP_JOB_SAMPLE_LOGIN_CLASS      = "STD_SAMP_JOB_SAMPLE_LOGIN"
GLOBAL CONSTANT SAMP_JOB_SAMPLE_MODIFY_CLASS     = "STD_SAMP_JOB_SAMPLE_MODIFY"
GLOBAL CONSTANT SAMP_JOB_LOGIN_SCREEN_CLASS      = "STD_SAMP_JOB_LOGIN_SCREEN"

GLOBAL CONSTANT SAMP_JOB_OPTIONS_CLASS           = "STD_SAMP_JOB_OPTION"

{*********************************************************************************}

samp_job_test ()

DECLARE samp_job_callback_options


{*********************************************************************************}

GLOBAL ROUTINE samp_job_initialise

{
*
*
******************************************************************************}

    lib_grid_initialise ()
    line_editor_initialise_new ()

    setup_stored_test_list ()
    setup_sample_defer_list ()

    criteria_field_initialise ()
    criteria_cache_initialise ()

    samp_egc_initialise ()

    DEFINE CLASS SAMP_JOB_DISPLAY_CLASS

    PROPERTIES "FIELD_NAME"    ,
           "FIELD_VALUE"   ,
           "SAMPLE_ID"

    INITIALISATION

    END CLASS

    DEFINE CLASS SAMP_JOB_FORM_INFO_CLASS

    INHERIT PROMPT_CLASS_FORM

    PROPERTIES "JOB_NAME"               ,
           "DISPLAY_JOB"            ,
           "PROMPT_JOB"             , { Set display job if set this one }
           "TEMPLATE"               ,
           "DISPLAY_TEMPLATE"       ,
           "PROMPT_TEMPLATE"        , { Set display template if set this one }
           "PROMPT_REPEAT"          ,
           "IS_SAMPLE_LOGIN"        ,
           "HEADER_MESSAGE"         ,
           "FOOTER_MESSAGE"         ,
           "REPEAT_COUNT"           ,
           "VALIDATE_JOB"           ,
           "SAMPLE_SYNTAX"          ,
           "DISPLAY_START_COLUMN"   ,
           "DISPLAY_END_COLUMN"     ,
           "GRID_ID"            ,
           "JOB_DESCRIPTION_OBJECT" ,
           "HAS_A_PROMPT"

    ACTIONS "ADD_SAMPLE"

    END CLASS

    DEFINE CLASS SAMP_JOB_NEW_FORM_INFO_CLASS

    INHERIT SAMP_JOB_FORM_INFO_CLASS

    PROPERTIES "RETURN_SAMPLE_ID"

    ACTIONS "ADD_SAMPLE"    ,
        "RETURN_SAMPLE"


    INITIALISATION

    END CLASS

    DEFINE CLASS SAMP_JOB_SCREEN_INFO_CLASS

    PROPERTIES "REQUIRED_LINES"   ,
           "TABLE_TYPE"       ,
           "INCLUDE_COPY"     ,
           "DISPLAY_MODE"     ,
           "TOP_LINE"         ,
           "BOTTOM_LINE"      ,
           "USER_VALIDATION"  ,
           "SELECT_ROUTINE"   ,
           "HELP_CONTEXT"

    END CLASS

    DEFINE CLASS SAMP_JOB_JOB_LOGIN_CLASS

    PROPERTIES "TEMPLATE_DETAILS"          ,
           "TEMPLATE_FIELDS"           ,
           "JOB_IDENTITY"              ,
           "JOB_TEMPLATE"              ,
           "SAMPLE_TEMPLATE"           ,
           "SAMPLE_SYNTAX"             ,
           "REPEAT_COUNT"              ,
           "DONT_CONFIRM"              ,
           "FIELD_VALUES"              ,
           "USER_INFO"                 ,
           "USE_CURRENT_TRANSACTION"   ,
           "SAMPLES_FOR_JOB"           ,
           "DO_DEFER_OPERATIONS"       ,
           "DO_POST_SAMPLE_OPERATIONS" ,

           { Workflow }
           "USER_WORKFLOW"

    ACTIONS    "LOGIN_A_JOB"

    INITIALISATION

    END CLASS

    DEFINE CLASS SAMP_JOB_SAMPLE_LOGIN_CLASS

    PROPERTIES "REPEAT_COUNT"           ,
           "SESSION_COUNT"          ,
           "TEMPLATE_ID"            ,
           "TEMPLATE_DETAILS"       ,
           "TEMPLATE_FIELDS"        ,
           "SUPERTEMPLATE_DETAILS"  ,
           "NUMBER_OF_TEMPLATES"    ,
           "JOB_NAME"               ,
           "STATUS"                 ,
           "SYNTAX"         ,
           "USE_TEMPLATE_SYNTAX"    ,
           "FIELD_VALUES"           ,

           "REPEAT_VALUES"          ,
           "REPLICATE_VALUES"       ,
           "REPLICATE_LINK_NO"      ,

           { Control test assignment }

           "EDIT_TESTS"               ,
           "TEST_LIST"                ,
           "STORE_NEXT_SAMPLES_TESTS" ,

           { Properties for the user to play with }

           "USER_WORKSHEET_WANTED"   ,
           "USER_WORKSHEET_PRINT"    ,
           "USER_RECEIPT_WANTED"     ,
           "USER_RECEIPT_ID"         ,
           "USER_RECEIPT_PRINTER"    ,
           "USER_LABEL_WANTED"       ,
           "USER_LABEL_ID"           ,
           "USER_LABEL_TEMPLATE"     ,
           "USER_LABEL_PRINTER"      ,
           "USER_LABEL_OVERRIDE"     ,
           "USER_ADD_INTERNAL_TEST"  ,
           "USER_ADD_TESTS"          ,
                   "USER_TEST_LIST"          ,
           "USER_STATUS"             ,
           "USER_INFO"               ,
           "USE_CURRENT_TRANSACTION" ,
           "RETURN_SAMPLE_ID"        ,
           "DO_DEFER_OPERATIONS"     ,
           "SUPPRESS_SCHEDULE_TESTS" ,
           
           { Workflow }
           "USER_WORKFLOW"           ,

           { Update routine called after each sample is added }

           "RETURN_SAMPLE_LIBRARY"   ,
           "RETURN_SAMPLE_ROUTINE"   ,
           "RETURN_SAMPLE_PARAM"

    ACTIONS    "LOGIN_A_SAMPLE"

    INITIALISATION

    END CLASS

    DEFINE CLASS SAMP_JOB_LOGIN_SCREEN_CLASS

    INHERIT PROMPT_CLASS_FORM

    PROPERTIES "LINE_EDITOR"           ,
           "SESSION_COUNTER"       ,
           "REPEAT_COUNTER_TEXT"   ,
           "REPEAT_COUNTER"        ,
           "REPLICATE_COUNTER_TEXT",
           "REPLICATE_COUNTER"     ,
           "NO_FIELDS"             ,
           "TEMPLATE_DETAILS"      ,
           "TEMPLATE_FIELDS"

    END CLASS

    DEFINE CLASS SAMP_JOB_SAMPLE_MODIFY_CLASS

    INHERIT PROMPT_CLASS_FORM

    PROPERTIES "TABLE"                 ,
           "TEMPLATE_ID"           ,
           "TEMPLATE_DETAILS"      ,
           "TEMPLATE_FIELDS"       ,
           "IS_MODIFY_FULL"        ,
           "IS_DISPLAY"            ,
           "PROMPT_FOR_TEMPLATE"   ,
           "FIRST_DISPLAY_COLUMN"  ,
           "SECOND_DISPLAY_COLUMN" ,
           "THE_LINE_EDITOR"       ,
           "NO_FIELDS_DISPLAY"     ,
           "FIRST_TIME"        ,
           "IDENTITY_PROMPT"       ,
           "OLD_PARAM_ACTIVE"      ,
           "DISPLAY_OBJECT_12"     ,
           "DISPLAY_OBJECT_13"     ,
           "DISPLAY_OBJECT_14"     ,
           "DISPLAY_OBJECT_21"     ,
           "DISPLAY_OBJECT_22"


    END CLASS

    DEFINE CLASS SAMP_JOB_OPTIONS_CLASS

    PROPERTIES "ROUTINE"     ,
           "LIBRARY"     ,
           "MENU_NUMBER" ,
           "PASS_SAMPLE" ,
           "PASS_JOB"    ,
           "TITLE"       ,
           "SAMPLE_ID"   ,
           "JOB_ID"

    INITIALISATION

    END CLASS

ENDROUTINE

{*********************************************************************************}

ROUTINE std_samp_job_new_form_info_class_initialisation ( self )

{
*
*
*****************************************************************************}

    ARRAY self . return_sample_id ARRAY_SIZE ( 0 )

ENDROUTINE

{*********************************************************************************}

ROUTINE std_samp_job_option_class_initialisation ( self )

    self . routine     = ""
    self . library     = ""
    self . menu_number = 0
    self . pass_sample = FALSE
    self . pass_job    = FALSE
    self . title       = ""
    self . sample_id   = ""
    self . job_id      = ""

ENDROUTINE

{*********************************************************************************}

ROUTINE std_samp_job_job_login_class_initialisation ( self )

    ARRAY self . field_values  ARRAY_SIZE ( 0 , 2)

    self . job_identity            = " "
    self . job_template            = " "
    self . user_info               = EMPTY
    self . dont_confirm            = FALSE
    self . use_current_transaction = FALSE
    self . samples_for_job         = GLOBAL ( "SAMPLES_FOR_JOB" ) OR
                     ( GLOBAL ( "MODE" ) = "INTERACTIVE" )

    self . do_defer_operations       = TRUE
    self . do_post_sample_operations = TRUE

ENDROUTINE

{*********************************************************************************}

ROUTINE std_samp_job_sample_login_class_initialisation ( self )

    ARRAY self . field_values  ARRAY_SIZE ( 0 , 2)

    self . syntax                   = "DEFAULT"
    self . job_name                 = ""
    self . use_template_syntax      = TRUE
    self . edit_tests               = FALSE
    self . test_list                = EMPTY
    self . store_next_samples_tests = FALSE

    self . user_worksheet_wanted    = FALSE
    self . user_worksheet_print     = FALSE
    self . user_receipt_wanted      = FALSE
    self . user_receipt_id          = ""
    self . user_receipt_printer = ""
    self . user_label_wanted        = FALSE
    self . user_label_id            = ""
    self . user_label_template      = ""
    self . user_label_printer       = ""
    self . user_label_override      = FALSE
    self . user_add_internal_test   = FALSE
    self . user_add_tests           = FALSE
    self . user_info                = EMPTY
    self . use_current_transaction  = FALSE
    self . do_defer_operations      = TRUE
    self . suppress_schedule_tests  = FALSE
    
    self . return_sample_library    = EMPTY
    self . return_sample_routine    = EMPTY
    self . return_sample_param      = EMPTY

    ARRAY self . return_sample_id
    
ENDROUTINE

{*********************************************************************************}

ROUTINE std_samp_job_display_class_initialisation ( self )


    ARRAY self . field_name ARRAY_SIZE ( 0 )
    ARRAY self . field_value
    ARRAY self . sample_id

ENDROUTINE

{*********************************************************************************}

ROUTINE special_prompt (       object      ,
                   grid        ,
             VALUE cell_column ,
             VALUE cell_row    ,
             VALUE column      ,
             VALUE line        ,
             VALUE width_1     ,
                   display_id  ,
             VALUE is_display  )

    DECLARE template_position ,
        field_controls    ,
        display_override  ,
        session_count

    display_override = FALSE        

    template_position = grid . prompt_details [ cell_row , 7 ]
    field_controls    = grid . parent_prompt . template_fields

    session_count = 1

    IF ( variable_get_type ( grid . parent_prompt . user_info ) = "Object" ) THEN
        IF object_check_property ( grid . parent_prompt . user_info , "session_count" ) THEN
            session_count = grid . parent_prompt . user_info . session_count
        ENDIF
    ENDIF

    IF NOT is_display THEN

        IF field_controls [ template_position, DISPLAY_POSITION ]    AND
           NOT field_controls [ template_position, PROMPT_POSITION ] AND
           NOT ( field_controls [ template_position, COPY_POSITION ] AND
                 ( session_count = 0 )) THEN

            display_override = TRUE
                SET DISPLAY TRUE

        ENDIF

    ENDIF

    CALL_ROUTINE field_controls [ template_position , routine_details ]
    USING        column     ,
             line       ,
             display_id ,
             is_display
    IN LIBRARY   field_controls [ template_position , library_details ]

    IF NOT is_display THEN

        IF display_override THEN

            SET DISPLAY FALSE

        ENDIF

        grid . redisplay_contents ( )

    ENDIF

ENDROUTINE

{*********************************************************************************}
{*********************************************************************************}

ROUTINE samp_job_leave_job_prompt ( self )

    DECLARE sample_template ,
        form            ,
        template

    form = self . parent_prompt

    IF self . get_lastkey () <> "EXIT" THEN

        self . parent_prompt . job_name = self . value

        IF self . value <> self . original_text THEN

            object_set_current_table ( self , "JOB_HEADER" )

            form . job_description_object . set_text ( SELECT job_header . description )

            samp_job_build_job_id_list ( self . parent_prompt   ,
                             self . value           )

            sample_template = SELECT job_header . sample_template

            IF NOT blank ( sample_template ) THEN

                template = self . parent_prompt .
                        prompt_objects [ 2 ]
                template . value = sample_template
                template . repaste ()

            ENDIF

        ENDIF

    ENDIF

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_leave_template_prompt ( self )

    IF self . get_lastkey () <> "EXIT" THEN

        self . parent_prompt . template = self . value

    ENDIF

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_leave_repeat_prompt ( self )

    IF self . get_lastkey () <> "EXIT" THEN

        self . parent_prompt . repeat_count = self . value

    ENDIF

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_add_grid_column (       grid         ,
                   VALUE grid_started ,
                   VALUE column       ,
                   VALUE field_name   )

    DECLARE field_title  ,
        field_width

    field_title = criteria_cache_field_title ( "SAMPLE"    ,
                            field_name )

    field_width = criteria_cache_field_width ( "SAMPLE"    ,
                            field_name )

    field_width = find_min_number ( field_width , grid . width )
    array_insert_slice ( grid . user_info . field_name  , 1 , column )
    array_insert_slice ( grid . user_info . field_value , 2 , column )

    grid . user_info . field_name [ column ] = field_name

    IF grid_started THEN

        grid . insert_column ( column , field_width , GRID_SEPARATOR_BLANK )
        grid . title_text_top [ column , 1 ] = field_title
        grid . redisplay_title_top ( column )

        IF ( grid . cell_columns = 2 ) THEN
            grid . fixed_columns_left = 1
            grid . column_separator [ 1 ] = GRID_SEPARATOR_BLANK
            grid . column_separator [ 2 ] = GRID_SEPARATOR_BLANK
            screen_begin_update ( )
            grid . rebuild ( )
            screen_end_update ( )
        ENDIF

        IF grid . current_row > 0 THEN

            grid . set_position ( column , grid . current_row )

        ENDIF

    ELSE

        grid . column_size [ column ] = field_width
        grid . column_separator [ column ] = GRID_SEPARATOR_BLANK
        grid . title_text_top [ column , 1 ] = field_title
        grid . cell_columns = grid . cell_columns + 1

    ENDIF


ENDROUTINE

{******************************************************************************}

ROUTINE samp_job_user_grid_columns ( grid )

    DECLARE field_names ,
        titles      ,
        widths      ,
        count       ,
        wanted_key0

    ARRAY field_names
    ARRAY titles
    ARRAY widths

    IF GLOBAL ( "SAMP_BROWSE" ) = "T" THEN

        wanted_key0 = "ID_TEXT"

    ELSE

        wanted_key0 = "ID_NUMERIC"

    ENDIF

    browse_field_details ( "SAMPLE"     ,
                    wanted_key0 ,
                0       ,
                    field_names ,
                titles      ,
                widths      )

    count = 1

    WHILE count <= size_of_array ( field_names ) DO

        samp_job_add_grid_column (  grid                  ,
                            FALSE                 ,
                            count                 ,
                            field_names [ count ] )

        count = count + 1

    ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE samp_job_setup_field_values (       grid     ,
                      VALUE grid_row )

    DECLARE count       ,
        field_name


    count = 1

    WHILE count <= size_of_array ( grid . user_info . field_name ) DO

        field_name = grid . user_info . field_name [ count ]
        grid . user_info . field_value [ grid_row , count ] =
            SELECT sample . 'field_name'

        count = count + 1

    ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE std_samp_job_form_info_action_add_sample (       self            ,
                           VALUE sample_identity )

    DECLARE next_row   ,
        grid       ,
        column

        grid = self . prompt_objects [ self . grid_id ]

    next_row = grid . cell_rows + 1

    grid . user_info . sample_id [ next_row ] = sample_identity

    samp_job_setup_field_values ( grid , next_row )

    IF grid . started THEN

        grid . insert_row ( next_row, 1 , GRID_SEPARATOR_NONE )
        column = find_max_number ( grid . current_column ,
                       1                     )
                grid . set_position ( column    ,
                      next_row  )

    ELSE

        grid . cell_rows = grid . cell_rows + 1

    ENDIF

ENDROUTINE


{******************************************************************************}

ROUTINE std_samp_job_new_form_info_action_add_sample (       self            ,
                                                       VALUE sample_identity )

{
*
*
*******************************************************************************}

    DECLARE next_pos

    next_pos = size_of_array ( self . return_sample_id ) + 1

    self . return_sample_id [ next_pos ] = sample_identity

    mru_list_field_add( "SAMPLE", "ID_NUMERIC", sample_identity )

ENDROUTINE

{******************************************************************************}

ROUTINE std_samp_job_new_form_info_action_return_sample ( self )

{
*
*
*******************************************************************************}

    DECLARE sample_id

    IF size_of_array ( self . return_sample_id ) > 0 THEN

        sample_id = self . return_sample_id [ 1 ]

    ELSE

        sample_id = ERROR

    ENDIF

    RETURN ( sample_id )

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_display_grid_column (       grid    ,
                       VALUE column  )

    DECLARE count        ,
        sample_value ,
        field_name

    field_name = grid . user_info . field_name [ column ]

    count = 1

    WHILE count <= size_of_array ( grid . user_info . sample_id ) DO

        sample_value = SELECT sample . 'field_name'
                   WHERE  id_numeric =
                    grid . user_info . sample_id [ count ]

        grid . user_info . field_value [ count , column ] = sample_value

        count = count + 1

    ENDWHILE

    grid . redisplay_column ( column )

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_display_sample (       self     ,
                  VALUE cell_column ,
                  VALUE cell_row    ,
                        window      ,
                  VALUE column      ,
                  VALUE row         ,
                  VALUE cell_width  ,
                  VALUE cell_height )

    DECLARE field_value

        field_value = self . user_info . field_value [ cell_row    ,
                               cell_column ]

    IF field_value <> EMPTY THEN

        DISPLAY field_value
            ON LINE   row
            FROM      column
            TO        column + cell_width - 1
            IN WINDOW window

    ENDIF

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_prompt_sample (       self     ,
                 VALUE cell_column ,
                 VALUE cell_row    ,
                       window      ,
                 VALUE column      ,
                 VALUE row         ,
                 VALUE cell_width  ,
                 VALUE cell_height )

    DECLARE field_value

    field_value = self . user_info . field_value [ cell_row    ,
                               cell_column ]

    PROMPT FOR       field_value
           ON LINE   row
           FROM      column
           TO        column + cell_width - 1
           IN WINDOW window
           WITH    ( display_only = TRUE ,
             inverse      = TRUE )

    DISPLAY field_value
        ON LINE   row
        FROM      column
        TO        column + cell_width - 1
        IN WINDOW window

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_insert_sample ( grid )

    DECLARE form , the_prompt , window_width , prompt_message ,
            header_message , footer_message , chose_one ,
        field , column , current_mode

    current_mode = global ( "DISPLAY_MODE" )

    SET DISPLAY FALSE

    prompt_message = GET_USER_MESSAGE ( "$BROWSE_FIELD_INSERT_PROMPT" , 1 )
    header_message = GET_USER_MESSAGE ( "$BROWSE_FIELD_INSERT_HEADER" , 1 )
    footer_message = GET_USER_MESSAGE ( "$BROWSE_FIELD_INSERT_FOOTER" , 1 )

    window_width = LENGTH ( prompt_message ) + 21
    window_width = find_max_number ( window_width              ,
                                     LENGTH ( header_message ) )
    window_width = find_max_number ( window_width              ,
                                     LENGTH ( footer_message ) )

    PROMPT OBJECT form
           CLASS PROMPT_CLASS_FORM
           WITH ( column       = ( GLOBAL ( "SCREEN_WIDTH" ) -
                                                     window_width ) / 2 ,
                  row          = GLOBAL ( "SCREEN_HEIGHT" ) / 2         ,
                  width        = window_width                           ,
                  height       = 1                                      ,
                  border       = TRUE                                   ,
                  header       = header_message                         ,
                  footer       = footer_message                         ,
                  help_context = "$BROWSE_FIELD_INSERT"                 )

    form . add_display ( prompt_message , 1 , 1 , 0 )

    PROMPT OBJECT the_prompt
           CLASS CRITERIA_FIELD_CLASS
           AT LENGTH ( prompt_message ) + 2 , 1
           TO window_width
           WITH ( always_validate = TRUE        ,
                  table           = "SAMPLE"    )

    form . add_prompt ( the_prompt )

    form . start_prompt ( )
    form . wait_prompt ( )

    IF ( form . get_lastkey ( ) <> "EXIT" ) THEN

        field = the_prompt . value
        chose_one = NOT ( blank ( field ))

    ELSE

        chose_one = FALSE

    ENDIF

    form . end_prompt ( )

    IF chose_one THEN

        column = grid . current_column + 1

        IF column = 1 THEN

            column = column + 1

        ENDIF

        samp_job_add_grid_column ( grid   ,
                       TRUE   ,
                       column ,
                       field  )

        samp_job_display_grid_column ( grid   ,
                           column )

    ENDIF

    SET DISPLAY current_mode

    RETURN ( TRUE )

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_remove_sample ( grid )

    DECLARE column

    column = grid . current_column

    IF column > 1 THEN

        array_remove_slice ( grid . user_info . field_name ,
                     1                             ,
                     column                        )

        array_remove_slice ( grid . user_info . field_value ,
                     2                              ,
                     column                         )

        grid . remove_column ( column )

        IF ( grid . cell_columns = 1 ) THEN

            grid . fixed_columns_left = 0
            grid . column_separator [ 1 ] =
                                          GRID_SEPARATOR_NONE
            screen_begin_update ( )
            grid . rebuild ( )
            screen_end_update ( )

        ENDIF

    ENDIF

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_offtop_sample ( grid )

    { User wants to go up }

    grid . stop_prompt ()

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_enter_sample ( grid )

    IF grid . cell_rows = 0 THEN

        { No samples available move up }

        grid . stop_prompt ()

        IF ( global ( "TERMTYPE" ) = "GUI" ) THEN

            grid . set_lastkey ( grid . parent_prompt . get_lastkey())

            IF grid . parent_prompt . get_lastkey () = "CONTINUE" THEN
                grid . parent_prompt . set_position (
                         grid . parent_prompt . active_prompt - 1 )
            ENDIF

        ELSE

            grid . set_lastkey ( "UP" )

        ENDIF

    ENDIF

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_sample_options (       sample_commands ,
                      VALUE current_sample  )

    DECLARE count           ,
        next_option

    ARRAY sample_commands

    count = 1

    IF can_access_menu ( 47 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . menu_number = 47
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_1" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF

    IF can_access_menu ( 86 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . menu_number = 86
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_2" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF


    IF can_access_menu ( 419 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . menu_number = 419
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_3" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF


    IF can_access_menu ( 249 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . menu_number = 249
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_4" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF

    IF can_access_menu ( 15002 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . menu_number = 15002
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_5" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF

    IF can_access_menu ( 111 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . routine     = "SAMP_JOB_PRINT_RECEIPT"
        next_option . library     = global ( "current_library" )
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_6" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF

    IF can_access_menu ( 19 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . routine     = "SAMP_JOB_PRINT_LABEL"
        next_option . library     = global ( "current_library" )
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_7" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF

    IF can_access_menu ( 465 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . routine     = "SAMP_JOB_PRINT_WORKSHEET"
        next_option . library     = global ( "current_library" )
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_8" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF

    IF can_access_menu ( 57 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . menu_number = 57
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_9" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF

    sample_login_menu ( sample_commands ,
                current_sample  )

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_select_sample ( self )

{
*
*
*****************************************************************************}

    DECLARE sample_commands  ,
        sample_id

    sample_id = self . user_info . sample_id [ self . current_row ]

    samp_job_sample_options ( sample_commands ,
                                  sample_id       )


    samp_job_select_callmenu ( GET_USER_MESSAGE("SAMP_JOB_CONST_39" ,1),
                   "$SAMP_JOB_LOGIN_COMMAND"               ,
                   sample_commands                         )

    sample_id = SELECT sample . id_numeric
            WHERE  id_numeric = sample_id

    samp_job_setup_field_values ( self               ,
                      self . current_row )

    self . redisplay_row ( self . current_row )

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_form_validation ( self )

    DECLARE valid_form  ,
        template

    valid_form = TRUE

    IF blank ( self . template ) THEN

        valid_form = FALSE

    ELSE

        template = SELECT samp_tmpl_header . identity
               WHERE identity = self . template
        valid_form = template <> EMPTY

    ENDIF

    IF self . validate_job THEN

        IF blank ( self . job_name ) THEN

            valid_form = FALSE

        ENDIF

    ENDIF

    RETURN ( valid_form )

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_sample_login_options (  options  )

    ARRAY options

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_create_front_screen (  login_header_screen   ,
                        sample_fields_actions )

    DECLARE form_height             ,
        form_width              ,
        grid_start_row          ,
        grid_end_row            ,
        grid_end_column         ,
        template_prompt_row     ,
        frame_end_column        ,
        job_field               ,
        display_column          ,
        job_prompt_object       ,
        template_prompt_object  ,
        repeat_prompt_object    ,
        grid

    display_column = find_max_number ( string_length ( GET_USER_MESSAGE ("SAMP_JOB_CONST_16" , 1 )) ,
                       string_length ( GET_USER_MESSAGE ("SAMP_JOB_CONST_17" , 1 )))

    display_column = find_max_number ( display_column            ,
                       string_length ( GET_USER_MESSAGE ( "SAMP_JOB_CONST_19" , 1 )))

    display_column = find_max_number ( display_column            ,
                       string_length ( GET_USER_MESSAGE ( "SAMP_JOB_CONST_20" , 1 )))

    display_column = display_column + 2

    form_height = global ( "SCREEN_HEIGHT" ) - 9

    IF global ( "TERMTYPE" ) = "GUI" THEN

        form_width  = global ( "SCREEN_WIDTH"  ) - 10

    ELSE

        form_width  = global ( "SCREEN_WIDTH"  ) - 4

    ENDIF

    grid_end_column  = form_width
    frame_end_column = grid_end_column

    login_header_screen . display_start_column = display_column
    login_header_screen . display_end_column   = frame_end_column - 1

    IF login_header_screen . display_job THEN

        grid_start_row = 3

    ELSE

        grid_start_row = 1

    ENDIF

    IF ( login_header_screen . display_template ) AND
       ( login_header_screen . display_job      ) THEN

        template_prompt_row = 4
        grid_start_row      = 7

    ELSEIF ( login_header_screen . display_template ) THEN

        template_prompt_row = 1
        grid_start_row      = 4

    ELSEIF ( login_header_screen . display_job      ) THEN

        template_prompt_row = 0
        grid_start_row      = 4

    ELSE

        template_prompt_row = 0
        grid_start_row      = 1

    ENDIF

    grid_end_row = form_height


    login_header_screen . height             = form_height
    login_header_screen . width              = form_width
    login_header_screen . row                = 7
    login_header_screen . column             = 3
    login_header_screen . border             = TRUE
    login_header_screen . header             = login_header_screen . header_message
    login_header_screen . footer             = login_header_screen . footer_message
        login_header_screen . validation_routine = "SAMP_JOB_FORM_VALIDATION"
    login_header_screen . select_routine     = "SAMP_JOB_SAMPLE_LOGIN_SELECT"
    login_header_screen . proportional       = TRUE
    login_header_screen . button_style       = FORM_BUTTON_NONE
    login_header_screen . help_context       = "$SAMP_JOB_MAIN_SCREEN"

    { Create the prompts }

    IF login_header_screen . prompt_job THEN

        PROMPT OBJECT job_prompt_object
                    ON LINE 1
            FROM    display_column
            BROWSE ON JOB_HEADER
            THEN SELECT
            WITH ( VGL_LIBRARY = global ( "current_library" ) ,
                   leave_prompt_routine = "samp_job_leave_job_prompt" )

        login_header_screen . add_prompt ( job_prompt_object )
        login_header_screen . validate_job = TRUE

        PROMPT OBJECT  login_header_screen . job_description_object
               ON LINE 2
               FROM    display_column
               TO      login_header_screen . display_end_column
               FORMAT  job_header . description
               WITH  ( lowered = TRUE )

        login_header_screen . add_display ( login_header_screen . job_description_object )

        login_header_screen . add_frame ( ""               ,
                                  1                ,
                                  1                ,
                                  2                ,
                                  frame_end_column )

    ELSEIF login_header_screen . display_job THEN

        job_field = SELECT job_header . job_name
                WHERE job_name = login_header_screen . job_name

        login_header_screen . add_display ( job_field                ,
                            display_column           ,
                            1                    ,
                            PROMPT_RENDITION_LOWERED )

        PROMPT OBJECT  login_header_screen . job_description_object
               ON LINE 2
               FROM    display_column
               TO      login_header_screen . display_end_column
               FORMAT  job_header . description
               WITH  ( value   = SELECT job_header . description ,
                   lowered = TRUE                       )

        login_header_screen . add_display ( login_header_screen . job_description_object )

        login_header_screen . validate_job = FALSE

        login_header_screen . add_frame ( ""    ,
                                  1  ,
                                  1     ,
                                  2     ,
                                  frame_end_column )

    ELSE

        login_header_screen . validate_job = FALSE

    ENDIF

        IF login_header_screen . prompt_template THEN

        IF NOT blank ( login_header_screen  . template ) THEN

            PROMPT OBJECT  template_prompt_object
                   ON LINE template_prompt_row
                   FROM    display_column
                   BROWSE ON SAMP_TMPL_HEADER
                   WITH ( leave_prompt_routine =
                    "samp_job_leave_template_prompt" ,
                      value = login_header_screen . template  ,
                      display_only = TRUE                )

        ELSE

            PROMPT OBJECT  template_prompt_object
                   ON LINE template_prompt_row
                   FROM    display_column
                   BROWSE ON SAMP_TMPL_HEADER
                   WITH ( leave_prompt_routine =
                    "samp_job_leave_template_prompt" )

        ENDIF

        login_header_screen . add_prompt ( template_prompt_object )

        login_header_screen . add_frame ( ""                  ,
                                  1                ,
                                  template_prompt_row ,
                                  2                   ,
                                  frame_end_column    )

    ELSEIF login_header_screen . display_template THEN

        login_header_screen . add_display ( PAD ( login_header_screen .
                               template           ,
                            " " , 10 )            ,
                                    display_column            ,
                                    template_prompt_row       ,
                                    PROMPT_RENDITION_BOLD +
                                    PROMPT_RENDITION_LOWERED  )

        login_header_screen . add_frame ( ""                  ,
                                  1                ,
                                  template_prompt_row ,
                                  2                   ,
                                  frame_end_column    )

    ENDIF

    IF login_header_screen . prompt_repeat THEN

        PROMPT OBJECT  repeat_prompt_object
               ON LINE template_prompt_row + 1
               FROM    display_column
               BROWSE ON INTEGER
               WITH ( minimum              = 0                                   ,
                  value                = login_header_screen . repeat_count  ,
                  leave_prompt_routine = "samp_job_leave_repeat_prompt"      )

        login_header_screen . add_prompt ( repeat_prompt_object )

    ENDIF

    IF login_header_screen . display_job THEN

        login_header_screen . add_display ( PAD ( GET_USER_MESSAGE ( "SAMP_JOB_CONST_16" , 1) ,
                                " " , display_column - 3 )                    ,
                                        2                     ,
                                    1                     ,
                                    PROMPT_RENDITION_BOLD +
                            PROMPT_RENDITION_RAISED )

        login_header_screen . add_display ( PAD ( GET_USER_MESSAGE ( "SAMP_JOB_CONST_18" , 1) ,
                                " " , display_column - 3 )                    ,
                                        2                       ,
                                    2                       ,
                                    PROMPT_RENDITION_BOLD +
                            PROMPT_RENDITION_RAISED )


    ENDIF

    IF login_header_screen . display_template THEN

        login_header_screen . add_display ( PAD  ( GET_USER_MESSAGE ( "SAMP_JOB_CONST_19" , 1 ) ,
                                " " , display_column - 3 )                      ,
                                        TEMPLATE_POS          ,
                                    template_prompt_row   ,
                                    PROMPT_RENDITION_BOLD +
                            PROMPT_RENDITION_RAISED )

        login_header_screen . add_display ( PAD ( GET_USER_MESSAGE ( "SAMP_JOB_CONST_20" , 1)  ,
                                " " , display_column - 3 )                      ,
                                        TEMPLATE_POS            ,
                                    template_prompt_row + 1 ,
                                    PROMPT_RENDITION_BOLD +
                            PROMPT_RENDITION_RAISED )

    ENDIF


    CREATE OBJECT PROMPT_CLASS_GRID , grid

    grid . column               = 2
    grid . row                  = grid_start_row
    grid . width                = grid_end_column - 2
    grid . height               = grid_end_row - grid_start_row + 1
    grid . cell_columns         = 0
    grid . cell_rows            = 0
    grid . display_cell_routine = "SAMP_JOB_DISPLAY_SAMPLE"
    grid . prompt_cell_routine  = "SAMP_JOB_PROMPT_SAMPLE"
    grid . select_routine       = "SAMP_JOB_SELECT_SAMPLE"
    grid . insert_routine       = "SAMP_JOB_INSERT_SAMPLE"
    grid . remove_routine       = "SAMP_JOB_REMOVE_SAMPLE"
    grid . enter_prompt_routine = "SAMP_JOB_ENTER_SAMPLE"
    grid . off_top_routine      = "SAMP_JOB_OFF_TOP_SAMPLE"

    CREATE OBJECT SAMP_JOB_DISPLAY_CLASS , grid . user_info

    grid . title_size_top      = 1
    grid . title_rendition_top = PROMPT_RENDITION_BOLD
        grid . title_separator_top = GRID_SEPARATOR_CELLS

    samp_job_user_grid_columns ( grid )

    IF grid . cell_columns = 1 THEN

        grid . fixed_columns_left = 0

    ELSE

        grid . fixed_columns_left = 1

    ENDIF

    login_header_screen . grid_id = login_header_screen . add_prompt ( grid )

    login_header_screen . add_frame ( ""                          ,
                      1                       ,
                      grid_start_row              ,
                      grid . height               ,
                      login_header_screen . width )

    login_header_screen . has_a_prompt =
        size_of_array ( login_header_screen . prompt_objects ) > 1

    lib_form_add_vertical_buttons ( login_header_screen   ,
                        sample_fields_actions )

    IF (     login_header_screen . display_job     ) AND
       ( NOT login_header_screen . is_sample_login ) THEN

        samp_job_build_jobid_list ( login_header_screen            ,
                        login_header_screen . job_name )

    ENDIF

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_form_prompt (       form        ,
                   VALUE syntax_id   )

    DECLARE save_job_status ,
        login_details   ,
        login_samples   ,
        first_time

    CREATE OBJECT SAMP_JOB_SAMPLE_LOGIN_CLASS , login_details

    save_job_status = GLOBAL ("JOB_STATUS")
    SET JOBSTATUS "VC"

    first_time = TRUE

    form . start_prompt ()

    REPEAT

        IF ( global ( "MODE" ) = "INTERACTIVE" ) AND
           (( form . has_a_prompt ) OR
            ( form . prompt_objects [ form . grid_id ] . cell_rows > 0 ))THEN

            IF NOT first_time THEN
                form . set_lastkey ( "CONTINUE" )
            ENDIF

            form . wait_prompt  ()
            login_samples = form . get_lastkey () = "DO"

        ELSE

            login_samples = form . is_sample_login AND
                    first_time

        ENDIF

        first_time = FALSE

        IF ( login_samples ) AND NOT GLOBAL ( "DISPLAY_MODE" ) THEN

            IF NOT blank ( form . job_name ) THEN

                job_login_pre_sample (     form . job_name   ,
                               NOT form . prompt_job )

            ENDIF

            login_details . repeat_count = form . repeat_count
            login_details . template_id  = form . template
            login_details . job_name     = form . job_name
            login_details . syntax       = form . sample_syntax

            samp_job_sample_login ( form          ,
                        login_details )

        ENDIF

    UNTIL NOT login_samples

    form . end_prompt   ()

    SET JOBSTATUS save_job_status

    do_defer_operations ()

ENDROUTINE

{******************************************************************************}

ROUTINE samp_job_build_job_id_list (       login_header_screen ,
                     VALUE the_job_name        )

DECLARE sample_for_job , bar_counter,  no_of_records

    no_of_records = SELECT COUNT sample
            WHERE  job_name = the_job_name

    IF no_of_records > 0 THEN

        set_up_install_window_class ( )

        CREATE OBJECT INSTALL_WINDOW_CLASS , bar_counter

            bar_counter . header = get_user_message ( "SAMP_JOB_CONST_24",1 )

            bar_counter . row         = 15
            bar_counter . start_value = 0
        bar_counter . end_value   = no_of_records

            bar_counter . start_install ( )

        sample_for_job = SELECT sample . id_numeric
                 WHERE  job_name = the_job_name
                 ORDER ON id_numeric ASCENDING

        WHILE ( sample_for_job <> EMPTY ) DO


            login_header_screen . add_sample ( sample_for_job )

            bar_counter . increase_one ( )

            NEXT sample
                sample_for_job = SELECT sample . id_numeric

        ENDWHILE

        bar_counter . end_install ()

    ENDIF

ENDROUTINE

{*****************************************************************************}

ROUTINE samp_job_front_details_button ( self )

    DECLARE grid   ,
        form

    form = self . parent_prompt
        grid = form . prompt_objects [ form . grid_id ]

    IF grid . cell_rows <> 0 THEN

        samp_job_select_sample ( grid )

    ENDIF

ENDROUTINE

{*****************************************************************************}

ROUTINE samp_job_front_insert_button ( self )

    DECLARE grid   ,
        form

    form = self . parent_prompt
        grid = form . prompt_objects [ form . grid_id ]

        samp_job_insert_sample ( grid )

ENDROUTINE

{*****************************************************************************}

ROUTINE samp_job_front_remove_button ( self )

    DECLARE grid ,
        form

    form = self . parent_prompt
        grid = form . prompt_objects [ form . grid_id ]

        samp_job_remove_sample ( grid )

ENDROUTINE

{*****************************************************************************}

ROUTINE samp_job_create_actions (       actions         ,
                  VALUE is_sample_login )

    DECLARE count ,
            NIL

    NIL = EMPTY

    ARRAY actions

    count = 1

    IF is_sample_login THEN

        lib_grid_lastkey_button ( actions   ,
                      count     ,
                      "DO"      ,
                      GET_USER_MESSAGE ( "SAMP_JOB_BUTTON_LOGIN" , 1 )   )

    ENDIF

    lib_grid_action_button ( actions                        ,
                     count                          ,
                         get_user_message ( "SAMP_JOB_BUTTON_DETAILS" , 1  ) ,
                    "SAMP_JOB_FRONT_DETAILS_BUTTON" ,
                     global ( "current_library" )   ,
                         NIL                            )

    IF is_sample_login THEN

        lib_grid_action_button ( actions                        ,
                     count                          ,
                         get_user_message ( "SAMP_JOB_BUTTON_CONFIG" , 1  ) ,
                     "SAMP_JOB_SAMPLE_LOGIN_SELECT" ,
                     global ( "current_library" )   ,
                         NIL                            )
    ENDIF


    lib_grid_action_button ( actions                                            ,
                     count                                              ,
                         get_user_message ( "SAMP_JOB_BUTTON_INSERT" , 1  ) ,
                    "SAMP_JOB_FRONT_INSERT_BUTTON"                      ,
                     global ( "current_library" )                       ,
                         NIL                                                )

    lib_grid_action_button ( actions                                           ,
                     count                                              ,
                         get_user_message ( "SAMP_JOB_BUTTON_REMOVE" , 1  ) ,
                    "SAMP_JOB_FRONT_REMOVE_BUTTON"                      ,
                     global ( "current_library" )                       ,
                         NIL                                                )


    lib_grid_lastkey_button ( actions   ,
                      count     ,
                      "HELP"    ,
                  EMPTY     )

    lib_grid_lastkey_button ( actions   ,
                      count     ,
                      "EXIT"    ,
                      GET_USER_MESSAGE ( "SAMP_JOB_BUTTON_CLOSE" , 1 ) )

ENDROUTINE

{******************************************************************************}

ROUTINE samp_job_sample_login_select ( form )

{
*
*
*******************************************************************************}

    samp_egc_edit ()

ENDROUTINE

{******************************************************************************}

ROUTINE get_sampling_proc_attribute ( login_details, VALUE attribute )

{
*   Returns the sampling procedure's value of the passed attribute name
*
*******************************************************************************}

    DECLARE c, samp_proc_id, val, found, field_name, template_fields

    template_fields = login_details . template_fields

    val   = EMPTY
    found = FALSE

    c = 1
    WHILE ( c <= size_of_array( template_fields ) ) AND NOT found DO

        field_name = template_fields[c, FIELD_NAME_POSITION]

        IF field_name = "SAMPLING_PROCEDURE" THEN

            samp_proc_id = SELECT sample . sampling_procedure

            IF NOT BLANK( samp_proc_id ) THEN

                val = SELECT sampling_procedure . 'attribute'
                    WHERE identity = samp_proc_id

            ENDIF

            found = TRUE
        ENDIF

        c = c + 1
    ENDWHILE

    RETURN( val )

ENDROUTINE

{******************************************************************************}

ROUTINE get_sampling_proc_number ( login_details )

{
*   Returns the number of replicates required as specified in the sampling
*   procedure.
*
*******************************************************************************}

    DECLARE vgl_library, vgl_routine, num

    vgl_library = get_sampling_proc_attribute ( login_details ,
                                                "VGL_LIBRARY" )

    vgl_routine = get_sampling_proc_attribute ( login_details       ,
                                                "REPLICATE_ROUTINE" )

    IF vgl_library = EMPTY THEN
        vgl_library = " "
    ENDIF

    IF vgl_routine = EMPTY THEN
        vgl_routine = " "
    ENDIF

    IF NOT BLANK( vgl_library ) AND NOT BLANK( vgl_routine ) THEN

        CALL_ROUTINE vgl_routine
            USING login_details
            RETURNING num
            IN LIBRARY vgl_library

    ELSE

        num = get_sampling_proc_attribute ( login_details      ,
                                            "REPLICATE_NUMBER" )

    ENDIF

    IF NOT NUMTEXT( num ) THEN
        num = 1
    ENDIF

    RETURN( num )

ENDROUTINE

{******************************************************************************}

ROUTINE call_sampling_proc_routine ( login_details )

{
*   Calls the sampling procedure routine as specified in the sampling
*   procedure record.
*
*******************************************************************************}

    DECLARE vgl_library, vgl_routine

    vgl_library = get_sampling_proc_attribute ( login_details ,
                                                "VGL_LIBRARY" )

    vgl_routine = get_sampling_proc_attribute ( login_details       ,
                                                "PROCEDURE_ROUTINE" )

    IF vgl_library = EMPTY THEN
        vgl_library = " "
    ENDIF

    IF vgl_routine = EMPTY THEN
        vgl_routine = " "
    ENDIF

    IF NOT BLANK( vgl_library ) AND NOT BLANK( vgl_routine ) THEN

        CALL_ROUTINE vgl_routine
            USING login_details
            IN LIBRARY vgl_library

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE get_sampling_proc_prompt_once ( login_details )

{
*   Returns the prompt once status as specified in the sampling procedure.
*
*******************************************************************************}

    DECLARE prompt_once

    prompt_once = get_sampling_proc_attribute ( login_details ,
                            "PROMPT_ONCE" )

    RETURN( prompt_once = TRUE )

ENDROUTINE

{******************************************************************************}

ROUTINE store_current (       field_value_array ,
                  login_details     ,
            VALUE table             ,
            VALUE only_copy_flagged )

{
*   Copies all values from the current 'table' row into the field_value_array
*   If the only_copy_flagged value is TRUE then only fields with a copy flag
*   will be copied.
*
*******************************************************************************}

    DECLARE count, pos, field_name, copy_flag

    ARRAY field_value_array ARRAYSIZE(0,2)

    pos   = 1
    count = 1
    field_name = login_details . template_fields[count, FIELD_NAME_POSITION]

    WHILE field_name <> EMPTY DO

        copy_flag = login_details . template_fields[ count         ,
                                 COPY_POSITION ]

        IF copy_flag OR NOT only_copy_flagged THEN

            field_value_array[pos,1] = field_name
            field_value_array[pos,2] = SELECT 'table' . 'field_name'

            pos = pos + 1

        ENDIF

        count = count + 1
        field_name = login_details . template_fields[count              ,
                                 FIELD_NAME_POSITION]

    ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE populate_current_from_array ( field_value_array, VALUE table )

{
*   Copies all values to the current 'table' row from the field_value_array
*
*******************************************************************************}

    DECLARE c

    c = 1
    WHILE c <= size_of_array( field_value_array ) DO

        ASSIGN 'table' . 'field_value_array[c,1]'
                = field_value_array[c,2]

        c = c + 1
    ENDWHILE

ENDROUTINE

{******************************************************************************}

ROUTINE add_counter_prompts_to_form ( form )

{
*   Adds the Session, repeat and replicate counter prompts to the login form
*
*******************************************************************************}

    DECLARE display_end_column, session_counter_text
    DECLARE session_length, replicates_length, repeat_length

    session_length    = LENGTH( GET_USER_MESSAGE( "SAMP_JOB_CONST_5"  , 1 ) )
    replicates_length = LENGTH( GET_USER_MESSAGE( "SAMP_JOB_REPLICATE", 1 ) )
    repeat_length     = LENGTH( GET_USER_MESSAGE( "SAMP_JOB_REPEAT"   , 1 ) )

    display_end_column = find_max_number( session_length    ,
                          replicates_length )

    display_end_column = find_max_number( display_end_column ,
                          repeat_length      )

    PROMPT OBJECT session_counter_text
           ON LINE 1
           FROM    2 TO display_end_column + 1
           WITH ( raised = TRUE         ,
                  bold   = TRUE         ,
              value  = GET_USER_MESSAGE( "SAMP_JOB_CONST_5", 1 ) )

    form . add_display ( session_counter_text )

    PROMPT OBJECT form . session_counter
           ON LINE 1
           FROM    display_end_column + 3
           TO      display_end_column + 3 + 10
           WITH ( lowered       = TRUE                 ,
                  justification = PROMPT_JUSTIFY_RIGHT ,
              value         = 0                    )

    form . add_display ( form . session_counter )

    PROMPT OBJECT form . repeat_counter_text
           ON LINE 2
           FROM    2 TO display_end_column + 1
           WITH ( raised = TRUE         ,
                  bold   = TRUE         ,
              value  = GET_USER_MESSAGE( "SAMP_JOB_REPEAT", 1 ) )

    form . add_display ( form . repeat_counter_text )

    PROMPT OBJECT form . repeat_counter
           ON LINE 2
           FROM    display_end_column + 3
           TO      display_end_column + 3 + 10
           WITH ( lowered       = TRUE                 ,
              justification = PROMPT_JUSTIFY_RIGHT ,
              value         = 0                    )

    form . add_display ( form . repeat_counter )

    PROMPT OBJECT form . replicate_counter_text
           ON LINE 3
           FROM    2 TO display_end_column + 1
           WITH ( raised = TRUE         ,
                  bold   = TRUE         ,
              value  = GET_USER_MESSAGE( "SAMP_JOB_REPLICATE", 1 ) )

    form . add_display ( form . replicate_counter_text )

    PROMPT OBJECT form . replicate_counter
           ON LINE 3
           FROM    display_end_column + 3
           TO      display_end_column + 3 + 10
           WITH ( lowered       = TRUE                 ,
              justification = PROMPT_JUSTIFY_RIGHT ,
              value         = 0                    )

    form . add_display ( form . replicate_counter )

ENDROUTINE

{******************************************************************************}

ROUTINE set_counter_prompts_visible ( form, VALUE is_replicate_login )

{
*
*******************************************************************************}

    form . replicate_counter      . set_visible( is_replicate_login )
    form . replicate_counter_text . set_visible( is_replicate_login )

    form . repeat_counter         . set_visible( is_replicate_login )
    form . repeat_counter_text    . set_visible( is_replicate_login )

ENDROUTINE

{******************************************************************************}

ROUTINE populate_current_sample( login_details, VALUE first_replicate )

{
*   copies the initial values to the currently selected sample record.
*
*******************************************************************************}

    fill_in_special_fields ( login_details . job_name        ,
                 login_details . template_id     ,
                 login_details . template_fields )

    IF first_replicate THEN

        copy_default_values ( "B"                             ,
                      "SAMPLE"                        ,
                      login_details . template_fields )

        populate_current_from_array( login_details . repeat_values ,
                          "SAMPLE"                     )

        populate_current_from_array( login_details . field_values ,
                         "SAMPLE"                     )

    ELSE

        populate_current_from_array ( login_details . replicate_values ,
                          "SAMPLE"                         )

    ENDIF

    sample_login_assign_workflow ( login_details                    ,
                                   login_details . template_details )

ENDROUTINE

{******************************************************************************}

ROUTINE samp_job_sample_login ( header_details ,
                login_details  )

{
*
*******************************************************************************}

    DECLARE form, screen_info, no_prompts, login_the_sample
    DECLARE no_of_replicates, replicate_no, repeat_no
    DECLARE text, prompt_once, is_first_repeat, is_first_replicate

    ARRAY login_details . replicate_values ARRAYSIZE (0,2)
    ARRAY login_details . repeat_values    ARRAYSIZE (0,2)

    login_details . session_count = 0

    CREATE OBJECT SAMP_JOB_SCREEN_INFO_CLASS , screen_info

    screen_info . required_lines   = 2
    screen_info . table_type       = SAMPLE_TABLE
    screen_info . include_copy     = TRUE
    screen_info . display_mode     = FALSE
    screen_info . bottom_line      = GET_USER_MESSAGE ( "SAMP_JOB_CONST_43" ,
                                1                  )
    screen_info . user_validation  = "SAMP_JOB_SAMPLE_LOGIN_VALIDATION"
    screen_info . select_routine   = "SAMP_JOB_SAMPLE_LOGIN_SELECT"
    screen_info . help_context     = "$SAMP_JOB_SAMPLE_LOGIN"

    initialise_sample_login ( login_details . template_details      ,
                  login_details . template_fields       ,
                  login_details . template_id           ,
                  login_details . supertemplate_details ,
                  login_details . number_of_templates   ,
                  screen_info   . top_line              )

    object_assign_uncounted ( login_details . template_details [ CONTROL_OBJECT_POSITION ] ,
                  login_details                                                )

    login_details . template_details [ USER_INFO_POSITION ] = login_details . user_info

    { User callback }
    sample_start_login_template ( login_details . template_id  ,
                      login_details . repeat_count )

    { User callback }
    sample_login_pre_prompt ( login_details . template_fields  ,
                  login_details . template_details ,
                  0                                )

    samp_job_create_login_screen ( login_details . template_fields  ,
                       login_details . template_details ,
                       screen_info                      ,
                       form                             ,
                       no_prompts                       )

    add_counter_prompts_to_form ( form )

    form . user_info = login_details

    repeat_no = 0
    REPEAT { repeat count loop }

        is_first_repeat = ( repeat_no = 0 )

        text = STRIP( repeat_no )

        IF login_details . repeat_count > 0 THEN
            text = text : "/" : STRIP( login_details . repeat_count )
        ENDIF

        form . repeat_counter . set_text ( text )

        login_details . replicate_link_no = 0

        replicate_no = 0
        REPEAT { replicate count loop }

            is_first_replicate = ( replicate_no = 0 )

            sample_create()

            populate_current_sample ( login_details      ,
                                      is_first_replicate )

            IF is_first_replicate THEN
                no_of_replicates = get_sampling_proc_number( login_details )
                set_counter_prompts_visible ( form, no_of_replicates > 1 )
            ENDIF

            form . replicate_counter . set_text ( STRIP( replicate_no ) : "/" :
                                                      STRIP( no_of_replicates ))

            { User callback }
            sample_login_pre_prompt ( login_details . template_fields   ,
                                      login_details . template_details  ,
                                      login_details . session_count + 1 )

            { Workflow event }
            lib_workflow_trigger_event_noupdate ( SAMPLE_TABLE             ,
                                                  WORKFLOW_EVENT_PRE_LOGIN )

            IF form . started THEN

                IF ( repeat_no = 1 ) THEN

                    screen_info . include_copy = NOT COPY_FROM_FIRST

                    samp_job_change_login_screen (
                              login_details . template_fields ,
                              screen_info                     ,
                              form                            ,
                              no_prompts                      )

                ENDIF

                IF NOT no_prompts THEN

                    form . line_editor . redisplay_column ( 1 )
                    form . line_editor . set_position ( 1, 1 )

                ENDIF

            ENDIF

            IF ( no_prompts AND
               ( login_details . repeat_count > 0        )) OR
               ( login_details . use_current_transaction )  OR
               ( global ( "MODE" ) <> "INTERACTIVE"      )  THEN

                login_the_sample = TRUE

            ELSE

                IF NOT form . started THEN

                    form . start_prompt ()

                ENDIF

                prompt_once = get_sampling_proc_prompt_once ( login_details )

                IF NOT prompt_once OR is_first_replicate THEN
                    form . wait_prompt ()

                    login_the_sample = form . get_lastkey () = "DO"
                ELSE
                    login_the_sample = TRUE
                ENDIF

            ENDIF

            IF login_the_sample THEN

                samp_egc_set_globals ( login_details )

                login_details . session_count =
                        login_details . session_count + 1

                IF is_first_replicate THEN

                    no_of_replicates = get_sampling_proc_number( login_details )
                    set_counter_prompts_visible ( form, no_of_replicates > 1 )

                    call_sampling_proc_routine ( login_details )

                    IF no_of_replicates > 1 THEN

                        prompt_once = get_sampling_proc_prompt_once ( login_details )

                        login_details . replicate_link_no = INCREMENT( "SAMPLE"            ,
                                                           "REPLICATE_LINK_NO" )

                        IF ( prompt_once                                 ) AND
                           ( NOT login_details . use_current_transaction ) THEN

                            text = GET_USER_MESSAGE ( "SAMP_JOB_PROC", 1 ) :
                                STRIP( no_of_replicates ) :
                                GET_USER_MESSAGE ( "SAMP_JOB_PROC", 2 )

                            flash_message( text, TRUE )

                        ENDIF

                    ENDIF

                    store_current ( login_details . replicate_values ,
                            login_details                    ,
                            "SAMPLE"                         ,
                            FALSE                            )

                    IF ( is_first_repeat ) OR ( NOT COPY_FROM_FIRST ) THEN

                        store_current ( login_details . repeat_values ,
                                login_details                 ,
                                "SAMPLE"                      ,
                                TRUE                          )

                    ENDIF

                ENDIF

                login_entered_samples ( header_details ,
                            login_details  ,
                            FALSE          )

                reset_copy_default_values ( login_details . template_fields )

                form . session_counter . set_text ( login_details . session_count )

            ELSE

                lib_workflow_update ( )

            ENDIF

            replicate_no = replicate_no + 1

            text = STRIP( replicate_no ) : "/" :
                    STRIP( no_of_replicates )

            form . replicate_counter . set_text ( text )

        UNTIL ( form . get_lastkey () = "EXIT"   ) OR
              ( replicate_no >= no_of_replicates )

        repeat_no = repeat_no + 1

    UNTIL ( form . get_lastkey () = "EXIT"           ) OR
          ( repeat_no = login_details . repeat_count )


    IF form . started THEN

        form . end_prompt ()

    ENDIF

    { User callback }

    sample_end_login_template ( login_details . template_id   ,
                    login_details . session_count )

ENDROUTINE

{******************************************************************************}

ROUTINE samp_job_sample_login_validation ( self )

    DECLARE answer     ,
        login_info

    login_info = self . user_info

    IF samp_job_mandatory_filled ( "SAMPLE"                     ,
                               login_info . template_fields ,
                       self . line_editor           ) THEN

        CALL_ROUTINE "SAMPLE_LOGIN_VALIDATION"
        USING login_info . template_fields   ,
              login_info . template_details
        RETURNING answer
        IN LIBRARY "$SAMP_USER"

    ELSE

        answer = FALSE

    ENDIF

    return ( answer )

ENDROUTINE


{*****************************************************************************}

ROUTINE samp_job_do_sample_form( form_info )

    DECLARE actions

    samp_job_create_actions ( actions                       ,
                  form_info  . is_sample_login  )

    samp_job_create_front_screen ( form_info  ,
                           actions    )

    samp_job_form_prompt ( form_info , EMPTY )

ENDROUTINE

{*****************************************************************************}

ROUTINE samp_job_create_login_screen ( template_fields    ,
                                       template_details   ,
                                       screen_info        ,
                                       form               ,
                                       no_prompts         )

    DECLARE form_height, editor_row, prompt_details, field_top
    DECLARE button, butt_rhs_col

    create_prompt_array  ( template_fields                 ,
                           screen_info   . table_type      ,
                           prompt_details                  ,
                           screen_info . display_mode      ,
                           field_top                       ,
                           screen_info . include_copy      )

    form_height = find_max_number ( 1 , field_top ) +
                  screen_info . required_lines + 3 + 1

    form_height = find_min_number ( GLOBAL ( "GUI_HEIGHT" ) - 9  ,
                                    form_height                  )

    CREATE OBJECT SAMP_JOB_LOGIN_SCREEN_CLASS , form

    form . row                = 11
    form . column             = 20
    form . border             = TRUE
    form . height             = form_height
    form . width              = 60
    form . header             = STRIP ( screen_info . top_line )
    form . footer             = STRIP ( screen_info . bottom_line )
    form . user_info          = screen_info
    form . proportional       = TRUE
    form . return_behaviour   = FORM_RETURN_WRAP
    form . select_routine     = screen_info . select_routine
    form . validation_routine = screen_info . user_validation
    form . help_context       = screen_info . help_context
    form . button_style       = FORM_BUTTON_NONE
    form . template_details   = template_details
    form . template_fields    = template_fields
    form . prompt_id          = "$SAMP_JOB_LOGIN" : STRIP( template_details [JOB_SAMPLE_TEMPLATE_ID] )

    editor_row = screen_info . required_lines + 3

    IF field_top <> 0 THEN

        PROMPT OBJECT form . line_editor
            ON LINE editor_row
            FROM 1
            TO   form . width
            CLASS "STD_LINE_EDITOR"
            WITH ( height                  = ( form . height -  editor_row - 1 ),
                   user_callback_library   = GLOBAL ( "current_library" )       ,
                   user_select_routine     = screen_info . select_routine       ,
                   prompt_details          = prompt_details                     )

        form . add_prompt ( form . line_editor )

        no_prompts = FALSE

    ELSE

        form . add_display ( GET_USER_MESSAGE ( "SAMP_JOB_CONST_60",1),
                             1                                        ,
                             editor_row                               ,
                             PROMPT_RENDITION_BOLD +
                             PROMPT_RENDITION_LOWERED                 )

        no_prompts = TRUE

    ENDIF

    butt_rhs_col = form . width + 1

    CREATE OBJECT "STD_PROMPT_BUTTON", button
    button . row           = 1
    button . width         = 10
    button . column        = butt_rhs_col - button . width
    button . send_last_key = "DO"
    button . caption       = GET_USER_MESSAGE( "SAMP_JOB_BUTTON_LOGIN", 1 )
    button . tooltip       = GET_USER_MESSAGE( "SAMP_JOB_BUTTON_LOGIN", 1 ) : " (Alt+Enter)"

    form . add_prompt( button )
    
    CREATE OBJECT "STD_PROMPT_BUTTON", button
    button . row           = form . height - 0.5
    button . width         = 10
    button . column        = butt_rhs_col - button . width
    button . send_last_key = "EXIT"
    button . caption       = GET_USER_MESSAGE( "SMP_PROMPT_BUTTON_CLOSE", 1 )
    button . tooltip       = GET_USER_MESSAGE( "SMP_PROMPT_BUTTON_CLOSE", 1 ) : " (Esc)"

    form . add_prompt( button )
    
    butt_rhs_col = butt_rhs_col - button . width - 2

    form . add_panel( butt_rhs_col + 1                        ,
                      1                                       ,
                      1                                       ,
                      form . width - butt_rhs_col             ,
                      PANEL_H_ALIGN_RIGHT + PANEL_H_EXPAND_ON )

    CREATE OBJECT "STD_PROMPT_BUTTON", button
    button . row           = form . height - 0.5
    button . width         = 10
    button . column        = butt_rhs_col - button . width
    button . send_last_key = "HELP"
    button . caption       = GET_USER_MESSAGE( "SMP_PROMPT_BUTTON_HELP", 1 )
    button . tooltip       = GET_USER_MESSAGE( "SMP_PROMPT_BUTTON_HELP", 1 ) : " (F1)"

    form . add_prompt( button )
    
    butt_rhs_col = butt_rhs_col - button . width - 2
    
    IF screen_info . table_type = SAMPLE_TABLE THEN
    
        CREATE OBJECT "STD_PROMPT_BUTTON", button
        button . row           = form . height - 0.5
        button . width         = 10
        button . column        = 1
        button . send_last_key = "SELECT"
        button . caption       = GET_USER_MESSAGE ( "SAMP_JOB_BUTTON_CONFIG" , 1  )
        button . tooltip       = GET_USER_MESSAGE ( "SAMP_JOB_BUTTON_CONFIG" , 1  ) : " (F3)"

        form . add_prompt( button )
    
    ENDIF

    form . add_panel( butt_rhs_col + 1                        ,
                      form . height - 0.5                     ,
                      1                                       ,
                      form . width - butt_rhs_col             ,
                      PANEL_H_ALIGN_RIGHT + PANEL_H_EXPAND_ON )

ENDROUTINE

{*****************************************************************************}

ROUTINE samp_job_change_login_screen (  template_fields    ,
                        screen_info        ,
                        form               ,
                        no_prompts         )

{
*
*
*****************************************************************************}

    DECLARE prompt_details ,
        display_object ,
        field_top

    IF variable_is_assigned ( form . line_editor ) THEN

        create_prompt_array  ( template_fields                 ,
                       screen_info   . table_type      ,
                       prompt_details                  ,
                       screen_info . display_mode      ,
                       field_top                       ,
                       screen_info . include_copy      )

        IF field_top <> 0 THEN

            form . line_editor . change_prompt_details ( prompt_details )

        ELSE

            form . line_editor . set_visible ( FALSE )
            PROMPT OBJECT display_object
                   ON LINE form . line_editor . row
                   FROM    form . line_editor . column
                   BOLD
                   WITH ( width   = form . line_editor . width               ,
                          value   = GET_USER_MESSAGE ( "SAMP_JOB_CONST_60",1),
                      lowered = TRUE                                     )

            form . add_display ( display_object )
            no_prompts = TRUE

        ENDIF

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE samp_job_mandatory_filled ( VALUE table_type      ,
                      template_fields ,
                      the_line_editor )

    DECLARE answer               ,
        count                ,
        fields_not_filled    ,
        mandatory_not_filled

    IF NOT mandatory_fields_filled ( table_type        ,
                                 template_fields   ,
                     fields_not_filled ) THEN

        count  = 1

        WHILE fields_not_filled [ count ] <> EMPTY DO

            mandatory_not_filled = TRUE
            the_line_editor . set_position ( 1 ,
                                     fields_not_filled [ count])
                        {
                DISPLAY ">" IN WINDOW display_id
                ON LINE fields_not_filled [ count ]
                FROM TEXT_PROMPT_LENGTH + 1
                BLINKING
                        }
            count = count + 1

        ENDWHILE

        answer = NOT mandatory_not_filled

        flash_message ( GET_USER_MESSAGE("SAMP_JOB_CONST_7" ,1) ,
                mandatory_not_filled                    )

    ELSE

        answer = TRUE

    ENDIF

    return ( answer )

ENDROUTINE

{*****************************************************************************}

ROUTINE samp_job_display_top_lines (       form                  ,
                           first_display_column  ,
                           second_display_column ,
                     VALUE column1_row1          ,
                     VALUE column1_row2          ,
                     VALUE column1_row3          ,
                     VALUE column1_row4          ,
                     VALUE column2_row1          ,
                     VALUE column2_row2          ,
                     VALUE max_column1_data_size )

{
*
*
*****************************************************************************}

    DECLARE max_size            ,
        first_start_column  ,
        second_start_column ,
        last_character

    IF global ( "TERMTYPE" )  = "GUI"  THEN

        first_start_column = 2
        last_character     = " "

    ELSE

        first_start_column = 1
        last_character     = ":"

    ENDIF

    IF column1_row2 <> EMPTY THEN

        max_size = find_max_number ( length ( column1_row1 ) ,
                         length ( column1_row2 )) + 2

    ELSE

        max_size = length ( column1_row1 ) + 2

    ENDIF

    first_display_column = max_size + 2 + first_start_column

    form . add_display (  pad ( column1_row1 , " " , max_size ) :
                  last_character                              ,
                  first_start_column                          ,
                  1                                           ,
                  PROMPT_RENDITION_BOLD +
                  PROMPT_RENDITION_RAISED                      )

    IF column1_row2 <> EMPTY THEN

        form . add_display (  pad ( column1_row2 , " " , max_size ) :
                      last_character                         ,
                      first_start_column                     ,
                      2                                      ,
                      PROMPT_RENDITION_BOLD +
                      PROMPT_RENDITION_RAISED                )

    ENDIF

    IF column1_row3 <> EMPTY THEN

        form . add_display (  pad ( column1_row3 , " " , max_size ) :
                      last_character                              ,
                      first_start_column                                           ,
                      3                                        ,
                      PROMPT_RENDITION_BOLD +
                      PROMPT_RENDITION_RAISED                     )

    ENDIF

    IF column1_row4 <> EMPTY THEN

        form . add_display (  pad ( column1_row4 , " " , max_size ) :
                      last_character                              ,
                      first_start_column                                           ,
                      4                                          ,
                      PROMPT_RENDITION_BOLD +
                      PROMPT_RENDITION_RAISED                     )

    ENDIF

    IF column2_row1 <> EMPTY THEN

        second_start_column = first_display_column + max_column1_data_size
        max_size = find_max_number ( length ( column2_row1 ) ,
                         length ( column2_row2 )) + 2

        second_display_column = max_size + 2 + second_start_column


        form . add_display (  pad ( column2_row1 , " " , max_size ) :
                      last_character                              ,
                      second_start_column                         ,
                          1                                         ,
                      PROMPT_RENDITION_BOLD     +
                      PROMPT_RENDITION_RAISED                     )

        form . add_display (  pad ( column2_row2 , " " , max_size ) :
                      last_character                              ,
                      second_start_column                         ,
                      2                                       ,
                          PROMPT_RENDITION_BOLD    +
                      PROMPT_RENDITION_RAISED                     )

    ENDIF

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_print_label ( sample_id )

{
*
*
******************************************************************************}

    DECLARE label_id  ,
        tmpl_id   ,
        print_id

    IF SELECT sample . id_numeric <> sample_id THEN

        tmplid = SELECT sample.template_id
                 WHERE  id_numeric = sample_id

    ELSE

        tmplid = SELECT sample.template_id

    ENDIF

    labelid = SELECT samp_tmpl_header.label_id
              WHERE identity = tmplid

    If (labelid = empty) OR (labelid = " ") THEN

        label_id = GLOBAL("BARCODE_NAME")

    ENDIF

    print_id = select samp_tmpl_header.label_printer

    IF (printid = empty) OR (printid = " ") THEN

        printid = GLOBAL("LABEL_ID")

    ENDIF

    print_label ( TRUE      ,
              labelid   ,
              printid   ,
              sample_id )

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_print_worksheet ( VALUE sample_id )

{
*
*
******************************************************************************}

    DECLARE tmpl_id  ,
        work_id  ,
        print_id

    IF SELECT sample . id_numeric <> sample_id THEN

        tmplid = SELECT sample.template_id
                 WHERE  id_numeric = sample_id

    ELSE

        tmplid = SELECT sample.template_id

    ENDIF

    workid = SELECT samp_tmpl_header.wsht_id
             WHERE identity = tmplid

    IF (workid = empty) OR (workid = " ") THEN

        workid = "$PRSAMPWS"
    ENDIF

    printid = SELECT samp_tmpl_header.wsht_printer

    IF (printid = EMPTY ) OR (printid = " ") THEN

        print_id = GLOBAL("TEXT_ID")

    ENDIF

    print_worksheet ( TRUE      ,
                  workid    ,
                  printid   ,
                  sample_id )

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_print_receipt ( VALUE sample_id )

{
*
*
******************************************************************************}

    DECLARE tmplid     ,
        receipt_id ,
        print_id

    IF SELECT sample . id_numeric <> sample_id THEN

        tmplid = SELECT sample.template_id
                 WHERE  id_numeric = sample_id

    ELSE

        tmplid = SELECT sample.template_id

    ENDIF

    receiptid = SELECT samp_tmpl_header.receipt_id
                WHERE  identity = tmplid

    IF (receiptid = empty) OR (receiptid = " ") THEN

        receiptid = GLOBAL ("RECEIPT_NAME")

    ENDIF

    printid = select samp_tmpl_header.receipt_printer

    IF ( printid = EMPTY ) OR ( printid = " " ) THEN

        print_id = GLOBAL("TEXT_ID")

    ENDIF

    print_receipt ( TRUE       ,
                receiptid  ,
                printid    ,
            sample_id  )

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_callmenu_callback ( VALUE menu_option )

{
*
*
******************************************************************************}

    DECLARE option

    option = samp_job_callback_options [ menu_option - 1 ]

    IF NOT blank ( option . routine ) THEN

        IF option . pass_sample THEN

            CALL_ROUTINE option . routine
            USING        option . sample_id
            IN LIBRARY   option . library

        ELSEIF option . pass_job THEN

            CALL_ROUTINE option . routine
            USING        option . job_id
            IN LIBRARY   option . library

        ELSE

            CALL_ROUTINE option . routine
            IN LIBRARY   option . library

        ENDIF

    ELSE

        IF option . pass_sample THEN

            MENUPROC option . menu_number
            USING        option . sample_id, "$EXIT"

        ELSEIF option . pass_job THEN

            MENUPROC option . menu_number
            USING        option . job_id, "$EXIT"

        ELSE

            MENUPROC option . menu_number, "$EXIT"

        ENDIF

    ENDIF

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_add_callmenu_option (       options      ,
                         menu_options ,
                       VALUE count        )

{
*
*
******************************************************************************}

    DECLARE prefix  ,
        space

    IF global ( "TERMTYPE" ) <> "GUI" THEN

        space = " "

        IF count < 11 THEN

            prefix = STRIP ( count )

        ELSE

            prefix = ASCII (( count - 10 ) + 65 )

            ENDIF

    ELSE

        prefix = ""
        space  = ""

    ENDIF

    options [ count + 1 , 1 ] =  prefix
    options [ count + 1 , 2 ] =  prefix : space :
                     menu_options [ count ] . title
    options [ count + 1 , 3 ] =  GLOBAL ( "current_library" )
    options [ count + 1 , 4 ] =  "SAMP_JOB_CALLMENU_CALLBACK"


ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_select_callmenu ( VALUE header_message            ,
                   VALUE help_context              ,
                     samp_job_callback_options )

{
*
*
******************************************************************************}

    DECLARE samp_job_callback_menu ,
        count                  ,
            option_numb            ,
            option_name

    IF size_of_array ( samp_job_callback_options ) > 0 THEN

        ARRAY samp_job_callback_menu

        IF GLOBAL ( "TERMTYPE" ) = "GUI" THEN

            count = 1

            WHILE count <= size_of_array ( samp_job_callback_options ) DO

                samp_job_callback_menu [ count ] =
                            samp_job_callback_options [ count ] . title

                count = count + 1

            ENDWHILE

            option_name = client_do_popup_menu ( samp_job_callback_menu ,
                                                 0                      ,
                                                 0                      ,
                                                 0                      )

            IF option_name <> EMPTY THEN

                option_numb = 0
                count       = 1

                WHILE ( count <= size_of_array ( samp_job_callback_options )) AND
                      ( option_numb = 0 )                                     DO

                    IF samp_job_callback_options [ count ] . title = option_name THEN
                        option_numb = count
                    ENDIF

                    count = count + 1

                ENDWHILE

                samp_job_callmenu_callback ( option_numb + 1 )

            ENDIF

        ELSE

            samp_job_callback_menu [ 1 , 1 ] = "*"
            samp_job_callback_menu [ 1 , 2 ] = header_message
            samp_job_callback_menu [ 1 , 3 ] = help_context

            count = 1

            WHILE count <= size_of_array ( samp_job_callback_options ) DO

                samp_job_add_callmenu_option ( samp_job_callback_menu ,
                                   samp_job_callback_options                ,
                                   count                  )
                count = count + 1

            ENDWHILE

                    CALLMENU OUTOF samp_job_callback_menu AT 10,10

        ENDIF

    ENDIF

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_confirm

{
*
*
******************************************************************************}

    DECLARE answer

    IF global ( "TERMTYPE" ) = "GUI" THEN

        answer = TRUE

    ELSE

        answer = confirm ()

    ENDIF

    RETURN ( answer )

ENDROUTINE

{*****************************************************************************
*
*   Job Login routines
*
******************************************************************************}

ROUTINE samp_job_job_login_validation ( self )

    DECLARE answer        ,
        login_details

    login_details = self . user_info

    IF samp_job_mandatory_filled ( "JOB_HEADER"                    ,
                               login_details . template_fields ,
                       self . line_editor              ) THEN

        answer = job_login_validation ( login_details . template_fields,
                        login_details . template_details)

    ELSE

        answer = FALSE

    ENDIF

    return ( answer )

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_job_login ( login_details )

{
*
*
*****************************************************************************}

    DECLARE create_name_from_syntax ,
        status                  ,
        screen_info             ,
        save_info               ,
        prompt_id               ,
        first_display_column    ,
        second_display_column   ,
        form                    ,
        no_prompts

    status = FALSE

    IF blank ( login_details . job_template ) THEN

        IF NOT prompt_in_window ( "JOB_TEMPLATE"         ,
                          GET_USER_MESSAGE("SAMP_JOB_CONST_10" ,1),
                          GET_USER_MESSAGE("SAMP_JOB_CONST_57" ,1),
                          "$SAMP_JOB_NEW_ID"    ,
                              login_details . job_template ) THEN

            RETURN ( FALSE )

        ENDIF

    ENDIF

    CREATE OBJECT SAMP_JOB_SCREEN_INFO_CLASS , screen_info

    screen_info . required_lines  = 2
    screen_info . table_type      = JOB_HEADER_TABLE
    screen_info . include_copy    = TRUE
    screen_info . display_mode    = FALSE
    screen_info . user_validation = "SAMP_JOB_JOB_LOGIN_VALIDATION"
    screen_info . select_routine  = EMPTY
    screen_info . help_context    = "$SAMP_JOB_JOB_LOGIN"

    initialise_job_login ( login_details . job_template     ,
                   login_details . template_details ,
                   login_details . template_fields  ,
                   login_details . sample_syntax    ,
                   login_details . sample_template  ,
                   login_details . repeat_count     )

    lib_job_assign_workflow ( login_details )

    { Workflow event }
    lib_workflow_trigger_event_noupdate ( JOB_HEADER_TABLE         ,
                                          WORKFLOW_EVENT_PRE_LOGIN )

    object_assign_uncounted ( login_details . template_details [ JOB_CONTROL_OBJECT_POSITION ] ,
                              login_details                                                    )

    screen_info . top_line    = login_details . template_details [ JOB_CREATION_TITLE_POSITION ]
    screen_info . bottom_line = GET_USER_MESSAGE ( "SAMP_JOB_CONST_42" ,
                            1                  )
    samp_job_create_login_screen ( login_details . template_fields  ,
                       login_details . template_details ,
                       screen_info                      ,
                       form                             ,
                       no_prompts                       )

    form . user_info  = login_details

    samp_job_display_top_lines ( form                                    ,
                         first_display_column                    ,
                         second_display_column                   ,
                         GET_USER_MESSAGE("SAMP_JOB_CONST_12" ,1),
                         EMPTY                                   ,
                         EMPTY                                   ,
                         EMPTY                                   ,
                         EMPTY                                   ,
                         EMPTY                                   ,
                     24                                      )

    create_name_from_syntax = TRUE

    IF get_the_job_id ( login_details . job_identity     ,
                1                                ,
                    first_display_column             ,
                    login_details . template_details ,
                create_name_from_syntax          ,
                prompt_id                        ,
                form                             ) THEN


        copy_default_values ( "B"                              ,
                      "JOB_HEADER"                     ,
                       login_details . template_fields )

        populate_current_from_array( login_details . field_values ,
                                     "JOB_HEADER"                 )

        job_login_pre_prompt ( login_details . template_fields  ,
                       login_details . template_details )

        form . start_prompt ()

        IF prompt_id <> 0 THEN

            form . active_prompt = prompt_id

        ENDIF

        IF global ( "MODE" ) = "INTERACTIVE" THEN

            IF ( login_details . dont_confirm  ) AND
               ( prompt_id = 0 ) AND
               ( no_prompts    ) THEN

                save_info = TRUE

            ELSE

                form . wait_prompt ()
                save_info = form . get_lastkey () = "DO"

            ENDIF

        ELSE

            save_info = TRUE

        ENDIF

        IF save_info THEN

            login_details . job_identity =
                SELECT job_header . job_name

            job_login_post_prompt ( login_details . template_fields,
                        login_details . template_details )

            login_job ( login_details . job_identity            ,
                    create_name_from_syntax                 ,
                        login_details . template_details        ,
                    login_details . template_fields         ,
                    login_details . use_current_transaction )

            status = TRUE

        ENDIF

    ENDIF

    IF form . started THEN

        form . end_prompt ()

    ENDIF

    RETURN ( status )

ENDROUTINE

{******************************************************************************}

ROUTINE samp_job_new_job_option ( VALUE option )

{
*
*
******************************************************************************}

    DECLARE  form_info, login_details

    CREATE OBJECT SAMP_JOB_JOB_LOGIN_CLASS  , login_details
    login_details . job_identity            = " "
    login_details . job_template            = " "
    login_details . dont_confirm            = FALSE
    login_details . use_current_transaction = FALSE

    IF samp_job_job_login ( login_details ) THEN

        CREATE OBJECT SAMP_JOB_FORM_INFO_CLASS , form_info

        form_info . display_job      = TRUE
        form_info . prompt_job       = FALSE
        form_info . display_template = TRUE
        form_info . prompt_template  =
                blank ( login_details . sample_template )
        form_info . prompt_repeat    =
                login_details . repeat_count = 0
        form_info . is_sample_login  = TRUE
        form_info . header_message   = GET_USER_MESSAGE ( "SAMP_JOB_CONST_1" ,1)
        form_info . footer_message   = GET_USER_MESSAGE ( "SAMP_JOB_CONST_23",1)

        form_info . template      = login_details . sample_template
        form_info . repeat_count  = login_details . repeat_count
        form_info . job_name      = login_details . job_identity
        form_info . sample_syntax = login_details . sample_syntax
        form_info . prompt_id     = "$SAMP_JOB_NEW_JOB"

        samp_job_do_sample_form ( form_info )

        job_login_post_sample ( login_details . job_identity , TRUE )

    ENDIF

ENDROUTINE

{*****************************************************************************
*
*   Modify Sample  routines
*
******************************************************************************}

ROUTINE samp_job_create_modify_form (       form                      ,
                      VALUE number_of_display_fields  ,
                      VALUE line_editor_leave_routine )

    DECLARE form_height    ,
        form_width     ,
        editor_object  ,
        editor_row     ,
        prompt_details ,
        display_object ,
        button_list    ,
        button_number  ,
        editor_column

    ARRAY prompt_details

    form_height = global ( "SCREEN_HEIGHT" ) - 9
    form_width  = global ( "SCREEN_WIDTH"  ) - 4

    form . row              = 7
    form . column           = 3
    form . border           = TRUE
    form . height           = form_height
    form . width            = form_width
    form . proportional     = TRUE
    form . return_behaviour = FORM_RETURN_STAY
    form . button_style     = FORM_BUTTON_NONE

    IF global ( "TERMTYPE" ) = "GUI" THEN
        editor_column = 2
    ELSE
        editor_column = 1
    ENDIF

    editor_row = number_of_display_fields + 2

    PROMPT OBJECT editor_object
           ON LINE editor_row
           FROM editor_column
           TO   form . width - 1
               CLASS "STD_LINE_EDITOR"
           WITH ( height                    = ( form . height -  editor_row) ,
              title_width               = 32                             ,
              user_callback_library     = global ( "current_library" )   ,
              enabled                   = FALSE                          ,
              user_leave_prompt_routine = line_editor_leave_routine      ,
              prompt_details            = prompt_details                 )

    form . add_prompt ( editor_object )
    form . the_line_editor = editor_object

    PROMPT OBJECT display_object
           ON LINE editor_row
           FROM    editor_column
           BOLD
           WITH ( value   = GET_USER_MESSAGE ( "SAMP_JOB_CONST_60",1) ,
                  visible = FALSE                                     ,
                  lowered = TRUE                                      )

    form . add_display ( display_object )
    form . no_fields_display = display_object

    IF global ( "TERMTYPE" ) = "GUI" THEN

        ARRAY button_list

        form . height = form . height + 2

        button_number = 1

        IF NOT form . is_display THEN

            lib_grid_lastkey_button ( button_list    ,
                          button_number  ,
                          "DO"           ,
                          EMPTY          )

        ENDIF

        IF form . table = JOB_HEADER_TABLE THEN

            lib_grid_lastkey_button ( button_list    ,
                          button_number  ,
                          "SELECT"       ,
                          get_user_message ( "SAMP_JOB_BUTTON_JOB_OPTIONS" ,1 ) )


{**************************************************************************************************************
            lib_grid_action_button ( button_list    ,
                          button_number  ,
                          "Attachments"  ,
                          "edit_attachments",
                          GLOBAL ("CURRENT_LIBRARY"),
                           button_number) 
***************************************************************************************************************}

            lib_grid_action_button ( button_list    ,
                          button_number  ,
                          "Results"  ,
                          "results",
                          GLOBAL ("CURRENT_LIBRARY"),
                           button_number)

            lib_grid_action_button ( button_list    ,
                          button_number  ,
                          "Show Trace"  ,
                          "show_trace",
                          GLOBAL ("CURRENT_LIBRARY"),
                           button_number)


        ELSE

            lib_grid_lastkey_button ( button_list    ,
                          button_number  ,
                          "SELECT"       ,
                          get_user_message ( "SAMP_JOB_BUTTON_OPTIONS" ,1 ) )

        ENDIF

        lib_grid_lastkey_button ( button_list    ,
                      button_number  ,
                      "HELP"         ,
                      EMPTY          )

        lib_grid_lastkey_button ( button_list    ,
                      button_number  ,
                      "EXIT"         ,
                      EMPTY          )

        lib_form_add_control_buttons ( form        ,
                           button_list )

    ENDIF

ENDROUTINE

{***************************************************************************}

ROUTINE samp_job_leave_sample_prompt ( self )

{
*
*
*****************************************************************************}

    DECLARE form           ,
        prompt_details ,
        field_top      ,
        include_copy   ,
        the_table_name

    IF self . get_lastkey () <> "EXIT" THEN

        form = self . parent_prompt

        object_set_current_table ( self , "SAMPLE" )

        initialise_sample_entry ( form . template_details     ,
                      form . template_fields     ,
                      form . is_modify_full      ,
                      form . prompt_for_template )

        sample_modify_pre_prompt ( form . template_fields  ,
                       form . template_details ,
                       form . is_display       )


        include_copy   = FALSE
        the_table_name = "SAMPLE"

        create_prompt_array ( form . template_fields ,
                      the_table_name         ,
                      prompt_details         ,
                      form . is_display      ,
                          field_top              ,
                      include_copy           )

        form . display_object_12 . set_text ( SELECT sample . id_text )
        form . display_object_13 . set_text ( SELECT sample . jobname )
        form . display_object_14 . set_text ( SELECT sample . login_date )
        form . display_object_21 . set_text ( SELECT sample . status  )
        form . display_object_22 . set_text ( SELECT sample . priority   )

        IF field_top = 0 THEN

            form . no_fields_display . set_visible ( TRUE  )
            form . the_line_editor   . set_visible ( FALSE )
            form . select_routine = "samp_job_sample_modify_select"

        ELSE

            form . no_fields_display . set_visible ( FALSE )
            form . the_line_editor . set_visible ( TRUE )
            form . the_line_editor . change_prompt_details ( prompt_details )
            form . the_line_editor . set_enabled ( TRUE )
            form . the_line_editor . user_select_routine = "samp_job_sample_modify_select"
            form . select_routine                        = "samp_job_sample_modify_select"

                form . set_position ( form . the_line_editor . tag )
            self . set_lastkey ( "CONTINUE" )

        ENDIF

        form . first_time = FALSE

        form . old_param_active = GLOBAL ( "PARAM_ACTIVE" )
        SET GLOBAL  "PARAM_ACTIVE" TO FALSE

        IF ( form . is_display ) THEN

            SET DISPLAY TRUE

        ENDIF

    ENDIF

ENDROUTINE

{***************************************************************************}

ROUTINE samp_job_enter_sample_prompt ( self )

{
*
*
*****************************************************************************}

    DECLARE form

    form = self . parent_prompt

    IF form . first_time THEN

    ELSEIF form . the_line_editor . enabled THEN

        IF ( samp_job_sample_modify_validation ( form . the_line_editor, form )) THEN

            IF ( form . is_display              ) OR
               ( form . get_lastkey () = "EXIT" ) THEN

                ROLLBACK

            ELSE

                sample_modify_post_prompt ( form . template_details ,
                                form . template_fields  )

                update_old_sample ( SELECT sample . id_numeric ,
                            form . template_fields     ,
                            form . template_details    )

            ENDIF

            form . the_line_editor . set_enabled ( FALSE )

            SET DISPLAY FALSE

            SET GLOBAL "PARAM_ACTIVE" TO form . old_param_active

            IF GLOBAL ( "PARAM_ACTIVE" ) THEN
                self . set_lastkey ( "EXIT" )
                self . stop_prompt ( )
            ENDIF

        ELSE

            form . set_position ( form . the_line_editor . tag )
                form . the_line_editor . set_lastkey ( "CONTINUE" )

        ENDIF

    ELSE

        SET DISPLAY FALSE

    ENDIF

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_modify_sample_leave ( self )

{
*
*
*****************************************************************************}

    DECLARE form

    form = self . parent_prompt

    IF self . get_lastkey () = "HELP" THEN

        form . help ( )
        form . set_position ( self . tag )
            self . set_lastkey ( "CONTINUE" )

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE samp_job_sample_modify_validation ( self       ,
                        login_info )

    DECLARE answer

    answer = FALSE

    IF ( login_info . is_display  ) THEN

        answer = TRUE

    ELSEIF ( self . get_lastkey () = "EXIT" ) THEN

        answer = samp_job_confirm ()

    ELSE

        IF samp_job_mandatory_filled ( "SAMPLE"                     ,
                                       login_info . template_fields ,
                           self                     ) THEN

            answer = sample_modify_validation ( login_info . template_fields ,
                                login_info . template_details )

        ENDIF

        IF answer THEN

            answer = samp_job_confirm ()

        ENDIF

    ENDIF

    return ( answer )

ENDROUTINE

{*********************************************************************************}

ROUTINE samp_job_sample_modify_options (       sample_commands ,
                     VALUE current_sample  )

    DECLARE count           ,
        next_option

    ARRAY sample_commands

    count = 1

    IF can_access_menu ( 419 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . menu_number = 419
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_3" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF


    IF can_access_menu ( 249 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . menu_number = 249
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_4" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF

    IF can_access_menu ( 15002 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . menu_number = 15002
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_5" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF

    IF can_access_menu ( 111 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . routine     = "SAMP_JOB_PRINT_RECEIPT"
        next_option . library     = global ( "current_library" )
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_6" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF

    IF can_access_menu ( 19 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . routine     = "SAMP_JOB_PRINT_LABEL"
        next_option . library     = global ( "current_library" )
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_7" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF

    IF can_access_menu ( 465 ) THEN

        CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

        next_option . routine     = "SAMP_JOB_PRINT_WORKSHEET"
        next_option . library     = global ( "current_library" )
        next_option . title       = GET_USER_MESSAGE("SAMP_JOB_ADD_8" ,1)
        next_option . pass_sample = TRUE
        next_option . sample_id   = current_sample

                sample_commands [ count ] = next_option

        count = count + 1

    ENDIF

    CREATE OBJECT SAMP_JOB_OPTIONS_CLASS, next_option

    next_option . routine     = "SAMP_JOB_SPECIAL_SAMPLE_FIELDS"
    next_option . library     = global ( "current_library" )
    next_option . title       = GET_USER_MESSAGE("SAMP_JOB_CONST_40" ,1)

        sample_commands [ count ] = next_option
    count = count + 1

    sample_modify_menu ( sample_commands ,
                 current_sample  )

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_sample_modify_select ( the_line_editor )

{
*
*
*****************************************************************************}

    DECLARE sample_commands

    samp_job_sample_modify_options ( sample_commands            ,
                                         SELECT sample . id_numeric )

    samp_job_select_callmenu ( GET_USER_MESSAGE("SAMP_JOB_CONST_39" ,1),
                   "$SAMP_JOB_MODIFY_COMMAND"              ,
                   sample_commands                         )

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_sample_modify ( VALUE is_display          ,
                 VALUE is_full_sample      ,
                 VALUE prompt_for_template )

{
*
*
*****************************************************************************}

    DECLARE form           ,
            sample_prompt  ,
            do_leave

    CREATE OBJECT samp_job_sample_modify_class , form

    form . table                 = SAMPLE_TABLE
    form . is_modify_full        = is_full_sample
    form . is_display            = is_display
    form . prompt_for_template   = prompt_for_template
    form . first_time            = TRUE

    setup_sample_status ( is_display      ,
                      is_full_sample )

    IF is_display THEN

        form . help_context = "$SAMP_JOB_SAMPLE_DISPLAY"
        form . footer = GET_USER_MESSAGE ( "STAND_DISPLAY_MESSAGE", 1 )

        IF is_full_sample THEN

            form . header = GET_USER_MESSAGE ( "SAMP_JOB_CONST_55", 1 )

        ELSE

            form . header = GET_USER_MESSAGE ( "SAMP_JOB_CONST_53", 1 )

        ENDIF


    ELSE

        form . help_context = "$SAMP_JOB_SAMPLE_MODIFY"
        form . footer = GET_USER_MESSAGE ( "SAMPLE_UP_SAMP", 1 )

        IF is_full_sample THEN

            form . header = GET_USER_MESSAGE ( "SAMP_JOB_CONST_56", 1 )

        ELSE

            form . header = GET_USER_MESSAGE ( "SAMP_JOB_CONST_54", 1 )

        ENDIF


    ENDIF

    samp_job_create_modify_form ( form                           ,
                      4                              ,
                      "SAMP_JOB_MODIFY_SAMPLE_LEAVE" )

    samp_job_display_top_lines ( form                                   ,
                         form . first_display_column            ,
                         form . second_display_column           ,
                         GET_USER_MESSAGE("SAMP_JOB_CONST_37" ,1),
                         GET_USER_MESSAGE("SAMP_JOB_CONST_26" ,1),
                         GET_USER_MESSAGE("SAMP_JOB_CONST_12" ,1) ,
                         GET_USER_MESSAGE("SAMP_JOB_CONST_66" ,1) ,
                         GET_USER_MESSAGE("SAMP_JOB_CONST_38" ,1),
                         GET_USER_MESSAGE("SAMP_JOB_CONST_67" ,1),
                         45                                      )

    IF is_display THEN

        PROMPT OBJECT    sample_prompt
               ON LINE   1
               FROM      form . first_display_column
               BROWSE ON sample
               THEN SELECT
               WITH ( vgl_library          = global ( "current_library")    ,
                      leave_prompt_routine = "SAMP_JOB_LEAVE_SAMPLE_PROMPT" ,
                      enter_prompt_routine = "SAMP_JOB_ENTER_SAMPLE_PROMPT" )

    ELSE

        PROMPT OBJECT    sample_prompt
               ON LINE   1
               FROM      form . first_display_column
               BROWSE ON sample
               THEN SELECT FOR UPDATE
               WITH ( vgl_library          = global ( "current_library" )  ,
                      leave_prompt_routine = "SAMP_JOB_LEAVE_SAMPLE_PROMPT" ,
                      enter_prompt_routine = "SAMP_JOB_ENTER_SAMPLE_PROMPT" )

    ENDIF

    PROMPT OBJECT  form . display_object_12
           ON LINE 2
           FROM    form . first_display_column
           FORMAT  sample . id_text
           WITH  ( lowered = TRUE )

    form . add_display ( form . display_object_12 )

    PROMPT OBJECT  form . display_object_13
           ON LINE 3
           FROM    form . first_display_column
           FORMAT  sample . job_name
           WITH  ( lowered = TRUE )

    form . add_display ( form . display_object_13 )

    PROMPT OBJECT  form . display_object_14
           ON LINE 4
           FROM    form . first_display_column
           FORMAT  sample . login_date
           WITH  ( lowered = TRUE )

    form . add_display ( form . display_object_14 )

    PROMPT OBJECT  form . display_object_21
           ON LINE 1
           FROM    form . second_display_column
           FORMAT  TEXT3
           WITH  ( lowered = TRUE )

    form . add_display ( form . display_object_21 )

    PROMPT OBJECT  form . display_object_22
           ON LINE 2
           FROM    form . second_display_column
           FORMAT  sample . priority
           WITH  ( lowered = TRUE )

    form . add_display ( form . display_object_22 )
    form . identity_prompt = form . add_prompt ( sample_prompt )

    form . start_prompt ()

    form . set_position ( form . identity_prompt )

    do_leave = TRUE {FALSE}

    REPEAT

        form . wait_prompt  ()

        IF form . active_prompt = form . identity_prompt THEN

            do_leave = TRUE

        ELSEIF ( samp_job_sample_modify_validation ( form . the_line_editor, form )) THEN

            IF ( form . is_display              ) OR
               ( form . get_lastkey () = "EXIT" ) THEN

                ROLLBACK

            ELSE

                sample_modify_post_prompt ( form . template_details ,
                                form . template_fields  )

                update_old_sample ( SELECT sample . id_numeric ,
                                    form . template_fields     ,
                                    form . template_details    )

            ENDIF

            IF NOT global ( "LABTABLE_MODE" ) THEN

                form . set_position ( form . identity_prompt )

            ELSE

                do_leave = TRUE

            ENDIF

            form . the_line_editor . set_enabled ( FALSE )
            SET DISPLAY FALSE

        ELSE

            form . set_position ( form . the_line_editor . tag )

        ENDIF

        SET GLOBAL "PARAM_ACTIVE" TO TRUE

        IF GLOBAL ( "PARAM_ACTIVE" ) THEN
            do_leave = FALSE
            form . set_position ( form . identity_prompt )
        ENDIF

    UNTIL do_leave

    form . end_prompt   ()

ENDROUTINE

{*****************************************************************************
*
*   Modify Job routines
*
******************************************************************************}

ROUTINE samp_job_leave_modify_job_prompt ( self )

{
*
*
*****************************************************************************}

    DECLARE form           ,
        prompt_details ,
        field_top      ,
        include_copy   ,
        the_table_name

    form = self . parent_prompt

    IF self . get_lastkey () <> "EXIT" THEN

        form . old_param_active = GLOBAL ( "PARAM_ACTIVE" )
        SET GLOBAL "PARAM_ACTIVE" TO FALSE

        object_set_current_table ( self , "JOB_HEADER" )

        initialise_job_entry ( form . template_details  ,
                       form . template_fields   ,
                       form . is_modify_full    )

        job_modify_pre_prompt ( form . template_fields  ,
                    form . template_details ,
                    form . is_display       )

        include_copy   = FALSE
        the_table_name = "JOB_HEADER"

        create_prompt_array ( form . template_fields ,
                      the_table_name         ,
                      prompt_details         ,
                      form . is_display      ,
                          field_top              ,
                      include_copy           )

        J_STATUS = SELECT job_header . job_status
        form . display_object_12 . set_text ( SELECT job_header . date_created )
        form . display_object_21 . set_text ( SELECT job_header . job_status  )
        
        IF J_STATUS = "A" THEN
            form . display_object_22 . set_text ( SELECT job_header . date_authorised   )
        ELSEIF J_STATUS = "C" THEN
            form . display_object_22 . set_text ( SELECT job_header . date_completed   )
        ELSE
            form . display_object_22 . set_text ( SELECT job_header . modified_on   )
        ENDIF


        IF field_top = 0 THEN

            form . no_fields_display . set_visible ( TRUE  )
            form . the_line_editor   . set_visible ( FALSE )

            self . select_routine = "samp_job_job_modify_select"

        ELSE

            form . no_fields_display . set_visible ( FALSE )
            form . the_line_editor . set_visible ( TRUE )
            form . the_line_editor . change_prompt_details ( prompt_details )
            form . the_line_editor . set_enabled ( TRUE )
            form . the_line_editor . user_select_routine = "samp_job_job_modify_select"
            form . set_position ( form . the_line_editor . tag )
            self . set_lastkey ( "CONTINUE" )

        ENDIF

        form . first_time = FALSE

        form . the_line_editor . display_only = form . is_display

    ELSEIF form . old_param_active THEN

        form . old_param_active = FALSE
        SET GLOBAL "PARAM_ACTIVE" TO TRUE
        self . set_lastkey ( "CONTINUE" )
        form . set_position ( self . tag )

    ENDIF

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_enter_modify_job_prompt ( self )

{
*
*
*****************************************************************************}

    DECLARE form

    form = self . parent_prompt

    IF NOT form . first_time THEN

        IF form . the_line_editor .enabled THEN

            IF ( samp_job_job_modify_validation ( form . the_line_editor , form )) THEN

                IF ( form . is_display              ) OR
                   ( form . get_lastkey () = "EXIT" ) THEN
    
                    ROLLBACK

                ELSE

                    job_modify_post_prompt ( form . template_details ,
                                 form . template_fields  )

                    update_old_job ()

                ENDIF

            ELSE

                ROLLBACK

            ENDIF

            SET GLOBAL "PARAM_ACTIVE" TO form . old_param_active

            IF GLOBAL ( "PARAM_ACTIVE" ) THEN
                self . set_lastkey ( "EXIT" )
                self . stop_prompt ( )
            ENDIF

            form . the_line_editor . set_enabled ( FALSE )

        ELSEIF form . get_lastkey () = "EXIT" THEN

            IF form . old_param_active THEN
                self . set_lastkey ( "EXIT" )
                self . stop_prompt ( )
            ENDIF

        ENDIF

    ELSE
        form . old_param_active = FALSE
    ENDIF

    SET DISPLAY FALSE

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_modify_job_leave ( self )

{
*
*
*****************************************************************************}

    DECLARE form

    form = self . parent_prompt

    IF self . get_lastkey () = "HELP" THEN

        form . help ( )
        form . set_position ( self . tag )
        self . set_lastkey ( "CONTINUE" )

    ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE samp_job_job_modify_validation ( self       ,
                     login_info )

    DECLARE answer

    answer = FALSE

    IF ( login_info . is_display  ) THEN

        answer = TRUE

    ELSEIF ( self . get_lastkey () = "EXIT" ) THEN

        answer = samp_job_confirm ()

    ELSE

        IF samp_job_mandatory_filled ( "JOB_HEADER"                 ,
                                       login_info . template_fields ,
                           self                         ) THEN

                answer = job_modify_validation ( login_info . template_fields  ,
                             login_info . template_details )

        ENDIF

        IF answer THEN

            answer = samp_job_confirm ()

        ENDIF

    ENDIF

    return ( answer )

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_job_modify_select ( the_line_editor )

{
*
*
*****************************************************************************}

    DECLARE job_id, parent_form
    
    parent_form = the_line_editor . parent_prompt
    
    job_id = parent_form . prompt_objects [ parent_form . identity_prompt ] . value

    CALL_ROUTINE "login_interface_list_job_samples"
        IN LIBRARY "$LOGIN_INTERFACE"
        USING job_id
        NEW TRANSACTION
    
ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_job_modify ( VALUE is_display          ,
                  VALUE is_full_job         ,
                  VALUE prompt_for_template )

{
*
*
*****************************************************************************}

    DECLARE form               ,
        job_prompt         ,
            end_second_display ,
            do_leave

    CREATE OBJECT samp_job_sample_modify_class , form

    form . table                 = JOB_HEADER_TABLE
    form . is_modify_full        = is_full_job
    form . is_display            = is_display
    form . prompt_for_template   = prompt_for_template
    form . first_time            = TRUE

    setup_job_status ( is_display  )

    IF is_display THEN

        form . help_context = "$SAMP_JOB_JOB_DISPLAY"
        form . footer = GET_USER_MESSAGE ( "SAMPLE_DISP_SAMP", 1 )
        form . header = GET_USER_MESSAGE ( "SAMP_JOB_CONST_48", 1 )

    ELSE

        form . help_context = "$SAMP_JOB_JOB_MODIFY"
        form . footer = GET_USER_MESSAGE ( "SAMPLE_UP_JOB", 1 )
        form . header = GET_USER_MESSAGE ( "SAMP_JOB_CONST_32", 1 )
    ENDIF

    samp_job_create_modify_form ( form                        ,
                      2                           ,
                      "SAMP_JOB_MODIFY_JOB_LEAVE" )

    samp_job_display_top_lines ( form                                   ,
                         form . first_display_column            ,
                         form . second_display_column           ,
                         GET_USER_MESSAGE("SAMP_JOB_CONST_12" ,1),
                         GET_USER_MESSAGE("SAMP_JOB_CONST_13" ,1),
                     EMPTY                                   ,
                     EMPTY                                   ,
                         GET_USER_MESSAGE("SAMP_JOB_CONST_14" ,1),
                         GET_USER_MESSAGE("SAMP_JOB_CONST_15" ,1),
                     24                                      )

    IF is_display THEN

        PROMPT OBJECT    job_prompt
               ON LINE   1
               FROM      form . first_display_column
               BROWSE ON job_header
               THEN SELECT
               WITH ( status_set           = "VCARXSI"                          ,
                  vgl_library          = GLOBAL ( "CURRENT_LIBRARY")        ,
                  enter_prompt_routine = "SAMP_JOB_ENTER_MODIFY_JOB_PROMPT" ,
                  leave_prompt_routine = "SAMP_JOB_LEAVE_MODIFY_JOB_PROMPT" )

    ELSE

        PROMPT OBJECT    job_prompt
               ON LINE   1
               FROM      form . first_display_column
               BROWSE ON job_header
               THEN SELECT FOR UPDATE
               WITH ( status_set           = "VC"                               ,
                  vgl_library          = GLOBAL ( "CURRENT_LIBRARY" )       ,
                  enter_prompt_routine = "SAMP_JOB_ENTER_MODIFY_JOB_PROMPT" ,
                  leave_prompt_routine = "SAMP_JOB_LEAVE_MODIFY_JOB_PROMPT" )

    ENDIF

    form . identity_prompt = form . add_prompt ( job_prompt )

    PROMPT OBJECT  form . display_object_12
           ON LINE 2
           FROM    form . first_display_column
           FORMAT  job_header . date_created
           WITH  ( lowered = TRUE )

    form . add_display ( form . display_object_12 )

    end_second_display = form . width

    IF global ( "TERMTYPE" ) = "GUI" THEN

        end_second_display = end_second_display - 1

    ENDIF

    PROMPT OBJECT  form . display_object_21
           ON LINE 1
           FROM    form . second_display_column
           TO      end_second_display
           FORMAT  job_header . job_status
           WITH  ( lowered = TRUE )

    form . add_display ( form . display_object_21 )

    PROMPT OBJECT  form . display_object_22
           ON LINE 2
           FROM    form . second_display_column
           TO      end_second_display
           FORMAT  job_header . date_completed
           WITH  ( lowered = TRUE )

    form . add_display ( form . display_object_22 )

    form . start_prompt ()

    form . set_position ( form . identity_prompt )
    do_leave = FALSE

    REPEAT

        form . wait_prompt  ()

        IF form . active_prompt = form . identity_prompt THEN

            do_leave = TRUE

        ELSEIF ( samp_job_job_modify_validation ( form . the_line_editor , form )) THEN

            IF ( form . is_display              ) OR
               ( form . get_lastkey () = "EXIT" ) THEN

                ROLLBACK

            ELSE

                job_modify_post_prompt ( form . template_details ,
                             form . template_fields  )

                update_old_job ()

            ENDIF

            IF NOT global ( "LABTABLE_MODE" ) THEN

                form . set_position ( form . identity_prompt )

            ELSE

                do_leave = TRUE

            ENDIF

            form . the_line_editor . set_enabled ( FALSE )
            SET DISPLAY FALSE

        ELSE

            form . set_position ( form . the_line_editor . tag )

        ENDIF

    UNTIL do_leave

    form . end_prompt   ()

ENDROUTINE

{*****************************************************************************
*
* Special sample options
*
*****************************************************************************}

ROUTINE samp_job_special_sample_fields

    DECLARE max_grid_height ,
        max_grid_width  ,
            sample_fields   ,
        the_line_editor ,
        form

    max_grid_width  = global ( "SCREEN_WIDTH"  ) - 8
    max_grid_height = global ( "SCREEN_HEIGHT" ) - 9

    create_internal_sample_array ( sample_fields )

    PROMPT OBJECT the_line_editor
              ON LINE 1
              FROM    2
              CLASS "STD_LINE_EDITOR"
              WITH ( title_width = 32               ,
                 height = max_grid_height       ,
                 width  = max_grid_width        ,
                 prompt_details = sample_fields )

    PROMPT OBJECT form
           CLASS PROMPT_CLASS_FORM
           ON LINE 7 FROM 3
           WITH ( header       = GET_USER_MESSAGE ( "SAMP_JOB_CONST_34" ,1),
              footer       = GET_USER_MESSAGE ( "SAMP_JOB_CONST_36" ,1),
              width        = max_grid_width + 2  ,
              height       = max_grid_height     ,
              help_context = "$SAMP_JOB_DISPLAY" ,
                  proportional = TRUE                )

    form . add_prompt ( the_line_editor )

    form . add_frame ( ""                  ,
               1                   ,
               1                   ,
               max_grid_height     ,
               max_grid_width + 2  )

    form . start_prompt ()
    form . wait_prompt  ()
    form . end_prompt   ()


ENDROUTINE

{***************************************************************************
*
* Print options
*
****************************************************************************}

ROUTINE samp_job_print_sample ( VALUE sample_id ,
                        VALUE is_print_full_sample )


    DECLARE template_details ,
        field_controls   ,
        count            ,
        text_line        ,
        tab1             ,
        tab2             ,
        tab3             ,
        tab4

    sample_id = SELECT sample . id_numeric
                WHERE  id_numeric = sample_id

    initialise_sample_entry ( template_details     ,
                  field_controls       ,
                  is_print_full_sample ,
                  FALSE                )

    SET NAME "defer/"

    tab_1 = GET_USER_MESSAGE("SAMP_JOB_CONST_26",1) : "  : "
            : select sample.id_text
    tab_2 = GET_USER_MESSAGE("SAMP_JOB_CONST_37",1) : "  : "
            : select sample.id_numeric
    tab_3 = GET_USER_MESSAGE("SAMP_JOB_CONST_12",1) : "  : "
            : select sample.job_name
    tab_4 = GET_USER_MESSAGE("SAMP_JOB_CONST_38",1) : "  : "
            : select sample.status

literal
$tab_1_________________________________ $tab_2_________________________________
$tab_3_________________________________ $tab_4_________________________________

$endliteral

    count = 1

    WHILE field_controls [ count , FIELD_NAME_POSITION ] <> EMPTY DO

        FORMAT text_line FROM select sample .
                 'field_controls [ count , FIELD_NAME_POSITION ]'
               USING sample . 'field_controls [ count , FIELD_NAME_POSITION ]'
        text_line = field_controls [ count , PROMPT_TEXT ] : "  : " : text_line


literal
$text_line_____________________________________________________________________
$endliteral

            count = count + 1

    ENDWHILE

    flush_literal

ENDROUTINE

{****************************************************************************}


ROUTINE samp_job_print_job_header

    DECLARE date_start     ,
        date_completed ,
        job_string     ,
        the_job_name   ,
        job_stat       ,
        undertab1      ,
        tab1           ,
        tab2           ,
        tab3           ,
        tab4           ,
        tab5

    the_job_name   = SELECT job_header . job_name
    date_start     = substring ( SELECT job_header . date_created    , 1 , 17 )
    date_completed = substring ( SELECT job_header . date_completed  , 1 , 17 )
    job_stat       = SELECT job_header . job_status

    IF ( job_stat = "A" ) THEN

        job_string = GET_USER_MESSAGE("SAMP_JOB_CONST_63" ,1)

    ELSEIF ( job_stat = "C" ) THEN

        job_string = GET_USER_MESSAGE("SAMP_JOB_CONST_64" ,1)

    ELSEIF ( job_stat = "V" ) THEN

        job_string = GET_USER_MESSAGE("SAMP_JOB_CONST_65" ,1)

    ELSEIF ( job_stat = "X" ) THEN

        job_string = GET_USER_MESSAGE("SAMP_JOB_CONST_69" ,1)

    ELSEIF ( job_stat = "S" ) THEN

        job_string = GET_USER_MESSAGE("SAMP_JOB_CONST_70" ,1)

    ENDIF

    tab_1=centre_text(GET_USER_MESSAGE("SAMP_JOB_TAB_1" ,1) ,80)
    undertab_1 = centre_text(PAD("-","-",LENGTH(STRIP(tab_1))),80)
    tab_2 = GET_USER_MESSAGE("SAMP_JOB_TAB_2" ,1)
    tab_3 = GET_USER_MESSAGE("SAMP_JOB_TAB_3" ,1)
    tab_4 = GET_USER_MESSAGE("SAMP_JOB_TAB_4" ,1)
    tab_5 = GET_USER_MESSAGE("SAMP_JOB_TAB_5" ,1)

literal

$tab_1_________________________________________________________________________
$undertab_1____________________________________________________________________

 $tab_2___________________$the_job_name________________________________________

 $tab_3___________________$date_start________
 $tab_4___________________$date_completed____

 $tab_5___________________$job_string___________________________________________________


$endliteral

ENDROUTINE

{****************************************************************************}


ROUTINE samp_job_print_job ( VALUE job_id  )

    DECLARE template_details   ,
        field_controls     ,
        count              ,
        text_line          ,
            modify_full_job    ,
        temp_line          ,
        remaining_line


    job_id = SELECT job_header . job_name
             WHERE job_name  = job_id

    modify_full_job = FALSE

    initialise_job_entry ( template_details ,
                   field_controls   ,
                       modify_full_job  )

    SET NAME "defer/"

    samp_job_print_job_header ()

    count = 1

    WHILE field_controls [ count , FIELD_NAME_POSITION ] <> EMPTY DO


        FORMAT text_line FROM select job_header .
                 'field_controls [ count , FIELD_NAME_POSITION ]'
               USING job_header . 'field_controls [ count , FIELD_NAME_POSITION ]'

        text_line = field_controls [ count , PROMPT_TEXT ] : "  : " : text_line

        temp_line      = splitwords ( text_line , 79 )
        remaining_line = text_line # temp_line

literal
 $temp_line_____________________________________________________________________
$endliteral

        WHILE NOT blank ( remaining_line ) DO

            temp_line      = splitwords ( remaining_line , 80 - TEXT_PROMPT_LENGTH )
            remaining_line = remaining_line # temp_line
            text_line      = pad ( " " , " " , TEXT_PROMPT_LENGTH + 1 ) : temp_line

literal
 $text_line____________________________________________________________________
$endliteral

        ENDWHILE

        count = count + 1

    ENDWHILE

    flush_literal

ENDROUTINE

{*****************************************************************************}

ROUTINE samp_job_print_the_sample ( VALUE is_print_full_sample )

{
*
*
*****************************************************************************}

    DECLARE sample_id

    IF prompt_in_window ( "SAMPLE"                                  ,
                   GET_USER_MESSAGE("SAMP_JOB_CONST_59" ,1) ,
                               GET_USER_MESSAGE("SAMP_JOB_CONST_58" ,1) ,
                  "$SAMP_JOB_PRINT"                         ,
                   sample_id                                )  THEN

        samp_job_print_sample ( sample_id            ,
                            is_print_full_sample )

    ENDIF

ENDROUTINE

{*****************************************************************************}

ROUTINE samp_job_print_the_job

{
*
*
*****************************************************************************}

    DECLARE job_id , imprint_path

    imprint_path = client_get_imprint_path ( )

    SET JOBSTATUS ("VCARXS")

    IF prompt_in_window (  "JOB_HEADER"                             ,
                           GET_USER_MESSAGE("SAMP_JOB_CONST_62" ,1) ,
                           GET_USER_MESSAGE("SAMP_JOB_CONST_61" ,1) ,
                           "$SAMP_JOB_PROMPT"                       ,
                           job_id                                   ) THEN

        IF ( imprint_path <> EMPTY ) THEN
            Imprint_Print ( job_id )
        ELSE
            samp_job_print_job ( job_id )
        ENDIF
    ENDIF

ENDROUTINE

{*****************************************************************************
*
* VGL entry points
*
*****************************************************************************}

{*****************************************************************************}

GLOBAL ROUTINE create_a_job ( VALUE job_template ,
                      VALUE job_identity )

{
*
*
*****************************************************************************}

    DECLARE login_details, retval, form, samp_details

    samp_job_initialise ()

    CREATE OBJECT SAMP_JOB_JOB_LOGIN_CLASS  , login_details
    login_details . job_identity            = job_identity
    login_details . job_template            = job_template
    login_details . dont_confirm            = TRUE
    login_details . use_current_transaction = FALSE

    IF samp_job_job_login ( login_details )

        retval = login_details . job_identity

        IF NOT BLANK ( login_details . sample_template  ) AND
                 ( login_details . repeat_count > 0 ) AND
                 ( login_details . samples_for_job  ) THEN

            CREATE OBJECT SAMP_JOB_NEW_FORM_INFO_CLASS, form
            CREATE OBJECT SAMP_JOB_SAMPLE_LOGIN_CLASS, samp_details

            samp_details . repeat_count = login_details . repeat_count
            samp_details . template_id  = login_details . sample_template
            samp_details . job_name     = retval
            samp_details . syntax       = login_details . sample_syntax

            samp_job_sample_login ( form         ,
                        samp_details )

            do_defer_operations ()

            job_login_post_sample ( login_details . job_identity ,
                                    TRUE                         )

        ENDIF

    ELSE

        retval = ERROR

    ENDIF

    RETURN ( retval )

ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE new_sample_function ( VALUE the_job_name    ,
                     VALUE sample_template ,
                     VALUE sample_syntax   ,
                       sample_id       )

{
*
*
*****************************************************************************}

    DECLARE login_details  ,
        form

    samp_job_initialise ()

    CREATE OBJECT SAMP_JOB_NEW_FORM_INFO_CLASS , form
    CREATE OBJECT SAMP_JOB_SAMPLE_LOGIN_CLASS  , login_details

    login_details . repeat_count = 1
    login_details . template_id  = sample_template
    login_details . job_name     = the_job_name
    login_details . syntax       = sample_syntax

    samp_job_sample_login ( form          ,
                login_details )

    do_defer_operations ()

    sample_id = form . return_sample ()

ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE new_sample2 ( VALUE the_job_name    ,
                     VALUE sample_template ,
                 VALUE sample_syntax   ,
                   user_info       )

{
*
*
*****************************************************************************}

    DECLARE login_details  ,
        form

    samp_job_initialise ()

    CREATE OBJECT SAMP_JOB_NEW_FORM_INFO_CLASS , form
    CREATE OBJECT SAMP_JOB_SAMPLE_LOGIN_CLASS  , login_details

    IF NOT variable_is_assigned ( user_info ) THEN

        user_info = EMPTY

    ENDIF

    login_details . repeat_count = 1
    login_details . template_id  = sample_template
    login_details . job_name     = the_job_name
    login_details . syntax       = sample_syntax
    login_details . user_info    = user_info

    samp_job_sample_login ( form          ,
                login_details )

    do_defer_operations ()

    RETURN ( form . return_sample ())

ENDROUTINE

{*****************************************************************************}

ROUTINE std_samp_job_job_login_action_login_a_job ( self )

    DECLARE status, retval, form, samp_details

    samp_job_initialise()

    status = samp_job_job_login ( self )

    IF status THEN

        retval = self . job_identity

        IF NOT BLANK ( self . sample_template ) AND
           ( self . repeat_count > 0 )          AND
           ( self . samples_for_job )           THEN

            job_login_pre_sample ( self . job_identity ,
                                   TRUE                )

            CREATE OBJECT SAMP_JOB_NEW_FORM_INFO_CLASS, form
            CREATE OBJECT SAMP_JOB_SAMPLE_LOGIN_CLASS, samp_details

            samp_details . repeat_count = self . repeat_count
            samp_details . template_id  = self . sample_template
            samp_details . job_name     = retval
            samp_details . syntax       = self . sample_syntax

            samp_job_sample_login ( form         ,
                        samp_details )

            IF self . do_defer_operations THEN
    
                do_defer_operations ()
                
            ENDIF

            IF self . do_post_sample_operations THEN

                job_login_post_sample ( self . job_identity, TRUE )
                
            ENDIF

        ENDIF

    ELSE

        retval = error

    ENDIF

    RETURN ( retval )

ENDROUTINE

{*****************************************************************************}

ROUTINE std_samp_job_sample_login_action_login_a_sample ( self )

    DECLARE form      ,
        count

    CREATE OBJECT SAMP_JOB_NEW_FORM_INFO_CLASS , form

    IF NOT variable_is_assigned ( self . repeat_count ) THEN

        self . repeat_count = 1

    ENDIF

    samp_job_sample_login ( form  ,
                self  )
    
    IF self . do_defer_operations THEN
        do_defer_operations ()
    ENDIF

    count = 1

    WHILE count <= size_of_array ( form . return_sample_id ) DO

        self . return_sample_id [ count ] = form . return_sample_id [ count ]
        count = count + 1

    ENDWHILE

    RETURN ( form . return_sample ())

ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE login_schedule_samp ( VALUE the_job_name    ,
                     VALUE sample_template ,
                     VALUE sample_syntax   )

{
*
*
*****************************************************************************}

    DECLARE login_details  ,
        form           ,
        return_sample

    samp_job_initialise ()

    CREATE OBJECT SAMP_JOB_NEW_FORM_INFO_CLASS , form
    CREATE OBJECT SAMP_JOB_SAMPLE_LOGIN_CLASS  , login_details

    login_details . repeat_count = 1
    login_details . template_id  = sample_template
    login_details . job_name     = the_job_name
    login_details . syntax       = sample_syntax

    samp_job_sample_login ( form          ,
                login_details )

    do_defer_operations ()

    return_sample = form . return_sample ()

    IF return_sample = ERROR THEN

        return_sample = PAD ( " " , " " , 10 )

    ENDIF

    RETURN ( return_sample )

ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE login_schedule_job ( template_id )

{
*
*
*****************************************************************************}

    DECLARE job_identity

    job_identity = " "

    job_identity = create_a_job ( template_id, job_identity )

    IF job_identity <> ERROR THEN

        RETURN ( job_identity )

    ELSE

        RETURN ( pad ( " " , " " , 20 ))

    ENDIF

ENDROUTINE

{*****************************************************************************
*
* Menu entry points
*
*****************************************************************************}

{*****************************************************************************}

GLOBAL ROUTINE login_sample_without_template ( VALUE option )

{
*
*
*****************************************************************************}

    DECLARE form_info

    samp_job_initialise ()

    CREATE OBJECT SAMP_JOB_FORM_INFO_CLASS , form_info

    form_info . display_job      = FALSE
    form_info . prompt_job       = FALSE
    form_info . display_template = TRUE
    form_info . prompt_template  = FALSE
    form_info . prompt_repeat    = TRUE
    form_info . is_sample_login  = TRUE
    form_info . header_message   = GET_USER_MESSAGE ( "SAMP_JOB_CONST_1" ,1)
    form_info . footer_message   = GET_USER_MESSAGE ( "SAMP_JOB_CONST_23",1)

    form_info . template      = "BLANK"
    form_info . repeat_count  = 0
    form_info . job_name      = ""
    form_info . sample_syntax = ""
    form_info . prompt_id     = "$SAMP_JOB_NO_TEMPLATE"

    samp_job_do_sample_form ( form_info )


ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE login_sample_for_template ( VALUE option )

{
*
*
*****************************************************************************}

    DECLARE form_info

    samp_job_initialise ()

    CREATE OBJECT SAMP_JOB_FORM_INFO_CLASS , form_info

    form_info . display_job      = FALSE
    form_info . prompt_job       = FALSE
    form_info . display_template = TRUE
    form_info . prompt_template  = TRUE
    form_info . prompt_repeat    = TRUE
    form_info . is_sample_login  = TRUE
    form_info . header_message   = GET_USER_MESSAGE ( "SAMP_JOB_CONST_1" ,1)
    form_info . footer_message   = GET_USER_MESSAGE ( "SAMP_JOB_CONST_23",1)

    form_info . template      = ""
    form_info . repeat_count  = 0
    form_info . job_name      = ""
    form_info . sample_syntax = ""
    form_info . prompt_id     = "$SAMP_JOB_TEMPLATE"

    samp_job_do_sample_form ( form_info )

ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE login_sample_new_job ( VALUE option )

{
*
*
*****************************************************************************}

    samp_job_initialise ()
    samp_job_new_job_option ( 1 )

ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE login_sample_old_job ( VALUE option )

{
*
*
*****************************************************************************}

    DECLARE form_info

    samp_job_initialise ()

    CREATE OBJECT SAMP_JOB_FORM_INFO_CLASS , form_info

    form_info . display_job      = TRUE
    form_info . prompt_job       = TRUE
    form_info . display_template = TRUE
    form_info . prompt_template  = TRUE
    form_info . prompt_repeat    = TRUE
    form_info . is_sample_login  = TRUE
    form_info . header_message   = GET_USER_MESSAGE ( "SAMP_JOB_CONST_1" ,1)
    form_info . footer_message   = GET_USER_MESSAGE ( "SAMP_JOB_CONST_23",1)

    form_info . repeat_count  = 0
    form_info . template      = ""
    form_info . sample_syntax = ""
    form_info . prompt_id     = "$SAMP_JOB_EXISTING_JOB"

    samp_job_do_sample_form ( form_info )

ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE modify_sample_entry ( VALUE option )

{
*
*
*****************************************************************************}

    samp_job_initialise ()

    samp_job_sample_modify ( FALSE  ,
                 FALSE  ,
                 FALSE  )


ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE view_sample_entry ( VALUE option )

{
*
*
*****************************************************************************}

    samp_job_initialise ()

    samp_job_sample_modify ( TRUE   ,
                 FALSE  ,
                 TRUE   )

ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE display_sample_entry ( VALUE option )

{
*
*
*****************************************************************************}

    samp_job_initialise ()

    samp_job_sample_modify ( TRUE   ,
                 FALSE  ,
                 FALSE  )

ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE modify_full_sample ( VALUE option )

{
*
*
*****************************************************************************}

    samp_job_initialise ()

    samp_job_sample_modify ( FALSE  ,
                 TRUE   ,
                 FALSE  )

ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE display_full_sample ( VALUE option )

{
*
*
*****************************************************************************}

    samp_job_initialise ()

    samp_job_sample_modify ( TRUE    ,
                 TRUE    ,
                 FALSE   )


ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE modify_job_header ( VALUE option )

{
*
*
*****************************************************************************}

    samp_job_initialise ()

    samp_job_job_modify ( FALSE  ,
                  FALSE  ,
                  FALSE  )


ENDROUTINE

{*****************************************************************************}

GLOBAL ROUTINE display_job_header ( VALUE option )

{
*
*
*****************************************************************************}

    samp_job_initialise ()

    samp_job_job_modify ( TRUE   ,
                  FALSE  ,
                  FALSE  )

ENDROUTINE


{*****************************************************************************}

ROUTINE print_full_sample ( option )

{
*
*
*****************************************************************************}

    samp_job_print_the_sample ( TRUE )

ENDROUTINE

{*****************************************************************************}

ROUTINE print_sample_entry ( option )

{
*
*
*****************************************************************************}

    samp_job_print_the_sample ( FALSE )

ENDROUTINE

{*****************************************************************************}

ROUTINE print_job_entry ( option )

{
*
*
*****************************************************************************}

    samp_job_print_the_job ( )

ENDROUTINE

{****************************************************************************}

ROUTINE samp_job_test

{
*
*
*****************************************************************************}

    DECLARE menu        ,
        sample_menu ,
        job_menu

    array menu  array_size ( 0 , 4 )
    array sample_menu array_size ( 0 , 4 )
    array job_menu array_size ( 0 , 4 )


    menu [1,1] = "*"
    menu [1,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_1" ,1)
    menu [1,3] = "$SAMP_JOB_MENU"

    menu [2,1] = "1"
    menu [2,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_2" ,1)
    menu [2,3] = " "
    menu [2,4] = "sample_menu"

    menu [3,1] = "2"
    menu [3,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_3" ,1)
    menu [3,3] = " "
    menu [3,4] = "job_menu"


    sample_menu [1,1] = "*"
    sample_menu [1,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_4" ,1)

    sample_menu [2,1] = "1"
    sample_menu [2,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_5" ,1)
    sample_menu [2,3] = global ( "current_library" )
    sample_menu [2,4] = "login_sample_without_template"

    sample_menu [3,1] = "2"
    sample_menu [3,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_6" ,1)
    sample_menu [3,3] = global ( "current_library" )
    sample_menu [3,4] = "login_sample_for_template"

    sample_menu [4,1] = "3"
    sample_menu [4,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_7" ,1)
    sample_menu [4,3] = global ( "current_library" )
    sample_menu [4,4] = "login_sample_new_job"

    sample_menu [5,1] = "4"
    sample_menu [5,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_8" ,1)
    sample_menu [5,3] = global ( "current_library" )
    sample_menu [5,4] = "Login_sample_old_job"

    sample_menu [6,1] = "5"
    sample_menu [6,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_9" ,1)
    sample_menu [6,3] = global ( "current_library" )
    sample_menu [6,4] = "modify_sample_entry"

    sample_menu [7,1] = "6"
    sample_menu [7,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_10" ,1)
    sample_menu [7,3] = global ( "current_library" )
    sample_menu [7,4] = "display_sample_entry"

    sample_menu [8,1] = "7"
    sample_menu [8,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_11" ,1)
    sample_menu [8,3] = global ( "current_library" )
    sample_menu [8,4] = "modify_full_sample"

    sample_menu [9,1] = "8"
    sample_menu [9,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_12" ,1)
    sample_menu [9,3] = global ( "current_library" )
    sample_menu [9,4] = "display_full_sample"

    sample_menu [10,1] = "9"
    sample_menu [10,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_13" ,1)
    sample_menu [10,3] = global ( "current_library" )
    sample_menu [10,4] = "new_sample_function"

    sample_menu [10,1] = "A"
    sample_menu [10,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_14" ,1)
    sample_menu [10,3] = global ( "current_library" )
    sample_menu [10,4] = "print_full_sample"

    job_menu [1,1] = "*"
    job_menu [1,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_15" ,1)

    job_menu [2,1] = "1"
    job_menu [2,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_16" ,1)
    job_menu [2,3] = global ( "current_library" )
    job_menu [2,4] = "modify_job_header"

    job_menu [3,1] = "2"
    job_menu [3,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_17" ,1)
    job_menu [3,3] = global ( "current_library" )
    job_menu [3,4] = "display_job_header"

    job_menu [4,1] = "3"
    job_menu [4,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_18" ,1)
    job_menu [4,3] = global ( "current_library" )
    job_menu [4,4] = "print_full_sample"

    job_menu [5,1] = "4"
    job_menu [5,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_19" ,1)
    job_menu [5,3] = global ( "current_library" )
    job_menu [5,4] = "print_sample_entry"

    job_menu [6,1] = "5"
    job_menu [6,2] = GET_USER_MESSAGE("SAMP_JOB_MENU_20" ,1)
    job_menu [6,3] = global ( "current_library" )
    job_menu [6,4] = "print_job_entry"


    callmenu outof menu at 10,10

ENDROUTINE


{****************************************************************************}

    ROUTINE Imprint_Print ( VALUE job_id )

{****************************************************************************}

    DECLARE imprint_report

    { Define the class, then create an instance }

    define_imprint_class ( )

    CREATE OBJECT IMPRINT, imprint_report

    { Generate a report }

    imprint_report . create_ole_object( )

    imprint_report . reset_ole_object( )

    imprint_report . add_parameter ( Strip ( job_id ) )
    imprint_report . report  = "r_jobheader"

    imprint_report . generate ( )

    imprint_report . ole_object = EMPTY

ENDROUTINE

{****************************************************************************}

ROUTINE edit_attachments (self)

DECLARE job_id

    {jobid = SELF . parent_prompt . prompt_objects[7] . value}
    job_id = SELECT job_header.job_name
    
    {fm("IS_DISPLAY: ":self.parent_prompt.is_display)}
    
    lock_downgrade ("JOB_HEADER")
    
    IF self.parent_prompt.is_display THEN
        MENUPROC "1051" using job_id
    ELSE
        MENUPROC "35225" using job_id
    ENDIF

ENDROUTINE


ROUTINE show_trace (self)

DECLARE job_id

    job_id = SELECT job_header.job_name
    
    lock_downgrade ("JOB_HEADER")
    
    CALL_ROUTINE "SHOW_TRACE" USING job_id IN LIBRARY "SHOW_TRACE"

ENDROUTINE

ROUTINE results (self)

DECLARE job_id, cur_mode

    job_id = SELECT job_header.job_name
    
    lock_downgrade ("JOB_HEADER")
    
    IF self.parent_prompt.is_display THEN
        cur_mode = "DISPLAY"
    ELSE
        cur_mode = "MODIFY"
    ENDIF

    CALL_ROUTINE "result_list_job" USING job_id, cur_mode IN LIBRARY "$RESULT_LIST"

ENDROUTINE

{*************************************************************************
* Purpose      : Writes to predefined log,
*                using WriteLog in $lib_utils
* Parameters   : Msg - what to write in log
* Return Value : N/A
**************************************************************************}
ROUTINE WriteToLog(VALUE Msg)

    WriteLog(Msg, global("current_library"))

ENDROUTINE
