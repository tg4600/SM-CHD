{**AS1325 HBe 30-5-01 New feature to identify test numbers on a given sample}

SET NAME "DEFER/"
ENABLE WINDOWS


JOIN STANDARD_LIBRARY STD_UTILS

JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY TOOLBOX



DECLARE sample, the_last_key
ARRAY empty_arr

sample       = EMPTY

WHILE get_identity (  sample , "Enter a Sample ID" ,
                              "Tests on Sample" , "SAMPLE" , empty ) DO
                              
handle_sample (sample)

ENDWHILE



ROUTINE handle_sample (sample_id)

JOIN STANDARD_LIBRARY STD_BLOCK
JOIN LIBRARY $LIB_UTILS
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT


DECLARE the_form				{form objects}
DECLARE test_grid				{grid object}
DECLARE name_of_table
DECLARE name_block
declare row_idx
declare row_save_idx
declare component
declare check_ok
declare select_array
declare size_block
declare field1  {sample}
declare field2  {analysis}
declare field3  {test_count}
declare field4  {test_number}

field1     	= "SAMPLE"
field2     	= "ANALYSIS"
field3     	= "TEST_COUNT" 
field4          = "TEST_NUMBER"
name_of_table 	= "TEST"
name_block 	= "test_block"



CREATE OBJECT "STD_FORM", the_form

{setup defaults}
the_form . header	=  "Displaying tests assigned to sample ":STRIP(sample_id):"."
the_form . footer = "Press DO to exit"
the_form . row	=  1
the_form . column	=   2
the_form . width	=  60 
the_form . height	=  12

the_form . return_behaviour = FORM_RETURN_STAY



CREATE OBJECT "STD_GRID_EDITOR" , test_grid

ARRAY test_grid . user_info ARRAYSIZE ( 0, 4 ) = ""

test_grid . row		= 3
test_grid . column 	= 8
test_grid . height 	= 10
test_grid . width 	= 43
test_grid . cell_rows 	= 0
test_grid . cell_columns   = 4
test_grid . column_size [ 1 ]	= 10
test_grid . column_size [ 2 ]	= 10
test_grid . column_size [ 3 ]	= 10
test_grid . column_size [ 4 ]	=  8
test_grid . title_size_top = 1
test_grid . title_rendition_top = PROMPT_RENDITION_BOLD
test_grid . title_text_top [ 1 , 1 ] = "Analysis"
test_grid . title_text_top [ 2 , 1 ] = "Repeat Count"
test_grid . title_text_top [ 3 , 1 ] = "Test Number"
test_grid . title_text_top [ 4 , 1 ] = "Status"
test_grid . title_separator_top = GRID_SEPARATOR_BOTH
test_grid . column_separator [ 1 ] = GRID_SEPARATOR_BOTH
test_grid . column_separator [ 2 ] = GRID_SEPARATOR_BOTH
test_grid . column_separator [ 3 ] = GRID_SEPARATOR_BOTH
test_grid . column_separator [ 4 ] = GRID_SEPARATOR_BOTH
test_grid . display_cell_routine   = "DISPLAY_GRID_CELL"
test_grid . prompt_cell_routine    = "PROMPT_GRID_CELL"
test_grid . check_move_routine     = "CHECK_MOVE"
test_grid . fixed_columns_left     = 1

the_form . add_prompt (test_grid)


analysis = select test . analysis
               where sample = sample_id
               order on analysis, test_count

   row_idx = 1

   WHILE analysis <> EMPTY DO

      test_grid . user_info [ row_idx, 1 ] = STRIP(analysis)
      test_grid . user_info [ row_idx, 2 ] = STRIP(select test . test_count )
      test_grid . user_info [ row_idx, 3 ] = STRIP(select test . test_number)
      test_grid . user_info [ row_idx, 4 ] = STRIP(select test . status)

      row_idx = row_idx + 1

      NEXT test

      analysis = select test . analysis

   ENDWHILE

   test_grid . cell_rows = row_idx - 1

the_form . start_prompt ()
REPEAT
	the_form . wait_prompt ()
UNTIL (the_form . get_lastkey () = "EXIT") OR (the_form . get_lastkey () = "DO")

the_form . end_prompt ()


ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE display_grid_cell ( 	self,
					VALUE cell_column ,
					VALUE cell_row ,
					window,
					VALUE column,
					VALUE row,
					VALUE cell_width,
					VALUE cell_height )

DECLARE val

   val = self . user_info [ cell_row, cell_column ]
   IF   val = EMPTY
   THEN val = pad( "", " ", cell_width )
   ELSE val = substring( val, 1, cell_width )
   ENDIF

   DISPLAY val
      AT column, row
      IN WINDOW window
      to column + cell_width - 1

ENDROUTINE

{ --------------------------------------------------------------------------- }


ROUTINE check_move 	(self           ,
			VALUE old_column,
			VALUE old_row	,
			      new_column,
			      new_row   )

IF  new_column < 3 THEN
    new_column = 3
ENDIF


ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE prompt_grid_cell    ( self,
					VALUE cell_column ,
					VALUE cell_row ,
					window,
					VALUE column,
					VALUE row,
					VALUE cell_width,
					VALUE cell_height )

   PROMPT FOR self . user_info [ cell_row, cell_column ]
	AT column, row
	IN WINDOW window
	TO column + cell_width - 1
	with ( DISPLAY_ONLY = true ,
	ZAP_ON_FIRST = false )


endroutine

