
{******************************************************************************
*
* Module Name   : $LTE_
*
* Purpose       : SMP report (built from $LTE_TEM) to provide a standards LTE
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}


{

INTRODUCTION
This report is the skeleton for creating table maintainance routines.
It is intended to be used with the simpler laboratory tables and
user defined tables. The data entry screen generated will not support
list type entry screens such as the component editor.

The following functions will be provided by this report:

Add/Modify, Display, Print, List, Remove/Unremove

Reports to support tables are generated by another setup report which
will copy this report into a supplied name and then allow modification
of the copy for the table required. Once modified the functions
generated can be tested from the generic menu.

The fields displayed on the data entry screen are defined by entering
values into parameters in this report.

Once a report has been created then it can be tested using the generic
menu provided as part of the setup environment.

ASSOCIATED FILES
$LABSETUP.RPF  - Setup Report.
$LABTABLIB.RPF - Library Report containing main routines.
$LTE_TEM.RPF   - Skeleton Lab Table Report.(This file)


SETUP DETAILS
To customise this report for a table a number of variables and
arrays must be setup in this report. To assist in this a copy
of the messages file (MESSAGES.PRN) and the structure file (STRUCTURE.TXT)
will be required.

The areas of the report to be modified are indicated by comments and
all occurrences of **** must be replaced with the required values. Note
that some variables have been given default values which may also require
changing.

}

{ --------------------------------------------------------------------------- }

{ --------------- Initialization Statements : DO NOT CHANGE ----------------- }

ENABLE WINDOWS
SET NAME "DISPLAY/"

JOIN LIBRARY $LABTABLIB
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $STD_VERS

{ --------------------------------------------------------------------------- }


{ -------------------------- Table Setup Routine ---------------------------- }



{***** ROUTINE table_setup.rpf *****}

ROUTINE table_setup

DECLARE num , menu_choice

        ARRAY prompt_details    ARRAY_SIZE ( 0 , 6 )
        ARRAY fields_to_output  ARRAY_SIZE ( 0 )

{

        CHANGE : Specify the name of the table in <name_of_table>
                 eg   name_of_table = "HAZARD"

}

        name_of_table           =  "STANDARD"

{

        CHANGE : MANDATORY : Specify the text to be displayed at the top
                 of the data entry screen in <header_mess>.
                 Note that the text may be specified literally
                 eg   header_mess = "Hazard Data Entry Screen"
                 or may be extracted from the message file
                 eg   header_mess = GET MESSAGE(xyz)

}

        header_mess = GET MESSAGE ( 2860 , 1 )

{

        CHANGE : MANDATORY : Specify the text to be displayed at the bottom
                 of the data entry screen in <footer_mess> for the options
                 add , copy , modify but not display.
                 Note that the text may be specified literally
                 eg   footer_mess = "Press DO to Save / EXIT to Quit"
                 or may be extracted from the message file
                 eg   footer_mess = GET MESSAGE(xyz)

}

        footer_mess = GET MESSAGE ( 1792 , 1 )

{

        CHANGE : MANDATORY : Specify the text to be displayed at the bottom
                 of the data entry screen in <display_footer_mess> for the
                 display option.        
                 Note that the text may be specified literally
                 eg   footer_mess = "Press EXIT to Quit"
                 or may be extracted from the message file
                 eg   footer_mess = GET MESSAGE(xyz)

}

        display_footer_mess = GET MESSAGE ( 1793 , 1 )

{

        CHANGE : MANDATORY : Specify the names of the fields and the
                 text associated with each field to be displayed on the
                 screen.
                 For each field the field name is stored in an element
                 of array <prompt_details> with an index of FIELD_NAME_POSITION
                 and the message stored with an index of MESSAGE_POSITION.
                 This array will require expanding for the total number
                 of fields required on the screen.

}

                prompt_details [ 1 , MESSAGE_POSITION    ] = GET MESSAGE ( 2858 , 1 )
                prompt_details [ 1 , FIELD_NAME_POSITION ] = "GROUP_ID"

                prompt_details [ 2 , MESSAGE_POSITION    ] = GET MESSAGE ( 2861 , 1 )
                prompt_details [ 2 , FIELD_NAME_POSITION ] = "DESCRIPTION"

{**MS 2003R1 / MS1329 HBe 15-6-01: In 4.1 this was removed. Now moved to position 10.
                prompt_details [ 3 , MESSAGE_POSITION    ] = GET MESSAGE ( 2862 , 1 )
                prompt_details [ 3 , FIELD_NAME_POSITION ] = "STANDARD_NAME"
}

{2003R1: This entry was new in 4.1!}
                prompt_details [ 3 , MESSAGE_POSITION    ] = "Used For Sample Type"
                prompt_details [ 3 , FIELD_NAME_POSITION ] = "SAMPLE_TYPE_USAGE"
{*ME 2003R1 / 1329}

                prompt_details [ 4 , MESSAGE_POSITION    ] = GET MESSAGE ( 2863 , 1 )
                prompt_details [ 4 , FIELD_NAME_POSITION ] = "STANDARD_TYPE"

                prompt_details [ 5 , MESSAGE_POSITION    ] = GET_USER_MESSAGE ( "LTE_STDS_SUBSTANCE", 1 )
                prompt_details [ 5 , FIELD_NAME_POSITION ] = "SUBSTANCE"

                prompt_details [ 6 , MESSAGE_POSITION    ] = GET MESSAGE ( 2865 , 1 )
                prompt_details [ 6 , FIELD_NAME_POSITION ] = "EXPIRY_TYPE"

                prompt_details [ 7 , MESSAGE_POSITION    ] = GET MESSAGE ( 2866 , 1 )
                prompt_details [ 7 , FIELD_NAME_POSITION ] = "LIFETIME"

                prompt_details [ 8 , MESSAGE_POSITION    ] = GET MESSAGE ( 2867 , 1 )
                prompt_details [ 8 , FIELD_NAME_POSITION ] = "MAXIMUM_USAGE"

                prompt_details [ 9 , MESSAGE_POSITION    ] = GET MESSAGE ( 2881 , 1 )
                prompt_details [ 9 , FIELD_NAME_POSITION ] = "TEMPLATE_ID"

                prompt_details [10 , MESSAGE_POSITION    ] = GET MESSAGE ( 2868 , 1 )
                prompt_details [10 , FIELD_NAME_POSITION ] = "MODIFIABLE"

{AS 2003R1: Migrating change 1329: Moving the original entry 3 as entry 10 instead of deleting it}
                prompt_details [11 , MESSAGE_POSITION    ] = GET MESSAGE ( 2862 , 1 )
                prompt_details [11 , FIELD_NAME_POSITION ] = "STANDARD_NAME"
{*AE2003R1}
{

        CHANGE : Specify the name of the table to be displayed on the screen
                 in <displayed_name_of_table>. This is useful for foreign
                 language support.
                 eg   displayed_name_of_table = "Hazard"

}

        displayed_name_of_table    = GET MESSAGE ( 2869 , 1 )

{

        CHANGE : Specify the name of the directory where text files are stored
                 which may contain descriptive information in <directory> and
                 the extension of the file in <extn>. If there is no associated
                 text file then these should be set to EMPTY.
                 For instance the hazard table.
                 eg   directory = "SMP$TEXTFILES"
                      extn = "HAZ"
                 or
                      directory = EMPTY
                      extn = EMPTY

}

        directory = "SMP$TEXTFILES"
        extn = "STN"

{

        CHANGE : MANDATORY : Specify the text to be displayed when prompting
                 for an identifier.
                 Note that the text may be specified literally
                 eg   input_mess  = "Enter Hazard ID : "
                 or may be extracted from the message file
                 eg   input_mess = GET MESSAGE(xyz)

}

        input_mess = GET MESSAGE ( 2870 , 1 )

{

        CHANGE : OPTIONAL : Specify default unique key value for new additions
                to the table - the default values for any new entry to the
                table will be copied from this entry in the database.
                Set <default_value> to be empty to ignore this feature.
                
                e.g
                  default_value = "DEFAULT"

}

        default_value = EMPTY

{

        CHANGE : MANDATORY : Specify the number of the fields to appear
                on the output generated by the list option.
                For each field to be output on the list an element of the array
                <fields_to_output> should contain a number corresponding to
                the position of that field in the array <prompt_details>.
                This array can be of any size from zero elements to the
                size of the arrays <prompt_details>.
                
                e.g
                  fields_to_output [ 1 ] = 1
                  fields_to_output [ 2 ] = 4
                  fields_to_output [ 3 ] = 3

}

        fields_to_output [ 1 ]  = 1
        fields_to_output [ 2 ]  = 2
        fields_to_output [ 3 ]  = 3

{

        CHANGE : MANDATORY : Specify a special action to happen on pressing the
                             <select> key.

                CHARACTER_POSITION index contains a character for the menu item.
                TITLE_POSITION     index contains a title for the menu item.
                LIBRARY_POSITION   index contains the library to call.
                ROUTINE_POSITION   index contains a routine in the library.

}

        ARRAY   special_actions_report  ARRAY_SIZE ( 0 , 6 )
    
    num = 1
                              
    special_actions_report [ num , CHARACTER_POSITION ] = "*"
    special_actions_report [ num , TITLE_POSITION     ] = GET MESSAGE ( 2859, 1 )

    num = num + 1
    menu_option = "1 "

    special_actions_report [ num , CHARACTER_POSITION ] = menu_option
    special_actions_report [ num , TITLE_POSITION     ] = menu_option:get_user_message ( "STD_VERS_CONCENTRATION" , 1 )
    special_actions_report [ num , LIBRARY_POSITION   ] = "$STD_VERS"
    special_actions_report [ num , ROUTINE_POSITION   ] = "STD_VERS_DEFAULT_CONCENTRATION"

    IF ( NOT global ( "STD_CONCENTRATIONS" ) ) THEN
                                            
        menu_option = "2 "
                num = num + 1
        
            special_actions_report [ num , CHARACTER_POSITION ] = menu_option
            special_actions_report [ num , TITLE_POSITION     ] = menu_option:GET_USER_MESSAGE ( "STD_VERS_LIMITS" , 1 )
            special_actions_report [ num , LIBRARY_POSITION   ] = "$STD_VERS"
            special_actions_report [ num , ROUTINE_POSITION   ] = "STD_VERS_STANDARD_LIMITS"
    
        menu_option = "3 "
    ELSE
        menu_option = "2 "
    ENDIF
                                             
    num = num + 1

      special_actions_report [ num , CHARACTER_POSITION ] = menu_option
    special_actions_report [ num , TITLE_POSITION     ] = menu_option:GET_USER_MESSAGE ( "STD_VERS_DESCRIP" , 1 )
    special_actions_report [ num , LIBRARY_POSITION   ] = "$LABTABLIB"
    special_actions_report [ num , ROUTINE_POSITION   ] = "TEXT_FILE" 
                     
    IF GLOBAL ( "TERMTYPE" ) = "GUI" THEN

        num = 2

        special_actions_report [ num , TITLE_POSITION ] = 
                       GET_USER_MESSAGE ( "STD_VERS_CONC_GUI" , 1 )

        IF ( NOT global ( "STD_CONCENTRATIONS" ) ) THEN

            num = num + 1

                    special_actions_report [ num , TITLE_POSITION ] =
                               GET_USER_MESSAGE ( "STD_VERS_BUTTON_LIMITS" , 1 )
        ENDIF
        
                num = num + 1

        special_actions_report [ num , TITLE_POSITION ] = 
                       GET_USER_MESSAGE ( "SMP_PROMPT_BUTTON_DESC" , 1 )
    ENDIF

{

        CHANGE : OPTIONAL : Specify five standard messages.

                IDENTITY_MESSAGE contains title text for the identity field.
                MOD_ON_MESSAGE   contains title text for the Modified On field.
                MOD_BY_MESSAGE   contains title text for the Modified by field.
                READ_MESSAGE     contains identifier for the read transaction.
                WRITE_MESSAGE    contains identifier for the write transaction

}

        ARRAY   labtable_messages       ARRAY_SIZE ( 0 )

        labtable_messages [ IDENTITY_MESSAGE ] = GET MESSAGE ( 2545 , 1 )
                                                { "Identity" }
        labtable_messages [ MOD_ON_MESSAGE   ] = GET MESSAGE ( 2546 , 1 )
                                                { "Modified On" }
        labtable_messages [ MOD_BY_MESSAGE   ] = GET MESSAGE ( 2547 , 1 )
                                                { "Modified By" }
        labtable_messages [ READ_MESSAGE     ] = GET MESSAGE ( 2566 , 1 )
                                                { "Labtable Read Transaction" }
        labtable_messages [ WRITE_MESSAGE    ] = GET MESSAGE ( 2567 , 1 )
                                                { "Labtable Write Transaction" }

{

        CHANGE : MANDATORY : Specify the help context for the editor window.
                 The text should be specified literally and should start
                 with the name of the report, suffixed with "_EDIT",
                        i.e. "$LTE_XXX_EDIT"

}

        help_context = "$LTE_STDS_EDIT"

 {   ------     THERE ARE NO MORE FIELDS TO BE SETUP  --------    }

ENDROUTINE


{***** ROUTINE validation_routine.rpf *****}

ROUTINE validation_routine

    DECLARE ok , lifetime

    ok = TRUE
    lifetime = SELECT standard . lifetime

    IF ( SELECT standard . expiry_type = "T" ) OR
       ( SELECT standard . expiry_type = "B" ) THEN

    IF ( lifetime < ZERO_INT ) THEN

            flash_message ( GET_USER_MESSAGE ( "LTE_STDS_MESS_2", 1) , true )

        ok = FALSE

    ELSEIF ( ( lifetime > ZERO_INT ) AND
             ( lifetime < INTERVAL ( standard_minimum_lifetime ) ) ) THEN

            flash_message ( GET_USER_MESSAGE ( "LTE_STDS_MESS_1" , 1 ) :
                                            standard_minimum_lifetime , true )
            ok = FALSE

    ENDIF

    ENDIF

    IF ( ok                                 )  AND
       ( NOT global ( "STD_CONCENTRATIONS" )) THEN

        CALL_ROUTINE "check_mlp_read_part" IN LIBRARY "$STD_VERS"

    ENDIF

    RETURN ( ok )

ENDROUTINE


{***** ROUTINE do_the_work.rpf *****}

ROUTINE do_the_work  ( VALUE operation )

table_setup ()
smp_lte_perform_option  ( name_of_table              ,
                          displayed_name_of_table    ,
                          prompt_details             ,
                          labtable_messages          ,
                          default_value              ,
                          input_mess                 ,
                          header_mess                ,
                          footer_mess                ,
                          display_footer_mess        ,
                          directory                  ,
                          extn                       ,  
                          help_context               ,
                          GLOBAL ("CURRENT_LIBRARY") ,
                          fields_to_output           ,
                          special_actions_report     ,
                          operation                  )

ENDROUTINE


{***** ROUTINE add_option.rpf *****}

ROUTINE add_option ( option )

do_the_work ( "add_ident" )

ENDROUTINE


{***** ROUTINE copy_option.rpf *****}

ROUTINE copy_option ( option )

do_the_work ( "copy_ident" )

ENDROUTINE


{***** ROUTINE modify_option.rpf *****}

ROUTINE modify_option ( option )

do_the_work ( "modify_ident" )

ENDROUTINE


{***** ROUTINE display_option.rpf *****}

ROUTINE display_option ( option )

do_the_work ( "display_ident" )

ENDROUTINE


{***** ROUTINE remove_option.rpf *****}

ROUTINE remove_option ( option )

do_the_work ( "remove_ident" )

ENDROUTINE


{***** ROUTINE restore_option.rpf *****}

ROUTINE restore_option ( option )

do_the_work ( "restore_ident" )

ENDROUTINE


{***** ROUTINE list_option.rpf *****}

ROUTINE list_option ( option )

do_the_work ( "list_idents" )

ENDROUTINE


{***** ROUTINE print_option.rpf *****}

ROUTINE print_option ( option )

do_the_work ( "print_ident" )

ENDROUTINE


{***** ROUTINE smp_lte_initialise.rpf *****}

ROUTINE smp_lte_initialise

ENDROUTINE

