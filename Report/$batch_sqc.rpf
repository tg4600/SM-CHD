{******************************************************************************
*
* Module Name   : $BATCH_SQC.RPF
*
* Purpose       :
*
*
*
******************************************************************************}

SET NOTPROTECTED
ENABLE WINDOWS
SET COMPILE_OPTION DECLARE
JOIN STANDARD_LIBRARY STD_PROMPT
SET NAME "DEFER/"

JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_FLAGS
JOIN STANDARD_LIBRARY STD_WINDOW

JOIN LIBRARY $BATCH_USER

JOIN LIBRARY $LIB_COMP                    
JOIN LIBRARY $LIB_GRID                    
JOIN LIBRARY $LIB_MLPS                    
JOIN LIBRARY $PROMPT_GRAPH                    

CONSTANT BATCH_SQC_CLASS      = "STD_BATCH_SQC"
CONSTANT BATCH_SQC_USER_CLASS = "STD_BATCH_SQC_USER"
    
      
batch_sqc_batch_form ()

JOIN LIBRARY $LIB_UTILS

DECLARE tag_batch_identity     , 
        tag_button_1           , 
        tag_batch_view         , 
        tag_batch_printer      , 
        tag_batch_print        , 
        tag_batch_grid         , 
        tag_batch_print_all    , 
        tag_template_identity  , 
        tag_template_points    , 
        tag_template_view      , 
        tag_template_printer   , 
        tag_template_print     , 
        tag_template_print_all

{******************************************************************************}

ROUTINE batch_sqc_initialise

{               
*
*
*
*******************************************************************************}
                      
	lib_grid_initialise () 
	lib_mlps_initialise ()

	set_up_std_prompt_graph_class ()

	DEFINE CLASS BATCH_SQC_CLASS

	PROPERTIES "TEST_NUMBER"  ,
	           "ID_NUMERIC"   ,
		   "ID_TEXT"      ,		
		   "BATCH"        ,
		   "NAME"         ,
		   "DATE_ENTERED" ,
		   "VALUE"        ,
		   "UNITS"        ,
		   "LOWER"        ,
		   "UPPER"        ,
		   "LIMIT"        ,
		   "PASS"

	END CLASS		

	DEFINE CLASS BATCH_SQC_USER_CLASS

	PROPERTIES "LEVEL"             ,
		   "FIND_LIMITS"       ,
		   "LOWER_LIMIT_FIELD" ,
		   "UPPER_LIMIT_FIELD" ,
		   "UNIT_LIMIT_FIELD"  ,
		   "COMMITTED_VIEWS"   

	INITIALISATION

	END CLASS
                           
ENDROUTINE

{*****************************************************************************}


GLOBAL ROUTINE batch_sqc_prompts_initialisation

{
*
*   Initialise the prompt Libraries
*   Do not modify this routine     
*
******************************************************************************}


ENDROUTINE

{*****************************************************************************}

                                 
GLOBAL ROUTINE create_form_batch_form ( form ) 

{
*   
*   
******************************************************************************}

        DECLARE prompt_object


        PROMPT OBJECT form CLASS "STD_FORM"
        form . header           = get_user_message ( "BATCH_SQC_BATCH_HEADER" , 1 )
        form . footer           = get_user_message ( "BATCH_SQC_BATCH_FOOTER" , 1 )
        form . row              = 7
        form . column           = 5
        form . height           = 13
        form . width            = 78
        form . vgl_library      = global ( "current_library" )
        form . button_style     = FORM_BUTTON_NONE
        form . return_behaviour = FORM_RETURN_STAY

	ARRAY form . user_info

        form . add_frame ( "", 1 , 1, 1 , 62  ) 

        form . add_display ( get_user_message ( "BATCH_SQC_BATCH_IDENTITY" , 1 ), 
			     2 , 1, PROMPT_RENDITION_BOLD                      ) 

        PROMPT OBJECT prompt_object BROWSE ON batch_header
        prompt_object . value                = ""
        prompt_object . row                  = 1
        prompt_object . column               = 13
        prompt_object . height               = 1
        prompt_object . vgl_library          = global ( "current_library" )
	prompt_object . always_validate      = TRUE
	prompt_object . validation_routine   = "batch_identity_validation"
	prompt_object . leave_prompt_routine = "batch_identity_leave_prompt"

        tag_batch_identity = form . add_prompt ( prompt_object ) 
        tag_batch_identity = tag_batch_identity { stop compilation warnings } 

        PROMPT OBJECT prompt_object CLASS "STD_PROMPT_BUTTON"
        prompt_object . caption      = get_user_message ( "BATCH_SQC_BATCH_CLOSE" , 1 )
        prompt_object . row          = 1
        prompt_object . column       = 65
        prompt_object . height       = 1
        prompt_object . width        = 10
        prompt_object . vgl_library  = global ( "current_library" )
        prompt_object . send_lastkey = "EXIT"

        tag_button_1 = form . add_prompt ( prompt_object ) 
        tag_button_1 = tag_button_1 { stop compilation warnings } 

        form . add_frame ( "", 1 , 3, 1 , 62  ) 


        PROMPT OBJECT prompt_object CLASS "STD_PROMPT_BUTTON"
        prompt_object . caption             = get_user_message ( "BATCH_SQC_BATCH_VIEW" , 1 )
        prompt_object . row                 = 3
        prompt_object . column              = 65
        prompt_object . height              = 1
        prompt_object . width               = 10
        prompt_object . vgl_library         = global ( "current_library" )
        prompt_object . enabled             = FALSE
        prompt_object . mouse_click_routine = "batch_view_mouse_click"

        tag_batch_view = form . add_prompt ( prompt_object ) 
        tag_batch_view = tag_batch_view { stop compilation warnings } 

        form . add_display ( get_user_message ( "BATCH_SQC_BATCH_PRINTER" , 1 ), 
			     2 , 3, PROMPT_RENDITION_BOLD ) 

        PROMPT OBJECT prompt_object BROWSE ON printer
        prompt_object . value       = ""
        prompt_object . row         = 3
        prompt_object . column      = 13
        prompt_object . height      = 1
        prompt_object . width       = 10
        prompt_object . vgl_library = global ( "current_library" )
	prompt_object . value       = global ( "TEXT_ID" )

        tag_batch_printer = form . add_prompt ( prompt_object ) 
        tag_batch_printer = tag_batch_printer { stop compilation warnings } 

        PROMPT OBJECT prompt_object CLASS "STD_PROMPT_BUTTON"
        prompt_object . caption             = get_user_message ( "BATCH_SQC_BATCH_PRINT" , 1 )
        prompt_object . row                 = 5
        prompt_object . column              = 65
        prompt_object . height              = 1
        prompt_object . width               = 10
        prompt_object . vgl_library         = global ( "current_library" )
        prompt_object . enabled             = FALSE
        prompt_object . mouse_click_routine = "batch_print_mouse_click"

        tag_batch_print = form . add_prompt ( prompt_object ) 
        tag_batch_print = tag_batch_print { stop compilation warnings } 

        form . add_frame ( "", 1 , 5, 8 , 62  ) 

        PROMPT OBJECT prompt_object CLASS "STD_GRID_EDITOR"
        prompt_object . row                        = 5
        prompt_object . column                     = 2
        prompt_object . height                     = 8
        prompt_object . width                      = 60
        prompt_object . vgl_library                = global ( "current_library" )
        prompt_object . cell_columns               = 3
        prompt_object . cell_rows                  = 0
        prompt_object . title_size_top             = 1
        prompt_object . title_size_left            = 0
        prompt_object . title_separator_top        = GRID_SEPARATOR_BOTH
        prompt_object . title_rendition_top        = PROMPT_RENDITION_BOLD
        prompt_object . title_separator_left       = GRID_SEPARATOR_BOTH
        prompt_object . title_rendition_left       = PROMPT_RENDITION_BOLD
        prompt_object . column_size  [ 1 ]         = 20
        prompt_object . column_separator  [ 1 ]    = GRID_SEPARATOR_BOTH
        prompt_object . title_text_top  [ 1 , 1 ]  = get_user_message ( "BATCH_SQC_BATCH_TITLE1" , 1 )
        prompt_object . column_size  [ 2 ]         = 7
        prompt_object . column_separator  [ 2 ]    = GRID_SEPARATOR_BOTH
        prompt_object . title_text_top  [ 2 , 1 ]  = get_user_message ( "BATCH_SQC_BATCH_TITLE2" , 1 )
        prompt_object . column_size  [ 3 ]         = 30
        prompt_object . column_separator  [ 3 ]    = GRID_SEPARATOR_BOTH
        prompt_object . title_text_top  [ 3 , 1 ]  = get_user_message ( "BATCH_SQC_BATCH_TITLE3" , 1 )
        prompt_object . row_separator  [ 1 ]       = GRID_SEPARATOR_BOTH
        prompt_object . row_separator  [ 2 ]       = GRID_SEPARATOR_BOTH
        prompt_object . row_separator  [ 3 ]       = GRID_SEPARATOR_BOTH
        prompt_object . enter_cell_routine         = "batch_grid_enter_cell"
        prompt_object . display_cell_routine       = "batch_grid_display_cell"
        prompt_object . prompt_cell_routine        = "batch_grid_prompt_cell"

        tag_batch_grid = form . add_prompt ( prompt_object ) 
        tag_batch_grid = tag_batch_grid { stop compilation warnings } 

        PROMPT OBJECT prompt_object CLASS "STD_PROMPT_BUTTON"
        prompt_object . caption             = get_user_message ( "BATCH_SQC_BATCH_PRINT_ALL" , 1 )
        prompt_object . row                 = 7
        prompt_object . column              = 65
        prompt_object . height              = 1
        prompt_object . width               = 10
        prompt_object . vgl_library         = global ( "current_library" )
        prompt_object . enabled             = FALSE
        prompt_object . mouse_click_routine = "batch_print_all_mouse_click"

        tag_batch_print_all = form . add_prompt ( prompt_object ) 
        tag_batch_print_all = tag_batch_print_all { stop compilation warnings } 

ENDROUTINE

{*****************************************************************************}

          
GLOBAL ROUTINE create_form_template_form ( form ) 

{
*   
*   
******************************************************************************}


        DECLARE prompt_object


        PROMPT OBJECT form CLASS "STD_FORM"
        form . header           = get_user_message ( "BATCH_SQC_TEMPLATE_HEADER" , 1 )
        form . footer           = get_user_message ( "BATCH_SQC_TEMPLATE_FOOTER" , 1 )
        form . row              = 8
        form . column           = 5
        form . height           = 8
        form . width            = 60
	form . select_routine   = "batch_sqc_template_select"
        form . vgl_library      = global ( "current_library" )
        form . button_style     = FORM_BUTTON_NONE
        form . return_behaviour = FORM_RETURN_STAY


        form . add_frame ( "", 1 , 1, 1 , 43  ) 

        form . add_display ( get_user_message ( "BATCH_SQC_TEMPLATE_IDENTITY" , 1 ), 
			     2 , 1, PROMPT_RENDITION_BOLD ) 

        PROMPT OBJECT prompt_object BROWSE ON batch_sqc_header
        prompt_object . value                = ""
        prompt_object . row                  = 1
        prompt_object . column               = 13
        prompt_object . height               = 1
        prompt_object . vgl_library          = global ( "current_library" )
	prompt_object . leave_prompt_routine = "template_identity_leave_prompt"

        tag_template_identity = form . add_prompt ( prompt_object ) 
        tag_template_identity = tag_template_identity { stop compilation warnings } 
          
        PROMPT OBJECT prompt_object CLASS "STD_PROMPT_BUTTON"
        prompt_object . caption      = get_user_message ( "BATCH_SQC_TEMPLATE_CLOSE" , 1 )
        prompt_object . row          = 1
        prompt_object . column       = 46
        prompt_object . height       = 1
        prompt_object . width        = 10
        prompt_object . vgl_library  = global ( "current_library" )
        prompt_object . send_lastkey = "EXIT"

        form . add_prompt ( prompt_object ) 

        form . add_frame ( "", 1 , 3, 2 , 43  ) 

        form . add_display ( get_user_message ( "BATCH_SQC_TEMPLATE_POINTS" , 1 ), 
			     2 , 3, PROMPT_RENDITION_BOLD ) 

        PROMPT OBJECT prompt_object CLASS "STD_PROMPT_TEXT_INTEGER"
        prompt_object . value       = ""
	prompt_object . minimum     = 0
        prompt_object . row         = 3
        prompt_object . column      = 13
        prompt_object . height      = 1
        prompt_object . width       = 10
        prompt_object . vgl_library = global ( "current_library" )

        tag_template_points = form . add_prompt ( prompt_object ) 
        tag_template_points = tag_template_points { stop compilation warnings } 

        PROMPT OBJECT prompt_object CLASS "STD_PROMPT_BUTTON"
        prompt_object . caption             = get_user_message ( "BATCH_SQC_TEMPLATE_VIEW" , 1 )
        prompt_object . row                 = 3
        prompt_object . column              = 46
        prompt_object . height              = 1
        prompt_object . width               = 10
        prompt_object . vgl_library         = global ( "current_library" )
        prompt_object . enabled             = FALSE
        prompt_object . mouse_click_routine = "template_view_mouse_click"

        tag_template_view = form . add_prompt ( prompt_object ) 
        tag_template_view = tag_template_view { stop compilation warnings } 

        form . add_display ( get_user_message ( "BATCH_SQC_TEMPLATE_PRINTER" , 1 ), 
			     2 , 4, PROMPT_RENDITION_BOLD ) 

        PROMPT OBJECT prompt_object BROWSE ON printer
        prompt_object . value       = ""
        prompt_object . row         = 4
        prompt_object . column      = 13
        prompt_object . height      = 1
        prompt_object . width       = 10
        prompt_object . vgl_library = global ( "current_library" )
	prompt_object . value       = global ( "TEXT_ID" )

        tag_template_printer = form . add_prompt ( prompt_object ) 
        tag_template_printer = tag_template_printer { stop compilation warnings } 

        PROMPT OBJECT prompt_object CLASS "STD_PROMPT_BUTTON"
        prompt_object . caption             = get_user_message ( "BATCH_SQC_TEMPLATE_PRINT" , 1 )
        prompt_object . row                 = 5
        prompt_object . column              = 46
        prompt_object . height              = 1
        prompt_object . width               = 10
        prompt_object . vgl_library         = global ( "current_library" )
        prompt_object . enabled             = FALSE
        prompt_object . mouse_click_routine = "template_print_mouse_click"

        tag_template_print = form . add_prompt ( prompt_object ) 
        tag_template_print = tag_template_print { stop compilation warnings } 

        PROMPT OBJECT prompt_object CLASS "STD_PROMPT_BUTTON"
        prompt_object . caption             = get_user_message ( "BATCH_SQC_TEMPLATE_PRINT_ALL" , 1 )
        prompt_object . row                 = 7
        prompt_object . column              = 46
        prompt_object . height              = 1
        prompt_object . width               = 10
        prompt_object . vgl_library         = global ( "current_library" )
        prompt_object . mouse_click_routine = "template_print_all_mouse_click"
          
        tag_template_print_all = form . add_prompt ( prompt_object ) 
        tag_template_print_all = tag_template_print_all { stop compilation warnings } 

ENDROUTINE

{*****************************************************************************}

ROUTINE batch_sqc_set_charts_for_batch ( form ) 

{
*   
*   
******************************************************************************}

	DECLARE identity       ,
		count          ,
		template       ,
		template_chart ,
		enable         ,
		grid

	grid = form . prompt_objects [ tag_batch_grid ]
			
	ARRAY form . user_info
	
	grid . user_info = 1

	count = 1 		        

	identity = form . prompt_objects [ tag_batch_identity ] . value

	IF NOT blank ( identity ) THEN

		enable = TRUE
                     
		template = SELECT batch_header . template_id
		           WHERE identity = identity
                                                  
  		template_chart = SELECT batch_tmpl_sqc . chart
				 WHERE identity = template
  
                                               
 		IF template_chart = EMPTY THEN                      
	                     
			enable = FALSE                            
			flash_message ( get_user_message ( "BATCH_SQC_NO_CHARTS_BATCH" ,1 ) :
					identity   , TRUE                 )
                
		ENDIF
		
		WHILE template_chart <> EMPTY DO

			template_chart = SELECT batch_sqc_header . identity
					 WHERE  identity = template_chart                                          

			form . user_info [ count , 1 ] = template_chart
			form . user_info [ count , 2 ] = SELECT batch_sqc_header . points
			form . user_info [ count , 3 ] = SELECT batch_sqc_header . description                                        
                                        
			NEXT batch_tmpl_sqc        

			template_chart = SELECT batch_tmpl_sqc . chart

			count = count + 1                        

		ENDWHILE

	ELSE

		enable = FALSE

	ENDIF			

	grid . cell_rows = count - 1 
	
	form . prompt_objects [ tag_batch_view      ] . enabled = enable 
	form . prompt_objects [ tag_batch_print     ] . enabled = enable 
	form . prompt_objects [ tag_batch_print_all ] . enabled = enable 

	RETURN ( enable )

ENDROUTINE

{*****************************************************************************}

ROUTINE batch_identity_validation ( self ) 

{
*   
*   
******************************************************************************}

DECLARE template, template_chart

	template_chart = EMPTY

	IF NOT blank ( self . value ) THEN

		template = SELECT batch_header . template_id 
			WHERE identity = self . value

		template_chart = SELECT batch_tmpl_sqc . chart
			WHERE identity = template

	ENDIF

	IF template_chart = EMPTY THEN

		flash_message ( get_user_message ( "BATCH_SQC_NO_CHARTS_BATCH" ,1 ) :
				self . value   , TRUE                 )
		
	ENDIF

	RETURN ( template_chart <> EMPTY ) 

ENDROUTINE

{*****************************************************************************}

ROUTINE batch_identity_leave_prompt ( self ) 

{
*   
*   
******************************************************************************}

	DECLARE form     ,
		enable   ,
		grid     ,
		old_rows ,
		new_rows ,
		count

	IF self . get_lastkey () <> "EXIT" THEN

		form     = self . parent_prompt	
		grid     = form . prompt_objects [ tag_batch_grid ]


		old_rows = grid . cell_rows
		enable   = batch_sqc_set_charts_for_batch ( form ) 
		new_rows = grid . cell_rows

		count = old_rows 
	

		WHILE count > new_rows DO

			grid . remove_row ( count )
	
			count = count - 1

		ENDWHILE

		count = old_rows

		WHILE count < new_rows DO

			grid . insert_row ( count               ,
					    1                   ,
					    GRID_SEPARATOR_NONE )

			count = count + 1

		ENDWHILE

		grid . redisplay_contents ()

		form . prompt_objects [ tag_batch_view      ] . set_enabled ( enable )
		form . prompt_objects [ tag_batch_print     ] . set_enabled ( enable )
		form . prompt_objects [ tag_batch_print_all ] . set_enabled ( enable )

	ENDIF

	
ENDROUTINE

{*****************************************************************************}

ROUTINE batch_view_mouse_click ( self ) 

{
*   
*   
******************************************************************************}

	DECLARE chart   ,
		points  ,
		form    ,
		grid

	form = self . parent_prompt
	grid = form . prompt_objects [ tag_batch_grid ]

	chart   = form . user_info [ grid . user_info , 1 ]
	points  = form . user_info [ grid . user_info , 2 ]
                                                   	
        batch_sqc_chart_view ( chart   ,
			       points  )	


ENDROUTINE

{*****************************************************************************}

ROUTINE batch_print_mouse_click ( self ) 

{
*         
*   
******************************************************************************}

	DECLARE chart   ,
		points  ,
		printer ,
		form    ,
		grid

	form = self . parent_prompt
	grid = form . prompt_objects [ tag_batch_grid ]

	printer = form . prompt_objects [ tag_batch_printer ] . value

	chart   = form . user_info [ grid . user_info , 1 ]
	points  = form . user_info [ grid . user_info , 2 ]

                                                   	
        batch_sqc_chart_print ( chart   ,
			        points  ,
				printer )	


ENDROUTINE


{*****************************************************************************}

ROUTINE batch_grid_enter_cell (        self        , 
                                 VALUE cell_column , 
                                 VALUE cell_row ) 

{
*   
*   
******************************************************************************}

	DECLARE old_row

	IF cell_row <> self . user_info THEN

		old_row  = self . user_info

		self . user_info = cell_row 

		self . redisplay_cell ( 1        ,
					old_row )

		self . redisplay_cell ( 1        ,
					cell_row )

	ENDIF

ENDROUTINE

{*****************************************************************************}

ROUTINE batch_grid_display_cell (        self        , 
                                   VALUE cell_column , 
                                   VALUE cell_row , 
                                         window , 
                                   VALUE column , 
                                   VALUE row  , 
                                   VALUE cell_width , 
                                   VALUE cell_height ) 

{
*   
*   
******************************************************************************}

	DECLARE charts
	
	charts = self . parent_prompt . user_info

	IF cell_column = 1 THEN

		DISPLAY charts [ cell_row , 1 ]
			IN WINDOW window
			ON LINE   row
			FROM      column
			TO        column + cell_width
			INVERSE = self . user_info = cell_row
			FORMAT batch_sqc_header . identity
			

	ELSEIF cell_column = 2 THEN

		DISPLAY charts [ cell_row , 2 ]
			IN WINDOW window
			ON LINE   row
			FROM      column
			TO        column + cell_width
			FORMAT batch_sqc_header . points

	ELSEIF cell_column = 3 THEN

		DISPLAY charts [ cell_row , 3 ]
			IN WINDOW window
			ON LINE   row
			FROM      column
			TO        column + cell_width
			FORMAT batch_sqc_header . description

	ENDIF

ENDROUTINE

{*****************************************************************************}

ROUTINE batch_grid_prompt_cell (        self        , 
                                  VALUE cell_column , 
                                  VALUE cell_row , 
                                        window , 
                                  VALUE column , 
                                  VALUE row  , 
                                  VALUE cell_width , 
                                  VALUE cell_height ) 

{
*   
*   
******************************************************************************}

	DECLARE charts
	
	charts = self . parent_prompt . user_info

	IF cell_column = 1 THEN

		PROMPT FOR charts [ cell_row , 1 ]
		       IN WINDOW window
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width
		       BROWSE ON batch_sqc_header . identity
		       WITH ( display_only = TRUE )

	ELSEIF cell_column = 2 THEN

		PROMPT FOR charts [ cell_row , 2 ]
		       IN WINDOW window
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width
		       FORMAT batch_sqc_header . points

	ELSEIF cell_column = 3 THEN

		PROMPT FOR charts [ cell_row , 3 ]
		       IN WINDOW window
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width
		       FORMAT batch_sqc_header . description
		       WITH ( display_only = TRUE )

	ENDIF


ENDROUTINE

{*****************************************************************************}

ROUTINE batch_print_all_mouse_click ( self ) 

{
*   
*   
******************************************************************************}

	DECLARE charts  ,
		count   ,
		printer ,
		form    ,
		grid    

	form = self . parent_prompt
	grid = form . prompt_objects [ tag_batch_grid ]

	printer = form . prompt_objects [ tag_batch_printer ] . value

	ARRAY charts

	count = 1 

	WHILE count <= grid . cell_rows DO

		charts [ count , 1 ] = form . user_info [ count , 1 ]
		charts [ count , 2 ] = form . user_info [ count , 2 ]

		count = count + 1

	ENDWHILE
                                                   	
        batch_sqc_chart_print_all ( charts  ,
				    printer )	


ENDROUTINE

{*****************************************************************************}

ROUTINE template_identity_leave_prompt ( self ) 

{
*   
*   
******************************************************************************}

	DECLARE identity ,
		points   ,
		form

	form     = self . parent_prompt

	identity = self . value

	form . prompt_objects [ tag_template_view  ] . set_enabled ( NOT blank ( identity ))
	form . prompt_objects [ tag_template_print ] . set_enabled ( NOT blank ( identity ))

	points = SELECT batch_sqc_header . points
		 WHERE identity = identity

	form . prompt_objects [ tag_template_points ] . set_text ( points )

	
ENDROUTINE

{*****************************************************************************}

ROUTINE template_view_mouse_click ( self ) 

{
*   
*   
******************************************************************************}

	DECLARE chart   ,
		points  ,
		form

	form = self . parent_prompt

	chart   = form . prompt_objects [ tag_template_identity ] . value
	points  = form . prompt_objects [ tag_template_points   ] . value
                                                   	
        batch_sqc_chart_view ( chart   ,
			       points  )	

ENDROUTINE

{*****************************************************************************}

ROUTINE template_print_mouse_click ( self ) 

{
*   
*   
******************************************************************************}
	                        
	DECLARE chart   ,
		points  ,
		printer ,
		form

	form = self . parent_prompt

	chart   = form . prompt_objects [ tag_template_identity ] . value
	points  = form . prompt_objects [ tag_template_points   ] . value
	printer = form . prompt_objects [ tag_template_printer  ] . value
                                                   	
        batch_sqc_chart_print ( chart   ,
			        points  ,
				printer )	


ENDROUTINE

          
{*****************************************************************************}

ROUTINE template_print_all_mouse_click ( self ) 

{
*   
*   
******************************************************************************}


	DECLARE charts  ,
		count   ,
		printer ,
		form    ,
		chart

	IF confirm_with_text ( get_user_message ( "BATCH_SQC_CONFIRM_PRINT_ALL" , 1 )) THEN

		form = self . parent_prompt
		printer = form . prompt_objects [ tag_template_printer ] . value

		ARRAY charts

		count = 1 

		chart = SELECT batch_sqc_header . identity
			WHERE ( identity   > ""    ) AND
			      ( removeflag = FALSE ) 

		WHILE chart <> EMPTY DO

			charts [ count , 1 ] = SELECT batch_sqc_header . identity
			charts [ count , 2 ] = SELECT batch_sqc_header . points

			NEXT batch_sqc_header

			chart = SELECT batch_sqc_header . identity

			count = count + 1

		ENDWHILE
                                                   	
        	batch_sqc_chart_print_all ( charts  ,
					    printer )	


	ENDIF

ENDROUTINE


{*****************************************************************************}

ROUTINE batch_sqc_template_select ( self )

{
*
*
******************************************************************************}

	DECLARE menu_options ,
		option

        ARRAY menu_options ARRAY_SIZE ( 0, 4 )

        menu_options [ 1, 1 ] = "*"
        menu_options [ 1, 2 ] = get_user_message ( "BATCH_SQC_TEMPLATE_SELECT_HEADER" , 1 )
 
        menu_options [ 2, 1 ] = get_user_message ( "BATCH_SQC_TEMPLATE_SELECT1" , 1 )
	menu_options [ 2, 2 ] = get_user_message ( "BATCH_SQC_TEMPLATE_SELECT1" , 2 )
        menu_options [ 2, 3 ] =  1

        menu_options [ 3, 1 ] = get_user_message ( "BATCH_SQC_TEMPLATE_SELECT2" , 1 )
	menu_options [ 3, 2 ] = get_user_message ( "BATCH_SQC_TEMPLATE_SELECT2" , 2 )
        menu_options [ 3, 3 ] =  2

        menu_options [ 4, 1 ] = get_user_message ( "BATCH_SQC_TEMPLATE_SELECT3" , 1 )
	menu_options [ 4, 2 ] = get_user_message ( "BATCH_SQC_TEMPLATE_SELECT3" , 2 )
        menu_options [ 4, 3 ] =  3


        CHOOSE option OUTOF menu_options
                ON LINE 10 FROM 20


	IF option = 1 THEN

		template_view_mouse_click ( self . prompt_objects [ 1 ] )

	ELSEIF option = 2 THEN

		template_print_mouse_click ( self . prompt_objects [ 1 ] )

	ELSEIF option = 3 THEN

		template_print_all_mouse_click ( self . prompt_objects [ 1 ] )


	ENDIF

ENDROUTINE

{*****************************************************************************}

ROUTINE batch_sqc_batch_form  

{
*   
*   
******************************************************************************}

	
	DECLARE form

	batch_sqc_initialise ()

	batch_sqc_prompts_initialisation ()

	create_form_batch_form ( form ) 

	form . start_prompt ()
	form . wait_prompt ()
	form . end_prompt ()
                          
ENDROUTINE

{*******************************************************************************}

ROUTINE std_batch_sqc_user_class_initialisation ( self )

{
*
*
********************************************************************************}

	self . level             = "QC"
	self . find_limits       = TRUE
	self . lower_limit_field = EMPTY
	self . upper_limit_field = EMPTY
	self . unit_limit_field  = EMPTY

	ARRAY self . committed_views

	self . committed_views [ 1 ] = "batch_sqc_committed_view"

          
	batch_user_sqc_chart_details ( self )

ENDROUTINE

{*******************************************************************************}

ROUTINE batch_sqc_find_limit ( VALUE test_number       ,
			       VALUE analysis          ,
		               VALUE name              ,
			       VALUE product           ,
			       VALUE product_version   ,
			       VALUE surrogate         ,
			       VALUE surrogate_version , 
			       VALUE level             ,
			             lower_limit       ,
			             upper_limit       ,
			             limit_units       )

{                                                                  
*                             
*
*******************************************************************************} 
                                    
	DECLARE operation       ,
		format_object   ,
		temp
		                                


	CREATE OBJECT MLP_OPERATION_CLASS, operation
                   
       	operation . mlp_identity             = product
	operation . mlp_version              = product_version
        operation . analysis                 = analysis
	operation . component                = name
	operation . perform_level_operations = FALSE
	operation . grade_code               = level
       	operation . compare_only_grade_code  = TRUE     
	operation . format_append_units      = FALSE
	operation . surrogate_identity       = surrogate
	operation . surrogate_version        = surrogate_version
              

	CREATE OBJECT MLP_RESULT_CLASS, operation . result_row

	temp = SELECT result . name
	       IN OBJECT operation . result_row
	       WHERE ( test_number = test_number ) AND
		     ( name        = name        )				                                                                    
                    
	temp = temp

	operation . format ()         

	format_object = operation . format_object
                                                        
	IF format_object . total <> 0 THEN
                                                        
		lower_limit = format_object . limits [ 1 , 1 ] 
		upper_limit = format_object . limits [ 1 , 2 ]
		limit_units = format_object . units  [ 1  ]

	ELSE

		lower_limit = ""
		upper_limit = ""
		limit_units = ""

	ENDIF
        
ENDROUTINE                            
                              
{******************************************************************************}

ROUTINE batch_sqc_add_item (       self      ,
			     VALUE view_name ,
				   results   )

{
*                                               
*                       
*
*******************************************************************************}

	DECLARE entered_on  ,     
		position    ,
		count       ,
		element
                                                        
        entered_on  = SELECT 'view_name' . entered_on
                     
	position = size_of_array ( results ) + 1
	count    = size_of_array ( results )
	        
	WHILE count > 0 DO

		IF entered_on > results [ count ] . date_entered THEN

			position = count
			count    = -1

		ENDIF                                   

		count = count - 1                

	ENDWHILE        

	IF count = 0 THEN

		position = 1	

	ENDIF	             

	IF position <> 0 THEN

		CREATE OBJECT batch_sqc_class , element
               
		element . test_number  = SELECT 'view_name' . test_number
		element . id_numeric   = SELECT 'view_name' . id_numeric
		element . id_text      = SELECT 'view_name' . id_text
		element . batch        = SELECT 'view_name' . batch_header
		element . name         = SELECT 'view_name' . name
		element . date_entered = SELECT 'view_name' . entered_on
		element . value        = SELECT 'view_name' . text
		element . limit        = self . level

		IF self . find_limits THEN

			batch_sqc_find_limit ( element . test_number                  ,
				               SELECT 'view_name' .analysis           ,
					       element . name                         ,
				               SELECT 'view_name' . product           ,
			        	       SELECT 'view_name' . product_version   ,
				               SELECT 'view_name' . surrogate_mlp      ,
			        	       SELECT 'view_name' . surrogate_mlp_version ,
				       	       self . level                           ,
				       	       element . lower                        ,
				               element . upper                        ,
				               element . units                        )
	

		ELSE

			element . units        = SELECT 'view_name' . 'self . unit_limit_field'
			element . lower        = SELECT 'view_name' . 'self . lower_limit_field'
			element . upper        = SELECT 'view_name' . 'self . upper_limit_field'

		ENDIF

                                                       
		array_insert_slice ( results  ,
				     1        ,
				     position )	

		results [ position ] = element

	ENDIF	               

ENDROUTINE		          
                        
{******************************************************************************}

ROUTINE batch_sqc_get_data_from_table (       self         ,
					VALUE sqc_chart    ,
					      results      ,
					VALUE select_table )

{
*                                                       
*                       
*
*******************************************************************************}

	DECLARE batch_template ,
		name           ,        
		criteria       ,
		test_number

	batch_template = SELECT batch_tmpl_sqc . identity
			 WHERE  chart = sqc_chart
                                                        
	WHILE batch_template <> EMPTY DO

		ARRAY criteria                        

		array_select_add (  criteria        ,
                                    ARRAY_SELECT_EQ ,
                                   "BATCH_TEMPLATE" ,
                                    batch_template  )   

		array_select_add (  criteria                           ,
                                    ARRAY_SELECT_EQ                    ,
                                   "ANALYSIS"                          ,
                                    SELECT batch_sqc_header . analysis )   

		array_select_add (  criteria          ,
                                    ARRAY_SELECT_PUSH ,
                                    EMPTY             ,
                                    EMPTY             )   


		name = strip ( SELECT batch_sqc_header . component ) 

		IF global ( "RESULT_REPLICATES_ENABLED" ) THEN                                                        
	                                                        
			name = name : "/%"
	                      
     			array_select_add (  criteria          ,
        	                            ARRAY_SELECT_LIKE ,
                	                   "name"             ,
                        	            name              )
                                                        
		ELSE
                                        
     			array_select_add (  criteria        ,
        	                            ARRAY_SELECT_EQ ,
                	                   "name"           ,
                        	            name            )

		ENDIF                                

		name = strip ( SELECT batch_sqc_header . component_2 ) 
                                                                    
		IF NOT blank ( name ) THEN

     			array_select_add (  criteria        ,
        	                            ARRAY_SELECT_OR ,
                	                    EMPTY           ,
                        	            EMPTY           )
			                             

			IF global ( "RESULT_REPLICATES_ENABLED" ) THEN                                                        
	                                                        
				name = name : "/%"
	                      
     				array_select_add (  criteria          ,
        	        	                    ARRAY_SELECT_LIKE ,
                	        	           "name"             ,
                        	        	    name              )
                                                        
			ELSE
                                        
     				array_select_add (  criteria        ,
        		                            ARRAY_SELECT_EQ ,
                		                   "name"           ,
                        		            name            )


			ENDIF

		ENDIF                                

		array_select_add (  criteria          ,
                                    ARRAY_SELECT_POP  ,
                                    EMPTY             ,
                                    EMPTY             )   
                                                       
  		IF NOT blank ( SELECT batch_sqc_header . instrument ) THEN
                                                                
			array_select_add (  criteria                           ,
        	                            ARRAY_SELECT_EQ                    ,
                	                   "instrument"                        ,
                        	            SELECT batch_sqc_header . instrument )

		ENDIF 
  		                                        
		IF NOT blank ( SELECT batch_sqc_header . standard ) THEN

			array_select_add (  criteria                           ,
        	                            ARRAY_SELECT_EQ                    ,
                	                   "standard"                          ,
                        	            SELECT batch_sqc_header . standard )
                                  
		ENDIF 

		array_select_add (  criteria                ,
        	                    ARRAY_SELECT_ORDER      ,   
                	            "ENTERED_ON"            ,
                        	    ARRAY_SELECT_DESCENDING )
		    		                                   
		array_select (  select_table ,
				FALSE        ,
				criteria     )
                                                        
		test_number = SELECT 'select_table' . test_number
                
		WHILE test_number <> EMPTY DO

			batch_sqc_add_item ( self         ,
					     select_table ,
					     results      )
	                

			test_number = SELECT 'select_table' . test_number

			NEXT 'select_table'

			test_number = SELECT 'select_table' . test_number

		ENDWHILE                                        
                       
		NEXT batch_tmpl_sqc
		batch_template = SELECT batch_tmpl_sqc . identity
               
	ENDWHILE         

ENDROUTINE
                                        
{******************************************************************************}

GLOBAL ROUTINE batch_sqc_get_data ( VALUE sqc_chart   ,
					  results     ,
					  description ,
					  points      ,
				    VALUE read_points )		

{
*                                                       
*                       
*
*******************************************************************************}

	DECLARE count   ,
	        self


	ARRAY results 

	CREATE OBJECT BATCH_SQC_USER_CLASS,  self                                                 

	sqc_chart = SELECT batch_sqc_header . identity 
		    WHERE identity = sqc_chart
	
	description = SELECT batch_sqc_header . description

	IF read_points THEN

		points = SELECT batch_sqc_header . points

	ENDIF                                                       

	batch_sqc_get_data_from_table ( self                    ,
					sqc_chart               ,
					results                 ,
					"BATCH_SQC_ACTIVE_VIEW" )

	IF size_of_array ( results ) < points THEN
 		
		count = 1

		WHILE count <= size_of_array ( self . committed_views ) DO

			batch_sqc_get_data_from_table ( self                             ,
							sqc_chart                        ,
						        results                          ,
						        self . committed_views [ count ] )

			count = count + 1

		ENDWHILE

	ENDIF

ENDROUTINE
                                
               

{****************************************************************************}

ROUTINE batch_sqc_set_to_points (       results , 
				  VALUE points  )

	IF (  points > 0 ) THEN
                
		WHILE size_of_array ( results ) > points DO

			array_remove_slice ( results ,
					     1       ,
				             1       )                        

		ENDWHILE                      

	ENDIF                           
                                        
ENDROUTINE

{****************************************************************************}

ROUTINE batch_sqc_get_chart_mean ( results )						


	DECLARE count ,
		mean         

	mean = 0.0

	count = 1 

	WHILE count <= size_of_array ( results ) DO 		     

		mean = mean + numeric ( results [ count ] . value )
                                        
		count = count + 1

	ENDWHILE

	mean = mean / ( count - 1 )

	RETURN ( mean )    

ENDROUTINE
                
{****************************************************************************}

ROUTINE batch_sqc_get_chart_sigma (       results ,
				    VALUE mean    )						

	DECLARE count ,
		sigma         

	sigma = 0.0                     

	count = 1 

	WHILE count <= size_of_array ( results ) DO 		     

		sigma = sigma + 
			( numeric ( results [ count ] . value ) - mean ) ^ 2 
                                        
		count = count + 1

	ENDWHILE

	sigma = ( sigma / ( count - 1 )) ^ 0.5

	RETURN ( sigma )    

ENDROUTINE
                                
{****************************************************************************}

ROUTINE batch_sqc_setup_result_chart ( results ,
				       graph   )	

	DECLARE count ,
		temp
                               
	graph . yaxis . end_position   = numeric ( results [ 1 ] . value )
	graph . yaxis . start_position = numeric ( results [ 1 ] . value )

	count = 1 

	WHILE count <= size_of_array ( results ) DO 		     
                   
		graph . xaxis . input [ count ] = count
		graph . yaxis . input [ count ] = results [ count ] . value

		IF numeric ( results [ count ] . value ) > graph . yaxis . end_position THEN
                                 
			graph . yaxis . end_position = numeric ( results [ count ] . value )
                                          
		ENDIF                                                    

		IF numeric ( results [ count ] . value ) < graph . yaxis . start_position THEN

			graph . yaxis . start_position = numeric ( results [ count ] . value )
                                              
		ENDIF                                       

		IF ( results [ count ] . upper <> EMPTY ) THEN

			temp = numeric ( results [ count ] . upper )                                              

			IF temp > graph . yaxis . end_position THEN

				graph . yaxis . end_position = temp 
 
			ENDIF
  
		ENDIF                                                

		IF ( results [ count ] . lower <> EMPTY ) THEN

			temp = numeric ( results [ count ] . lower )                                              

			IF temp < graph . yaxis . start_position THEN

				graph . yaxis . start_position = temp 
 
			ENDIF
                                  			                         
		ENDIF                                       

		count = count + 1                   

	ENDWHILE                             
                                         
ENDROUTINE      

{****************************************************************************}

ROUTINE batch_sqc_get_lower_limit ( results ) 

	DECLARE count ,
		min                                          
                      

	min = numeric ( results [ 1 ] . lower )

	count = 2
                                        
	WHILE count <= size_of_array ( results ) DO 		     
    
	    	IF numeric ( results [ count ] . lower ) < min THEN

			min = numeric ( results [ count ] . lower )
 

		ENDIF

		count = count + 1

	ENDWHILE

	RETURN ( min )                          

ENDROUTINE

{****************************************************************************}

ROUTINE batch_sqc_get_upper_limit ( results ) 

	DECLARE count ,
		max                                          
                      

	max = numeric ( results [ 1 ] . upper )

	count = 2

	WHILE count <= size_of_array ( results ) DO 		     
    
	    	IF numeric ( results [ count ] . upper ) > max THEN

			max = numeric ( results [ count ] . upper ) 

		ENDIF     
                                        
		count = count + 1

	ENDWHILE

	RETURN ( max )                          

ENDROUTINE

{****************************************************************************}

ROUTINE batch_sqc_setup_upper_limit_chart ( results ,
				            graph   )	


	DECLARE count          ,
                last_x         ,
		last_y         ,
		last_was_point 
                                          
                                                    
	count  = 1        
	last_x = 0.5
	last_y = results [ 1 ] . upper

	WHILE count <= size_of_array ( results ) DO 		     
                    
		IF results [ count ] . upper <> EMPTY THEN
                                            
			PLOT LINE graph
			     FROM last_x , last_y
	     		     TO   count , results [ count ] . upper

			last_x = count 
			last_y = results [ count ] . upper

			last_was_point = TRUE

		ELSE

			last_was_point = FALSE

		ENDIF

		count = count + 1

		IF count <= size_of_array ( results ) THEN

			IF last_was_point THEN

				IF results [ count ] . upper = EMPTY THEN

					PLOT LINE graph
			    		     FROM last_x , last_y
	     				     TO   last_x + 0.5  , last_y

				ENDIF

			ELSEIF results [ count ] .upper <> EMPTY THEN

				last_x = count - 0.5
				last_y = results [ count ] . upper
				
			ENDIF 

		ENDIF                                    

	ENDWHILE
   
	PLOT TEXT graph
	     AT   count - 1.0 , last_y 
	     USING "UL"		

	RETURN ( last_y )                  
                     

ENDROUTINE      

{****************************************************************************}

ROUTINE batch_sqc_setup_lower_limit_chart ( results ,
				            graph   )	

	DECLARE count          ,
                last_x         ,
		last_y         ,
		last_was_point 
                                                                                       
	count  = 1        
	last_x = 0.5
	last_y = results [ 1 ] . lower

	WHILE count <= size_of_array ( results ) DO 		     
                    
		IF results [ count ] . lower <> EMPTY THEN
                                            
			PLOT LINE graph
			     FROM last_x , last_y
	     		     TO   count , results [ count ] . lower

			last_x = count 
			last_y = results [ count ] . lower

			last_was_point = TRUE

		ELSE

			last_was_point = FALSE

		ENDIF

		count = count + 1

		IF count <= size_of_array ( results ) THEN

			IF last_was_point THEN

				IF results [ count ] . lower = EMPTY THEN

					PLOT LINE graph
			    		     FROM last_x , last_y
	     				     TO   last_x + 0.5  , last_y

				ENDIF

			ELSEIF results [ count ] . lower <> EMPTY THEN

				last_x = count - 0.5
				last_y = results [ count ] . lower
				
			ENDIF 

		ENDIF                                    

	ENDWHILE
              
	PLOT TEXT graph
	     AT   count - 1.0, last_y 
	     USING "LL"		
               
	RETURN ( last_y )               
                      
ENDROUTINE      

{****************************************************************************}

ROUTINE batch_sqc_setup_sigma_chart ( VALUE sigma   , 
				      VALUE type    ,	
					    results ,	      
				            graph   )	

	PLOT LINE graph
	     FROM 0 , sigma
	     TO   size_of_array ( graph . xaxis . input ) - 1 , sigma		 

	PLOT TEXT graph
	     AT   size_of_array ( graph . xaxis . input ) - 1 , sigma 
	     USING type			
       
ENDROUTINE      

{****************************************************************************}

ROUTINE batch_sqc_format ( VALUE temp )  

{
*
*
****************************************************************************}

	RETURN ( strip ( number_to_text ( temp , "999999999.999" )))

ENDROUTINE

{****************************************************************************}

ROUTINE batch_sqc_draw_chart (       results      ,
			       VALUE chart        ,	
			       VALUE description  ,
			       VALUE printer      ,
			       VALUE filename     ,
				     graph_prompt ,
				     graph        )		
{                               
*                         
*	
*
*******************************************************************************}

	DECLARE graph_window  ,
		mean          ,              
		sigma         ,
		lqc           ,
		uqc           ,
		graph_height  ,
		graph_width   ,
		range         ,
		hold_grad

	IF blank ( printer ) THEN

		CREATE OBJECT "VGSMGRAPH" , graph

		IF global ( "TERMTYPE" ) = "GUI" THEN 


			graph_window = graph_prompt . start_graph () 

			graph_height = graph_prompt . graph_height
			graph_width  = graph_prompt . graph_width                            

		

		ELSE

			CREATE GRAPHICS WINDOW graph_window
			       HEIGHT 17 { 18 }
			       WIDTH  71 { 78 }
			       BORDER
                                                              

			PASTE GRAPHICS WINDOW graph_window 
		  	    ON LINE 6
    		     	    FROM    2                       

			graph_height = 17
			graph_width  = 68

		ENDIF

	ELSEIF NOT blank ( file_name ) THEN

		SET LOGICAL "$HPGLFILE" TO file_name
		graph . library . output_device  = "$HPGL"
		graph . graph   . output_printer = ""

	ELSE
                                                                   
		graph . library . output_device  = "$HPGL"
		graph . graph   . output_printer = printer
                
	ENDIF                                                        

                                      
	ARRAY graph . xaxis . input                  
	ARRAY graph . yaxis . input

	graph . yaxis . start_position = 0
	graph . yaxis . end_position   = 0


	batch_sqc_setup_result_chart ( results ,                           
				       graph   )	

	mean  =  batch_sqc_get_chart_mean  ( results )
	sigma =  batch_sqc_get_chart_sigma ( results ,
				             mean    )
          
	lqc   = batch_sqc_get_lower_limit ( results ) 
	uqc   = batch_sqc_get_upper_limit ( results )


	IF mean + ( 3 * sigma ) > graph . yaxis . end_position THEN
                                              
		graph . yaxis . end_position = mean + ( 3 * sigma )
                                         
	ENDIF

	IF mean - ( 3 * sigma ) < graph . yaxis . start_position THEN
                               
		graph . yaxis . start_position = mean - ( 3 * sigma )                

	ENDIF

	range = graph . yaxis . end_position - graph . yaxis . start_position

	IF range = 0 THEN

		range = graph . yaxis . end_position

	ENDIF

	graph . yaxis . end_position   = graph . yaxis . end_position  +
					         ( 0.2 * range )

	IF ( graph . yaxis . start_position >= 0 ) AND
           ( range >= graph . yaxis . start_position ) THEN

		graph . yaxis . start_position = 0 

	ELSE

		graph . yaxis . start_position = graph . yaxis . start_position - 
							 ( 0.2 * range )
                
	ENDIF
		                         
                                  
	graph . xaxis . ycoordinate = graph . yaxis . start_position
                                                                    
	graph . xaxis . start_position = 0
	graph . x_annotation . FORMAT = 99 
	graph . x_graduation . start_position = 1
	graph . x_graduation . direction      = 1 

   
	IF ( graph . yaxis . start_position < 0 ) THEN
      
		hold_grad = (( graph . yaxis . end_position + ( graph . yaxis . start_position * -1 ) ) / 10 ) 
   
	ELSEIF( graph . yaxis . start_position > 0 )
      
		hold_grad = ( graph . yaxis . end_position - ( graph . yaxis . start_position ) ) / 10  
   
	ELSE
      
		hold_grad = ( graph . yaxis . end_position ) / 10  
   
	ENDIF

   
	IF hold_grad = 0 THEN
      
		hold_grad = 1
   
	ENDIF

        
	graph . y_graduation . start_position = hold_grad 
	graph . y_graduation . direction      = 1 

	graph . points . character = "*"                             

	IF blank ( printer ) THEN

		DRAW GRAPH graph 
		     IN WINDOW   graph_window
  		     FROM LINE   1
		     TO   LINE   graph_height - 1	
     		     FROM COLUMN 5
		     TO   COLUMN graph_width -  5

               
	ELSE
                                        
		PLOT GRAPH graph 
		     FROM LINE   1       
 		     TO   LINE   18	
		     FROM COLUMN 1
    		     TO   COLUMN 75

	ENDIF                           

	SET DATE FORMAT GLOBAL ( "DEFAULT_DATE_FORMAT" )                
                
	PLOT TEXT graph
	     AT 12,100
             PERCENT		
	     USING strip ( chart ) : " " : 
	     	   strip ( description ) : " " : substring ( now , 1 , 11 )

	RESTORE DATE FORMAT

	graph . graph . style = 1                             
	graph . points . character = ""                             
                                                                
	uqc = batch_sqc_setup_upper_limit_chart ( results ,
				                  graph   )
                                                                    

	lqc = batch_sqc_setup_lower_limit_chart ( results ,
				                  graph   )

	batch_sqc_setup_sigma_chart ( mean + ( 3 * sigma ) , 
				      "UCL"                ,	
				      results              ,	
				      graph                )

	batch_sqc_setup_sigma_chart ( mean - ( 3 * sigma ) ,
				      "LCL"                ,	
				      results              ,	
				      graph                )


	batch_sqc_setup_sigma_chart ( mean    ,             
				      "CL"    ,	
		       		      results ,	
				      graph   )

	PLOT TEXT graph
	     AT 0,100
             PERCENT		
	     USING results [ 1 ] . units
                
 	PLOT TEXT graph
	     AT 12,95
             PERCENT		
	     USING "LCL = " : batch_sqc_format (( mean - ( 3 * sigma )))
 
	PLOT TEXT graph
	     AT 12,90
             PERCENT		
	     USING "UCL = " : batch_sqc_format (( mean + ( 3 * sigma )))

	PLOT TEXT graph
	     AT 40,95
             PERCENT		
	     USING "LQC = " : batch_sqc_format ( lqc )

	PLOT TEXT graph
	     AT 40,90
             PERCENT		
	     USING "UQC = " : batch_sqc_format ( uqc )
                      
  
	PLOT TEXT graph
	     AT 60,95
             PERCENT		
	     USING "CL = " : batch_sqc_format ( mean )

	IF blank ( printer ) THEN

		IF global ( "TERMTYPE" ) <> "GUI" THEN
	                                
			GETKEY

		ENDIF

	ELSE
                {
		PLOT COMPLETE graph
                }
        ENDIF               
                                        
ENDROUTINE			
                        
{******************************************************************************}

ROUTINE batch_sqc_batch_button ( self )

{
*       
*	                                                                 
*                         
*******************************************************************************}

	self . parent_prompt . prompt_objects [ self . parent_prompt .
						active_prompt ] . stop_prompt ()
	
	MENUPROC 813
		 USING self . user_info                                       

ENDROUTINE                                      

{******************************************************************************}

ROUTINE batch_sqc_sample_button ( self )

{
*       
*	                                                                 
*                         
*******************************************************************************}
	                          
	DECLARE old_global

	old_global = GLOBAL ( "LABTABLE_MODE" )

	SET GLOBAL "LABTABLE_MODE" TO TRUE
   
	MENUPROC 47           
		 USING self . user_info                                       
        
	SET GLOBAL "LABTABLE_MODE" TO old_global

ENDROUTINE
                                  
{******************************************************************************}

ROUTINE batch_sqc_result_button ( self )

{
*       
*	                                                                 
*                         
*******************************************************************************}
	                          
	MENUPROC 249 
		 USING self . user_info , "$EXIT"                                       

ENDROUTINE



{******************************************************************************}

ROUTINE batch_sqc_select_point (       self   ,
				 VALUE point  )

{
*       
*  	                                                                 
*                         
*******************************************************************************}

	DECLARE form          ,             
		batch         ,
		sample        ,
		name          ,
		result        ,
		lower         ,
		upper         ,
		prompt_object ,
		buttons       ,                          
		next_button   

	IF point = 0 THEN
		{ Quick EXIT if point is zero - i.e. the user clicks in space }
		RETURN
	ENDIF

	ARRAY buttons
	
	next_button = 1

	batch  = self . user_info [ point ] . batch
	sample = self . user_info [ point ] . id_text
	name   = STRIP ( self . user_info [ point ] . name )
	result = strip ( self . user_info [ point ] . value ) : " " :
		 self . user_info [ point ] . units
	lower  = self . user_info [ point ] . lower
	upper  = self . user_info [ point ] . upper
                                        
	CREATE OBJECT "STD_FORM" , form 

	form . height = 6
	form . width  = 60
	form . column = 5
	form . row    = 10
	form . header = get_user_message ( "BATCH_SQC_POINT_HEADER" , 1 )
	
	form . parent_prompt = self . parent_prompt
        
	form . add_display ( get_user_message ( "BATCH_SQC_POINT_BATCH" ,1 ) ,
			     2                                               ,
			     1                                               ,
			     PROMPT_RENDITION_BOLD + 
			     PROMPT_RENDITION_RAISED                         )
	                      
	form . add_display ( get_user_message ( "BATCH_SQC_POINT_SAMPLE" ,1 ) ,
			     2                                               ,
			     2                                               ,
			     PROMPT_RENDITION_BOLD + 
			     PROMPT_RENDITION_RAISED                         )
				 
	form . add_display ( get_user_message ( "BATCH_SQC_POINT_NAME" ,1 ) ,
			     2                                               ,
			     3                                               ,
			     PROMPT_RENDITION_BOLD + 
			     PROMPT_RENDITION_RAISED                         )

	form . add_display ( get_user_message ( "BATCH_SQC_POINT_RESULT" ,1 ) ,
			     2                                                ,
			     4                                                ,
			     PROMPT_RENDITION_BOLD +  
			     PROMPT_RENDITION_RAISED                          )

	form . add_display ( get_user_message ( "BATCH_SQC_POINT_LOWER" ,1 ) ,
			     2                                               ,
			     5                                               ,
			     PROMPT_RENDITION_BOLD + 
			     PROMPT_RENDITION_RAISED                         )

	form . add_display ( get_user_message ( "BATCH_SQC_POINT_UPPER" ,1 ) ,
			     2                                               ,
			     6                                               ,
			     PROMPT_RENDITION_BOLD + 
			     PROMPT_RENDITION_RAISED                         )

	PROMPT OBJECT prompt_object
		ON LINE 1
		FROM    13
		BROWSE ON batch_header
		WITH ( display_only = TRUE      ,
		       value        = batch     )
                        
	form . add_prompt ( prompt_object )   

	PROMPT OBJECT prompt_object
		ON LINE 2
		FROM    13
		BROWSE ON SAMPLE
		WITH ( display_only = TRUE      ,
		       value        = sample    )

	form . add_prompt ( prompt_object )   

	PROMPT OBJECT prompt_object
		ON LINE 3
		FROM    13
		TO      form . width - 2
		WITH ( display_only = TRUE    ,
		       value        = name    )

	form . add_prompt ( prompt_object )   

	PROMPT OBJECT prompt_object                      
		ON LINE 4
		FROM    13
		TO      form . width - 2
		WITH ( display_only = TRUE      ,
		       value        = result    )
                        
	form . add_prompt ( prompt_object )   

	PROMPT OBJECT prompt_object
		ON LINE 5
		FROM    13
		TO      21
		WITH ( display_only = TRUE      ,
		       value        = lower     )


	form . add_prompt ( prompt_object )


	PROMPT OBJECT prompt_object
		ON LINE 6
		FROM    13
		TO      21
		WITH ( display_only = TRUE      ,
		       value        = upper     )

	form . add_frame ( ""                ,
			   1                 ,
			   1                 ,          
			   form . height     ,
			   form . width      )                                           

	form . add_prompt ( prompt_object )


	next_button = 1                                      
                                                          
	lib_grid_action_button ( buttons                                               ,
			         next_button                                           ,
			         get_user_message ( "BATCH_SQC_POINT_VIEW_BATCH" , 1 ) ,
			        "batch_sqc_batch_button"                               ,
			         global ( "CURRENT_LIBRARY" )                          ,
				 batch                                                 )

	lib_grid_action_button ( buttons                                                ,
			         next_button                                            ,
			         get_user_message ( "BATCH_SQC_POINT_VIEW_SAMPLE" , 1 ) ,
			        "batch_sqc_sample_button"                               ,
			         global ( "CURRENT_LIBRARY" )                           ,
				 sample                                                 )
                                
                        
	lib_grid_action_button ( buttons                                                ,
			         next_button                                            ,
			         get_user_message ( "BATCH_SQC_POINT_VIEW_RESULT" , 1 ) ,
			        "batch_sqc_result_button"                               ,
			         global ( "CURRENT_LIBRARY" )                           ,
				 sample                                                 )
                                                    
	lib_form_add_vertical_buttons ( form     ,
					buttons  )


	form . button_style  = FORM_BUTTON_CLOSE

	form . start_prompt ()

	REPEAT

		form . wait_prompt ()

	UNTIL ( form . get_lastkey () = "EXIT" ) OR
	      ( form . get_lastkey () = "DO"   )

	form . end_prompt ()

	self . remove_selected ()        
                                   
ENDROUTINE

                                 
{******************************************************************************}

ROUTINE batch_sqc_chart_create_form ( form )

{
*       
*	                                                                 
*
*******************************************************************************}

	DECLARE prompt_object

	CREATE OBJECT PROMPT_CLASS_FORM , form     
	                               

	form . row          = 9                     
	form . column       = 4                 
	form . width        = 70               
	form . height       = 11
	form . border       = TRUE
	form . header       = get_user_message ( "BATCH_SQC_CHART_HEADER" , 1 ) 	
	form . button_style = FORM_BUTTON_CLOSE                                  

	form . return_behaviour = FORM_RETURN_STAY
            
                                                  
	PROMPT OBJECT prompt_object
	       CLASS  PROMPT_GRAPH_CLASS  
	       WITH ( column           = 2                            ,
	              row              = 1                            ,
		      width            = form . width - 4             ,
		      height           = 10                           ,
		      vgl_library      = global ( "current_library" ) ,
		      selected_routine = "batch_sqc_select_point"     ,
		      point_character  = "*"                          )	
		
	form . add_prompt ( prompt_object )

	form . add_frame ( ""           ,               
		           1            ,
		           1            ,          
			   11           ,
			   form . width )                  
  
                                                 	
ENDROUTINE              
                                              
{******************************************************************************}
                                                         
ROUTINE batch_sqc_chart_view ( VALUE chart   ,
			       VALUE points  )

{                                
*       Produce a chart either for a given batch or a given chart
*	
*
*******************************************************************************}

	DECLARE form         ,
		results      ,
		description  ,
		graph_object ,
		graph  

	batch_sqc_initialise ()
                            
	IF global ( "TERMTYPE" ) = "GUI" THEN
                      
		batch_sqc_chart_create_form ( form )
                                        
		form . start_prompt ()
         

	ENDIF


 	batch_sqc_get_data ( chart       ,
			     results     ,
			     description ,
			     points      ,
		             FALSE       )		 
                                                  
	IF size_of_array ( results ) > 0 THEN

		batch_sqc_set_to_points ( results , 
				          points  )

		IF global ( "TERMTYPE" ) = "GUI" THEN				

			form . prompt_objects [ 1 ] . user_info = results

			batch_sqc_draw_chart ( results                     ,
					       chart                       ,	
					       description                 ,
					       ""                          ,
					       ""                          ,
					       form . prompt_objects [ 1 ] ,
					       graph_object                )


		ELSE

			batch_sqc_draw_chart ( results       ,
					       chart         ,	
					       description   ,
					       ""            ,
					       ""            ,
					       graph         ,
					       graph_object  )

		ENDIF                                        

	ELSE

		flash_message ( get_user_message ( "BATCH_SQC_NO_POINTS" , 1 ) , TRUE )

	ENDIF

	IF global ( "TERMTYPE" ) = "GUI" THEN

		form . wait_prompt ()
	
		form . end_prompt ()          
                
	ENDIF                     
                                                                 
ENDROUTINE

{******************************************************************************}
                                                         
ROUTINE batch_sqc_chart_print ( VALUE chart   ,
			        VALUE points  ,
				VALUE printer )

{                                
*       Produce a chart either for a given batch or a given chart
*	
*
*******************************************************************************}


	DECLARE results        ,
		description    ,
		graph_object   ,
		graph          ,
		graphics_type  ,
		file_name      ,
		status         ,
		do_plot

	IF blank ( printer ) THEN
                     
		do_plot = prompt_in_window ( "PRINTER"       ,
                                             "Printer"       ,
                                             "Enter Printer" ,
                                              EMPTY          ,
                                              printer        )

	ELSE

		do_plot = TRUE

	ENDIF

	IF do_plot THEN

		graphics_type = SELECT printer . graphics_type
				WHERE  identity = printer 

		CREATE OBJECT "VGSMGRAPH" , graph_object
               

 		batch_sqc_get_data ( chart        ,
				     results      ,
				     description  ,
				     points       ,
			  	     FALSE        )		 
                                                  
		IF size_of_array ( results ) > 0 THEN


		        SET NAME "PRINTER/" : printer

			batch_sqc_set_to_points ( results , 
					          points  )

			IF graphics_type = "POSTSCRIPT" THEN

				file_name = "smp$textreports:" : "BATCH_SQC_" : 
					     strip ( global ( "process_id" ))   : 
        			       	    ".tmp"

				batch_sqc_draw_chart ( results      ,
						       chart        ,	
						       description  ,
						       printer      ,
						       file_name    ,
				  		       graph        ,
					       	       graph_object )


				PLOT COMPLETE graph_object


LITERAL


!G$file_name_______________________________________________________,75 ,37 !G
$ENDLITERAL


				FLUSH_LITERAL

				FILE DELETE file_name , status

			ELSE

				batch_sqc_draw_chart ( results      ,
						       chart        ,	
						       description  ,
						       printer      ,
						       ""           ,
					  	       graph        ,
					       	       graph_object )

				PLOT COMPLETE graph_object


			ENDIF

		ELSE

			flash_message ( get_user_message ( "BATCH_SQC_NO_POINTS" , 1 ) , 
					TRUE                                           )

		ENDIF

	ENDIF
                                                                       
ENDROUTINE

{******************************************************************************}
                                                         
ROUTINE batch_sqc_chart_print_all (       charts  ,
				    VALUE printer )

{                                
*       Print all the charts
*	
*
*******************************************************************************}


	DECLARE results        ,
		description    ,
		graph_object   ,
		graph          ,
		graphics_type  ,
		file_names     ,
		status         ,
		do_plot        ,
		count          ,
		message        ,
	        need_new_page  ,
	        plot_count

	IF blank ( printer ) THEN
                     
		do_plot = prompt_in_window ( "PRINTER"       ,
                                             "Printer"       ,
                                             "Enter Printer" ,
                                              EMPTY          ,
                                              printer        )

	ELSE

		do_plot = TRUE

	ENDIF

	IF do_plot THEN

		ARRAY file_names

		graphics_type = SELECT printer . graphics_type
				WHERE  identity = printer 

		SET NAME "PRINTER/" : printer
               
		need_new_page = FALSE
		plot_count = 0
		count = 1

		WHILE count <= size_of_array ( charts ) DO
		
			IF global ( "TERMTYPE" ) = "GUI" THEN

		                window_set_status ( "Printing " : 
						     charts [ count , 1 ] )

			ENDIF

			CREATE OBJECT "VGSMGRAPH" , graph_object

			file_names [ count ] = "smp$textreports:" : "BATCH_SQC_" : 
						strip ( global ( "process_id" )) :
				               "_" : strip ( count )             : 
        				       ".tmp"

	 		batch_sqc_get_data ( charts [ count , 1 ] ,
					     results              ,
					     description          ,
					     charts [ count , 2 ] ,
			  		     FALSE                )		 
                             
			IF need_new_page THEN

				need_new_page = FALSE
				NEW PAGE

			ENDIF

                   
			IF size_of_array ( results ) > 0 THEN

				plot_count = plot_count + 1
				need_new_page = TRUE

				batch_sqc_set_to_points ( results             , 
						          charts [ count ,2 ] )
	
				IF graphics_type = "POSTSCRIPT" THEN


					batch_sqc_draw_chart ( results              ,
							       charts [ count , 1 ] ,	
							       description          ,
						  	       printer              ,
						               file_names [ count ] ,
				  		               graph                ,
					       	               graph_object         )
	
					PLOT COMPLETE graph_object

LITERAL


!G$file_names__________________________________________________[count],75 ,37 !G
$ENDLITERAL

		
				ELSE

					batch_sqc_draw_chart ( results              ,
							       charts [ count , 1 ] ,	
							       description          ,
							       printer              ,
						               file_names [ count ] ,
						  	       graph                ,
						       	       graph_object         )

					graph_object . device . initialise_graphics ()  
	
					PLOT COMPLETE graph_object

					INCLUDE file_names [ count ] 

				ENDIF

			ELSEIF graphics_type = "POSTSCRIPT" THEN

				need_new_page = TRUE

				message = get_user_message ( "BATCH_SQC_NO_POINTS" , 1 )
				message = message : charts [ count , 1 ]

LITERAL

$message________________________________________________________________________________________________

$ENDLITERAL


			ENDIF

			count = count + 1

		ENDWHILE
	
		IF plot_count > 0 THEN

			FLUSH_LITERAL

		ENDIF

		count = 1 

		WHILE count <= size_of_array ( file_names ) DO

			FILE DELETE file_names [ count ] , status
			
			count = count + 1

		ENDWHILE

	ENDIF

	window_set_status ( "" )
                                                                       
ENDROUTINE

{***************************************************************************************}

ROUTINE batch_sqc_chart ( VALUE option )

{
*
*
****************************************************************************************}
	
	DECLARE form

	batch_sqc_initialise ()

	batch_sqc_prompts_initialisation ()

	create_form_template_form ( form ) 

	form . start_prompt ()
	form . wait_prompt ()
	form . end_prompt ()

ENDROUTINE

{***************************************************************************************}

GLOBAL ROUTINE batch_sqc_charts_for_given ( VALUE identity )

{
*
*
****************************************************************************************}
	
	DECLARE form        ,
		descriptor

	push_file_descriptor ( "BATCH_HEADER" , descriptor )

	batch_sqc_initialise ()

	batch_sqc_prompts_initialisation ()

	create_form_batch_form ( form ) 

	form . prompt_objects [ tag_batch_identity ] . value = identity 

	batch_sqc_set_charts_for_batch ( form ) 

	form . start_prompt ()
	form . wait_prompt ()
	form . end_prompt ()

	pop_file_descriptor ( descriptor )


ENDROUTINE







