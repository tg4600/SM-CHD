{******************************************************************************
*
* Module Name   : $BATCH.RPF
*
* Purpose       : Main interface to the batch utility reports.
*
* Document Ref. :
*
* Specification : SE/T/VGSM320-WORK-BATCH
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}

ENABLE WINDOWS
SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_PROMPT

JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $BATCH_UTILS
JOIN LIBRARY $BATCH_USER
JOIN LIBRARY $BATCH_HEADER
JOIN LIBRARY $BATCH_ENTRY
JOIN LIBRARY $BATCH_TEMPLATE
JOIN LIBRARY $BATCH_TEMPLATE_LIST
JOIN LIBRARY $BATCH_TEMPLATE_ENT
JOIN LIBRARY $BATCH_SCREEN
JOIN LIBRARY $BATCH_USER
JOIN LIBRARY $BATCH_CHROM
JOIN LIBRARY $BATCH_XCHROM
JOIN LIBRARY $BATCH_ATLAS
JOIN LIBRARY $BATCH_PRINT
JOIN LIBRARY $LIB_RE_INTERFACE

JOIN LIBRARY $LIB_GRID

{* CONSTANTS ******************************************************************}


{* VARIABLES ******************************************************************}


{******************************************************************************}

GLOBAL

ROUTINE batch_initialise

{
*	Initialise all the batch utility modules
*
*******************************************************************************}

	IF NOT global ( "LIBRARY_INITIALISED" ) THEN

		batch_utils_initialise ()

		batch_template_initialise ()
		batch_template_list_initialise ()
		batch_template_entry_initialise ()

		batch_header_initialise ()
		batch_entry_initialise  ()

		batch_screen_initialise ()
		batch_user_initialise   ()

		batch_chrom_initialise  ()
		batch_xchrom_initialise ()
		batch_atlas_initialise  ()

		batch_print_initialise  ()

		lib_re_interface_initialise  ()

		SET GLOBAL "LIBRARY_INITIALISED" TO TRUE

	ENDIF

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_create ( VALUE option )

{
*
*
******************************************************************************}

	DECLARE form           ,
		button_list    ,
		position       ,
		template       ,
		valid          ,
	        curr_help      ,
		goto_id_prompt

	ARRAY button_list
	position = 1

	batch_initialise ()

	curr_help = GLOBAL ( "STD_EDITOR_HELP" )
	SET GLOBAL "STD_EDITOR_HELP" TO "$BATCH_CREATE"
	
	IF NOT prompt_in_window ( "BATCH_TMPL_HEADER"                           ,
			           get_user_message ( "BATCH_ENTER_TEMPLATE"  , 1 ) ,
			           get_user_message ( "BATCH_TEMPLATE_HEADER" , 1 ) ,
		                  "$BATCH_CREATE"                                   ,
			           template                                         ) THEN

		RETURN

	ENDIF

	PROMPT OBJECT form
	       CLASS STD_BATCH_SCREEN_HEADER
	       ON LINE 7 FROM 3
	       WITH ( header  = get_user_message ( "BATCH_CREATE_HEADER" , 1 ) ,
		      footer  = get_user_message ( "BATCH_CREATE_FOOTER" , 1 ) )

	form . want_old_identity   = FALSE
	form . want_status_flag    = FALSE

	form . create_standard ( BATCH_SCREEN_CREATE )

	form . do_button = get_user_message ( "BATCH_BUTTON_CREATE" , 1 )

	form . add_grid_buttons ( button_list ,
				  position    )	

	goto_id_prompt = form . set_template ( template )

	form . add_buttons ( button_list )

	form . set_grid_button ( button_list [ 2 ] . prompt_object )
	form . edit_criteria ()
	
        form . select_samples ()
	form . copy_default_values ( "B" )

	form . start_prompt ()

	IF goto_id_prompt THEN
	
		form . set_position ( 1 )

	ENDIF

	REPEAT

		valid = TRUE

		form . wait_prompt  ()

		IF form . get_lastkey () = "DO" THEN

			IF form . valid_batch () THEN

				form . copy_default_values ( "A" )
	
				valid = ( form . build_batch () = EMPTY )
			

			ELSE

				valid = FALSE	

			ENDIF

		ENDIF

	UNTIL valid

	form . end_prompt   ()

	SET GLOBAL "STD_EDITOR_HELP" TO curr_help

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_modify ( VALUE option )

{
*
*
******************************************************************************}

	DECLARE form        ,
		button_list ,
		position    ,
		valid       ,
	        curr_help

	ARRAY button_list
	position = 1

	batch_initialise ()

	curr_help = GLOBAL ( "STD_EDITOR_HELP" )
	SET GLOBAL "STD_EDITOR_HELP" TO "$BATCH_MODIFY"
	
	PROMPT OBJECT form
	       CLASS STD_BATCH_SCREEN_HEADER
	       ON LINE 7 FROM 3
	       WITH ( header  = get_user_message ( "BATCH_MODIFY_HEADER" , 1 ) ,
		      footer  = get_user_message ( "BATCH_MODIFY_FOOTER" , 1 ) )

	form . set_valid_status ( "VC" )
	form . expand_batch = TRUE

	form . create_standard  ( BATCH_SCREEN_MODIFY )

	form . add_grid_buttons ( button_list ,
				  position    )	

	form . add_buttons ( button_list )

	form . set_grid_button ( button_list [ 2 ] . prompt_object )

	form . start_prompt ()

	form . set_position ( 1 )

	REPEAT

		valid = TRUE

		form . wait_prompt  ()


		IF form . get_lastkey () = "DO" THEN

			IF form . valid_batch () THEN

				valid = ( form . update_batch () = EMPTY )
			

			ELSE

				valid = FALSE	

			ENDIF

		ENDIF

	UNTIL valid

	form . end_prompt   ()

	SET GLOBAL "STD_EDITOR_HELP" TO curr_help

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_display ( VALUE option )

{
*
*
******************************************************************************}

	DECLARE form        ,
		button_list ,
		position    ,
	        curr_help

	ARRAY button_list
	position = 1

	batch_initialise ()

	curr_help = GLOBAL ( "STD_EDITOR_HELP" )
	SET GLOBAL "STD_EDITOR_HELP" TO "$BATCH_DISPLAY"
	
	PROMPT OBJECT form
	       CLASS STD_BATCH_SCREEN_HEADER
	       ON LINE 7 FROM 3
	       WITH ( header  = get_user_message ( "BATCH_DISPLAY_HEADER" , 1 ) ,
		      footer  = get_user_message ( "BATCH_DISPLAY_FOOTER" , 1 ) )

	form . set_is_display  ( )


 	form . want_review_flag    = TRUE
	form . insert_calls_review = TRUE
 	form . list_display_only   = TRUE
	form . fields_display_only = TRUE

	form . create_standard ( BATCH_SCREEN_DISPLAY )


	form . add_grid_buttons ( button_list ,
				  position    )	

	form . add_buttons ( button_list )

	form . set_grid_button ( button_list [ 2 ] . prompt_object )

	form . start_prompt ()

	form . set_position ( 1 )

	form . wait_prompt  ()

	form . end_prompt   ()

	SET GLOBAL "STD_EDITOR_HELP" TO curr_help

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_inspect ( VALUE option )

{
*
*
******************************************************************************}

	DECLARE form        ,
		button_list ,
		position    ,
		valid       ,
	        curr_help

	IF global ( "BATCH_INSPECT" ) THEN

		ARRAY button_list
		position = 1

		batch_initialise ()

		curr_help = GLOBAL ( "STD_EDITOR_HELP" )
		SET GLOBAL "STD_EDITOR_HELP" TO "$BATCH_INSPECT"

		PROMPT OBJECT form
		       CLASS STD_BATCH_SCREEN_HEADER
		       ON LINE 7 FROM 3
		       WITH ( header  = get_user_message ( "BATCH_INSPECT_HEADER" , 1 ) ,
			      footer  = get_user_message ( "BATCH_INSPECT_FOOTER" , 1 ) )

		form . set_valid_status ( "C" )

		form . want_review_flag    = TRUE
		form . insert_calls_review = TRUE
		form . list_display_only   = TRUE

		form . create_standard ( BATCH_SCREEN_INSPECT )

		form . add_grid_buttons ( button_list ,
					  position    )	

		form . add_buttons ( button_list )

		form . set_grid_button ( button_list [ 2 ] . prompt_object )

		form . start_prompt ()

		form . set_position ( 1 )

		REPEAT

			valid = TRUE

			form . wait_prompt  ()

			IF form . get_lastkey () = "DO" THEN

				IF form . valid_batch () THEN

					form . set_status ( "I" )


				ELSE

					valid = FALSE	

				ENDIF

			ENDIF

		UNTIL valid

		form . end_prompt   ()

		SET GLOBAL "STD_EDITOR_HELP" TO curr_help

	ELSE

		flash_message ( GET_USER_MESSAGE ( "BATCH_NO_INSPECT", 1 ), TRUE )

	ENDIF

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_authorise ( VALUE option )

{
*
*
******************************************************************************}

	DECLARE form        ,
		button_list ,
		position    ,
		valid       ,
	        curr_help

	ARRAY button_list
	position = 1

	batch_initialise ()

	curr_help = GLOBAL ( "STD_EDITOR_HELP" )
	SET GLOBAL "STD_EDITOR_HELP" TO "$BATCH_AUTHORISE"
	
	PROMPT OBJECT form
	       CLASS STD_BATCH_SCREEN_HEADER
	       ON LINE 7 FROM 3
	       WITH ( header  = get_user_message ( "BATCH_AUTHORISE_HEADER" , 1 ) ,
		      footer  = get_user_message ( "BATCH_AUTHORISE_FOOTER" , 1 ) )

	IF global ( "BATCH_INSPECT" ) THEN

		form . set_valid_status ( "I" )

	ELSE

		form . set_valid_status ( "C" )

	ENDIF

	form . want_review_flag    = TRUE
	form . insert_calls_review = TRUE
	form . list_display_only   = TRUE

	form . create_standard ( BATCH_SCREEN_AUTHORISE )

	form . add_grid_buttons ( button_list ,
				  position    )	

	form . add_buttons ( button_list )

	form . set_grid_button ( button_list [ 2 ] . prompt_object )

	form . start_prompt ()

	form . set_position ( 1 )

	REPEAT

		valid = TRUE

		form . wait_prompt  ()


		IF form . get_lastkey () = "DO" THEN

			IF form . valid_batch () THEN

				form . set_status ( "A" )
			

			ELSE

				valid = FALSE	

			ENDIF

		ENDIF

	UNTIL valid

	form . end_prompt   ()

	SET GLOBAL "STD_EDITOR_HELP" TO curr_help

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_cancel ( VALUE option )

{
*
*
******************************************************************************}

	DECLARE form        ,
		button_list ,
		position    ,
	        curr_help

	ARRAY button_list
	position = 1

	batch_initialise ()

	curr_help = GLOBAL ( "STD_EDITOR_HELP" )
	SET GLOBAL "STD_EDITOR_HELP" TO "$BATCH_CANCEL"
	
	PROMPT OBJECT form
	       CLASS STD_BATCH_SCREEN_HEADER
	       ON LINE 7 FROM 3
	       WITH ( header  = get_user_message ( "BATCH_CANCEL_HEADER" , 1 ) ,
		      footer  = get_user_message ( "BATCH_CANCEL_FOOTER" , 1 ) )

	form . set_valid_status ( "VC" )

	form . list_display_only   = TRUE
	form . fields_display_only = TRUE

	form . create_standard ( BATCH_SCREEN_CANCEL )

	form . add_grid_buttons ( button_list ,
				  position    )	

	form . add_buttons ( button_list )

	form . set_grid_button ( button_list [ 2 ] . prompt_object )

	form . start_prompt ()

	form . set_position ( 1 )

	form . wait_prompt  ()

	IF form . get_lastkey () = "DO" THEN

		form . set_status ( "X" )

	ENDIF

	form . end_prompt   ()

	SET GLOBAL "STD_EDITOR_HELP" TO curr_help

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_reactivate ( VALUE option )

{
*
*
******************************************************************************}

	DECLARE form        ,
		button_list ,
		position    ,
	        curr_help

	ARRAY button_list
	position = 1

	batch_initialise ()

	curr_help = GLOBAL ( "STD_EDITOR_HELP" )
	SET GLOBAL "STD_EDITOR_HELP" TO "$BATCH_REACTIVATE"
	
	PROMPT OBJECT form
	       CLASS STD_BATCH_SCREEN_HEADER
	       ON LINE 7 FROM 3
	       WITH ( header  = get_user_message ( "BATCH_REACTIVATE_HEADER" , 1 ) ,
		      footer  = get_user_message ( "BATCH_REACTIVATE_FOOTER" , 1 ) )

	form . set_valid_status ( "IA" )

	form . list_display_only   = TRUE
	form . fields_display_only = TRUE

	form . create_standard ( BATCH_SCREEN_REACTIVATE )

	form . add_grid_buttons ( button_list ,
				  position    )	

	form . add_buttons ( button_list )

	form . set_grid_button ( button_list [ 2 ] . prompt_object )

	form . start_prompt ()

	form . set_position ( 1 )

	form . wait_prompt  ()

	IF form . get_lastkey () = "DO" THEN

		form . set_status ( "C" )

	ENDIF

	form . end_prompt   ()

	SET GLOBAL "STD_EDITOR_HELP" TO curr_help

ENDROUTINE


{******************************************************************************}

GLOBAL

ROUTINE batch_download ( VALUE option )

{
*
*
******************************************************************************}

	DECLARE batch_name ,
	        batch      ,
	        message    ,
	        curr_help  ,
			cds

	batch_initialise ()

	curr_help = GLOBAL ( "STD_EDITOR_HELP" )
	SET GLOBAL "STD_EDITOR_HELP" TO "$BATCH_DOWNLOAD"
	
	cds = GLOBAL ( "CHROMATOGRAPHY_SOFTWARE" )

	IF ( cds = "XCHROM"    )
	OR ( cds = "XCHROMV21" ) THEN

		message = GET_USER_MESSAGE ( "BATCH_DOWNLOAD_HEADER_XCHROM", 1 )

	ELSEIF ( cds = "MULTICHROM" ) THEN

		message = GET_USER_MESSAGE ( "BATCH_DOWNLOAD_HEADER_CHROM", 1 )

	ELSE
	
		message = GET_USER_MESSAGE ( "BATCH_DOWNLOAD_HEADER_ATLAS", 1 )
		
	ENDIF

	IF prompt_in_window ( "BATCH_HEADER"                                    ,
			       get_user_message ( "BATCH_ENTER_DOWNLOAD"  , 1 ) ,
			       message                                          ,
		              "$BATCH_DOWNLOAD"                                 ,
			       batch_name                                       ) THEN

		CREATE OBJECT STD_BATCH_HEADER_BASE , batch

		batch . read_for_display ( batch_name )
		
		message = batch . download ()

		IF message <> EMPTY THEN

			flash_message ( message , TRUE )

		ENDIF

	ENDIF

	SET GLOBAL "STD_EDITOR_HELP" TO curr_help

ENDROUTINE


{******************************************************************************}

GLOBAL

ROUTINE batch_upload ( VALUE option )

{
*
*
******************************************************************************}

	DECLARE form        ,
	        button_list ,
	        message     ,
	        position    ,
	        curr_help   ,
	        cds

	ARRAY button_list
	position = 1

	batch_initialise ()

	curr_help = GLOBAL ( "STD_EDITOR_HELP" )
	SET GLOBAL "STD_EDITOR_HELP" TO "$BATCH_UPLOAD"

	cds = GLOBAL ( "CHROMATOGRAPHY_SOFTWARE" )

	IF ( cds = "XCHROM"    )
	OR ( cds = "XCHROMV21" ) THEN

		message = GET_USER_MESSAGE ( "BATCH_UPLOAD_HEADER_XCHROM", 1 )

	ELSEIF ( cds = "ATLAS" ) THEN

		message = GET_USER_MESSAGE ( "BATCH_UPLOAD_HEADER_ATLAS", 1 )

	ELSE

		message = GET_USER_MESSAGE ( "BATCH_UPLOAD_HEADER_CHROM", 1 )

	ENDIF
	
	PROMPT OBJECT form
	       CLASS STD_BATCH_SCREEN_HEADER
	       ON LINE 7 FROM 3
 	       WITH ( header  = message                                        ,
		      footer  = get_user_message ( "BATCH_UPLOAD_FOOTER" , 1 ) )

	form . set_valid_status ( "VC" )
	form . list_display_only   = TRUE
	form . fields_display_only = TRUE

	form . create_standard ( BATCH_SCREEN_UPLOAD )

	form . create_upload_grid ()

	form . add_grid_buttons ( button_list ,
				  position    )	

	form . add_buttons ( button_list )

	form . set_grid_button ( button_list [ 2 ] . prompt_object )

	form . start_prompt ()

	form . set_position ( 1 )

	form . wait_prompt  ()

	IF form . get_lastkey () = "DO" THEN
	
		form . assign_selected_results ()
		form . update_results ()

	ENDIF

	form . end_prompt   ()

	SET GLOBAL "STD_EDITOR_HELP" TO curr_help

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_worksheet ( VALUE option )

{
*
*
******************************************************************************}

	batch_initialise ()

	batch_print_worksheet ( option )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_report ( VALUE option )

{
*
*
******************************************************************************}

	batch_initialise ()

	batch_print_report ( option )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_job_report ( VALUE option )

{
*
*
******************************************************************************}

	batch_initialise ()

	batch_print_job_report ( option )

ENDROUTINE


{******************************************************************************}

GLOBAL

ROUTINE batch_commit_given ( VALUE batch_name )

{
*
*
******************************************************************************}

	DECLARE batch   ,
		message

	batch_initialise ()

	CREATE OBJECT STD_BATCH_HEADER_BASE , batch

	batch . read_for_modify ( batch_name ,
				  FALSE      )
		
	message = batch . commit ()
        
	RETURN ( message )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_commit ( VALUE option )

{
*
*
******************************************************************************}

	DECLARE batch_name ,
		message    
                         
	SET BATCH_STATUS "XA"

	IF prompt_in_window ( "BATCH_HEADER"                                  ,
			       get_user_message ( "BATCH_ENTER_COMMIT"  , 1 ) ,
			       get_user_message ( "BATCH_COMMIT_HEADER"  , 1 ) ,
		              "$BATCH_COMMIT"                                 ,
			       batch_name                                     ) THEN

		message = batch_commit_given ( batch_name )

		IF message <> EMPTY THEN

			flash_message ( message , TRUE )

		ENDIF

	ENDIF


ENDROUTINE

