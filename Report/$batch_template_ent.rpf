{******************************************************************************
*
* Module Name   : $BATCH_TEMPLATE_ENTRY.RPF
*
* Purpose       : Maintain the batch_template_entry class
*
* Document Ref. : 
*
* Specification : SE/T/VGSM320-WORK-BATCH
*
* Portability   : Not Checked
*
* Re-entrant    : 
*
*******************************************************************************}

ENABLE WINDOWS
SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_GENERAL

JOIN LIBRARY $BATCH_USER
JOIN LIBRARY $BATCH_UTILS

{* CONSTANTS ******************************************************************}



{* VARIABLES ******************************************************************}

DECLARE entry_types ,
	type_choose 

{******************************************************************************}

GLOBAL

ROUTINE batch_template_entry_initialise

{
*	Initialise the batch_template_entry module.
*
*******************************************************************************}

	IF NOT global ( "LIBRARY_INITIALISED" ) THEN

		batch_template_entry_define_class ()
		batch_template_entry_define_types ()

		SET GLOBAL "LIBRARY_INITIALISED" TO TRUE

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_define_class 

{
*	Define the batch_template_entry class.
*
*******************************************************************************}

	DEFINE CLASS STD_BATCH_TEMPLATE_TYPE

		INHERIT "STD_COLLECTED"

		PROPERTIES "NAME"              ,

			   "WANT_LIMIT"        ,
			   "WANT_STANDARD"     ,
			   "WANT_COMP_LIST"    ,	
			   "WANT_PARENT"       ,
			   "WANT_REPEAT"       ,

			   "USER_NAME"         ,
                           "BATCH_CLASS"       ,
			   "PARENT_CLASS"      ,
			   "STANDARD_TYPE"     ,		
				
			   "IS_EMPTY"          ,
			   "IS_NEWSLOT"        ,
			   "IS_SECTION_HEADER" ,
			   "PUT_IN_DATABASE"   ,	

			   "USER_INFO"		

		INITIALISATION			
			
	END CLASS

	DEFINE CLASS STD_BATCH_TEMPLATE_ENTRY

		PROPERTIES "LIMIT"         ,
			   "STANDARD"      ,
			   "COMP_LIST"     ,	
			   "PARENT"        ,
			   "REPEAT"        ,

			   "TYPE"	   ,
			   "SECTION"       ,
			   "TITLE"         ,

			   "USER_INFO"


		ACTIONS    "WANT_LIMIT"          ,
			   "WANT_STANDARD"       ,
			   "WANT_COMP_LIST"      ,	
			   "WANT_PARENT"         ,
			   "WANT_REPEAT"         ,
	                                       
			   "GET_USER_NAME"       ,
			   "GET_CLASS"           ,
			   "GET_TYPE"            ,
			   "GET_SECTION"         ,
			   "GET_REPEAT"          , 
			   "GET_PARENT"          ,
			   "GET_PARENT_CLASS"    ,	 
			   "GET_STANDARD"        ,				
			   "GET_COMPONENT_LIST"  ,
			   "GET_LIMIT"           ,
			   "GET_TITLE"           ,
			   "SET_TITLE"           ,

                            
			   "IS_THIS_YOUR_PARENT" ,
			   "HAS_PARENT"          ,
			   "ALTER_PARENT"        ,
			   "CAN_INSERT"          ,
			   "CAN_REMOVE"          ,
			   "ONLY_NEXT_TO_END"    ,		
			   "IS_EMPTY"            ,
			   "IS_NEW_SLOT"         ,
			   "IS_SECTION_HEADER"   ,
			   "PUT_IN_DATABASE"     ,	
			   "IS_REPEAT_ELEMENT"   ,	

                           "IS_TYPE"             ,
			   "SET_TYPE"            ,
			   "INITIALISE"          ,
                                              
			   "GET_PARENT_INCREMENT" ,
			   "READ"	          ,
			   "UPDATE"	          ,
			   "VALIDATE"             ,	

			   "SET_UP_BATCH"      

		INITIALISATION

	END CLASS

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_type_class_initialisation ( self )    

{
*
*
*******************************************************************************}

	self . want_limit        = FALSE
	self . want_standard     = FALSE
	self . want_comp_list    = FALSE
	self . want_parent       = FALSE
	self . want_repeat       = FALSE

	self . is_empty          = FALSE
	self . is_newslot        = FALSE
	self . is_section_header = FALSE
	self . put_in_database   = TRUE
	self . standard_type     = ""
	
ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_empty ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name              = BATCH_ENTRY_EMPTY
	entry_type . user_name         = " "
	entry_type . batch_class       = EMPTY
	entry_type . is_empty          = TRUE
	entry_type . is_newslot        = FALSE
	entry_type . is_section_header = FALSE
	entry_type . put_in_database   = FALSE
	entry_type . parent_class      = EMPTY

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_new_slot ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name              = BATCH_ENTRY_NEWSLOT
	entry_type . user_name         = " "
	entry_type . batch_class       = EMPTY
	entry_type . is_newslot        = TRUE
	entry_type . is_section_header = FALSE
	entry_type . put_in_database   = FALSE

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_section_start ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name              = BATCH_ENTRY_SECTION_START
	entry_type . user_name         = get_user_message ( "BATCH_TEMP_ENT_START" ,1 )
	entry_type . batch_class       = EMPTY
	entry_type . is_section_header = TRUE
	entry_type . put_in_database   = FALSE

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_section_repeat ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name              = BATCH_ENTRY_SECTION_REPEAT
	entry_type . user_name         = get_user_message ( "BATCH_TEMP_ENT_REPEAT" ,1 )
	entry_type . batch_class       = EMPTY
	entry_type . is_section_header = TRUE
	entry_type . put_in_database   = TRUE
	entry_type . want_repeat       = TRUE

	collection . add ( entry_type )

ENDROUTINE
{******************************************************************************}

ROUTINE batch_template_entry_type_section_trail ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name              = BATCH_ENTRY_SECTION_TRAIL
	entry_type . user_name         = get_user_message ( "BATCH_TEMP_ENT_TRAIL" ,1 )
	entry_type . batch_class       = EMPTY
	entry_type . is_section_header = TRUE
	entry_type . put_in_database   = FALSE

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_sample ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            = BATCH_ENTRY_SAMPLE
	entry_type . want_repeat     = TRUE 
	entry_type . user_name       = get_user_message ( "BATCH_TEMP_ENT_SAMPLE" ,1 )
	entry_type . batch_class     = STD_BATCH_ENTRY_SAMPLE

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_control ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            = BATCH_ENTRY_CONTROL
	entry_type . want_limit      = TRUE
	entry_type . want_standard   = TRUE
	entry_type . want_comp_list  = TRUE
	entry_type . want_repeat     = TRUE
	entry_type . user_name       = get_user_message ( "BATCH_TEMP_ENT_CONTROL" ,1 )
	entry_type . standard_type   = "CONTROL"
	entry_type . batch_class     = STD_BATCH_ENTRY_CONTROL

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_standard ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            = BATCH_ENTRY_STANDARD
	entry_type . want_limit      = TRUE
	entry_type . want_standard   = TRUE
	entry_type . want_comp_list  = TRUE
	entry_type . want_repeat     = TRUE
	entry_type . user_name       = get_user_message ( "BATCH_TEMP_ENT_STANDARD" ,1 )
	entry_type . batch_class     = STD_BATCH_ENTRY_STANDARD

	collection . add ( entry_type )

ENDROUTINE
{******************************************************************************}

ROUTINE batch_template_entry_type_blank ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            =  BATCH_ENTRY_BLANK
	entry_type . want_limit      =  TRUE
	entry_type . want_standard   =  FALSE
	entry_type . want_comp_list  =  TRUE
	entry_type . want_repeat     =  TRUE
	entry_type . user_name       =  get_user_message ( "BATCH_TEMP_ENT_BLANK" ,1 )
	entry_type . standard_type   = "BLANK"
	entry_type . batch_class     =  STD_BATCH_ENTRY_BLANK

	collection . add ( entry_type )

ENDROUTINE


{******************************************************************************}

ROUTINE batch_template_entry_type_wash ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            = BATCH_ENTRY_WASH
	entry_type . want_limit      = FALSE
	entry_type . want_standard   = FALSE
	entry_type . want_comp_list  = FALSE
	entry_type . want_repeat     = TRUE
	entry_type . user_name       = get_user_message ( "BATCH_TEMP_ENT_WASH" ,1 )
	entry_type . batch_class     = STD_BATCH_ENTRY_WASH

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_ms ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            = BATCH_ENTRY_MS
	entry_type . want_limit      = TRUE
	entry_type . want_standard   = TRUE
	entry_type . want_comp_list  = TRUE
	entry_type . want_repeat     = FALSE
	entry_type . want_parent     = TRUE
	entry_type . parent_class    = BATCH_ENTRY_SAMPLE
	entry_type . user_name       = get_user_message ( "BATCH_TEMP_ENT_MS" ,1 )
	entry_type . batch_class     = STD_BATCH_ENTRY_MS

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_msd ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            = BATCH_ENTRY_MSD
	entry_type . want_limit      = TRUE
	entry_type . want_standard   = TRUE
	entry_type . want_comp_list  = TRUE
	entry_type . want_repeat     = FALSE
	entry_type . want_parent     = TRUE
	entry_type . parent_class    = BATCH_ENTRY_MS
	entry_type . user_name       = get_user_message ( "BATCH_TEMP_ENT_MSD" ,1 )
	entry_type . batch_class     = STD_BATCH_ENTRY_MSD

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_cal_std ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            =  BATCH_ENTRY_CAL_STD
	entry_type . want_limit      =  TRUE
	entry_type . want_standard   =  TRUE
	entry_type . want_comp_list  =  TRUE
	entry_type . want_repeat     =  TRUE
	entry_type . user_name       =  get_user_message ( "BATCH_TEMP_ENT_CAL_STD" ,1 )
	entry_type . standard_type   = "CALIB"
	entry_type . batch_class     =  STD_BATCH_ENTRY_CAL_STD

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_cal_blank ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            =  BATCH_ENTRY_CAL_BLANK
	entry_type . want_limit      =  TRUE
	entry_type . want_standard   =  TRUE
	entry_type . want_comp_list  =  TRUE
	entry_type . want_repeat     =  TRUE
	entry_type . user_name       =  get_user_message ( "BATCH_TEMP_ENT_CAL_BLANK" ,1 )
	entry_type . standard_type   = "CALIB"
	entry_type . batch_class     =  STD_BATCH_ENTRY_CAL_BLANK

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_blank_chk ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            =  BATCH_ENTRY_BLANK_CHK
	entry_type . want_limit      =  TRUE
	entry_type . want_standard   =  TRUE
	entry_type . want_comp_list  =  TRUE
	entry_type . want_repeat     =  TRUE
	entry_type . user_name       =  get_user_message ( "BATCH_TEMP_ENT_BLANK_CHK" ,1 )
	entry_type . standard_type   = "BLANK"
	entry_type . batch_class     =  STD_BATCH_ENTRY_BLANK_CHK

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_meth_blank ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            =  BATCH_ENTRY_METH_BLANK
	entry_type . want_limit      =  TRUE
	entry_type . want_standard   =  TRUE
	entry_type . want_comp_list  =  TRUE
	entry_type . want_repeat     =  TRUE
	entry_type . user_name       =  get_user_message ("BATCH_TEMP_ENT_METH_BLANK" ,1 )
	entry_type . standard_type   = "BLANK"
	entry_type . batch_class     =  STD_BATCH_ENTRY_METH_BLANK

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_cal_chk ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            =  BATCH_ENTRY_CAL_CHK
	entry_type . want_limit      =  TRUE
	entry_type . want_standard   =  TRUE
	entry_type . want_comp_list  =  TRUE
	entry_type . want_repeat     =  TRUE
	entry_type . user_name       =  get_user_message ( "BATCH_TEMP_ENT_CAL_CHK" ,1 )
	entry_type . standard_type   = "CALIB"
	entry_type . batch_class     =  STD_BATCH_ENTRY_CAL_CHK

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_indep_chk ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            =  BATCH_ENTRY_INDEP_CHK
	entry_type . want_limit      =  TRUE
	entry_type . want_standard   =  TRUE
	entry_type . want_comp_list  =  TRUE
	entry_type . want_repeat     =  TRUE
	entry_type . user_name       =  get_user_message ( "BATCH_TEMP_ENT_INDEP_CHK" ,1 )
	entry_type . standard_type   = "CONTROL"
	entry_type . batch_class     =  STD_BATCH_ENTRY_INDEP_CHK

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_init_chk ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            =  BATCH_ENTRY_INIT_CHK
	entry_type . want_limit      =  TRUE
	entry_type . want_standard   =  TRUE
	entry_type . want_comp_list  =  TRUE
	entry_type . want_repeat     =  TRUE
	entry_type . user_name       =  get_user_message ( "BATCH_TEMP_ENT_INIT_CHK" ,1 )
	entry_type . standard_type   = "CONTROL"
	entry_type . batch_class     =  STD_BATCH_ENTRY_INIT_CHK

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_interf_chk ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            =  BATCH_ENTRY_INTERF_CHK
	entry_type . want_limit      =  TRUE
	entry_type . want_standard   =  TRUE
	entry_type . want_comp_list  =  TRUE
	entry_type . want_repeat     =  TRUE
	entry_type . user_name       =  get_user_message ( "BATCH_TEMP_ENT_INTERF_CHK" ,1 )
	entry_type . standard_type   = "CONTROL"
	entry_type . batch_class     =  STD_BATCH_ENTRY_INTERF_CHK

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_type_duplicate ( collection )    

{
*
*
*******************************************************************************}

	DECLARE entry_type

	CREATE OBJECT STD_BATCH_TEMPLATE_TYPE , entry_type 

	entry_type . name            = BATCH_ENTRY_DUPLICATE
	entry_type . want_limit      = TRUE
	entry_type . want_standard   = FALSE
	entry_type . want_comp_list  = TRUE
	entry_type . want_repeat     = TRUE
	entry_type . want_parent     = TRUE
	entry_type . parent_class    = BATCH_ENTRY_SAMPLE
	entry_type . user_name       = get_user_message ( "BATCH_TEMP_ENT_DUPLICATE" ,1 )
	entry_type . batch_class     = STD_BATCH_ENTRY_DUPLICATE

	collection . add ( entry_type )

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_define_types 


{
*	Define all the base entry types.
*
*******************************************************************************}


	CREATE OBJECT "STD_COLLECTION" , entry_types 

	entry_types . add_index ( "NAME"      ) 
	entry_types . add_index ( "USER_NAME" ) 

	batch_template_entry_type_empty           ( entry_types )
	batch_template_entry_type_new_slot        ( entry_types )
	batch_template_entry_type_section_start   ( entry_types )
	batch_template_entry_type_section_repeat  ( entry_types )
	batch_template_entry_type_section_trail   ( entry_types )

	batch_template_entry_type_sample          ( entry_types )
	batch_template_entry_type_control         ( entry_types )
	batch_template_entry_type_standard        ( entry_types )
	batch_template_entry_type_blank           ( entry_types )
	batch_template_entry_type_wash            ( entry_types )
	batch_template_entry_type_ms              ( entry_types )
	batch_template_entry_type_msd             ( entry_types )
	batch_template_entry_type_cal_std         ( entry_types )
	batch_template_entry_type_cal_blank       ( entry_types )
	batch_template_entry_type_blank_chk       ( entry_types )
	batch_template_entry_type_meth_blank      ( entry_types )
	batch_template_entry_type_cal_chk         ( entry_types )
	batch_template_entry_type_indep_chk       ( entry_types )
	batch_template_entry_type_init_chk        ( entry_types )
	batch_template_entry_type_interf_chk      ( entry_types )
	batch_template_entry_type_duplicate       ( entry_types )
		
ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_class_initialisation ( self )

{
*
*******************************************************************************}

	self . limit     = ""
	self . standard  = ""
	self . repeat    = 1
	self . parent    = -1
	self . comp_list = ""

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_want_limit ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . want_limit )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_want_standard ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . want_standard )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_want_comp_list ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . want_comp_list )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_want_parent ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . want_parent )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_want_repeat ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . want_repeat )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_get_user_name ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . user_name )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_get_class ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . batch_class )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_get_type ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . name )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_get_section ( self )

{
*
*******************************************************************************}

	RETURN ( self . section )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_get_parent ( self )

{
*
*******************************************************************************}

	RETURN ( self . parent )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_get_parent_class ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . parent_class )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_get_repeat ( self )

{
*
*******************************************************************************}

	RETURN ( self . repeat )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_get_standard ( self )

{
*
*******************************************************************************}

	RETURN ( self . standard )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_get_component_list ( self )

{
*
*******************************************************************************}

	RETURN ( self . comp_list )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_get_limit ( self )

{
*
*******************************************************************************}

	RETURN ( self . limit )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_set_title (       self  ,
						    VALUE title )

{
*
*******************************************************************************}

	self . title = title

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_get_title ( self )

{
*
*******************************************************************************}

	RETURN ( self . title )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_has_parent ( self )

{
*
*
*******************************************************************************}
	
	RETURN ( self . parent <> 0 )	

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_is_this_your_parent (       self   ,
							      VALUE parent )	

{
*
*
*******************************************************************************}
	
	RETURN ( self . parent = parent )	

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_alter_parent (       self     ,
						       VALUE alter_by )	

{
*
*******************************************************************************}

	DECLARE altered

	IF self . has_parent () THEN

		altered       = TRUE
		self . parent = self . parent + alter_by
		
	ELSE

		altered = FALSE

	ENDIF

	RETURN ( altered )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_can_insert ( self )

{
*
*******************************************************************************}

	RETURN ( NOT self . type . is_section_header )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_put_in_database ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . put_in_database )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_is_section_header ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . is_section_header )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_is_empty ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . is_empty )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_is_new_slot ( self )

{
*
*******************************************************************************}

	RETURN ( self . type . is_new_slot )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_is_repeat_elememt ( self )

{
*
*******************************************************************************}

	RETURN (( self . type . is_section_header                 ) AND
		( self . section = BATCH_TEMPLATE_REPEAT_SECTION ))

ENDROUTINE


{******************************************************************************}

ROUTINE std_batch_template_entry_action_can_remove ( self )

{
*
*******************************************************************************}

	RETURN ( NOT (( self . type . is_new_slot         ) OR
		      ( self . type . is_section_header )))

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_is_type (       self ,
						  VALUE	type )

{
*
*******************************************************************************}

	RETURN ( self . type . name = type )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_template_entry_get_type ( VALUE required_type )	

{
*
*******************************************************************************}

	DECLARE type

	type = entry_types . get_by_index ( "NAME"         ,
					     required_type )

	RETURN ( type )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_set_type (       self          ,
						   VALUE required_type )	

{
*
*******************************************************************************}

	DECLARE old_standard_type

	IF variable_is_assigned ( self . type ) THEN
		old_standard_type = self . type . standard_type
	ELSE
		old_standard_type = " "
	ENDIF

	self . type = entry_types . get_by_index ( "NAME"         ,
					            required_type )

	IF self . type = EMPTY THEN

		self . standard = " "

	ELSEIF ( NOT self . type . want_standard ) THEN

		self . standard = " "

	ELSEIF ( self . type . standard_type <> old_standard_type ) AND
	       ( self . type . standard_type <> " "               ) THEN

		self . standard = " "

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_initialise (       self    ,  
						     VALUE type    ,
						     VALUE section )		

{
*
*******************************************************************************}

	self . set_type ( type )
	self . section = section

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_get_parent_increment (       self ,
							       VALUE is_runtime )	

{
*	Get the value to change the parent pointer by.
*
*******************************************************************************}

	DECLARE answer

	IF self . section = BATCH_TEMPLATE_START_SECTION THEN

		answer = 1

	ELSEIF self . section = BATCH_TEMPLATE_REPEAT_SECTION THEN

		IF is_runtime THEN

			answer = 3 { START SEQ HEADER  ,
				     START SEQ BLANK   ,
				     REPEAT SEQ HEADER }	
					

		ELSE

			answer = 2 { START SEQ HEADER ,
				     START SEQ BLANK  }	

		ENDIF

	ELSE

		IF is_runtime THEN
	
			answer = 5

		ELSE

			answer = 4

		ENDIF

	ENDIF

	RETURN ( answer )

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_read ( self )

{
*	Read an element from the currently selected database row
*
*******************************************************************************}

	self . initialise ( SELECT batch_tmpl_entry . type    ,
			    SELECT batch_tmpl_entry . section )	

        self . limit     = SELECT batch_tmpl_entry . limit
        self . standard  = SELECT batch_tmpl_entry . standard
        self . repeat    = SELECT batch_tmpl_entry . repeat_count
        self . parent    = SELECT batch_tmpl_entry . parent
        self . comp_list = SELECT batch_tmpl_entry . component_list

	IF self . parent > 0 THEN

		self . parent = self . parent + self . get_parent_increment ( FALSE )

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_validate ( self    ,
						   message )

{
*	Validate the entry.
*
*******************************************************************************}

	DECLARE valid

	valid = TRUE 

	IF self . type . want_standard  THEN

		IF blank ( self . standard ) THEN

			valid   = FALSE
			message = get_user_message ( "BATCH_TEMP_ENT_NO_STANDARD" , 1 )

		ENDIF

	ENDIF

	IF self . type . want_parent  THEN

		IF self . parent = 0 THEN

			valid   = FALSE
			message = get_user_message ( "BATCH_TEMP_ENT_NO_PARENT" , 1 )

		ENDIF

	ENDIF

        RETURN ( valid )
	
ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_update ( self )

{
*	Update an element into the currently selected database row
*
*******************************************************************************}

	IF self . parent > 0 THEN

		self . parent = self . parent - self . get_parent_increment ( FALSE )

	ENDIF

	ASSIGN batch_tmpl_entry . type            =  self . get_type ()
	ASSIGN batch_tmpl_entry . repeat_count    =  self . repeat
	ASSIGN batch_tmpl_entry . parent          =  self . parent 
	ASSIGN batch_tmpl_entry . standard        =  self . standard
	ASSIGN batch_tmpl_entry . limit           =  self . limit
	ASSIGN batch_tmpl_entry . section         =  self . section
	ASSIGN batch_tmpl_entry . component_list  =  self . comp_list

ENDROUTINE

{******************************************************************************}
{******************************************************************************}

ROUTINE batch_template_entry_choose_array 

{
*	Build a choose array if it hasn't already been done
*
******************************************************************************}

	DECLARE count  ,
		pos    ,
		entry

	IF NOT variable_is_assigned ( type_choose ) THEN

		ARRAY type_choose ARRAY_SIZE ( 0 , 2 )

		count = 1
		pos   = 1

		WHILE count <= entry_types . size () DO

			entry = entry_types . get_by_index_number ("USER_NAME",
			                                            count     )

			IF NOT (( entry . is_section_header    )  OR 
				( entry . is_new_slot         )) THEN 

				type_choose [ pos , 1 ] = entry . user_name
				type_choose [ pos , 2 ] = entry . name
		
				pos = pos + 1

			ENDIF

			count = count + 1

		ENDWHILE

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_prompt_type (       element        ,
						 grid           ,
                                           VALUE cell_column    ,
		                           VALUE cell_row       ,
		                           VALUE column         ,
		                           VALUE row            ,
			                   VALUE cell_width     ,
			                         screen         ,
					   VALUE is_display     )

{
*	Prompt for an element type - using a global choose array.
*
*
*
*******************************************************************************}

	DECLARE type_name     ,
		old_type_name 
		

	IF is_display THEN

		type_name = element . get_user_name ()

		DISPLAY type_name
			ON LINE   row
			FROM      column
			TO        column + cell_width - 1
			BOLD   =  element . is_section_header ()
			IN WINDOW screen


	ELSEIF element . can_insert () THEN

		type_name      = element . get_type ()
		old_type_name  = type_name

		batch_template_entry_choose_array ()

		PROMPT FOR       type_name
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width - 1
		       IN WINDOW screen
		       CHOOSE OUTOF type_choose 	

		IF ( element . is_new_slot ()) AND
                   ( type_name = BATCH_ENTRY_EMPTY ) THEN

			type_name = BATCH_ENTRY_NEW_SLOT

		ENDIF

		IF old_type_name <> type_name THEN

			IF element . is_new_slot () THEN

				grid . insert_entry ( cell_row + 1         ,
						      BATCH_ENTRY_NEW_SLOT )	
				

			ENDIF

			element . set_type ( type_name  )

			IF grid . user_info . is_runtime () THEN

	                        grid . redisplay_contents ()

			ELSE

	                        grid . redisplay_row ( cell_row )

			ENDIF
			
		ENDIF

		IF (     element . is_empty ()           ) AND
		   ( NOT grid . user_info . is_runtime ()) THEN
	
			grid . delete_entry ( cell_row )

        		IF lastkey = "REMOVE" THEN

				SET GLOBAL "lastkey" TO "CONTINUE"

			ENDIF
	
	 	ENDIF

	ELSE

		type_name = element . get_user_name ()

		PROMPT FOR       type_name
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width - 1
		       IN WINDOW screen
		       WITH (    display_only = TRUE ,
				 bold         = TRUE )	

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_prompt_limit (       element        ,
						  grid           ,
                                            VALUE cell_column    ,
		                            VALUE cell_row       ,
		                            VALUE column         ,
		                            VALUE row            ,
			                    VALUE cell_width     ,
			                          screen         ,
					    VALUE is_display     )	

{
*	Prompt for a limit.
*
*******************************************************************************}

	DECLARE limit

	IF is_display THEN

		IF element . want_comp_list () THEN

			DISPLAY element . limit
				ON LINE   row
				FROM      column
				TO        column + cell_width - 1
				IN WINDOW screen

		ELSE

			CLEAR LINE        row
				FROM      column
				TO        column + cell_width - 1
				IN WINDOW screen
		

		ENDIF

	ELSEIF element . want_limit () THEN

		limit = element . limit

		PROMPT FOR       limit
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width - 1
		       IN WINDOW screen
		       BROWSE ON MLP_HEADER	

		IF lastkey <> "EXIT" THEN

			element . limit = limit

		ENDIF

	ELSE

		PROMPT FOR       limit
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width - 1
		       IN WINDOW screen
		       WITH ( display_only = TRUE )	
	
	ENDIF

ENDROUTINE


{******************************************************************************}

ROUTINE batch_template_entry_prompt_standard (       element        ,
						     grid           ,	
                                               VALUE cell_column    ,
		                               VALUE cell_row       ,
		                               VALUE column         ,
		                               VALUE row            ,
			                       VALUE cell_width     ,
			                             screen         ,
					       VALUE is_display     )	

{
*	Prompt for a standard.
*
*******************************************************************************}

	DECLARE standard        ,
		mandatory_array ,
		standard_type

	IF is_display THEN

		IF element . want_standard () THEN

			DISPLAY element . standard
				ON LINE   row
				FROM      column
				TO        column + cell_width - 1
				IN WINDOW screen

		ELSE

			CLEAR LINE        row
				FROM      column
				TO        column + cell_width - 1
				IN WINDOW screen
		

		ENDIF

	ELSEIF element . want_standard () THEN


		standard = element . standard

		standard_type = element . type . standard_type

		IF blank ( standard_type ) THEN

			PROMPT FOR       standard
			       ON LINE   row
			       FROM      column
			       TO        column + cell_width - 1
			       IN WINDOW screen
			       BROWSE ON STANDARD	

		ELSE

			ARRAY mandatory_array

			array_select_add ( mandatory_array  ,
					   ARRAY_SELECT_EQ  ,
					  "STANDARD_TYPE"   ,
					   standard_type    )

			array_select_add ( mandatory_array  ,
					   ARRAY_SELECT_OR  ,
					   EMPTY            ,
					   EMPTY            )

			array_select_add ( mandatory_array  ,
					   ARRAY_SELECT_EQ  ,
					  "STANDARD_TYPE"   ,
					  "NONE"             )

			PROMPT FOR       standard
			       ON LINE   row
			       FROM      column
			       TO        column + cell_width - 1
			       IN WINDOW screen
			       BROWSE ON STANDARD	
                               WITH ( mandatory_array = mandatory_array )

		ENDIF

		IF lastkey <> "EXIT" THEN

			element . standard = standard

		ENDIF

	ELSE

		PROMPT FOR       standard
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width - 1
		       IN WINDOW screen
		       WITH ( display_only = TRUE )	

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_prompt_repeat (       element        ,
						   grid           ,
                                             VALUE cell_column    ,
		                             VALUE cell_row       ,
		                             VALUE column         ,
		                             VALUE row            ,
			                     VALUE cell_width     ,
			                           screen         ,
					     VALUE is_display     )	

{
*	Prompt for a repeat count.
*
*******************************************************************************}

	DECLARE repeat_count

	SET FORMAT "9999"

	IF is_display THEN

		IF element . want_repeat () THEN

			DISPLAY strip ( element . repeat )
				ON LINE   row
				FROM      column
				TO        column + cell_width - 1
				IN WINDOW screen

		ELSE

			CLEAR LINE        row
				FROM      column
				TO        column + cell_width - 1
				IN WINDOW screen
		
		ENDIF

	ELSEIF (      element . want_repeat ()             ) AND
	       ( NOT  grid . batch . has_child ( cell_row )) THEN

		repeat_count = element . repeat

		PROMPT FOR       repeat_count
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width - 1
		       IN WINDOW screen
		       BROWSE ON INTEGER
		       WITH    ( minimum = 0    ,
				 maximum = 9999 )	

		IF lastkey <> "EXIT" THEN

			element . repeat = repeat_count

		ENDIF

	ELSE

		PROMPT FOR       repeat_count
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width - 1
		       IN WINDOW screen
		       WITH ( display_only = TRUE )	


	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_prompt_parent (       element        ,
						   grid           ,
                                             VALUE cell_column    ,
		                             VALUE cell_row       ,
		                             VALUE column         ,
		                             VALUE row            ,
			                     VALUE cell_width     ,
			                           screen         ,
					     VALUE is_display     )	

{
*	Prompt for a parent.
*
*******************************************************************************}

	DECLARE parent       ,
		select_array

	SET FORMAT "9999"

	IF is_display THEN

		IF ( element . want_parent ()) AND
		   ( element . parent  > 0   ) THEN
	
			parent = grid  . get_entry ( element . parent )

			DISPLAY strip ( parent . get_title ())
				ON LINE   row
				FROM      column
				TO        column + cell_width - 1
				IN WINDOW screen

		ELSEIF ( element . want_parent ()) THEN


			DISPLAY "?"
				ON LINE   row
				FROM      column
				TO        column + cell_width - 1
				IN WINDOW screen

		ELSE

			CLEAR LINE        row
				FROM      column
				TO        column + cell_width - 1
				IN WINDOW screen
		
		ENDIF

	ELSEIF element . want_parent () THEN

		parent = element . parent

		grid . build_parent_list ( element      ,
					   select_array )

		PROMPT FOR       parent
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width - 1
		       IN WINDOW screen
		       CHOOSE OUTOF select_array

		IF lastkey <> "EXIT" THEN

			element . parent = parent

		ENDIF

	ELSE

		PROMPT FOR       parent
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width - 1
		       IN WINDOW screen
		       WITH ( display_only = TRUE )	

	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE batch_template_entry_prompt_component_list (       element        ,
						           grid           ,
                                                     VALUE cell_column    ,
		                                     VALUE cell_row       ,
		                                     VALUE column         ,
		                                     VALUE row            ,
			                             VALUE cell_width     ,
			                                   screen         ,
					             VALUE is_display     )	

{
*	Prompt for a component list.
*
*******************************************************************************}

	DECLARE comp_list       ,
		analysis        ,
		mandatory_array 


	SET FORMAT "99"

	analysis = grid . user_info . get_analysis ()
			
	IF is_display THEN

		IF element . want_comp_list () THEN

			DISPLAY strip ( element . comp_list )
				ON LINE   row
				FROM      column
				TO        column + cell_width - 1
				IN WINDOW screen

		ELSE

			CLEAR LINE        row
				FROM      column
				TO        column + cell_width - 1
				IN WINDOW screen
		
		ENDIF

	ELSEIF ( element . want_comp_list ()) AND
	       ( NOT blank ( analysis      )) THEN

		comp_list = element . comp_list

		ARRAY mandatory_array

		array_select_add (  mandatory_array  ,
			            ARRAY_SELECT_EQ  ,
			           "ANALYSIS"        ,
				    analysis         )


		PROMPT FOR comp_list
		       ON LINE   row
	       	       FROM      column
		       TO        column + cell_width - 1
		       IN WINDOW screen
	     	       BROWSE ON comp_list_header . comp_list
		       WITH ( mandatory_array = mandatory_array )

		IF lastkey <> "EXIT" THEN

			element . comp_list = comp_list

		ENDIF

	ELSE

		PROMPT FOR       comp_list
		       ON LINE   row
		       FROM      column
		       TO        column + cell_width - 1
		       IN WINDOW screen
		       WITH ( display_only = TRUE )	

	ENDIF

ENDROUTINE

{******************************************************************************}

{******************************************************************************}

ROUTINE std_batch_template_entry_action_set_up_batch ( self      ,
						       new_entry )	

{
*	Copy template details into the new element.
*
*******************************************************************************}


{
	ASSIGN batch_template_entry . parent   =  self . parent
	ASSIGN batch_template_entry . standard =  self . standard
	ASSIGN batch_template_entry . limit    =  self . limit
	ASSIGN batch_template_entry . section  =  self . section
}

	new_entry . template = new_entry
ENDROUTINE

{******************************************************************************}

ROUTINE std_batch_template_entry_action_standard_criteria ( self     ,
						            criteria )	

{
*	Build criteria for the standard prompt.
*
*******************************************************************************}


ENDROUTINE

{******************************************************************************}

GLOBAL ROUTINE batch_template_entry_get_type_choose ( choose_array )    

{
*	Get the type choose array
*
*******************************************************************************}

	batch_template_entry_choose_array ()

	choose_array = type_choose

ENDROUTINE


