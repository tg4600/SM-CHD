{******************************************************************************
*
* Module Name   : $BATCH_USER.RPF
*
* Purpose       : User routines for batch's
*
* Document Ref. : 
*
* Specification : SE/T/VGSM320-WORK-BATCH
*
* Portability   : Not Checked
*
* Re-entrant    : 
*
*******************************************************************************}

ENABLE WINDOWS
SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_VGL_TOOLS
JOIN STANDARD_LIBRARY STD_CLASS

JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $LIB_COMP

{* CONSTANTS ******************************************************************}


{* VARIABLES ******************************************************************}


{******************************************************************************}

GLOBAL

ROUTINE batch_user_initialise

{
*	Initialise the batch user module
*
*******************************************************************************}

	IF NOT global ( "LIBRARY_INITIALISED" ) THEN

		SET GLOBAL "LIBRARY_INITIALISED" TO TRUE

	ENDIF

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_get_sample_template ( entry )

{
*	Return the template to use for a control which is not standard
*	based but wants a sample.
*
*******************************************************************************}

	RETURN ( "NOINPUT" )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_get_multichrom_details ( batch_header ,
					    machine      ,
					    port         ,
					    protocol     ,
					    device_name  )

{
*  	Define where the multichrom system lives.
*
******************************************************************************}		

	machine     = "ALDER"
	port        = "8100"
	protocol    = EMPTY { Empty    = Default 
			      "TCP"    = Tcp/IP
			      "DECNET" = Decnet  }	

	device_name = "MCD0"

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_multichrom_type_lookup ( lookup_array )

{
*	Allow customisation of the lookup between Multichrom sample types
*	and the batch entry types.
*
*	The lookup_array parameter is a 2 dimensional array
*
*		lookup_array [ n ,1 ] = Batch class object name
*		lookup_array [ n ,2 ] = Multichrom sample type 
*
*****************************************************************************}


ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_put_rsf_header_info ( batch_header         ,
					 analysis_file        ,
		      	                 method_file          ,
			                 calibration_file     ,
			                 run_sequence_file    ,
			                 subtract_analysis    ,	
			                 subtract_sample      ,
			                 subtract_injection   ,
			                 rvs_calibration      ,  
			                 control_name         ,
			                 calibration_sequence ,
			                 lims_analysis        ,
			                 analyst_name         ,	
			                 comment              ,
			                 number_of_pages      )

{
*	Allow overriding of any of the parameters to put_rsf_header_info
*       
*	The batch_header parameter is an object pointing to the batch -
*	use the action get_batch_field ( Field Name ) to obtain the value of
*	any batch field.
*
*****************************************************************************}


ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_put_rsf_sample (       batch_header      ,
				          batch_entry       ,	
				          sample_number     ,
			            VALUE sample_name       ,
			            VALUE lims_id           ,
			                  sample_type       ,
			                  sample_amount     ,
			                  number_injections ,
			                  retention_time    ,
			                  response_factor   ,
			                  calibration_level )
	
{
*	Allow overriding of any of the parameters to put_rsf_sample
*       
*	The batch_header parameter is an object pointing to the batch -
*	use the action get_batch_field ( Field Name ) to obtain the value of
*	any batch field.
*
*	The batch_entry parameter is an object pointing to the test on the batch -
*	use the action get_samp_test_field ( Field Name ) to obtain the value of
*	any samp_test_view field.
*
*****************************************************************************}




ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_multichrom_peak (        peak_object ,
				      VALUE peak_number )

{
*	Allow updating of peak information from Multichrom.
*
*	Peak Object has the following properties
*
*		Component Name = Lims Name
*		Peak Name      = Multichrom Name
*		Amount         = result value
*		Detected       = Boolean - True if detected	
*
*	If the component name property is blank on the return from this
*	routine then the peak is ignored.
*
*****************************************************************************}


	IF NOT blank ( peak_object . component_name ) THEN

		peak_object . component_name = 
			lib_comp_add_category ( peak_object . component_name ,
						CATEGORY_READING             ,
						1                            )

	ENDIF 	

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_multichrom_missing_peak ( peak_object )

{
*	Allow updating of missing peak data from Multichrom
*
* 	See batch_user_multichrom_peak for parameter information.
*
*****************************************************************************}

	IF NOT blank ( peak_object . component_name ) THEN

		peak_object . component_name = 
			lib_comp_add_category ( peak_object . component_name ,
						CATEGORY_READING             ,
						1                            )

	ENDIF 	

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_multichrom_group (       peak_object  ,
				      VALUE group_number )	

{
*	Allow updating of group peak data from Multichrom
*
* 	See batch_user_multichrom_peak for parameter information.
*
*****************************************************************************}
	
	IF NOT blank ( peak_object . component_name ) THEN

		peak_object . component_name = 
			lib_comp_add_category ( peak_object . component_name ,
						CATEGORY_READING             ,
						1                            )

	ENDIF 	
	
ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_multichrom_composite (       peak_object ,
					  VALUE peak_number )	

{
*	Allow updating of composite peak data from Multichrom
*
* 	See batch_user_multichrom_peak for parameter information.
*
*****************************************************************************}

	IF NOT blank ( peak_object . component_name ) THEN

		peak_object . component_name = 
			lib_comp_add_category ( peak_object . component_name ,
						CATEGORY_READING             ,
						1                            )

	ENDIF 	
	
ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_xchrom_peak (       peak_object ,
				 VALUE peak_number )

{
*	Allow updating of peak information from Xchrom.
*
*	Peak Object has the following properties
*
*		Component Name = Lims Name
*		Peak Name      = Xchrom Name
*		Amount         = result value
*		Detected       = Boolean - True if detected	
*
*	If the component name property is blank on the return from this
*	routine then the peak is ignored.
*
*****************************************************************************}


	IF NOT blank ( peak_object . component_name ) THEN

		peak_object . component_name = 
			lib_comp_add_category ( peak_object . component_name ,
						CATEGORY_READING             ,
						1                            )

	ENDIF 	

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_xchrom_missing_peak ( peak_object )

{
*	Allow updating of missing peak data from Xchrom
*
* 	See batch_user_xchrom_peak for parameter information.
*
*****************************************************************************}

	IF NOT blank ( peak_object . component_name ) THEN

		peak_object . component_name = 
			lib_comp_add_category ( peak_object . component_name ,
						CATEGORY_READING             ,
						1                            )

	ENDIF 	

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_xchrom_group (       peak_object  ,
				  VALUE group_number )	

{
*	Allow updating of group peak data from Xchrom
*
* 	See batch_user_xchrom_peak for parameter information.
*
*****************************************************************************}
	
	IF NOT blank ( peak_object . component_name ) THEN

		peak_object . component_name = 
			lib_comp_add_category ( peak_object . component_name ,
						CATEGORY_READING             ,
						1                            )

	ENDIF 	
	
ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_xchrom_composite (       peak_object ,
				      VALUE peak_number )	

{
*	Allow updating of composite peak data from Xchrom
*
* 	See batch_user_xchrom_peak for parameter information.
*
*****************************************************************************}

	IF NOT blank ( peak_object . component_name ) THEN

		peak_object . component_name = 
			lib_comp_add_category ( peak_object . component_name ,
						CATEGORY_READING             ,
						1                            )

	ENDIF 	
	
ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_pre_result_entry ( batch ) 

{
*	Called before entry in to the results entry screen.
*	Batch is std_batch_header object
*
*
*	Return FALSE if the results entry should not be called
*
*****************************************************************************}

	RETURN ( TRUE )

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_post_result_entry ( batch ) 

{
*	Called after exit from the results entry screen.
*	Batch is std_batch_header object
*
*
*****************************************************************************}

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_sqc_chart_details ( chart_details ) 

{
*       Called before printing a chart - allows customisation of the source
*       of the data. 
*
*
*
*****************************************************************************}

          
ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_batch_allowed (       batch  ,
				   VALUE option ) 

{
*	Called after a batch ID has been entered for the batch options
*	MODIFY,DISPLAY,INSPECT,AUTHORISE,UPLOAD and CANCEL.
*
*	The batch parameter contains the standard batch object - the batch
*	has been read in at this point.
*
*	The option parameter contains a text constant indicating which option
*	is being used. The value conatined will be one of the constants
*
*		BATCH_SCREEN_DISPLAY
*		BATCH_SCREEN_MODIFY
*		BATCH_SCREEN_INSPECT
*		BATCH_SCREEN_AUTHORISE
*		BATCH_SCREEN_UPLOAD
*		BATCH_SCREEN_CANCEL
*		BATCH_SCREEN_REACTIVATE
*
*	These constants are defined in $BATCH_UTILS
*
*	The routine returns TRUE or FALSE. TRUE if the batch is accepatble
*	FALSE otherwise.
*
*****************************************************************************}

        RETURN ( TRUE )
              
ENDROUTINE

{******************************************************************************}
{* Batch status change callbacks                                              *}
{******************************************************************************}

GLOBAL

ROUTINE batch_user_set_available (       batch           ,
				   VALUE original_status ) 

{
*	Batch status changing to V.
*
*	Called after the batch code has set all the standard fields.
*
*	The batch parameter contains the standard batch object.
*
*	The original_status parameter contains the initial status of batch
*	when the function was called.
*
*****************************************************************************}

	{ FLASH_MESSAGE ( "Batch status set to V", TRUE ) }

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_set_complete (       batch           ,
				  VALUE original_status ) 

{
*	Batch status changing to C.
*
*	Called after the batch code has set all the standard fields.
*
*	The batch parameter contains the standard batch object.
*
*	The original_status parameter contains the initial status of batch
*	when the function was called.
*
*****************************************************************************}

	{ FLASH_MESSAGE ( "Batch status set to C", TRUE ) }

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_set_inspected (       batch           ,
				   VALUE original_status ) 

{
*	Batch status changing to I.
*
*	Called after the batch code has set all the standard fields.
*
*	The batch parameter contains the standard batch object.
*
*	The original_status parameter contains the initial status of batch
*	when the function was called.
*
*****************************************************************************}

	{ FLASH_MESSAGE ( "Batch status set to I", TRUE ) }

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_set_authorised (       batch           ,
				    VALUE original_status ) 

{
*	Batch status changing to A.
*
*	Called after the batch code has set all the standard fields.
*
*	The batch parameter contains the standard batch object.
*
*	The original_status parameter contains the initial status of batch
*	when the function was called.
*
*****************************************************************************}

	{ FLASH_MESSAGE ( "Batch status set to A", TRUE ) }

ENDROUTINE

{******************************************************************************}

GLOBAL

ROUTINE batch_user_set_cancelled (       batch           ,
				   VALUE original_status ) 

{
*	Batch status changing to X.
*
*	Called after the batch code has set all the standard fields.
*
*	The batch parameter contains the standard batch object.
*
*	The original_status parameter contains the initial status of batch
*	when the function was called.
*
*****************************************************************************}

	{ FLASH_MESSAGE ( "Batch status set to X", TRUE ) }

ENDROUTINE

{******************************************************************************}
{******************************************************************************}
{******************************************************************************}
