{******************************************************************************
*
* Module Name   : $LTE_MLP
*
* Purpose       : Template report for setting up a laboratory table editor
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}


{

INTRODUCTION
This report is the skeleton for creating table maintainance routines.
It is intended to be used with the simpler laboratory tables and
user defined tables. The data entry screen generated will not support
list type entry screens such as the component editor.

The following functions will be provided by this report:

Add/Modify, Display, Print, List, Remove/Unremove

Reports to support tables are generated by another setup report which
will copy this report into a supplied name and then allow modification
of the copy for the table required. Once modified the functions
generated can be tested from the generic menu.

The fields displayed on the data entry screen are defined by entering
values into parameters in this report.

Once a report has been created then it can be tested using the generic
menu provided as part of the setup environment.

ASSOCIATED FILES
$LABSETUP.RPF  - Setup Report.
$LABTABLIB.RPF - Library Report containing main routines.
$LTE_TEM.RPF   - Skeleton Lab Table Report.(This file)


SETUP DETAILS
To customise this report for a table a number of variables and
arrays must be setup in this report. To assist in this a copy
of the messages file (MESSAGES.PRN) and the structure file (STRUCTURE.TXT)
will be required.

The areas of the report to be modified are indicated by comments and
all occurrences of **** must be replaced with the required values. Note
that some variables have been given default values which may also require
changing.

}

{ --------------------------------------------------------------------------- }

{ --------------- Initialization Statements : DO NOT CHANGE ----------------- }

ENABLE WINDOWS
SET NAME "DISPLAY/"

JOIN LIBRARY $LABTABLIB
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $level_mod
JOIN LIBRARY $limit_mod
JOIN LIBRARY $mlps
JOIN LIBRARY $GEN_APPR
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_DATABASE

{ -------------------------- Table Setup Routine ---------------------------- }



{***** ROUTINE table_setup.rpf *****}

ROUTINE table_setup

    ARRAY prompt_details    ARRAY_SIZE ( 0 , 6 )
    ARRAY fields_to_output  ARRAY_SIZE ( 0 )

{

    CHANGE : Specify the name of the table in <name_of_table>
                 eg   name_of_table = "HAZARD"

}

    name_of_table           =  "MLP_HEADER"

{

    CHANGE : MANDATORY : Specify the text to be displayed at the top
                 of the data entry screen in <header_mess>.
                 Note that the text may be specified literally
                 eg   header_mess = "Hazard Data Entry Screen"
                 or may be extracted from the message file
                 eg   header_mess = GET MESSAGE(xyz)

}

    header_mess = get_user_message ( "LTE_MLP_HEADER" , 1)

{

    CHANGE : MANDATORY : Specify the text to be displayed at the bottom
                 of the data entry screen in <footer_mess> for the options
                 add , copy , modify but not display.
                 Note that the text may be specified literally
                 eg   footer_mess = "Press DO to Save / EXIT to Quit"
                 or may be extracted from the message file
                 eg   footer_mess = GET MESSAGE(xyz)

}

    footer_mess = get_user_message ( "LTE_MLP_FOOTER_MODIFY" ,1 )

{

    CHANGE : MANDATORY : Specify the text to be displayed at the bottom
                 of the data entry screen in <display_footer_mess> for the
         display option.
                 Note that the text may be specified literally
                 eg   footer_mess = "Press EXIT to Quit"
                 or may be extracted from the message file
                 eg   footer_mess = GET MESSAGE(xyz)

}

    display_footer_mess = get_user_message ( "LTE_MLP_FOOTER_DISPLAY" ,1 )

{

    CHANGE : MANDATORY : Specify the names of the fields and the
                 text associated with each field to be displayed on the
                 screen.
                 For each field the field name is stored in an element
                 of array <prompt_details> with an index of FIELD_NAME_POSITION
                 and the message stored with an index of MESSAGE_POSITION.
                 This array will require expanding for the total number
         of fields required on the screen.

                 e.g
        prompt_details [ 1 , MESSAGE_POSITION    ] = "Group Name"
            prompt_details [ 1 , FIELD_NAME_POSITION ] = "GROUP_ID"

        prompt_details [ 1 , MESSAGE_POSITION    ] = "Hazard Label Text"
        prompt_details [ 1 , FIELD_NAME_POSITION ] = "LABEL_TEXT"

        prompt_details [ 1 , MESSAGE_POSITION    ] = "Description"
        prompt_details [ 1 , FIELD_NAME_POSITION ] = "DESCRIPTION"

        prompt_details [ 1 , MESSAGE_POSITION    ] = "Modifiable Entry"
        prompt_details [ 1 , FIELD_NAME_POSITION ] = "MODIFIABLE"

                The text may be specified literally as shown above
                or extracted from the message file using GET MESSAGE

}


{

    move the comments braces to allow use of these statements

}

{**************************************************************************************************************
        FIELDS UPDATED FROM SAP MASTERDATA 
***************************************************************************************************************}
    count = 1
        prompt_details [count, MESSAGE_POSITION] = "* SAP UniqueId"           { CAPTION of the prompt }
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_UniqueId"          { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* SAP Master Status"      { CAPTION of the prompt }
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_master_status"     { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* Description"            { CAPTION of the prompt }
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_mlp_desc"          { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* Product Code"           { CAPTION of the prompt }
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_prod_code"         { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* Material Type"          { CAPTION of the prompt }
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_mat_type"          { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* GMP Status"
        prompt_details [count, TYPE_POSITION]    = "GROUPING"
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_grouping"         { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* Product Area"
        prompt_details [count, TYPE_POSITION]    = "PRODUCTAREA"
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_prod_area"         { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* Product Cluster"
        prompt_details [count, TYPE_POSITION]    = "PRODUCTCLUSTER"
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_prod_cluster"      { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* Product SubCluster"
        prompt_details [count, TYPE_POSITION]    = "PRODUCTSUBCLUSTER"
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_prod_sub_cluster"  { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* Product Segment"
        prompt_details [count, TYPE_POSITION]    = "PRODUCTSEGMENT"
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_prod_segment"      { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* Strains"                { CAPTION of the prompt }
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_strains"           { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* Product Group"          { CAPTION of the prompt }
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_product_group"     { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* Product Form"           { CAPTION of the prompt }
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_product_form"      { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* Product Format (Sample Type)"         { CAPTION of the prompt }
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_product_format"    { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

    count = count + 1
        prompt_details [count, MESSAGE_POSITION] = "* Product Identification" { CAPTION of the prompt }
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                  { ROUTINE (not FORMAT) reserved word  }
        prompt_details [count, LIBRARY_POSITION] = "SAP_MATMAS"               { LIBRARY               }
        prompt_details [count, ROUTINE_POSITION] = "prompt_product_id"        { name of routine       }
        prompt_details [count, 6]                = "234"                      { SIZE of the prompt    }

{**************************************************************************************************************
        INTERNAL LIMS FIELDS 
***************************************************************************************************************}
    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "Standard of Spec. Group"
        prompt_details [count, FIELD_NAME_POSITION] = "SOS_GROUP"

    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = get_user_message ( "LTE_MLP_MESSAGE_GROUP_ID" ,1 )
        prompt_details [count, FIELD_NAME_POSITION] = "GROUP_ID"

    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = get_user_message ( "LTE_MLP_MESSAGE_INSP_PLAN" , 1 )
        prompt_details [count, FIELD_NAME_POSITION] = "INSPECTION_PLAN"

    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = get_user_message ( "LTE_MLP_MESSAGE_VERSION_COMMENT" ,1 )
        prompt_details [count, FIELD_NAME_POSITION] = "VERSION_COMMENT"

    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "Comments"
        prompt_details [count, FIELD_NAME_POSITION] = "QCQS_COMMENT"
{
    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] ="Sample type"
        prompt_details [count, FIELD_NAME_POSITION] =  "SAMPLE_TYPE"
 }
{
    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "(Product Group)"
        prompt_details [count, FIELD_NAME_POSITION] = "PRODUCT_GROUP"
 }
    count = count + 1
        prompt_details [ count , MESSAGE_POSITION    ] = "(Culture Group)"
        prompt_details [ count , FIELD_NAME_POSITION ] = "CULTURE_GROUP"

    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "(Product Application Group)"
        prompt_details [count, FIELD_NAME_POSITION] = "PRODUCT_APPL_GROUP"

{
    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "Dispensation responsible"
        prompt_details [count, FIELD_NAME_POSITION] = "DISP_RESP"
 }
    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "Warning message"
        prompt_details [count, FIELD_NAME_POSITION] = "WARN_MSG"

    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "Include Automatic SamplePlan Login?"
        prompt_details [count, FIELD_NAME_POSITION] = "DO_SPLAN_LOGIN"

    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "Allow AGRD?"
        prompt_details [count, FIELD_NAME_POSITION] = "ALLOW_AGREE"

    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "External Version"
        prompt_details [count, FIELD_NAME_POSITION] = "EXTERNAL_VERSION"

    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "Main Certificate Type"
        prompt_details [count, FIELD_NAME_POSITION] = "SAP_CERT"

    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "BO Template for Certificate of Analysis"
        prompt_details [count, FIELD_NAME_POSITION] = "CERT_TYPE"

{**AS1529 HBe 5-2-04}
    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "Date Created"
        prompt_details [count, FIELD_NAME_POSITION] = "CREATED_DATE"
{**AE1529 HBe 5-2-04}

    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "Date Approved"
        prompt_details [count, FIELD_NAME_POSITION] = "APPR_DATE"
{
        prompt_details [count, TYPE_POSITION]    = "ROUTINE"                 
        prompt_details [count, LIBRARY_POSITION] = "$LTE_MLP"                
        prompt_details [count, ROUTINE_POSITION] = "prompt_appr_date"        
        prompt_details [count, 6]                = "234"                     
 }

{**AS1563 HBe 28-04-2004 - Removed 18_DEC-2102 /DKTBG
    count = count + 1
        prompt_details [count, MESSAGE_POSITION   ] = "Associated Project"
            prompt_details [count, FIELD_NAME_POSITION] = "PROJECT_ID"
**AE1563}

{**AE 2003R1}

{

    CHANGE : Specify the name of the table to be displayed on the screen
                 in <displayed_name_of_table>. This is useful for foreign
                 language support.
                 eg   displayed_name_of_table = "Hazard"

}

    displayed_name_of_table    = "Versioned MLP"

{

    CHANGE : Specify the name of the directory where text files are stored
                 which may contain descriptive information in <directory> and
                 the extension of the file in <extn>. If there is no associated
                 text file then these should be set to EMPTY.
                 For instance the hazard table.
                 eg   directory = "SMP$TEXTFILES"
                      extn = "HAZ"
                 or
                      directory = EMPTY
                      extn = EMPTY

}

    directory = EMPTY
    extn = EMPTY

{

    CHANGE : MANDATORY : Specify the text to be displayed when prompting
                 for an identifier.
                 Note that the text may be specified literally
                 eg   input_mess  = "Enter Hazard ID : "
                 or may be extracted from the message file
                 eg   input_mess = GET MESSAGE(xyz)

}

    input_mess = "Enter MLP ID"

{

    CHANGE : OPTIONAL : Specify default unique key value for new additions
        to the table - the default values for any new entry to the
        table will be copied from this entry in the database.
                Set <default_value> to be empty to ignore this feature.

        e.g
          default_value = "DEFAULT"

}

    default_value = EMPTY

{

    CHANGE : MANDATORY : Specify the number of the fields to appear
                on the output generated by the list option.
                For each field to be output on the list an element of the array
        <fields_to_output> should contain a number corresponding to
        the position of that field in the array <prompt_details>.
        This array can be of any size from zero elements to the
        size of the arrays <prompt_details>.

        e.g
          fields_to_output [ 1 ] = 1
          fields_to_output [ 2 ] = 4
          fields_to_output [ 3 ] = 3

}

    fields_to_output [ 1 ]  = 1

{

    move the comments braces to allow use of these statements

}

    fields_to_output [ 2 ]  = 2
    fields_to_output [ 3 ]  = 3
    fields_to_output [ 4 ]  = 4
    fields_to_output [ 5 ]  = 5
    fields_to_output [ 6 ]  = 6

{

    CHANGE : OPTIONAL : Specify a special action to happen on pressing the
                 <select> key.

                CHARACTER_POSITION index contains a character for the menu item.
                TITLE_POSITION     index contains a title for the menu item.
                LIBRARY_POSITION   index contains the library to call.
                ROUTINE_POSITION   index contains a routine in the library.

    eg

    special_actions_report [ 1 , CHARACTER_POSITION ] = "*"
    special_actions_report [ 1 , TITLE_POSITION     ] = "Analysis Options"

    special_actions_report [ 2 , CHARACTER_POSITION ] = "1"
    special_actions_report [ 2 , TITLE_POSITION     ] = "1 Analysis Components"
    special_actions_report [ 2 , LIBRARY_POSITION   ] = "$COMP_EDIT"
    special_actions_report [ 2 , ROUTINE_POSITION   ] = "LABTABLE_INPUT"

    special_actions_report [ 3 , CHARACTER_POSITION ] = "2"
    special_actions_report [ 3 , TITLE_POSITION     ] = "2 Analysis Description"
    special_actions_report [ 3 , LIBRARY_POSITION   ] = "$LABTABLIB"
    special_actions_report [ 3 , ROUTINE_POSITION   ] = "TEXT_FILE"

}

    ARRAY   special_actions_report  ARRAY_SIZE ( 0 , 4 )

{

    move the comments braces to allow use of these statements

}

    special_actions_report [ 1 , CHARACTER_POSITION ] = "*"
    special_actions_report [ 1 , TITLE_POSITION     ] =
        GET_USER_MESSAGE ( "LTE_MLP_MENU_HEADER" ,1 )

    special_actions_report [ 2 , CHARACTER_POSITION ] = "1"
    special_actions_report [ 2 , TITLE_POSITION     ] =
        GET_USER_MESSAGE ( "LTE_MLP_MENU_LEVELS", 1 )
    special_actions_report [ 2 , LIBRARY_POSITION   ] = "$MLPS"
    special_actions_report [ 2 , ROUTINE_POSITION   ] = "mlp_levels_screen"

{**DS2003R1: Not used by CH - therefore removed
    special_actions_report [ 3 , CHARACTER_POSITION ] = "2"
    special_actions_report [ 3 , TITLE_POSITION     ] =
        GET_USER_MESSAGE ( "LTE_MLP_MENU_ANALS", 1 )
    special_actions_report [ 3 , LIBRARY_POSITION   ] = "$MLPS"
    special_actions_report [ 3 , ROUTINE_POSITION   ] = "mlps_analyses_screen"
**DE 2003R1}

        special_actions_report [ 3 , CHARACTER_POSITION ] = "3"
        special_actions_report [ 3 , TITLE_POSITION     ] =
        GET_USER_MESSAGE ( "LTE_MLP_MENU_COMPS", 1 )
        special_actions_report [ 3 , LIBRARY_POSITION   ] = "$MLPS"
        special_actions_report [ 3 , ROUTINE_POSITION   ] = "mlps_pre_component_screen"

        special_actions_report [ 4 , CHARACTER_POSITION ] = "4"
        special_actions_report [ 4 , TITLE_POSITION     ] =
        GET_USER_MESSAGE ( "LTE_MLP_MENU_LIMITS", 1 )
        special_actions_report [ 4 , LIBRARY_POSITION   ] = "$MLPS"
        special_actions_report [ 4 , ROUTINE_POSITION   ] = "mlps_pre_component_limits"

        special_actions_report [ 5 , CHARACTER_POSITION ] = "5"
        special_actions_report [ 5 , TITLE_POSITION     ] = "MLP Schedule"
        special_actions_report [ 5 , LIBRARY_POSITION   ] = "$MLPS"
        special_actions_report [ 5 , ROUTINE_POSITION   ] = "mlps_pre_schedule_screen"

        special_actions_report[ 6 , CHARACTER_POSITION ] = "6"
        special_actions_report[ 6 , TITLE_POSITION     ] = "Login Schedule"
        special_actions_report[ 6 , LIBRARY_POSITION   ] = "PRODSCHED"
        special_actions_report[ 6 , ROUTINE_POSITION   ] = "do_prodsched_list"

        special_actions_report[ 6 , TITLE_POSITION     ] = "Login Schedule"
        special_actions_report[ 6 , LIBRARY_POSITION   ] = "PRODSCHED"
        special_actions_report[ 6 , ROUTINE_POSITION   ] = "lte_entry_point"

        special_actions_report[ 7 , CHARACTER_POSITION ] = "7"
        special_actions_report[ 7 , TITLE_POSITION     ] = "Master Data"
        special_actions_report[ 7 , LIBRARY_POSITION   ] = "SAP_MATMAS"
        special_actions_report[ 7 , ROUTINE_POSITION   ] = "GetSAPDetails"
        special_actions_report[ 7 , LIBRARY_POSITION   ] = "$MLPS"
        special_actions_report[ 7 , ROUTINE_POSITION   ] = "SAP_MATMAS"

        special_actions_report[ 8 , CHARACTER_POSITION ] = "8"
        special_actions_report[ 8 , TITLE_POSITION     ] = "Parameters"
        special_actions_report[ 8 , LIBRARY_POSITION   ] = "PARM_SETUP_N"
        special_actions_report[ 8 , ROUTINE_POSITION   ] = "ext_parm_setup_mlp"

{

    CHANGE : OPTIONAL : Specify five standard messages.

                IDENTITY1_MESSAGE contains title text for the identity field.
                MOD_ON_MESSAGE    contains title text for the Modified On field.
                MOD_BY_MESSAGE    contains title text for the Modified by field.
                READ_MESSAGE      contains identifier for the read transaction.
                WRITE_MESSAGE     contains identifier for the write transaction

        Note:
        Where a table contains more than one key0 field, then messages
        for the second (and third and fourth, if appropriate) key0
        fields should be set up in the IDENTITY2_MESSAGE,
        IDENTITY3_MESSAGE and IDENTITY3_MESSAGE elements.

}

        ARRAY   labtable_messages   ARRAY_SIZE ( 0 )

        labtable_messages [ IDENTITY1_MESSAGE ] = "MLP Identity"
        labtable_messages [ IDENTITY2_MESSAGE ] = "MLP Version"

        labtable_messages [ MOD_ON_MESSAGE    ] = GET MESSAGE ( 2546 , 1 )
                          { "Modified On" }
        labtable_messages [ MOD_BY_MESSAGE    ] = GET MESSAGE ( 2547 , 1 )
                          { "Modified By" }
        labtable_messages [ READ_MESSAGE      ] = GET MESSAGE ( 2566 , 1 )
                          { "Labtable Read Transaction" }
        labtable_messages [ WRITE_MESSAGE     ] = GET MESSAGE ( 2567 , 1 )
                          { "Labtable Write Transaction" }

{

    CHANGE : MANDATORY : Specify the help context for the editor window.
         The text should be specified literally and should start
         with the name of the report, suffixed with "_EDIT",
            i.e. "$LTE_XXX_EDIT"

}

    help_context = "$LTE_TEM_EDIT"


 {   ------ THERE ARE NO MORE FIELDS TO BE SETUP  --------    }

ENDROUTINE

{ --------------------------------------------------------------------------- }
{                                                                             }
{ The following routines are provided as call back points for LTE processing. }
{ User code may be added as appropriate.                                      }
{ --------------------------------------------------------------------------- }

{***** ROUTINE validation_routine.rpf *****}

ROUTINE validation_routine

    { Called on pressing the DO key to save LTE screen.               }
    { Called outside of the LTE write transaction.                    }
        {                                                                 }
    { Returns a boolean value to indicate whether to proceed with     }
    { the save process - if FALSE is returned the user is forced back }
    { into the editor                                                 }

    RETURN ( TRUE )

ENDROUTINE


{***** ROUTINE prompt_object_routine.rpf *****}

ROUTINE prompt_object_routine (       prompt_object ,
                                VALUE key0_count    ,
                                VALUE operation     )

    { Called during the creation of the identity prompts              }
      {                                                                 }
    { prompt_object is the prompt object for the specified prompt     }
    { key0_count    is the current key0 segment number                }
    {               eg this would be 2 for the version_number         }
    {                  field of the versioned_analysis table          }
    { operation     the current LTE operation eg ADD, MODIFY, DISPLAY }
      {                                                                 }
    { No return value is required                                     }

ENDROUTINE


{***** ROUTINE create_id_routine.rpf *****}

ROUTINE create_id_routine

    { Called before starting the identity prompts of an LTE for the   }
    { ADD and COPY options.                                           }
    {                                                                 }
    { The return value is used as the identity of the new record      }
    { instead of starting the identity prompts.                       }
    { Returning EMPTY causes the identity prompt to be started.       }

        RETURN ( EMPTY )

ENDROUTINE


{***** ROUTINE update_routine.rpf *****}

ROUTINE update_routine ( labtable )

    { Called on pressing the DO key to save LTE screen.               }
    { Called after the LTE write transaction has been started.        }
    {                                                                 }
    { labtable is the labtable object.                                }
    {                                                                 }
    { The return value is TRUE  if updates have been performed        }
    {                     FALSE if updates have NOT been performed    }
    {                     EMPTY - the systems checks for updates      }

{**AS1523 HBe 27-1-04: Core system error - Created Date does not get updated
                       when new versions are made after Block Row code was
                       replaced by object database.
                       Solution proposed by Pete Nelson.
                       Core system to be fixed in upcoming SM versions}
    {DebugObject(labTable)}
    IF (labtable.operation = "COPY") OR (labtable.operation = "NEW_VERSION")
    THEN
       ASSIGN mlp_header.created_date = NOW
       RETURN ( TRUE )
    ELSE
           RETURN ( TRUE )
    ENDIF
{**AE1523}
{**DS1523
        RETURN ( FALSE )
 **DE1523}

ENDROUTINE


{***** ROUTINE read_data_routine.rpf *****}

ROUTINE read_data_routine (       labtable  ,
                            VALUE operation )

    { Called after the record has been selected / reserved but before }
    { the editor screen has been built.                               }
        {                                                                 }
    { labtable      the labtable object.                              }
    { operation     the current LTE operation eg ADD, MODIFY, DISPLAY }
        {                                                                 }
    { No return value is required                                     }

{**MS1530 HBe 5-2-04:  Core system error - Created Date does not get updated
                       when MLP versions are copyed.
                       Solution proposed inspired by 1523
                       Core system to be fixed in upcoming SM versions}
    prod_id  = SELECT mlp_header.identity
    prod_ver = SELECT mlp_header.product_version
    status   = SELECT mlp_header.approval_status
    {GetSAPDetails(prod_id)  }
    
    IF (labtable.operation = "COPY") 
    OR (labtable.operation = "NEW_VERSION")
    THEN
       ASSIGN mlp_header.created_date = NOW
    ENDIF
{**ME1530}

    new_mlp ( operation )
    IF (labtable.operation = "MODIFY") OR 
       (labtable.operation = "COPY") OR 
       (labtable.operation = "NEW_VERSION") THEN
       WriteToLog("insert_iu('UPDATE', 'UPDATE_MLP', ":STRIP(prod_id):", ":STRIP(prod_ver):"), Status: ":status:", transaction_is_write: ":transaction_is_write())
{
       IF NOT transaction_is_write() THEN
           START WRITE TRANSACTION "Update SUB MLP Version"
           insert_iu("UPDATE", "UPDATE_MLP", prod_id, prod_ver) 
           COMMIT
       ELSE
           insert_iu("UPDATE", "UPDATE_MLP", prod_id, prod_ver) 
       ENDIF
}       
    ENDIF

ENDROUTINE


{***** ROUTINE validate_new_id_routine.rpf *****}

ROUTINE validate_new_id_routine ( VALUE new_id )

    { Called after each ID value has been entered.                    }
    {                                                                 }
    { new_id is the value entered at the prompt.                      }
    {                                                                 }
    { Returns a boolean value to indicate whether the value is valid. }

    RETURN ( TRUE )

ENDROUTINE


{***** ROUTINE do_the_work.rpf *****}

ROUTINE do_the_work  ( VALUE operation )

{**DS HBe 13-12-2004 2003R1 - 2004R2
mlps_initialise ( FALSE )
**DE}
table_setup ()

smp_lte_perform_option  ( name_of_table              ,
                          displayed_name_of_table    ,
                          prompt_details             ,
                          labtable_messages          ,
                          default_value          ,
                          input_mess             ,
                      header_mess                ,
                      footer_mess                ,
                  display_footer_mess        ,
                  directory                  ,
                  extn                       ,
                    help_context               ,
                          GLOBAL ("CURRENT_LIBRARY") ,
                  fields_to_output           ,
                    special_actions_report     ,
                  operation                  )

ENDROUTINE


{***** ROUTINE add_option.rpf *****}

ROUTINE add_option ( option )

do_the_work ( "add_ident" )

ENDROUTINE


{***** ROUTINE new_version_option.rpf *****}

ROUTINE new_version_option ( option )

do_the_work ( "new_version" )

ENDROUTINE


{***** ROUTINE copy_option.rpf *****}

ROUTINE copy_option ( option )

do_the_work ( "copy_ident" )

ENDROUTINE


{***** ROUTINE modify_option.rpf *****}

ROUTINE modify_option ( option )

do_the_work ( "modify_ident" )

ENDROUTINE


{***** ROUTINE display_option.rpf *****}

ROUTINE display_option ( option )

do_the_work ( "display_ident" )

ENDROUTINE


{***** ROUTINE remove_option.rpf *****}

ROUTINE remove_option ( option )

do_the_work ( "remove_ident" )

ENDROUTINE


{***** ROUTINE restore_option.rpf *****}

ROUTINE restore_option ( option )

do_the_work ( "restore_ident" )

ENDROUTINE


{***** ROUTINE list_option.rpf *****}

ROUTINE list_option ( option )

do_the_work ( "list_idents" )

ENDROUTINE


{***** ROUTINE print_option.rpf *****}

ROUTINE print_option ( option )

do_the_work ( "print_ident" )

ENDROUTINE


{***** ROUTINE approve_option.rpf *****}

ROUTINE approve_option ( option )

do_the_work ( "approve_ident" )

ENDROUTINE


{***** ROUTINE submit_option.rpf *****}

ROUTINE submit_option ( option )

do_the_work ( "submit_ident" )

ENDROUTINE


{***** ROUTINE history_option.rpf *****}

ROUTINE history_option ( option )

    table_setup ()
    inspection_labtable_history ( name_of_table ,
                                  input_mess    )

ENDROUTINE


{***** ROUTINE smp_lte_initialise.rpf *****}

ROUTINE smp_lte_initialise
{**AS HBe 13-12-04 2003R1 - 2004R2}
    mlps_initialise ( FALSE )
{**AE}
ENDROUTINE

ROUTINE WriteToLog(VALUE Msg)
{*************************************************************************
* Purpose      : Writes to predefined log,
*                using WriteLog in $lib_utils
* Parameters   : Msg - what to write in log
* Return Value : N/A
**************************************************************************}

    WriteLog(Msg, global("current_library"))

ENDROUTINE 

{******************************************************************************}

ROUTINE prompt_appr_date ( VALUE row, VALUE column, VALUE cell_width, window, VALUE is_display )

    val = SELECT mlp_header.appr_date
    is_display = TRUE

    IF is_display THEN
        DISPLAY val 
        ON LINE row 
        FROM column 
        TO column + cell_width - 1 
        IN WINDOW window
    ENDIF
    
ENDROUTINE

