
{*******************************************************************************
*
* Module Name   : $LIMSML_SAMPLE_USER
*
* Purpose       : Sample LIMSML End User Customisation
*
* Document Ref  : N/a
*
*******************************************************************************}

JOIN STANDARD_LIBRARY STD_UTILS
JOIN LIBRARY $LIB_UTILS

SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILE_OPTION DECLARE
ENABLE WINDOWS

{*******************************************************************************
*                              C O N S T A N T S
*******************************************************************************}

GLOBAL CONSTANT LIMSML_SAMPLE_REPLICATES               = "TRUE"     {Default: "TRUE" }
GLOBAL CONSTANT LIMSML_SAMPLE_REQUIRE_TEST             = "FALSE"    {Default: "TRUE" }
GLOBAL CONSTANT LIMSML_SAMPLE_REQUIRE_SAMPLE           = "FALSE"     {Default: "TRUE" }

GLOBAL CONSTANT LIMSML_SAMPLE_IGNORE_ADHOC             = "FALSE"    {Default: "FALSE"}
GLOBAL CONSTANT LIMSML_SAMPLE_IGNORE_RESULT_ERRORS     = "TRUE"     {Default: "TRUE" }
GLOBAL CONSTANT LIMSML_SAMPLE_IGNORE_ALL_RESULT_ERRORS = "TRUE"     {Default: "FALSE"}

GLOBAL CONSTANT LIMSML_SAMPLE_UPDATE_SAMPLE            = "TRUE"     {Default: "TRUE" }
GLOBAL CONSTANT LIMSML_SAMPLE_CREATE_SAMPLE            = "FALSE"    {Default: "FALSE"}
GLOBAL CONSTANT LIMSML_SAMPLE_CREATE_SAMPLE_TEMPLATE   = "BLANK"    {Default: "BLANK"}

GLOBAL CONSTANT LIMSML_SAMPLE_VALID_TEST_STATUS        = "CVP"      {Default: "CVP"  }
GLOBAL CONSTANT LIMSML_SAMPLE_UPDATE_TESTS             = "FALSE"    {Default: "TRUE" }
GLOBAL CONSTANT LIMSML_SAMPLE_CREATE_TESTS             = "FALSE"    {Default: "FALSE"}

GLOBAL CONSTANT LIMSML_SAMPLE_COMPLETE_TESTS           = "FALSE"
GLOBAL CONSTANT LIMSML_SAMPLE_COMPLETE_SAMPLE          = "FALSE"
GLOBAL CONSTANT LIMSML_SAMPLE_RECALCULATE              = "FALSE"

GLOBAL CONSTANT LIMSML_SAMPLE_UPDATE_INTERNAL_FIELDS   = TRUE

{*******************************************************************************
*                              M A I N   C O D E
*******************************************************************************}

EXIT

{*******************************************************************************
*                               R O U T I N E S
*******************************************************************************}



{***** GLOBAL ROUTINE limsml_result_entry_get_sample.rpf *****}

GLOBAL ROUTINE limsml_result_entry_get_sample ( sample_entity, VALUE sample_id )

{
* Get hold of the ID Numeric for a LIMSML Sample Result Entry Command
*
* Parameters   : Sample Entity, [HELPER_ENTITY] Sample Entity Helper Entity
*                Sample Id, [PACKED_DECIMAL] Sample ID
*
* Return Value : [PACKED_DECIMAL], The sample id to use. Return EMPTY to abandon
*
*******************************************************************************}

    RETURN ( sample_id )

ENDROUTINE


{***** GLOBAL ROUTINE limsml_result_entry_get_test.rpf *****}

GLOBAL ROUTINE limsml_result_entry_get_test (       sample_entity ,
                                                    test_entity   ,
                                              VALUE sample_id     ,
                                              VALUE test_number   )

{
* Get hold of the Test Number for a LIMSML Sample Result Entry Command
*
* Parameters   : Sample Entity, [HELPER_ENTITY] Sample Entity Helper Entity
*                Test Entity, [HELPER_ENTITY] Test Entity Helper Entity
*                Sample Id, [PACKED_DECIMAL] Sample ID
*                Test Number, [PACKED_DECIMAL] Test Number
*
* Return Value : [PACKED_DECIMAL], The test num to use. Return EMPTY to abandon
*
*******************************************************************************}

DECLARE status_set, status

    {* Pivotal 109517 *}

    status_set = LIMSML_SAMPLE_VALID_TEST_STATUS

    status = SELECT test . status
             WHERE test_number = test_number

    IF ( INDEX ( status_set, status ) = 0 ) THEN
        test_number = EMPTY
    ENDIF

    RETURN ( test_number )

ENDROUTINE


{***** GLOBAL ROUTINE limsml_result_entry_get_analysis.rpf *****}

GLOBAL ROUTINE limsml_result_entry_get_analysis (       test_entity ,
                                                  VALUE analysis    )

{
* Get hold of the Analysis for a LIMSML Sample Result Entry Command
*
* Parameters   : Test Entity, [HELPER_ENTITY] Test Entity Helper Entity
*                Analysis, [IDENTITY] Analysis Identity
*
* Return Value : [IDENTITY], The Analysis to use. Return EMPTY to abandon
*
*******************************************************************************}

    RETURN ( analysis )

ENDROUTINE


{***** GLOBAL ROUTINE limsml_result_entry_get_test_rep.rpf *****}

GLOBAL ROUTINE limsml_result_entry_get_test_rep ( test_entity, VALUE test_rep )

{
* Get hold of the Analysis for a LIMSML Sample Result Entry Command
*
* Parameters   : Test Entity, [HELPER_ENTITY] Test Entity Helper Entity
*                Replicate Number, [INTEGER] Test Replicate Number
*
* Return Value : [INTEGER], The replicate to use. Return EMPTY to use the first
*
*******************************************************************************}

    RETURN ( test_rep )

ENDROUTINE


{***** GLOBAL ROUTINE limsml_result_entry_valid_result.rpf *****}

GLOBAL ROUTINE limsml_result_entry_valid_result ( VALUE test_number   ,
                                                        result_entity ,
                                                  VALUE valid         )

{
* Determine if the result is valid
*
* Parameters   : Test Number, [PACKED_DECIMAL] Test Number
*                Result Entity, [HELPER_ENTITY] Result Entity Helper Entity
*                Valid, [BOOLEAN] Current Validity of the result
*
* Return Value : [BOOLEAN], True if the result should be included
*
*******************************************************************************}

    RETURN ( valid )

ENDROUTINE


{***** GLOBAL ROUTINE limsml_result_entry_valid_result_field.rpf *****}

GLOBAL ROUTINE limsml_result_entry_valid_result_field (       test_entity   ,
                                                        VALUE field_name    ,
                                                        VALUE valid         )

{
* Determine if the result field is valid
*
* Parameters   : Test Entity, [HELPER_ENTITY] Test Entity Helper Entity
*                Field Name, [STRING] Field Name
*                Valid, [BOOLEAN] Current Validity of the Field
*
* Return Value : [BOOLEAN], True if the result field should be included
*
*******************************************************************************}

    RETURN ( valid )

ENDROUTINE


{***** GLOBAL ROUTINE limsml_result_entry_valid_result_error.rpf *****}

GLOBAL ROUTINE limsml_result_entry_valid_result_error (       test_entity   ,
                                                              result_entity ,
                                                        VALUE error_id      ,
                                                        VALUE valid         )

{
* Determine if the result error is ignorable
*
* Parameters   : Test Entity, [HELPER_ENTITY] Test Entity Helper Entity
*                Result Entity, [HELPER_ENTITY] Result Entity Helper Entity
*                Field Name, [STRING] Field Name
*                Valid, [BOOLEAN] Current Validity of the Error
*
* Return Value : [BOOLEAN], True if the result error should be ignored
*
*******************************************************************************}

    RETURN ( valid )

ENDROUTINE


{***** GLOBAL ROUTINE limsml_result_entry_post_test_update.rpf *****}

GLOBAL ROUTINE limsml_result_entry_post_test_update (       test_entity   ,
                                                      VALUE test_number   )

{
* Called after the results are entered for a test
*
* Parameters   : Test Entity, [HELPER_ENTITY] Test Entity Helper Entity
*                Test Number, [PACKED_DECIMAL] Test Number
*
*******************************************************************************}

ENDROUTINE


{***** GLOBAL ROUTINE limsml_result_entry_post_sample_update.rpf *****}

GLOBAL ROUTINE limsml_result_entry_post_sample_update (       sample_entity ,
                                                        VALUE id_numeric    )

{
* Called after all the results are entered for a sample
*
* Parameters   : Sample Entity, [HELPER_ENTITY] Sample Entity Helper Entity
*                ID Numeric, [IDENTITY] Sample Identity
*
*******************************************************************************}

ENDROUTINE


{*************************************************************************
* Purpose      : Cleanup values to match current analysis
* Parameters   : Analysis to match, values(array)
* Return Value : N/A
**************************************************************************}
GLOBAL ROUTINE CleanUpValues(Test_number, values)
{WriteToLog("Start")}
    DECLARE Analysis, Version, Component, Components, name, action, a_name, res_type, result, phrase
    ARRAY   Components

    name = 1
    Analysis  = SELECT test . analysis WHERE test_number = test_number
    Version   = SELECT test . analysis_version
    Component = SELECT versioned_component . name WHERE analysis = Analysis
                                                    AND analysis_version = Version
    WriteToLog("Compairing result array to analysis: ":Analysis)

    WHILE Component <> EMPTY DO
        Components[name,1] = STRIP(Component)
        name = name + 1
        NEXT versioned_component
        Component = SELECT versioned_component . name
    ENDWHILE

    {ARRAY_REMOVE_SLICE (values,1,2)}
    name = 2

    WHILE (name <= SIZE_OF_ARRAY(values)) DO
        action = "REMOVE"
        a_name = values[name,1]
        Component = 1
        WHILE Component <= SIZE_OF_ARRAY(Components)
            IF (Components[Component,1] = values[name,1]) THEN
                action = "KEEP  "
                res_type = SELECT versioned_component . result_type WHERE analysis = Analysis
                                                               AND analysis_version = Version
                                                               AND name = Components[Component,1]
                {WriteToLog("Result type is: ":res_type)}
                IF res_type = "D" THEN
                    {WriteToLog("DATE FORMAT: '":STRIP(values[name,2]):"' => '":DATE (values[name,2]):"'; IS_DATE = ":IS_DATE(DATE (values[name,2]))) }
                    values[name,2] = DATE (values[name,2])
                ENDIF
                IF res_type = "O" THEN
                    phrase = SELECT versioned_component.calculation
                             WHERE analysis = Analysis
                               AND analysis_version = Version
                               AND name = values[name,1]
                    result = SELECT phrase.phrase_text
                             WHERE phrase_type = phrase
                               AND phrase_id = TOUPPER(values[name,2])
                    IF result = EMPTY THEN
                        WriteToLog("Phrase ID (":values[name,2]:") not found in Phrase":STRIP(phrase))
                    ELSE
                        WriteTolog("Result entry is a phrase, input (":STRIP(values[name,2]):") mathces phrase text: ":STRIP(result))
                        values[name,2] = result
                    ENDIF
                ENDIF
            ENDIF
            Component = Component + 1
        ENDWHILE
        IF action = "REMOVE" THEN
            {WriteToLog(action:": ":a_name)}
            ARRAY_REMOVE_SLICE (values,1,name)
        ELSE
            {WriteToLog(action:": ":a_name)}
            name = name + 1
        ENDIF

    ENDWHILE
    
ENDROUTINE

{*************************************************************************
* Purpose      : Writes to predefined log,
*                using WriteLog in $lib_utils
* Parameters   : Msg - what to write in log
* Return Value : N/A
**************************************************************************}
ROUTINE WriteToLog(VALUE Msg)

    WriteLog(Msg, global("current_library"))

ENDROUTINE

