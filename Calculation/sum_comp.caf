
{ This definition is required at the top of all calculations }
GLOBAL ROUTINE calculation(current_sample,
			   current_test_number,
			   current_component_name)

JOIN    LIBRARY TOOLBOX
JOIN    LIBRARY $LIB_UTILS

ARRAY   res_arr
ARRAY   parm_array

SET FORMAT "99.999E999"


   parms = 10

   IF     NOT find_results( current_test_number, res_arr, n_res )
   THEN   flash_message("No results entered on the test!",TRUE)
          return ( EMPTY )
   ENDIF

{**AS1417}

   IF NOT GET_COMPONENT_ROW(current_component_name, res_arr, n_res, comp_row)
   THEN
      FLASH_MESSAGE("Problem getting component row", TRUE)
      RETURN(EMPTY)
   ENDIF

   IF NOT GET_CALC_NUM(comp_row, res_arr, the_occour)
   THEN
      FLASH_MESSAGE("Problem getting occourance of the calculation", TRUE)
      RETURN(EMPTY)
   ENDIF

{**AE1417}

   IF NOT get_parameters
                ( "A", "SUM_COMP" , parms , current_test_number,
                        parm_array, n_parms)
   THEN   flash_message ("No parameters in analysis setup!",TRUE)
          return ( EMPTY )
   ENDIF

   IF n_parms = 0
   THEN   flash_message("Number of SUM_COMP parameters zero !",TRUE)
          return ( EMPTY )
   ENDIF
{**AS1417}
   IF n_parms < the_occour
   THEN   flash_message("Not enough parameter sets supplied !",TRUE)
          return ( "ERROR PARM" )
   ENDIF
{**AE1417}
   n = 0
   found_any = FALSE
   sum_result = 0
   WHILE (n < parms) DO
      n = n+1
{**MS1417
      parm_text=parm_array[1,n]
**}
      parm_text=parm_array[the_occour,n]

{**ME1417}
      found = FALSE
      m=0
      WHILE (m < n_res) AND (NOT found) DO
          m = m+1
          IF STRIP(parm_text) = STRIP(res_arr[m,result_name_pos])
          THEN
             found = TRUE
             found_any = TRUE
{**AS1417}
             IF NOT NUMTEXT(res_arr[m,result_text_pos]) THEN
                FLASH_MESSAGE("The result: " : STRIP(res_arr[m,result_text_pos]) :
                              " is not numeric, addition not possible!", TRUE)
                RETURN("NON-NUMERIC ERROR")
             ENDIF
{**AE1417}
             sum_result = sum_result + res_arr[m,result_text_pos]
          ENDIF
      ENDWHILE
      IF NOT found_any THEN
         flash_message("Error: Component not found",TRUE)
         return ( EMPTY )
      ENDIF
   ENDWHILE

calcresult=STRIP(sum_result)
{ The next two lines are required at the end of the calculation }
return(calcresult)
 { The calculated result is returned here }
ENDROUTINE
