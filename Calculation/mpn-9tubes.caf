{ This definition is required at the top of all calculations }
GLOBAL ROUTINE calculation(cur_sample,
			   cur_test_number,
			   cur_component_name)

{------------------------------------------------------------------------------}
{  CHG          DATE    PGMR    DESCRIPTION                                    }
{------------------------------------------------------------------------------}
{**A0020        190194  LPE     Kalkulation f. Most Probable Number for 3 tubes}
{**A0020-1      220394  LPE     If mpn_res < 13,5 then display message and     }
{                               return calculated result = NEWTEST             }
{**M1275        011100  HBe     MPN tabel udvidet med ekstra værdier jfr. LBJ  }
{**M1339        130801  HBe     Program MPN-3-3 copyed to MPN-9TUBES and the   }
{                               result is devided by 10 according to instruc-  }
{                               tions from LBe/HCR/KLN                         }
{**M1389        210302  HBe     If the tube combination is not available, the  }
{                               newtest is called                              }
{ * * * * * * * * * * * HER STARTER HOVEDPROGRAMMET * * * * * * * * * *}
JOIN LIBRARY $LIB_UTILS

initialize ()

mpn_res = 0

IF get_results () > 0 THEN

   IF results_ok() THEN

      a1 = NUMERIC(res_str[1]) + 1
      a2 = NUMERIC(res_str[2]) + 1
      a3 = NUMERIC(res_str[3]) + 1

      mpn_res = mpn[a1,a2,a3]


{**AS1339 HBe 13-8-01}
{**MS1553 HBe 2-4-2004
IF mpn_res = "<3" THEN}
      IF (INDEX ( mpn_res, "<3" ) <> 0) THEN
{**ME1553}      
         mpn_res = "<0.3"
         
{**MS1553 HBe 2-4-2004
      ELSEIF mpn_res = ">1100" THEN}
      ELSEIF (INDEX ( mpn_res, ">1100" ) <> 0) THEN
{**ME}      
         mpn_res = ">110"
      ELSEIF NUMTEXT(mpn_res) THEN
{**MS1553 HBe 2-4-2004
      mpn_res = STRIP(NUMERIC(mpn_res) / 10)}
      mpn_res = NUMBER_TO_TEXT ( STRIP(NUMERIC(mpn_res) / 10), "99999.9")
{**ME1553}      
      ELSE
         mpn_res = "ERROR"
         flash_message("Error in result calculation", TRUE)
      ENDIF
{**AE1339 HBe 13-8-01}

{**MS1389 HBe 21-3-02
      IF mpn_res = 0 THEN
}
      IF NUMTEXT(mpn_res) THEN
         IF NUMERIC(mpn_res) = 0 THEN
            mpn_res = "NEWTEST"
            cr_new_test()
         ENDIF
      ELSEIF (STRIP(mpn_res) = "") OR (STRIP(mpn_res) = NULL) OR (STRIP(mpn_res) = EMPTY) THEN
            mpn_res = "NEWTEST"
            cr_new_test()
{*ME1389 HBe 21-3-02}

      ELSE
         IF mpn_res <>"<3" THEN
{**DS1275 HBe 1-11-00
            IF mpn_res < 13.5 THEN
               mpn_res = "NEWTEST"
               CREATE TEXT WINDOW mess_win HEIGHT 4 WIDTH 55 BORDER
            PASTE TEXT WINDOW mess_win ON LINE 18 FROM 2
            DISPLAY "No korrespondance between result from BGB-1 and"
               ON LINE 1 FROM 2 IN WINDOW mess_win
            DISPLAY "BGB-2 analysis."
               ON LINE 2 FROM 2 IN WINDOW mess_win
            DISPLAY " Ask your boss."
               ON LINE 2 FROM 17 IN WINDOW mess_win BOLD
            DISPLAY "Press any key to continue . . . ."
               ON LINE 4 FROM 2 IN WINDOW mess_win
            dummy = getkey
            ENDIF
**DE 1275}
         ENDIF
      ENDIF
   ELSE
      CREATE TEXT WINDOW notok_win HEIGHT 3 WIDTH 55 BORDER=""
      PASTE TEXT WINDOW notok_WIN ON LINE 20 FROM 5
      DISPLAY error_mess ON LINE 1 FROM 2 IN WINDOW notok_win BOLD
      DISPLAY "Press any key to continue . . . . "
          ON LINE 3 FROM 2 IN WINDOW notok_win
      dummy = getkey
      mpn_res = "NOTOK"
   ENDIF
ELSE
   mpn_res = EMPTY
ENDIF
SET FORMAT "99999"
RETURN (mpn_res)
ENDROUTINE
{ * * * * * * * * * HER SLUTTER HOVEDPROGRAMMET * * * * * * * * * * * * * * * }

{- - - - - - - - - - - - - START CR_NEW_TEST- - - - - - - - - - - - - - -  - - }
ROUTINE cr_new_test

SET NOTPROTECTED

new_test_nr = ""

samp_id = SELECT test.sample_id
          WHERE test_number = cur_test_number


anal_id = SELECT test.analysis

IF NOT(new_test_created) THEN
   new_test_nr = NEWTEST(samp_id,anal_id)
ENDIF

IF new_test_nr = ERROR THEN
   CREATE TEXT WINDOW err_newtest HEIGHT 2 WIDTH 55 BORDER
   PASTE TEXT WINDOW err_newtest ON LINE 19 FROM 2
   DISPLAY  "ERROR CREATING NEWTEST ":new_test_nr
       IN WINDOW err_newtest ON LINE 1 FROM 3 BOLD
   DISPLAY  "Press any key to continue ... "
       IN WINDOW err_newtest ON LINE 2 FROM 3 BLINKING
   dummy = getkey
ELSE
   CREATE TEXT WINDOW new_test_win HEIGHT 4 WIDTH 55 BORDER
   PASTE TEXT WINDOW new_test_win ON LINE 18 FROM 2
   DISPLAY "Combination not found in the internal MPN table"
          ON LINE 1 FROM 2 IN WINDOW new_test_win
   DISPLAY "One New analysis  :"
          ON LINE 2 FROM 2 IN WINDOW new_test_win
   DISPLAY STRIP(anal_id) ON LINE 2 FROM 19 IN WINDOW new_test_win BOLD
   DISPLAY " created for the sample."
          ON LINE 2 FROM (20+LENGTH(STRIP(anal_id))) IN WINDOW new_test_win
DISPLAY "Press any key to continue . . . . "
          ON LINE 4 FROM 2 IN WINDOW new_test_win
ENDIF
dummy = getkey

ENDROUTINE
{- - - - - - - - - - - - - END CR_NEW_TEST - - - - - - - - - - - - - - -  - - }
{------------------------START INITIALIZE------------------------------------}

ROUTINE initialize

ENABLE WINDOWS


ARRAY mpn ARRAYSIZE (4,4,4) = 0
ARRAY res_val
ARRAY res_str

mpn [1,1,1] = "<3" {**M1553: Careful - content check hardcoded elsewhere in the code}
mpn [1,1,2] = 3
mpn [1,2,1] = 3
mpn [1,2,2] = 6
mpn [1,3,1] = 6
mpn [1,4,1] = 9
mpn [2,1,1] = 4
mpn [2,1,2] = 7
mpn [2,1,3] = 11
mpn [2,2,1] = 7
mpn [2,2,2] = 11
mpn [2,3,1] = 11
mpn [2,3,2] = 15
mpn [2,4,1] = 16
mpn [3,1,1] = 9
mpn [3,1,2] = 14
mpn [3,1,3] = 20
mpn [3,2,1] = 15
mpn [3,2,2] = 20
mpn [3,2,3] = 27
mpn [3,3,1] = 21
mpn [3,3,2] = 28
mpn [3,3,3] = 35
mpn [3,4,1] = 29
mpn [3,4,2] = 36
mpn [4,1,1] = 23
mpn [4,1,2] = 38
mpn [4,1,3] = 64
mpn [4,2,1] = 43
mpn [4,2,2] = 75
mpn [4,2,3] = 120
mpn [4,2,4] = 160
mpn [4,3,1] = 93
mpn [4,3,2] = 150
mpn [4,3,3] = 210
mpn [4,3,4] = 290
mpn [4,4,1] = 240
mpn [4,4,2] = 460
mpn [4,4,3] = 1100
mpn [4,4,4] = ">1100" {**M1553: Careful - content check hardcoded elsewhere in the code}

ENDROUTINE

{------------------------END INITIALIZE--------------------------------------}

{- - - - - - - - - - - - - START GET_RESULTS - - - - - - - - - - - - - - - - -}
{ Henter resultater }

ROUTINE get_results

ARRAY comp_anal

declare comp_n
declare strip_comp_n
declare strip_cur_comp_n


number_of_res = 0
new_test_created = FALSE

comp_n  = SELECT result.component_name
             WHERE (test_number = cur_test_number)
             ORDER ON order_number

WHILE comp_n <> EMPTY DO

   strip_cur_comp_n = TOUPPER(cur_component_name)
   strip_comp_n = TOUPPER(LEFTSTRING(comp_n,LENGTH(cur_component_name)))

   IF ((strip_comp_n = strip_cur_comp_n) AND
      (strip_cur_comp_n <> "")) THEN
      result_type = SELECT result.result_type
      res_txt = SELECT result.text
      IF result_type = "N" THEN
         number_of_res = number_of_res + 1
         res_str[number_of_res] = res_txt
         res_val[number_of_res] = SELECT result.value
      ELSE
         IF STRIP(res_txt) = "NEWTEST" THEN
            new_test_created = TRUE
         ENDIF
      ENDIF
   ENDIF
   NEXT result
   comp_n  = SELECT result.component_name
ENDWHILE
RETURN (number_of_res)

ENDROUTINE
{- - - - - - - - - - - - - END GET_RESULTS - - - - - - - - - - - - - - - - -}

{- - - - - - - - - - - - - START RESULTS_OK - - - - - - - - - - - - - - - - -}

ROUTINE results_ok

res_ok = TRUE
count = 1

WHILE ((count <= number_of_res) AND res_ok) DO
   IF (res_val[count] < 0) THEN
      res_ok = FALSE
      error_mess= "Negatives are not allowed - Please reenter results."
   ELSEIF ((res_val[count] - TRUNC(res_val[count])) <> 0) THEN
      res_ok = FALSE
      error_mess = "Decimals are not allowed - Please reenter results."
   ENDIF
   count = count + 1
ENDWHILE
RETURN(res_ok)
ENDROUTINE

{- - - - - - - - - - - - - END RESULTS_OK - - - - - - - - - - - - - - - - -}

{- - - - - - - - - - - - - START STRIP_VOL - - - - - - - - - - - - - -  - - }
ROUTINE strip_vol (strip_name)
declare n
declare ml_pos
declare rest_string

strip_nam = TOUPPER(STRIP(strip_name))
ml_pos = INDEX(strip_nam,"ML") - 1
WHILE (SUBSTRING(strip_nam,ml_pos,1) <> " ") AND (ml_pos > 0) DO
   ml_pos = ml_pos - 1
ENDWHILE
rest_string = SUBSTRING(strip_nam,1,ml_pos)
RETURN(rest_string)
ENDROUTINE
{- - - - - - - - - - - - - END STRIP_VOL - - - - - - - - - - - - - -  - - }


