
{ This definition is required at the top of all calculations }
GLOBAL ROUTINE calculation(current_sample,
			   current_test_number,
			   current_component_name)

JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY TOOLBOX

ARRAY   result_array
ARRAY   parm_arr

calcresult = EMPTY

IF   NOT find_results ( current_test_number, result_array, n_res )
THEN flash_message("No results entered",TRUE)
ELSE IF     NOT get_component_row ( current_component_name,result_array,n_res,
                                    comp_row )
     THEN   flash_message("Error: This component does not exist",TRUE)
     ELSEIF comp_row <= 1
     THEN   flash_message("Error in analysis setup. Component number must be ":
                          "2 or above",TRUE)
     ELSEIF NOT get_parameters ( "M", "INOC_ONE", 1, current_test_number,
                                  parm_arr, n_parms )
     THEN   flash_message("Parameter INOC_ONE not defined on this product",TRUE)
     ELSEIF NOT numtext(parm_arr[ 1, 1 ])
     THEN   flash_message("Error: Parameter INOC_PCT:":strip(parm_arr[1,1]):
                          " is not numeric",TRUE)
     ELSE   val = result_array[ comp_row-1, result_text_pos ]
            comp= result_array[ comp_row-1, result_name_pos ]
            IF     val = EMPTY
            THEN   flash_message("Missing result in component:":comp,TRUE)
            ELSEIF NOT numtext(val)
            THEN   flash_message("Value:":strip(val):" in component:":
                                 strip(comp):" must be numeric",TRUE)
            ELSEIF val = 0
            THEN   flash_message("Cannot handle zero quantity",TRUE)
            ELSE   calcresult = 100 * numeric(val) / parm_arr[1,1]
            ENDIF
     ENDIF
ENDIF

{ The next two lines are required at the end of the calculation }
return(calcresult) { The calculated result is returned here }
ENDROUTINE
