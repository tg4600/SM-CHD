
{ This definition is required at the top of all calculations }

GLOBAL ROUTINE calculation ( current_sample,
                 current_test_number,
                 current_component_name )

DECLARE job, sql, c, res

        job = SELECT sample.job_name WHERE id_numeric = current_sample

        CREATE OBJECT "STD_DYNAMIC_SQL" , sql
        sql.add_to_sql_statement("SELECT count(distinct TEST_NUMBER_T) FROM SQL_JSTRM WHERE ")
        sql.add_to_sql_statement("JOB_NAME_J = '":job:"' ")
        sql.add_to_sql_statement("AND STATUS_T in ('C','A') ")
        sql.add_to_sql_statement("AND NAME_R = '":current_component_name:"' ")
        sql.add_to_sql_statement("AND COMPARISON_LPE = 'P' ")
        sql.add_to_sql_statement("AND RESULT_VALUE_LPE <> TEXT_R")
        sql.add_select_integer  ()
        sql.execute             ()
        c = sql.select(1)

    IF c = 0 THEN
        CREATE OBJECT "STD_DYNAMIC_SQL" , sql
        sql.add_to_sql_statement("SELECT RESULT_VALUE_LPE FROM SQL_JSTRM WHERE ")
        sql.add_to_sql_statement("JOB_NAME_J = '":job:"' ")
        sql.add_to_sql_statement("AND STATUS_T in ('C','A') ")
        sql.add_to_sql_statement("AND NAME_R = '":current_component_name:"' ")
        sql.add_to_sql_statement("AND COMPARISON_LPE = 'P' ")
        sql.add_select_field    ("SQL_JSTRM", "RESULT_VALUE_LPE")
        sql.execute             ()
        res = sql.select(1)
    ELSE
        CREATE OBJECT "STD_DYNAMIC_SQL" , sql
        sql.add_to_sql_statement("SELECT TEXT_R FROM SQL_JSTRM WHERE ")
        sql.add_to_sql_statement("JOB_NAME_J = '":job:"' ")
        sql.add_to_sql_statement("AND STATUS_T in ('C','A') ")
        sql.add_to_sql_statement("AND NAME_R = '":current_component_name:"' ")
        sql.add_to_sql_statement("AND COMPARISON_LPE = 'P' ")
        sql.add_to_sql_statement("AND RESULT_VALUE_LPE <> TEXT_R")
        sql.add_select_field    ("SQL_JSTRM", "TEXT_R")
        sql.execute             ()
        res = STRIP(c):" x ":sql.select(1)
    ENDIF

    RETURN(res)           

ENDROUTINE
